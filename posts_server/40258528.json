post_cb({"40269472": {"Id": "40269472", "PostTypeId": "2", "Body": "<p>CUDA is a programming language in the C++ family. Therefore, the CUDA documentation generally does not duplicate standard C++ documentation, it merely points out differences and extensions. If you can't find a description of the use of the <code>inline</code> specifier with functions in CUDA documentation, that is a good indication that it is processed in the standard C++ fashion. </p>\n<p>Interpolating between the various parts of your questions, it seems you are mostly concerned how the use of <code>inline</code> affects the actual inlining of functions in the generated code.</p>\n<p>The ISO C++11 standard specifies <code>inline</code> as a function attribute in section 7.1.2. Besides provisions about linkage and duplicate definitions, it states the following about the actual inlining of functions with the <code>inline</code> specifier:</p>\n<blockquote>\n<p id=\"so_40258528_40269472_0\">The inline specifier indicates to the implementation that inline\n  substitution of the function body at the point of call is to be\n  preferred to the usual function call mechanism. An implementation is\n  not required to perform this inline substitution at the point of call;</p>\n</blockquote>\n<p>So <code>inline</code> is merely a <em>suggestion</em> to the compiler, which it is free to ignore. Since the CUDA compiler inlines functions aggressively in device code by default (for performance reasons), the use of <code>inline</code> seems quite redundant for device code, but programmers are free to use it. </p>\n<p>The inlining heuristics used by the CUDA compiler may prevent inlining of a particular function that a programmer would like to have inlined under all circumstances. For this purpose, CUDA provides the non-standard <code>__forceinline__</code> function attribute. This specifier affects both device code and host code, as <code>nvcc</code> translates it into the equivalent host-compiler specific attribute for host code, such as <code>__forceinline</code> for MSVC. This can be verified by dumping and inspecting the intermediate C++ files that <code>nvcc</code> sends to the host compiler.</p>\n", "LastActivityDate": "2016-10-26T18:18:09.590", "CommentCount": "1", "CreationDate": "2016-10-26T18:18:09.590", "ParentId": "40258528", "Score": "3", "OwnerUserId": "780717"}, "bq_ids": {"n4140": {"so_40258528_40269472_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 5402}}, "n3337": {"so_40258528_40269472_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 5197}}, "n4659": {"so_40258528_40269472_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 6849}}}, "40258528": {"ViewCount": "781", "Body": "<p>I am total \"newbie\", when it comes to CUDA. So if my question is trivial, pardon me. </p>\n<p>Does nvcc understands meaning of <code>inline</code> C keyword? <br>\nI know about <code>__forceinline__</code>, and similar nvcc \"macros\", therefor I am not asking how to write <code>inline</code> cuda device-side code. <br>\nI know also, that my code is \"split\" between nvcc and c/c++ compiler (I am using Visual Studio IDE). <br> Does that mean <code>inline</code> keyword is ignored by nvcc when it \"stands next to\" <code>__device__</code> or <code>__global__</code> kernels? <br> <br/></br></br></br></br></p>\n<p><strong><em>Edit:</em></strong> <br>\nP.S. I had searched cuda programing guide. I could not find anything useful under <code>inline</code> entry, similar \"tags\" does not help either. </br></p>\n", "AcceptedAnswerId": "40269472", "Title": "C/C++ \"inline\" keyword in CUDA device-side code", "CreationDate": "2016-10-26T09:29:40.653", "Id": "40258528", "CommentCount": "1", "LastEditDate": "2016-10-26T18:18:56.130", "PostTypeId": "1", "LastEditorUserId": "780717", "LastActivityDate": "2016-10-26T18:18:56.130", "Score": "1", "OwnerUserId": "5098833", "Tags": "<c++><cuda><inline><keyword>", "AnswerCount": "1"}});