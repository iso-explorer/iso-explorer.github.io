post_cb({"bq_ids": {"n4140": {"so_12910015_12910015_1": {"length": 5, "quality": 1.0, "section_id": 87}, "so_12910015_12910015_2": {"length": 35, "quality": 0.8974358974358975, "section_id": 87}}, "n3337": {"so_12910015_12910015_1": {"length": 5, "quality": 1.0, "section_id": 82}, "so_12910015_12910015_2": {"length": 34, "quality": 0.8717948717948718, "section_id": 82}}}, "12910015": {"CreationDate": "2012-10-16T07:58:52.110", "ViewCount": "186", "FavoriteCount": "0", "Id": "12910015", "AcceptedAnswerId": "12910122", "Score": "-2", "Title": "sizeof<integral type> not accepted as integral template parameter", "LastEditorUserId": "712302", "CommentCount": "6", "Body": "<p>The compiler (GCC 4.7.2) seems to have a problem with this code:</p>\n<pre><code>  template&lt;int BoolSize&gt; struct BoolReg {};\n  template&lt;&gt; struct BoolReg&lt;1&gt; { static const Jit::RegType Val_t = Jit::u8; };\n  template&lt;&gt; struct BoolReg&lt;2&gt; { static const Jit::RegType Val_t = Jit::u16; };\n  template&lt;&gt; struct BoolReg&lt;4&gt; { static const Jit::RegType Val_t = Jit::u32; };\n\n  template &lt;class T&gt; struct JitRegType {};\n\n  template &lt;&gt; struct JitRegType&lt;bool&gt;   { static const Jit::RegType Val_t = BoolReg&lt; sizeof&lt;bool&gt; &gt;::Val_t; };\n</code></pre>\n<p>It says:</p>\n<blockquote>\n<p id=\"so_12910015_12910015_0\">error: template argument 1 is invalid</p>\n</blockquote>\n<p>at the last line of the code above. Whereas when passing an integer literal instead of <code>sizeof(bool)</code> it works fine:</p>\n<pre><code>  template &lt;&gt; struct JitRegType&lt;bool&gt;   { static const Jit::RegType Val_t = BoolReg&lt;1&gt;::Val_t; };\n</code></pre>\n<p>However, the size of a <code>bool</code> is not specified by the standard thus I'd like to use the more portable way and specify the register type according to the size of the <code>bool</code>.</p>\n<p>Is this really ill-formed C++11 ?</p>\n<p>The standard says:</p>\n<blockquote>\n<p id=\"so_12910015_12910015_1\">A template-argument for a non-type, non-template template-parameter\n  shall be one of:</p>\n<p id=\"so_12910015_12910015_2\">an integral constant-expression of integral or enumeration type; or\n  the name of a non-type template-parameter; or the address of an object\n  or function with external linkage, including function templates and\n  function template-ids but excluding non-static class members,\n  expressed as &amp; id-expression where the &amp; is optional if the name\n  refers to a function or array, or if the corresponding\n  template-parameter is a reference; or a pointer to member expressed as\n  described in 5.3.1 .</p>\n</blockquote>\n", "ClosedDate": "2012-10-16T11:34:01.207", "LastEditDate": "2012-10-16T08:07:27.850", "Tags": "<c++><templates><c++11>", "LastActivityDate": "2012-10-16T08:07:27.850", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "712302"}, "12910122": {"CommentCount": "1", "Body": "<p>You want to use <code>sizeof(bool)</code> rather than <code>sizeof&lt;bool&gt;</code>. That is <code>sizeof</code> isn't a template.</p>\n", "CreationDate": "2012-10-16T08:06:20.717", "ParentId": "12910015", "Id": "12910122", "LastActivityDate": "2012-10-16T08:06:20.717", "PostTypeId": "2", "Score": "2", "OwnerUserId": "1120273"}});