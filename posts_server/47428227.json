post_cb({"bq_ids": {"n4140": {"so_47428227_47428372_0": {"length": 27, "quality": 0.9, "section_id": 275}}, "n3337": {"so_47428227_47428372_0": {"length": 21, "quality": 0.7, "section_id": 266}}, "n4659": {"so_47428227_47428372_0": {"length": 28, "quality": 0.9333333333333333, "section_id": 282}}}, "47428372": {"Id": "47428372", "PostTypeId": "2", "Body": "<p>GCC and Clang are correct according to the dry letter of the ISO C++ standard:</p>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/n4659/temp.expl.spec#13\" rel=\"nofollow noreferrer\">[temp.expl.spec]/13</a></p>\n<blockquote>\n<p id=\"so_47428227_47428372_0\">An explicit specialization of a static data member of a template or an\n  explicit specialization of a static data member template is a\n  definition if the declaration includes an initializer; otherwise, it\n  is a declaration. [\u2009Note: The definition of a static data member of a\n  template that requires default-initialization must use a\n  braced-init-list:</p>\n<pre><code>template&lt;&gt; X Q&lt;int&gt;::x;                         // declaration\ntemplate&lt;&gt; X Q&lt;int&gt;::x ();                      // error: declares a function\ntemplate&lt;&gt; X Q&lt;int&gt;::x { };                     // definition\n</code></pre>\n<p id=\"so_47428227_47428372_1\">\u2009\u2014\u2009end note\u2009]</p>\n</blockquote>\n<p>Which when applied to your example means you just provide another declaration, not a definition. And a fix would be to add an initializer:</p>\n<pre><code>template &lt;&gt; int Sample &lt;float&gt; :: foo{}; // Default initialize `foo`\n</code></pre>\n<p>Or </p>\n<pre><code>template &lt;&gt; int Sample &lt;float&gt; :: foo{0.0}; // Direct initialize `foo` to 0\n</code></pre>\n<p>Or </p>\n<pre><code>template &lt;&gt; int Sample &lt;float&gt; :: foo = 0.0; // Copy initialize `foo` to 0\n</code></pre>\n", "LastActivityDate": "2017-11-22T06:44:50.313", "CommentCount": "0", "CreationDate": "2017-11-22T06:44:50.313", "ParentId": "47428227", "Score": "1", "OwnerUserId": "817643"}, "47428227": {"ViewCount": "24", "Body": "<p>I wrote the source code as shown below.\n----- sample.h ------</p>\n<pre><code>#include &lt;iostream&gt;\ntemplate &lt;typename T&gt;\nclass Sample {\nprivate:\nstatic int foo;\npublic:\n Sample (T number) {\nfoo = number;}\n void display () {\nstd :: cout &lt;&lt; foo &lt;&lt; std :: endl;}\n};\n</code></pre>\n<hr>\n<p>---- test.cpp --------------</p>\n<pre><code>#include \"sample.h\"\ntemplate &lt;&gt; int Sample &lt;float&gt; :: foo;\n\n\nint main () {\n Sample &lt;float&gt; test (100.9);\n test.display ();\n return 0;\n}\n</code></pre>\n<hr>\n<p>I have successfully compiled with Visual Studio 2015 community.\nHowever, g++ and clang++ (ubuntu linux 16.04 LTS) failed at linking time.\nI want to compile with g++ or clang++, so I'd like to do something,\nI do not get a good idea.\nIs not it compatible with g++ or clang++ specifications?\nAre those who are familiar with the compiler, are not you?</p>\n</hr></hr>", "Title": "Compile template class failed by g++ or clang++", "CreationDate": "2017-11-22T06:34:06.557", "LastActivityDate": "2017-11-22T06:44:50.313", "CommentCount": "0", "PostTypeId": "1", "Id": "47428227", "Score": "0", "OwnerUserId": "8960905", "Tags": "<c++><templates><g++><clang++>", "AnswerCount": "1"}});