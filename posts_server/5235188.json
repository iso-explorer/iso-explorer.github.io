post_cb({"5235188": {"CreationDate": "2011-03-08T16:19:03.570", "AcceptedAnswerId": "5235253", "Tags": "<c++><c++11><forwarding>", "AnswerCount": "1", "OwnerUserId": "540815", "Body": "<p>This is a followup to <a href=\"https://stackoverflow.com/questions/3591832/perfect-forwarding-in-c03\">this</a> question.</p>\n<p>A 2002 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1385.htm\" rel=\"nofollow noreferrer\">paper</a> on the function forwarding problem in C++ makes the following observation:</p>\n<blockquote>\n<p id=\"so_5235188_5235188_0\">This is the method currently employed\n  by Boost.Bind and Boost.Lambda:</p>\n<pre><code>template&lt;class A1, class A2, class A3&gt; void f(A1 &amp; a1, A2 &amp; a2, A3 &amp; a3)\n{\n    return g(a1, a2, a3);\n}\n</code></pre>\n<p id=\"so_5235188_5235188_1\">Its main deficiency is that it cannot\n  forward a non-const rvalue. The\n  argument deduction creates a non-const\n  reference, and the reference cannot\n  bind to the argument. This makes\n  innocent examples as</p>\n<pre><code>int main()\n{\n    f(1, 2, 3);\n}\n</code></pre>\n<p id=\"so_5235188_5235188_2\">fail (violates C1).</p>\n</blockquote>\n<p>I see that the call fails, but is the explanation correct? Are not the literals 1, 2, 3 const rvalues?</p>\n", "CommentCount": "3", "PostTypeId": "1", "ViewCount": "1390", "LastActivityDate": "2011-03-08T16:24:00.247", "Id": "5235188", "LastEditorUserId": "-1", "Title": "C++ Perfect Function Forwarding", "Score": "4", "LastEditDate": "2017-05-23T12:12:39.963"}, "5235253": {"LastActivityDate": "2011-03-08T16:24:00.247", "ParentId": "5235188", "Id": "5235253", "Score": "6", "Body": "<p><code>Are not the literals 1, 2, 3 const rvalues?</code></p>\n<p>No, they are just rvalues of type int. According to the C++ standard, rvalues of primitive types cannot be const-qualified. </p>\n<p>The call fails because they are <strong><em>rvalues</em></strong> - non-const references cannot be bound to rvalues.</p>\n<p>The call would be OK if the functions took <code>const A1 &amp;, const A2&amp;, const A3&amp;</code>, but in this case the function wouldn't be able to modify the arguments.</p>\n<p><em><strong>Edit:</strong></em></p> Reference to my first statement from the C++ 2003 standard : (3.10.9)\n<blockquote>\n<p id=\"so_5235188_5235253_0\">Class rvalues can have cv-qualified\n  types; non-class rvalues always have\n  cv-unqualified types. Rvalues shall\n  always have complete types or the void\n  type; in addition to these types,\n  lvalues can also have incomplete\n  types.</p>\n</blockquote>\n", "CommentCount": "3", "PostTypeId": "2", "OwnerUserId": "469935", "CreationDate": "2011-03-08T16:24:00.247"}, "bq_ids": {"n3337": {"so_5235188_5235253_0": {"section_id": 6977, "quality": 0.8518518518518519, "length": 23}}}});