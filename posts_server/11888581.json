post_cb({"bq_ids": {"n4140": {"so_11888581_11888673_0": {"length": 18, "quality": 0.72, "section_id": 39}}, "n3337": {"so_11888581_11888673_0": {"length": 24, "quality": 0.96, "section_id": 36}}, "n4659": {"so_11888581_11888673_0": {"length": 18, "quality": 0.72, "section_id": 39}}}, "11888673": {"Id": "11888673", "PostTypeId": "2", "Body": "<p>The reason this works is this short quote from the standard:</p>\n<p><code>\u00a74.10 [conv.ptr] p1</code></p>\n<blockquote>\n<p id=\"so_11888581_11888673_0\">A null pointer constant is an <strong>integral constant expression</strong> (5.19) prvalue of integer type <strong>that evaluates to zero</strong> or a prvalue of type <code>std::nullptr_t</code>. [...] A null pointer constant of integral type can be converted to a prvalue of type <code>std::nullptr_t</code>. [...] </p>\n</blockquote>\n<p>And the fact that <code>std::shared_ptr</code> has an implicit constructor from <code>std::nullptr_t</code>:</p>\n<p><code>\u00a720.7.2.2 [util.smartptr.shared] p1</code></p>\n<blockquote>\n<p id=\"so_11888581_11888673_1\"><code>constexpr shared_ptr(nullptr_t) : shared_ptr() { }</code></p>\n</blockquote>\n<p>This also allows for oddities like this:</p>\n<pre><code>#include &lt;memory&gt;\n\nvoid f(std::shared_ptr&lt;int&gt;){}\n\nint main(){\n  f(42 - 42);\n}\n</code></pre>\n<p><a href=\"http://liveworkspace.org/code/b30bc04ae80b59ed9639f77cba7fc0aa\" rel=\"noreferrer\">Live example.</a></p>\n", "LastActivityDate": "2012-08-09T17:19:39.737", "Score": "16", "CreationDate": "2012-08-09T17:19:39.737", "ParentId": "11888581", "CommentCount": "2", "OwnerUserId": "500104"}, "11888581": {"ViewCount": "919", "Body": "<p>I realized the following compiles fine in GCC 4.7:</p>\n<pre><code>#include &lt;memory&gt;\n\nint main() {\n    std::shared_ptr&lt;int&gt; p;\n    p = 0;\n}\n</code></pre>\n<p>However, there is no assignment operator from <code>int</code> or from <code>int*</code>, and there is no implicit constructor from either <code>int</code> or <code>int*</code> either. There is a constructor from <code>int*</code>, but that one is explicit. I checked the standard library implementation and the constructor is indeed explicit, and no fishy assignment operators are in sight.</p>\n<p>Is the program actually well-formed or is GCC messing with me?</p>\n", "AcceptedAnswerId": "11888673", "Title": "Can I assign 0 to a shared_ptr? Why?", "CreationDate": "2012-08-09T17:14:45.830", "Id": "11888581", "CommentCount": "3", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2012-08-09T17:20:19.317", "Score": "12", "OwnerUserId": "46642", "Tags": "<c++><null><c++11>", "AnswerCount": "2"}, "11888685": {"Id": "11888685", "PostTypeId": "2", "Body": "<p>You can only assign a shared pointer to another instance of a shared pointer. Assigning the type the shared_pointer holds is not possible. Afaik this is the only overload for the operator:</p>\n<p><code>shared_ptr&amp; operator=(const shared_ptr&amp; r);</code></p>\n<p>What you are doing is assigning 0 (which in this case equals NULL) to the pointer, not the value of the type. You type is not even initialized at this point in the code.</p>\n", "LastActivityDate": "2012-08-09T17:20:19.317", "Score": "0", "CreationDate": "2012-08-09T17:20:19.317", "ParentId": "11888581", "CommentCount": "1", "OwnerUserId": "388987"}});