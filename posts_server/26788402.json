post_cb({"26788402": {"CommentCount": "19", "CreationDate": "2014-11-06T20:02:47.597", "PostTypeId": "1", "AcceptedAnswerId": "26788564", "LastEditorUserId": "3647361", "LastActivityDate": "2016-03-18T01:08:18.740", "LastEditDate": "2016-03-18T01:08:18.740", "ViewCount": "1102", "FavoriteCount": "2", "Title": "Why does Foo({}) invoke Foo(0) instead of Foo()?", "Id": "26788402", "Score": "15", "Body": "<p>Executables produced by clang 3.5.0 and gcc 4.9.1 from the code</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Foo\n{\n   Foo() { std::cout &lt;&lt; \"Foo()\" &lt;&lt; std::endl; }\n   Foo(int x) { std::cout &lt;&lt; \"Foo(int = \" &lt;&lt; x &lt;&lt; \")\" &lt;&lt; std::endl; }\n   Foo(int x, int y) { std::cout &lt;&lt; \"Foo(int = \" &lt;&lt; x &lt;&lt; \", int = \" &lt;&lt; y &lt;&lt; \")\" &lt;&lt; std::endl; }\n};\n\nint main()                 // Output\n{                          // ---------------------\n   auto a = Foo();         // Foo()\n   auto b = Foo(1);        // Foo(int = 1)\n   auto c = Foo(2, 3);     // Foo(int = 2, int = 3)\n   auto d = Foo{};         // Foo()\n   auto e = Foo{1};        // Foo(int = 1)\n   auto f = Foo{2, 3};     // Foo(int = 2, int = 3)\n   auto g = Foo({});       // Foo(int = 0)          &lt;&lt;&lt; Why?\n   auto h = Foo({1});      // Foo(int = 1)\n   auto i = Foo({2, 3});   // Foo(int = 2, int = 3)\n}\n</code></pre>\n<p>behave as commented.</p>\n<p>From <a href=\"http://en.cppreference.com/mwiki/index.php?title=cpp/language/list_initialization&amp;oldid=72490\" rel=\"nofollow\" title=\"cppreference: cpp/language/list initialization, Revision as of 22:54, 26 August 2014\">cppreference: cpp/language/list initialization</a>:</p>\n<blockquote>\n<pre><code>[...]\n\nT( { arg1, arg2, ... } )    (7)\n\n[...]\n</code></pre>\n<p id=\"so_26788402_26788402_0\">The effects of list initialization of an object of type T are:</p>\n<p id=\"so_26788402_26788402_1\">If <code>T</code> is an aggregate type, aggregate initialization is performed.</p>\n<p id=\"so_26788402_26788402_2\">Otherwise, If the braced-init-list is empty and <code>T</code> is a class type with a default constructor, value-initialization is performed.</p>\n<pre><code>[...]\n</code></pre>\n</blockquote>\n<p>I concluded that <code>Foo({})</code> should call the default constructor.</p>\n<p>Where's the bug?</p>\n", "Tags": "<c++><language-lawyer><c++14><list-initialization><value-initialization>", "OwnerUserId": "3127195", "AnswerCount": "1"}, "26788564": {"ParentId": "26788402", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>The default constructor is only applicable if you use one single pair of either braces:</p>\n<pre><code>auto a = Foo();         // Foo()\nauto b = Foo{};         // Foo()\n</code></pre>\n<p><code>Foo({})</code> instead will only call constructors with the empty list as the argument, copy-list-initializing the parameter of whatever constructor is chosen. [dcl.init]/16:</p>\n<blockquote>\n<p id=\"so_26788402_26788564_0\">If the destination type is a (possibly cv-qualified) class type: <br>\u2014 If\n  the initialization is direct-initialization [\u2026] constructors are considered. The applicable constructors\n  are enumerated (13.3.1.3), and the best one is chosen through overload\n  resolution (13.3). <strong>The constructor so selected is called to\n  initialize the object, with the initializer expression or\n  <em>expression-list</em> as its argument(s).</strong> If no constructor applies, or\n  the overload resolution is ambiguous, the initialization is\n  ill-formed.</br></p>\n</blockquote>\n<p>You have one argument: The empty braced-init-list. There is a list-initialization sequence converting <code>{}</code> to <code>int</code> so the constructor <code>Foo(int)</code> is chosen by overload resolution. The parameter is initialized to zero as <code>{}</code> implies a <a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\" rel=\"nofollow\">value-intialization</a> which, for scalars, implies a <a href=\"http://en.cppreference.com/w/cpp/language/zero_initialization\" rel=\"nofollow\">zero-initialization</a>.</p>\n<p>There is no bug in cppreferences documentation either: For (7) it is stated that</p>\n<blockquote>\n<p id=\"so_26788402_26788564_1\">7) in a functional cast expression or other direct-initialization,\n  with braced-init-list used as the constructor argument</p>\n</blockquote>\n<p>Which clearly leads to the same result as with the above quote: The constructor is called with the (empty) braced-init-list.</p>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2014-11-06T21:37:22.040", "Id": "26788564", "Score": "18", "CreationDate": "2014-11-06T20:13:11.343", "LastActivityDate": "2014-11-06T21:37:22.040"}, "bq_ids": {"n4140": {"so_26788402_26788564_0": {"section_id": 3296, "quality": 0.8974358974358975, "length": 35}, "so_26788402_26788402_0": {"section_id": 3325, "quality": 0.6666666666666666, "length": 4}, "so_26788402_26788402_1": {"section_id": 633, "quality": 0.8, "length": 4}}, "n3337": {"so_26788402_26788402_2": {"section_id": 3195, "quality": 0.5555555555555556, "length": 5}, "so_26788402_26788564_0": {"section_id": 3166, "quality": 0.8974358974358975, "length": 35}, "so_26788402_26788402_0": {"section_id": 3195, "quality": 0.6666666666666666, "length": 4}, "so_26788402_26788402_1": {"section_id": 623, "quality": 0.8, "length": 4}}, "n4659": {"so_26788402_26788402_2": {"section_id": 4149, "quality": 0.5555555555555556, "length": 5}, "so_26788402_26788564_0": {"section_id": 4058, "quality": 0.8974358974358975, "length": 35}, "so_26788402_26788402_0": {"section_id": 4048, "quality": 0.6666666666666666, "length": 4}, "so_26788402_26788402_1": {"section_id": 4091, "quality": 1.0, "length": 5}}}});