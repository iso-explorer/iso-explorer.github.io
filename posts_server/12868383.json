post_cb({"bq_ids": {"n4140": {"so_12868383_12868383_0": {"length": 24, "quality": 0.96, "section_id": 5517}}, "n3337": {"so_12868383_12868383_0": {"length": 24, "quality": 0.96, "section_id": 5303}}, "n4659": {"so_12868383_12868383_0": {"length": 24, "quality": 0.96, "section_id": 6952}}}, "12869018": {"Id": "12869018", "PostTypeId": "2", "Body": "<p>Yes, I believe that you should be able to specialize a template based on its language linkage according to the C++ standard. I tested the following code with the <a href=\"http://www.comeaucomputing.com/tryitout/\" rel=\"noreferrer\">Comeau compiler online</a> and it compiled with no errors:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n\nstruct cpp {};\nstruct c {};\n\nextern \"C++\" typedef void(*cppfunc)();\nextern \"C\" typedef void(*cfunc)();\n\nextern \"C++\" void foo()\n{\n  std::cout &lt;&lt; \"foo\" &lt;&lt; std::endl;\n}\n\nextern \"C\" void bar()\n{\n  std::cout &lt;&lt; \"bar\" &lt;&lt; std::endl;\n}\n\ntemplate&lt;typename&gt; struct linkage;\n\ntemplate&lt;&gt;\n  struct linkage&lt;cppfunc&gt;\n{\n  typedef cpp type;\n};\n\ntemplate&lt;&gt;\n  struct linkage&lt;cfunc&gt;\n{\n  typedef c type;\n};\n\n\nint main()\n{\n  std::cout &lt;&lt; \"linkage of foo: \" &lt;&lt; typeid(linkage&lt;decltype(&amp;foo)&gt;::type).name() &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"linkage of bar: \" &lt;&lt; typeid(linkage&lt;decltype(&amp;bar)&gt;::type).name() &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n<p>However, I believe that <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=2316\" rel=\"noreferrer\">due to a gcc bug</a>, gcc does not distinguish function types based on language linkage, so this is not possible with gcc (and it doesn't seem sure when they will fix this).</p>\n", "LastEditorUserId": "906773", "LastActivityDate": "2012-10-13T01:42:51.883", "Score": "7", "CreationDate": "2012-10-13T01:03:10.110", "ParentId": "12868383", "CommentCount": "3", "OwnerUserId": "906773", "LastEditDate": "2012-10-13T01:42:51.883"}, "12868383": {"ViewCount": "258", "Body": "<p>A function's language linkage is part of its type:</p>\n<p>7.5.1 [dcl.link] of the ISO C++ standard:</p>\n<blockquote>\n<p id=\"so_12868383_12868383_0\">The default language linkage of all function types, function names, and variable names is C++ language linkage. Two function types with different language linkages are distinct types even if they are otherwise identical.</p>\n</blockquote>\n<p>Is it possible to specialize a template on the type of a function pointer's linkage, or otherwise introspect the type of a function pointer to determine its linkage at compile time?</p>\n<p>This first attempt does not seem legal:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n\nstruct cpp {};\nstruct c {};\n\nextern \"C++\" void foo()\n{\n  std::cout &lt;&lt; \"foo\" &lt;&lt; std::endl;\n}\n\nextern \"C\" void bar()\n{\n  std::cout &lt;&lt; \"bar\" &lt;&lt; std::endl;\n}\n\ntemplate&lt;typename&gt; struct linkage;\n\ntemplate&lt;&gt;\n  struct linkage&lt;void(*)()&gt;\n{\n  typedef cpp type;\n};\n\ntemplate&lt;&gt;\n  struct linkage&lt;extern \"C\" void(*)()&gt;\n{\n  typedef c type;\n}\n\n\nint main()\n{\n  std::cout &lt;&lt; \"linkage of foo: \" &lt;&lt; typeid(linkage&lt;decltype(&amp;foo)&gt;::type).name() &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"linkage of bar: \" &lt;&lt; typeid(linkage&lt;decltype(&amp;bar)&gt;::type).name() &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n<p><code>g++-4.6</code> outputs:</p>\n<pre><code>$ g++ -std=c++0x test.cpp \ntest.cpp:26:38: error: template argument 1 is invalid\ntest.cpp:26:3: error: new types may not be defined in a return type\ntest.cpp:26:3: note: (perhaps a semicolon is missing after the definition of \u2018&lt;type error&gt;\u2019)\ntest.cpp:32:10: error: two or more data types in declaration of \u2018main\u2019\n</code></pre>\n<p>Is there some application of SFINAE that could implement this functionality?</p>\n", "AcceptedAnswerId": "12869018", "Title": "Is it possible to specialize a template on language linkage?", "CreationDate": "2012-10-12T23:21:11.630", "Id": "12868383", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-10-13T00:45:13.897", "LastEditorUserId": "722294", "LastActivityDate": "2012-10-13T01:42:51.883", "Score": "8", "OwnerUserId": "722294", "Tags": "<c++><c++11><sfinae><linkage>", "AnswerCount": "1"}});