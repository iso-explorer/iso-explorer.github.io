post_cb({"32480021": {"ParentId": "32479995", "CommentCount": "5", "Body": "<p>The commas are a red herring; this is just concatenation of string literals.</p>\n<p>In source code, <code>\"abc\" \"def\"</code> means the same thing as <code>\"abcdef\"</code>.</p>\n", "OwnerUserId": "1084944", "PostTypeId": "2", "Id": "32480021", "Score": "3", "CreationDate": "2015-09-09T12:50:12.303", "LastActivityDate": "2015-09-09T12:50:12.303"}, "32479995": {"CommentCount": "0", "ViewCount": "97", "PostTypeId": "1", "LastEditorUserId": "4342498", "CreationDate": "2015-09-09T12:48:55.043", "LastActivityDate": "2015-09-09T13:05:28.303", "Title": "Quotation mark in return C++", "AcceptedAnswerId": "32480112", "LastEditDate": "2015-09-09T12:49:40.037", "Id": "32479995", "Score": "0", "Body": "<p>I get a code like this</p>\n<pre><code>virtual Qstring getEnergies() const {\nreturn \"estrain\"\n       \",eslip\"\n       \",edashpot\";\n}\n</code></pre>\n<p>Could you guys please explain the meaning of quotation and comma marks in that code? I am really thankful</p>\n", "Tags": "<c++>", "OwnerUserId": "5317158", "AnswerCount": "3"}, "32480112": {"ParentId": "32479995", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Adjacent string literals are concatenated in C++.  So</p>\n<pre><code>\"foo\" \"bar\"\n</code></pre>\n<p>Becomes</p>\n<pre><code>\"foobar\"\n</code></pre>\n<p>In your case the function will return a <code>Qstring</code> with the value of</p>\n<pre><code>\"estrain,eslip,edashpot\"\n</code></pre>\n<p>This behavior is defined in section 2.2.6 [lex.phases] of the C++ standard</p>\n<blockquote>\n<p id=\"so_32479995_32480112_0\">Adjacent string literal tokens are concatenated.</p>\n</blockquote>\n", "OwnerUserId": "4342498", "LastEditorUserId": "4342498", "LastEditDate": "2015-09-09T13:05:28.303", "Id": "32480112", "Score": "3", "CreationDate": "2015-09-09T12:54:20.647", "LastActivityDate": "2015-09-09T13:05:28.303"}, "bq_ids": {"n4140": {"so_32479995_32480112_0": {"section_id": 5313, "quality": 1.0, "length": 5}}, "n3337": {"so_32479995_32480112_0": {"section_id": 5110, "quality": 1.0, "length": 5}}, "n4659": {"so_32479995_32480112_0": {"section_id": 6737, "quality": 1.0, "length": 5}}}, "32480300": {"ParentId": "32479995", "CommentCount": "0", "Body": "<p>The quotation mark here is because your function return type is string. So <code>\"\"</code> is for the string type return.</p>\n<p>Now the second part as to why you have comma, then as others have answered it is for getting the adjacent string literal or different string literals. If you remove the comma then you will get a single string. If you don't have the comma then the return string will be equivalent to <code>estraineslipedashpot</code></p>\n", "OwnerUserId": "1501794", "PostTypeId": "2", "Id": "32480300", "Score": "0", "CreationDate": "2015-09-09T13:02:23.093", "LastActivityDate": "2015-09-09T13:02:23.093"}});