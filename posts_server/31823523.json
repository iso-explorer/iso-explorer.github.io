post_cb({"31823660": {"ParentId": "31823523", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You need to make sure it is double:</p>\n<pre><code>123456789012345678   // integer, give warning\n123456789012345678.0 // double (floating point)\n</code></pre>\n<p>If you need extra precision, you should consider using a large number library. See also <a href=\"https://stackoverflow.com/questions/5694877/c-library-for-big-float-numbers\">C++ library for big float numbers</a></p>\n", "OwnerUserId": "88442", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:21:58.357", "Id": "31823660", "Score": "2", "CreationDate": "2015-08-05T04:49:47.840", "LastActivityDate": "2015-08-05T04:49:47.840"}, "31823661": {"ParentId": "31823523", "CommentCount": "0", "Body": "<p>Here's a simple test case that produces this warning:</p>\n<pre><code>float foo() {\n  return 1000000000000000000000000;\n}\n</code></pre>\n<p>The problem is that the number written there is actually an integer literal.  This code is basically saying \"take this value as an <code>int</code>, convert it to <code>float</code>, and return that.\"  But the number is too big to fit in an <code>int</code>.</p>\n<p>Solution:  add \".0\" or \".0f\" to the end of the number to make it a <code>double</code> or <code>float</code> literal instead of an <code>int</code>.</p>\n", "OwnerUserId": "226975", "PostTypeId": "2", "Id": "31823661", "Score": "2", "CreationDate": "2015-08-05T04:49:55.680", "LastActivityDate": "2015-08-05T04:49:55.680"}, "31823523": {"CommentCount": "2", "ViewCount": "71", "CreationDate": "2015-08-05T04:34:36.303", "LastActivityDate": "2015-08-05T06:42:28.890", "Title": "C++ gcc large number errors", "AcceptedAnswerId": "31823653", "PostTypeId": "1", "Id": "31823523", "Score": "-2", "Body": "<p>My c++ project needs to work with numbers of planet masses... up to over 24 digits. They are floats. The same variable may also be a relatively small number (100) I have tried using double, and long, but compiling in linux with G++ I am receiving the warning: warning: </p>\n<p>integer constant is too large for its type [enabled by default]. </p>\n<p>Also my calculations do not work because of this. I am wondering what type variable this kind of number will require. </p>\n<p>I have done research, but it's turned up dry.. still, my apologies if this question is frequent. Thank you!</p>\n", "Tags": "<c++><gcc><double>", "OwnerUserId": "2498074", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_31823523_31823653_0": {"section_id": 5348, "quality": 0.9767441860465116, "length": 42}, "so_31823523_31823653_1": {"section_id": 5348, "quality": 0.875, "length": 14}}, "n3337": {"so_31823523_31823653_0": {"section_id": 5145, "quality": 0.9767441860465116, "length": 42}, "so_31823523_31823653_1": {"section_id": 5145, "quality": 0.875, "length": 14}}, "n4659": {"so_31823523_31823653_0": {"section_id": 6773, "quality": 0.9069767441860465, "length": 39}, "so_31823523_31823653_1": {"section_id": 6773, "quality": 0.875, "length": 14}}}, "31823653": {"ParentId": "31823523", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>If you have a piece of code like:</p>\n<pre><code>double mass = 31415926535892718281828459;\n</code></pre>\n<p>then you need to understand that the <em>constant</em> is an integer. The whole statement would turn it into a <code>double</code> before putting it into <code>mass</code> but your scheme is failing <em>before</em> that point.</p>\n<p>You need to tell the compiler it's a double straight away with something like:</p>\n<pre><code>double mass = 31415926535892718281828459.0;\n</code></pre>\n<p>Section 2.14 of <code>C++11</code> details the literals and how they're defined. A group of digits, where the first isn't <code>0</code>, is captured by the following rule of section <code>2.14.2 Integer literals</code>:</p>\n<pre><code>decimal-literal:\n    nonzero-digit\n    decimal-literal digit\n</code></pre>\n<p>(a group of digits starting with <code>0</code> is still an integer, just one made out of octal digits rather than decimal ones).</p>\n<p>Section <code>2.14.4 Floating literals</code> shows how to instruct the compiler that you want a <code>double</code> such as, for example:</p>\n<ul>\n<li>including a fractional component as in <code>1.414</code> or <code>15.</code>; or</li>\n<li>using the exponent notation as in <code>12e2</code>.</li>\n</ul>\n<p>Or, for the language lawyers out there:</p>\n<blockquote>\n<p id=\"so_31823523_31823653_0\">A floating literal consists of an integer part, a decimal point, a fraction part, an e or E, an optionally signed integer exponent, and an optional type suffix. The integer and fraction parts both consist of a sequence of decimal (base ten) digits. Either the integer part or the fraction part (not both) can be omitted; either the decimal point or the letter e (or E) and the exponent (not both) can be omitted.</p>\n<p id=\"so_31823523_31823653_1\">The type of a floating literal is double unless explicitly specified by a suffix. The suffixes f and F specify float, the suffixes l and L specify long double.</p>\n</blockquote>\n", "OwnerUserId": "14860", "LastEditorUserId": "14860", "LastEditDate": "2015-08-05T06:42:28.890", "Id": "31823653", "Score": "3", "CreationDate": "2015-08-05T04:49:16.573", "LastActivityDate": "2015-08-05T06:42:28.890"}});