post_cb({"bq_ids": {"n4140": {"so_14526901_14526944_0": {"length": 7, "quality": 1.0, "section_id": 2304}, "so_14526901_14526944_2": {"length": 26, "quality": 0.9629629629629629, "section_id": 6325}}, "n3337": {"so_14526901_14526944_0": {"length": 7, "quality": 1.0, "section_id": 2291}, "so_14526901_14526944_2": {"length": 26, "quality": 0.9629629629629629, "section_id": 6082}}, "n4659": {"so_14526901_14526944_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 2578}, "so_14526901_14526944_2": {"length": 26, "quality": 0.9629629629629629, "section_id": 7835}}}, "14527112": {"Id": "14527112", "PostTypeId": "2", "Body": "<p><code>printf(\"%s\", str)</code> is not required to handle <code>NULL</code> strings, so by passing <code>NULL</code>  you are asking for trouble.</p>\n<p>The semantically equivalent statement with IOStreams is:</p>\n<pre><code>std::cout &lt;&lt; static_cast&lt;char const*&gt;(NULL);\n</code></pre>\n<p>And this is not required to handle <code>NULL</code> string either.</p>\n", "LastActivityDate": "2013-01-25T17:24:43.267", "CommentCount": "1", "CreationDate": "2013-01-25T17:24:43.267", "ParentId": "14526901", "Score": "2", "OwnerUserId": "412080"}, "14526944": {"Id": "14526944", "PostTypeId": "2", "Body": "<p>Huh?  I see no reason why <code>cout</code> should fail simply because you executed</p>\n<pre><code>std::cout &lt;&lt; 0 &lt;&lt; std::endl;\n</code></pre>\n<p>It should output <code>0\\n</code>.  And <a href=\"http://ideone.com/qH0wZD\">it does</a>.  End of story.</p>\n<p>(In case you're confused, please know that in C++, <code>#define NULL (0)</code>.)</p>\n<p>In case you wrote:</p>\n<pre><code>T* p = 0;\nstd::cout &lt;&lt; p &lt;&lt; std::endl;\n</code></pre>\n<p>then it will display the address <code>0</code>, (generally in hexadecimal and padded to the pointer size, since this is the preferred way of looking at pointers).</p>\n<p>(This is btw the behavior you would get using the C definition of NULL, which is <code>#define NULL ((void*)0)</code>.)</p>\n<p>Only if you write</p>\n<pre><code>char* p = 0;\nstd::cout &lt;&lt; p &lt;&lt; std::endl;\n</code></pre>\n<p>are you in trouble.  Now you're calling</p>\n<blockquote id=\"so_14526901_14526944_0\">\n<pre><code>template&lt;class traits&gt;\nbasic_ostream&lt;char,traits&gt;&amp; operator&lt;&lt;(basic_ostream&lt;char,traits&gt;&amp; out, const char* s);\n</code></pre>\n</blockquote>\n<p>for which the Standard (section 27.7.3.6.4) says:</p>\n<blockquote>\n<p id=\"so_14526901_14526944_1\"><em>Requires</em>: <code>s</code> shall not be a null pointer.</p>\n</blockquote>\n<p>When you do pass a null pointer, the rule 17.6.4.9 applies, which states that:</p>\n<blockquote>\n<p id=\"so_14526901_14526944_2\">Each of the following applies to all arguments to functions de\ufb01ned in the C++ standard library, unless explicitly stated otherwise.\n  * If an argument to a function has an invalid value (such as a value outside the domain of the function or a pointer invalid for its intended use), the behavior is undefined.</p>\n</blockquote>\n<p>So you're in the land of \"undefined behavior\".  There's no guarantee that <code>failbit</code> gets set and the program continues.</p>\n<hr>\n<p>Please note that <code>printf</code> behavior didn't actually depend on the type of <code>NULL</code>.  It's the format string <code>\"%s\"</code> that caused treatment as a string (pointer to NUL-terminated character sequence).</p>\n</hr>", "LastEditorUserId": "103167", "LastActivityDate": "2013-01-25T17:33:10.953", "Score": "14", "CreationDate": "2013-01-25T17:15:04.577", "ParentId": "14526901", "CommentCount": "15", "OwnerUserId": "103167", "LastEditDate": "2013-01-25T17:33:10.953"}, "14526901": {"ViewCount": "228", "Body": "<blockquote>\n<p id=\"so_14526901_14526901_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/7019454/why-does-stdcout-output-disappear-completely-after-null-is-sent-to-it\">Why does std::cout output disappear completely after NULL is sent to it</a> </br></p>\n</blockquote>\n<p>It seems if you try:</p>\n<pre><code> std::cout &lt;&lt; NULL &lt;&lt; endl;\n std::cout &lt;&lt; \"hell\" &lt;&lt; endl;\n</code></pre>\n<p>it print out nothing and C++ IO stops working for all subsequent outputs.</p>\n<p>but it works fine in C stdio:</p>\n<pre><code> printf(\"%s\\n\", NULL);\n printf(\"%s\\n\", \"hell\"); \n</code></pre>\n<blockquote>\n<p id=\"so_14526901_14526901_1\">(null)</p>\n<p id=\"so_14526901_14526901_2\">hell</p>\n</blockquote>\n<p>Is there any good reason why C++ IO can't do the same thing?</p>\n<p>(edited in response to comments)\nalright, to make it clear, NULL does have a type, say const char*</p>\n<pre><code>const char* getxxx();  // may return NULL, \ncout &lt;&lt; getxxx();      // won't work if NULL returned\n</code></pre>\n", "AcceptedAnswerId": "14526944", "Title": "What is the reason C++ std IO doesn't output NULL gracefully?", "CreationDate": "2013-01-25T17:12:43.983", "Id": "14526901", "CommentCount": "5", "LastEditDate": "2017-05-23T12:33:00.733", "PostTypeId": "1", "OwnerDisplayName": "user1252446", "LastEditorUserId": "-1", "LastActivityDate": "2013-01-25T17:33:10.953", "ClosedDate": "2013-01-25T18:19:29.513", "Score": "3", "Tags": "<c++><stdio>", "AnswerCount": "2"}});