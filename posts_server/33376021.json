post_cb({"bq_ids": {"n4140": {"so_33376021_33376246_1": {"length": 16, "quality": 0.8888888888888888, "section_id": 485}, "so_33376021_33376246_0": {"length": 40, "quality": 0.975609756097561, "section_id": 484}}, "n3337": {"so_33376021_33376246_1": {"length": 10, "quality": 0.5555555555555556, "section_id": 476}, "so_33376021_33376246_0": {"length": 35, "quality": 0.8536585365853658, "section_id": 475}}}, "33376021": {"CreationDate": "2015-10-27T18:39:23.947", "ViewCount": "1134", "Id": "33376021", "AcceptedAnswerId": "33376246", "Score": "4", "Title": "deleted constructor inheritance", "LastEditorUserId": "2534689", "CommentCount": "1", "Body": "<p>One of the requirements of constructor inheritance is that the derived class can not have any constructors with the same signature. I am unsure however about how deleted functions behave under these rules.</p>\n<pre><code>class Foo\n{\n    public:\n    Foo() = delete;\n    Foo(const Foo&amp; a_Foo) = delete;\n    Foo(int a_Value) : m_Value(a_Value) {}\n\n    private:\n    int m_Value;\n};\n\nclass Bar : public Foo\n{\n    public:\n    using Foo::Foo;\n    Bar() : Foo(7) {};\n    Bar(const Bar&amp; a_Bar) : Foo(12) {};\n};\n</code></pre>\n<ul>\n<li>Are deleted constructors inherited at all?</li>\n<li>If so, <code>Bar()</code> and <code>Foo()</code> have the same signature, does this make the code invalid?</li>\n<li>You could argue that <code>Foo(const Foo&amp; a_Foo)</code> and <code>Bar(const Bar&amp; a_Bar)</code>  have different signatures. How do copy constructors behave under constructor inheritance?</li>\n</ul>\n", "Tags": "<c++><c++11><inheritance><constructor>", "LastEditDate": "2015-10-27T18:51:40.080", "LastActivityDate": "2015-10-27T19:09:22.800", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "2534689"}, "33376246": {"CommentCount": "0", "Body": "<p>Default, copy, and move constructors are <em>not</em> inherited, nor can inheriting a constructor implicitly declare a copy or move constructor for the derived class. Also, an inheriting constructor declaration will essentially just \"skip over\" a base class constructor if there's already a constructor with the same signature in the derived class.</p>\n<blockquote>\n<p id=\"so_33376021_33376246_0\">For each non-template constructor in the candidate set of inherited constructors other than a constructor\n  having no parameters or a copy/move constructor having a single parameter, a constructor is implicitly\n  declared with the same constructor characteristics unless there is a user-declared constructor with the same\n  signature in the complete class where the using-declaration appears or the constructor would be a default,\n  copy, or move constructor for that class.</p>\n</blockquote>\n<p>([class.inhctor]/3)</p>\n<p>Also, an inherited constructor is deleted if the corresponding base class constructor is deleted.</p>\n<blockquote>\n<p id=\"so_33376021_33376246_1\">A constructor so declared has the same access as the corresponding constructor in <code>X</code>. It is deleted if the\n  corresponding constructor in <code>X</code> is deleted (8.4). An inheriting constructor shall not be explicitly instantiated (14.7.2) or explicitly specialized (14.7.3).</p>\n</blockquote>\n<p>([class.inhctor]/4)</p>\n", "CreationDate": "2015-10-27T18:52:43.690", "ParentId": "33376021", "Id": "33376246", "LastActivityDate": "2015-10-27T18:52:43.690", "PostTypeId": "2", "Score": "4", "OwnerUserId": "481267"}, "33376180": {"LastActivityDate": "2015-10-27T19:09:22.800", "CommentCount": "4", "Body": "<p><code>Foo</code> constructor is deleted, so you can't define a constructor of class <code>Bar</code> that uses deleted <code>Foo</code> constructor. It doesn't make sense to talk about inheritance there, because you can never create an object of class <code>Bar</code> that uses deleted <code>Foo</code> constructor.</p>\n<blockquote>\n<p id=\"so_33376021_33376180_0\">Are deleted constructors inherited at all?</p>\n</blockquote>\n<p>No. They are deleted, there is nothing to inherit from.</p>\n<blockquote>\n<p id=\"so_33376021_33376180_1\">If so, Bar() and Foo() have the same signature, does this make the\n  code invalid?</p>\n</blockquote>\n<p>Default constructor can't be inherited.</p>\n<blockquote>\n<p id=\"so_33376021_33376180_2\">You could argue that Foo(const Foo&amp; a_Foo) and Bar(const Bar&amp; a_Bar)\n  have different signatures. How do copy constructors behave under\n  constructor inheritance?</p>\n</blockquote>\n<p>Copy constructors can't be inherited as well.</p>\n", "CreationDate": "2015-10-27T18:48:13.957", "LastEditDate": "2015-10-27T19:09:22.800", "ParentId": "33376021", "Id": "33376180", "LastEditorUserId": "194635", "PostTypeId": "2", "Score": "1", "OwnerUserId": "194635"}});