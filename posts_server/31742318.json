post_cb({"bq_ids": {"n4140": {"so_31742318_31742664_0": {"length": 73, "quality": 0.7934782608695652, "section_id": 5313}}, "n3337": {"so_31742318_31742664_0": {"length": 73, "quality": 0.7934782608695652, "section_id": 5110}}, "n4659": {"so_31742318_31742664_0": {"length": 73, "quality": 0.7934782608695652, "section_id": 6737}}}, "31742318": {"ViewCount": "253", "Body": "<p>After learning about variadic function templates that use recursion, I am wondering: </p>\n<p>Are all template instantiations that can <strong>possibly</strong> be needed during the program's execution created at compile time? Is there such thing as instantiation on-the-fly?</p>\n", "Title": "Are all template instantiations created at compile time?", "CreationDate": "2015-07-31T09:09:15.077", "LastActivityDate": "2015-07-31T10:05:34.450", "CommentCount": "8", "FavoriteCount": "1", "PostTypeId": "1", "Id": "31742318", "Score": "3", "OwnerUserId": "2725810", "Tags": "<c++><templates><c++11><variadic-templates>", "AnswerCount": "2"}, "31743548": {"Id": "31743548", "PostTypeId": "2", "Body": "<p>Templates are instantiated in the process of converting each translated translation unit into an instantiation unit.</p>\n<p>A translation unit is essentially a source file.</p>\n<p>A translated translation unit (try to say that three times fast) is the output from compilation without templates instantiated.</p>\n<p>An instantiation unit is essentially the translated translation unit with  templates instantiated.</p>\n<p>Whether the instantiation occurs at \"compile time\" depends on the architecture of the implementation.</p>\n<p>In a traditional \"compile to objects and link the objects\" architecture (which most developers working under windows or linux will be familiar with) the generation of translated translation units and generation of instantiation units are both phases (possibly combined phases) of the compiler.   So, in this model, instantiation is a compile time activity.</p>\n<p>However, there are implementations that use a \"smart linker\", and the compiler outputs translated translation units, with some auxiliary information that describes what template instantiations are needed by each translated translation unit.    The process of converting those into an instantiation unit is then handled by the linker.   With such implementations, template instantation is therefore a link-time activity rather than a compile time activity.    The intent of this build model is that it provides opportunities for link-time optimisation (and the link-time template instantiation is more a side-effect than a goal).</p>\n<p>The first implementation with a smart linker I encountered was available as an additional-cost option from Sun Microsystems on SunOS and later Solaris  (those operating systems shipped by default with a toolchain that included a more typical dumb linker).    I've encountered a couple of other such toolchains since, but can't recall their vendors offhand.</p>\n<p>I'm not aware of any implementations where template instantiation occurs at run time.   Conceivably, however, a C++ interpreter might work this way.</p>\n", "LastActivityDate": "2015-07-31T10:05:34.450", "CommentCount": "4", "CreationDate": "2015-07-31T10:05:34.450", "ParentId": "31742318", "Score": "3", "OwnerUserId": "4706785"}, "31742664": {"Id": "31742664", "PostTypeId": "2", "Body": "<p>All template instantiations are created on compile time.\nQuote from standard:</p>\n<p>N4296 2.2/1/8[lex.phases]</p>\n<blockquote>\n<p id=\"so_31742318_31742664_0\">Translated translation units and instantiation units are combined as\n  follows: [ Note: Some or all of these may be supplied from a library.\n  \u2014 end note ] <strong>Each translated translation unit is examined to produce a\n  list of required instantiations. [ Note: This may include\n  instantiations which have been explicitly requested (14.7.2). \u2014 end\n  note ]</strong> <strong>The definitions of the required templates are located.</strong> It is\n  implementation-defined whether the source of the translation units\n  containing these definitions is required to be available. [ Note: An\n  implementation could encode sufficient information into the translated\n  translation unit so as to ensure the source is not required here. \u2014\n  end note ] <strong>All the required instantiations are performed to produce\n  instantiation units. [ Note: These are similar to translated\n  translation units, but contain no references to uninstantiated\n  templates and no template definitions. \u2014 end note ] The program is\n  ill-formed if any instantiation fails.</strong></p>\n</blockquote>\n", "LastActivityDate": "2015-07-31T09:25:48.667", "CommentCount": "0", "CreationDate": "2015-07-31T09:25:48.667", "ParentId": "31742318", "Score": "1", "OwnerUserId": "1498580"}});