post_cb({"21636966": {"CommentCount": "5", "AcceptedAnswerId": "21676769", "ClosedDate": "2014-03-07T04:11:56.847", "CreationDate": "2014-02-07T20:16:17.467", "LastActivityDate": "2014-02-10T12:16:19.787", "PostTypeId": "1", "ViewCount": "350", "Title": "An issue of nested classes in template class", "Id": "21636966", "Score": "3", "Body": "<p>I was trying to use nested classes inside a template class. See the code snippet below:</p>\n<pre><code>template &lt;class T&gt;\nclass OutterTemplate {\npublic:\n    class InnerBase {\n    protected:\n        const char* name_; \n    public:\n        virtual void print() {\n            cout &lt;&lt; name_ &lt;&lt; endl;\n        } \n\n        void setName(const char* n) {\n            name_ = n;\n        }\n    };\n\nprivate:\n    class Inner : public InnerBase {\n        public:\n            virtual void print() {\n                cout &lt;&lt; name_;\n                cout &lt;&lt; \" and \";\n                InnerBase::print();\n            }\n    };\npublic:    \n    static InnerBase* getInner() {\n        return new Inner();\n    }\n};\n\nint main() {\n    auto q = OutterTemplate&lt;int&gt;::getInner();\n    q-&gt;setName(\"Not working\");\n    q-&gt;print();\n}\n</code></pre>\n<p>I got error \"error: 'name_' was not declared in this scope\" when trying to compile this code. I have check if \"outter\" is not a template class, there is no such problem. Can anyone explain why this error with template classes and how to enable access to members of based class in case of nested classes inside template class?</p>\n", "Tags": "<c++><templates><inheritance><nested>", "OwnerUserId": "3068202", "AnswerCount": "1"}, "21676769": {"ParentId": "21636966", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The Standard is quite clear on this point:</p>\n<p><strong>14.6.2 Dependent names [temp.dep]</strong></p>\n<blockquote>\n<p id=\"so_21636966_21676769_0\">3 In the de\ufb01nition of a class or class template, if a base class\n  depends on a template-parameter, the base class scope is not examined\n  during unquali\ufb01ed name lookup either at the point of de\ufb01nition of the\n  class template or member or during an instantiation of the class\n  template or member.</p>\n</blockquote>\n<p>Here, your <code>OutterTemplate&lt;T&gt;::InnerBase</code> is a dependent base class of <code>OutterTemplate&lt;T&gt;::Inner</code>, and <code>cout &lt;&lt; name_;</code> involves unqualified name lookup. This means that <code>InnerBase</code> will not be examined. Adding <code>this-&gt;</code> will remedy that:</p>\n<p><strong>14.6.2.1 Dependent types [temp.dep.type]</strong></p>\n<blockquote>\n<p id=\"so_21636966_21676769_1\">7 If, for a given set of template arguments, a specialization of a\n  template is instantiated that refers to a member of the current\n  instantiation with a quali\ufb01ed-id or class member access expression,\n  the name in the quali\ufb01ed-id or class member access expression is\n  looked up in the template instantiation context.</p>\n</blockquote>\n<p>Because <code>this-&gt;</code> is a class member access expression, this means that <code>name_</code> will be looked up at the point where <code>OutterTemplate&lt;T&gt;::Inner</code> is instantiated, at which point <code>name_</code> will be found in the base class.</p>\n", "OwnerUserId": "819272", "LastEditorUserId": "819272", "LastEditDate": "2014-02-10T12:16:19.787", "Id": "21676769", "Score": "1", "CreationDate": "2014-02-10T12:05:46.937", "LastActivityDate": "2014-02-10T12:16:19.787"}, "bq_ids": {"n4140": {"so_21636966_21676769_1": {"section_id": 197, "quality": 0.9230769230769231, "length": 24}, "so_21636966_21676769_0": {"section_id": 190, "quality": 0.8888888888888888, "length": 24}}, "n3337": {"so_21636966_21676769_1": {"section_id": 191, "quality": 0.9230769230769231, "length": 24}, "so_21636966_21676769_0": {"section_id": 184, "quality": 0.8888888888888888, "length": 24}}, "n4659": {"so_21636966_21676769_1": {"section_id": 203, "quality": 0.9230769230769231, "length": 24}, "so_21636966_21676769_0": {"section_id": 195, "quality": 0.7037037037037037, "length": 19}}}});