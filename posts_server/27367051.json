post_cb({"27367051": {"CommentCount": "0", "ViewCount": "133", "PostTypeId": "1", "LastEditorUserId": "4338919", "CreationDate": "2014-12-08T21:14:25.823", "LastActivityDate": "2014-12-11T17:08:12.267", "Title": "Why does the wording for the declaration of main change between draft standards?", "AcceptedAnswerId": "27367094", "LastEditDate": "2014-12-08T21:36:41.423", "Id": "27367051", "Score": "3", "Body": "<p>N3936 [basic.start.main]</p>\n<blockquote>\n<p id=\"so_27367051_27367051_0\"><code>2</code> An implementation shall not predefine the <code>main</code> function. This\n  function shall not be overloaded. It shall have a declared return type\n  of type <code>int</code>, but otherwise its type is implementation-defined. An\n  implementation shall allow both</p>\n<p id=\"so_27367051_27367051_1\">\u2014 a function of <code>()</code> returning <code>int</code> and</p>\n<p id=\"so_27367051_27367051_2\">\u2014 a function of (<code>int</code>, pointer to pointer to <code>char</code>) returning <code>int</code></p>\n</blockquote>\n<p>N3337 [basic.start.main]</p>\n<blockquote>\n<p id=\"so_27367051_27367051_3\"><code>2</code> An implementation shall not predefine the <code>main</code> function. This\n  function shall not be overloaded. It shall have a return type of type\n  <code>int</code>, but otherwise its type is implementation-defined. All\n  implementations shall allow both of the following definitions of\n  <code>main</code>:</p>\n<pre><code>int main() { /* ...  */ }\n</code></pre>\n<p id=\"so_27367051_27367051_4\">and</p>\n<pre><code>int main(int argc, char* argv[]) { /* ...  */ }\n</code></pre>\n</blockquote>\n<p>What explains this change? The closest I can find is <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1669\" rel=\"nofollow\">DR 1669</a> in which the proposed wording already includes this change. We know that due to \"array-to-pointer decay\", that <code>char* argv[]</code> becomes <code>char** argv</code>.</p>\n<pre><code>std::cout &lt;&lt; std::is_same&lt;char**, std::decay&lt;char*[]&gt;::type&gt;::value; // true\n</code></pre>\n<p>That doesn't really need rewording - it's self-explanatory. So why the change?</p>\n", "Tags": "<c++><language-lawyer><c++14>", "OwnerUserId": "4338919", "AnswerCount": "1"}, "27367094": {"ParentId": "27367051", "PostTypeId": "2", "CommentCount": "8", "CreationDate": "2014-12-08T21:16:54.513", "Score": "5", "LastEditorUserId": "2756719", "LastEditDate": "2014-12-11T17:08:12.267", "Id": "27367094", "OwnerUserId": "3647361", "Body": "<p>It's just more flexible in general as it doesn't restrain the syntax.<br>\nThe DR that introduces the change is <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1003\" rel=\"nofollow\"><strong>#1003</strong></a>:</br></p>\n<blockquote>\n<p id=\"so_27367051_27367094_0\">The specification of the forms of the definition of <code>main</code> that an\n  implementation is required to accept is clear in C99 that the\n  parameter names and the exact syntactic form of the types can vary.\n  Although it is reasonable to assume that a C++ implementation would\n  accept a definition like</p>\n<pre><code>int main(int foo, char** bar) { /* ... */ }\n</code></pre>\n<p id=\"so_27367051_27367094_1\">instead of the canonical</p>\n<pre><code>int main(int argc, char* argv[]) { /* ... */ }\n</code></pre>\n<p id=\"so_27367051_27367094_2\">it might be a good idea to clarify the intent using wording similar to\n  C99's.</p>\n</blockquote>\n<p>The most common example is mentioned above:</p>\n<pre><code>int main(int argc, char** argv)\n</code></pre>\n<p>This isn't <em>guaranteed</em> to work according to C++11. </p>\n<p>Another example are trailing-return-types. Consider that many people use them exclusively now - and write something along the lines of</p>\n<pre><code>auto main() -&gt; int\n</code></pre>\n<p>We want these, and similar definitions, to be standard. Not implementation-defined.</p>\n", "LastActivityDate": "2014-12-11T17:08:12.267"}, "bq_ids": {"n4140": {"so_27367051_27367051_3": {"section_id": 7146, "quality": 0.75, "length": 18}, "so_27367051_27367051_0": {"section_id": 7146, "quality": 0.9047619047619048, "length": 19}, "so_27367051_27367051_2": {"section_id": 7146, "quality": 1.0, "length": 7}}, "n3337": {"so_27367051_27367051_3": {"section_id": 6890, "quality": 0.9166666666666666, "length": 22}, "so_27367051_27367051_0": {"section_id": 6890, "quality": 0.8095238095238095, "length": 17}, "so_27367051_27367051_2": {"section_id": 3073, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_27367051_27367051_3": {"section_id": 8647, "quality": 0.75, "length": 18}, "so_27367051_27367051_0": {"section_id": 8647, "quality": 0.9047619047619048, "length": 19}, "so_27367051_27367051_2": {"section_id": 8647, "quality": 1.0, "length": 7}}}});