post_cb({"25683081": {"Id": "25683081", "PostTypeId": "2", "Body": "<p>For C and C++:</p>\n<p><code>x</code> gets assigned its own address. It points to itself afterwards.</p>\n", "LastEditorUserId": "694576", "LastActivityDate": "2014-09-05T10:49:40.940", "Score": "2", "CreationDate": "2014-09-05T09:49:53.300", "ParentId": "25683034", "CommentCount": "4", "OwnerUserId": "694576", "LastEditDate": "2014-09-05T10:49:40.940"}, "bq_ids": {"n4140": {"so_25683034_25683932_1": {"length": 13, "quality": 0.6190476190476191, "section_id": 6039}}, "n3337": {"so_25683034_25683932_1": {"length": 13, "quality": 0.6190476190476191, "section_id": 5807}}, "n4659": {"so_25683034_25683932_1": {"length": 11, "quality": 0.5238095238095238, "section_id": 7548}}}, "25683932": {"Id": "25683932", "PostTypeId": "2", "Body": "<p>To conclude whether this declaration </p>\n<pre><code>void *x = &amp;x;\n</code></pre>\n<p>is valid you should take into account two important quotes from the C Standard.</p>\n<p>the first one says where ths scope of an identifier starts (6.2.1 Scopes of identifiers)</p>\n<blockquote>\n<p id=\"so_25683034_25683932_0\">7 Structure, union, and enumeration tags have scope that begins just\n  after the appearance of the tag in a type specifier that declares the\n  tag. Each enumeration constant has scope that begins just after the\n  appearance of its defining enumerator in an enumerator list. <strong>Any\n  other identifier has scope that begins just after the completion of\n  its declarator.</strong></p>\n</blockquote>\n<p>The second one says whether a pointer of any type can be assigned to a pointer to void (6.3.2.3 Pointers)</p>\n<blockquote>\n<p id=\"so_25683034_25683932_1\">1 A pointer to void may be converted to or from a pointer to any\n  object type. <strong>A pointer to any object type may be converted to a\n  pointer to void</strong> and back again; the result shall compare equal to\n  the original pointer.</p>\n</blockquote>\n<p>So in this declaration</p>\n<pre><code>void *x = &amp;x;\n</code></pre>\n<p>the scope of variabble x starts immediately before the assignment operator. Its complete type is <code>void *</code> and it can be assigned any pointer of other type. In the right hand there is expression of type <code>void **</code>. And according to the second quote it can be assigned to x because x is a pointer to void.</p>\n<p>As result x will store the address of itself.</p>\n", "LastActivityDate": "2014-09-05T10:36:06.553", "CommentCount": "1", "CreationDate": "2014-09-05T10:36:06.553", "ParentId": "25683034", "Score": "5", "OwnerUserId": "2877241"}, "25683153": {"Id": "25683153", "PostTypeId": "2", "Body": "<p>Based on understanding of @alk answer:</p>\n<p><strong>It is exactly as you say:</strong></p>\n<pre><code>int y = 10;\nvoid* x = &amp;y;\n</code></pre>\n<p>But in out case, x points to itself instead of <code>y</code></p>\n", "LastActivityDate": "2014-09-05T09:54:02.917", "CommentCount": "0", "CreationDate": "2014-09-05T09:54:02.917", "ParentId": "25683034", "Score": "0", "OwnerUserId": "171950"}, "25683034": {"ViewCount": "102", "Body": "<p>In objective-c, I really cannot understand this:</p>\n<p><code>void *x = &amp;x;</code></p>\n<p>my understanding is:</p>\n<p>declare a generic pointer (hence type void*), the pointer variable name is x, and this pointer points to a reference to a variable (<strong>that should be declared already- but it is not</strong>) named x.</p>\n<p>very confusing to me!</p>\n", "Title": "Defining a pointer to refere to same variable name's reference?", "CreationDate": "2014-09-05T09:47:28.883", "LastActivityDate": "2014-09-05T10:49:40.940", "CommentCount": "3", "PostTypeId": "1", "Id": "25683034", "Score": "3", "OwnerUserId": "171950", "Tags": "<c++><objective-c><c><pointers>", "AnswerCount": "3"}});