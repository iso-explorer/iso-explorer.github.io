post_cb({"11887104": {"CommentCount": "5", "ViewCount": "233", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2012-08-09T15:47:44.980", "LastActivityDate": "2012-08-13T20:30:37.163", "Title": "Dereference-assignment to a doubly incremented OutputIterator", "AcceptedAnswerId": "11938988", "LastEditDate": "2017-05-23T12:12:18.210", "Id": "11887104", "Score": "5", "Body": "<p>Per the (excellent) question <a href=\"https://stackoverflow.com/questions/11876128/c-outputiterator-post-increment-requirements\">C++ OutputIterator post-increment requirements</a>, we observe that for a dereferenceable and incrementable value <code>r</code> of <code>OutputIterator</code> type <code>X</code>, and value <code>o</code> of appropriate type, the expression</p>\n<pre><code>*r++ = o;\n</code></pre>\n<p>is valid and has equivalent semantics to</p>\n<pre><code>X a(r);\n++r;\n*a = o;\n</code></pre>\n<p>However, is it still the case the <code>a</code> is dereference-assignable if <code>r</code> has been incremented more than once in the intervening period; that is, is this code valid?</p>\n<pre><code>X a(r);\n++r;\n++r;\n*a = o;\n</code></pre>\n<p>It's difficult to see how operations on a value can have an effect on the validity of operations on another value, but e.g. <code>InputIterator</code> (24.2.3) has, under the postconditions of <code>++r</code>:</p>\n<blockquote>\n<p id=\"so_11887104_11887104_0\">Any copies of the\n  previous value of <code>r</code> are no\n  longer required either to be\n  dereferenceable or to be in\n  the domain of <code>==</code>.</p>\n</blockquote>\n<p>Relevant sections: <strong>24.2.2 Iterator</strong>, <strong>24.2.4 Output iterators</strong>, <strong>17.6.3.1 Template argument requirements</strong>.</p>\n<p>Also, if this is <em>not</em> required to be valid, are there any situations where exploiting its non-validity would aid in the implementation (w.r.t. efficiency, simplicity) of an <code>OutputIterator</code> type while still observing the existing requirements?</p>\n", "Tags": "<c++><iterator><increment><language-lawyer><post-increment>", "OwnerUserId": "567292", "AnswerCount": "1"}, "11938988": {"ParentId": "11887104", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This issue was raised in 2004 as <a href=\"http://open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#485\" rel=\"nofollow noreferrer\">defect 485</a>, and the wording in <a href=\"http://open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3066.html\" rel=\"nofollow noreferrer\">n3066</a> clarifies the issue, requiring that an output iterator need only support a sequence of alternating increments and dereference/assignments. So in your example, <code>r</code> need not be incrementable after the first <code>++r</code>, unless there is an intervening dereference/assignment. This behavior is also required by SGI's <a href=\"http://sgi.com/tech/stl/OutputIterator.html\" rel=\"nofollow noreferrer\">STL</a> (see footnote 3). As you mentioned above, n3225 appeared without the fixes from n3066, so <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2035\" rel=\"nofollow noreferrer\">defect 2035</a> was raised; but alas the fix did not make it into the published version of C++11 (ISO/IEC 14882:2011). </p>\n<p>Furthermore, defect 2035 says that <code>a</code> (from <code>X a(r++);</code>) cannot be used like <code>*a = 0</code>: </p>\n<blockquote>\n<p id=\"so_11887104_11938988_0\">\"After this operation [i.e., <code>++r</code>] <code>r</code> is not required to be incrementable and any copies of the previous value of <code>r</code> are no longer required to be dereferenceable or incrementable.\"</p>\n</blockquote>\n<p>There are situations where this may aid the implementation (in terms of <em>simplicity</em>): see e.g. <a href=\"https://stackoverflow.com/a/4004035/985943\">this question</a> on <code>ostream_iterator</code>, where such (invalid) double increments are ignored simply returning <code>*this</code>; only a dereference/assignment causes the <code>ostream_iterator</code> to actually increment.</p>\n", "OwnerUserId": "985943", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:04:44.593", "Id": "11938988", "Score": "2", "CreationDate": "2012-08-13T17:06:47.827", "LastActivityDate": "2012-08-13T20:30:37.163"}, "bq_ids": {"n4140": {"so_11887104_11887104_0": {"section_id": 5569, "quality": 0.8888888888888888, "length": 8}, "so_11887104_11938988_0": {"section_id": 5569, "quality": 0.6363636363636364, "length": 7}}, "n3337": {"so_11887104_11887104_0": {"section_id": 5351, "quality": 0.8888888888888888, "length": 8}, "so_11887104_11938988_0": {"section_id": 5351, "quality": 0.6363636363636364, "length": 7}}, "n4659": {"so_11887104_11887104_0": {"section_id": 7016, "quality": 0.8888888888888888, "length": 8}, "so_11887104_11938988_0": {"section_id": 7016, "quality": 0.6363636363636364, "length": 7}}}});