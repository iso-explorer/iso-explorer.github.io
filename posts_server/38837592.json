post_cb({"bq_ids": {"n4140": {"so_38837592_38837592_2": {"length": 15, "quality": 1.0, "section_id": 5988}, "so_38837592_38837662_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 5995}, "so_38837592_38837675_0": {"length": 28, "quality": 1.0, "section_id": 5811}}, "n3337": {"so_38837592_38837592_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 5756}, "so_38837592_38837662_0": {"length": 18, "quality": 0.782608695652174, "section_id": 5763}, "so_38837592_38837675_0": {"length": 28, "quality": 1.0, "section_id": 5584}}, "n4659": {"so_38837592_38837592_2": {"length": 15, "quality": 1.0, "section_id": 7488}, "so_38837592_38837675_0": {"length": 28, "quality": 1.0, "section_id": 7273}}}, "38837675": {"Id": "38837675", "PostTypeId": "2", "Body": "<p><a href=\"http://eel.is/c++draft/intro.execution#16\">[intro.execution]/16</a>:</p>\n<blockquote>\n<p id=\"so_38837592_38837675_0\">When calling a function (whether or not the function is inline), every\n  value computation and side effect associated with any argument\n  expression, or with the postfix expression designating the called\n  function, is sequenced before execution of every expression or\n  statement in the body of the called function.</p>\n</blockquote>\n", "LastActivityDate": "2016-08-08T20:07:53.430", "CommentCount": "0", "CreationDate": "2016-08-08T20:07:53.430", "ParentId": "38837592", "Score": "11", "OwnerUserId": "2756719"}, "38837592": {"ViewCount": "152", "Body": "<p>Does standard C++11 guarantee that all 3 temporary objects have been created before the beginning performe the function?</p>\n<p>Even if temporary object passed as:</p>\n<ol>\n<li>object</li>\n<li>rvalue-reference</li>\n<li>passed only member of temporary object</li>\n</ol>\n<p><a href=\"http://ideone.com/EV0hSP\" rel=\"nofollow noreferrer\">http://ideone.com/EV0hSP</a></p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct T { \n    T() { std::cout &lt;&lt; \"T created \\n\"; }\n    int val = 0;\n    ~T() { std::cout &lt;&lt; \"T destroyed \\n\"; }\n};\n\nvoid function(T t_obj, T &amp;&amp;t, int &amp;&amp;val) {\n    std::cout &lt;&lt; \"func-start \\n\";\n    std::cout &lt;&lt; t_obj.val &lt;&lt; \", \" &lt;&lt; t.val &lt;&lt; \", \" &lt;&lt; val &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"func-end \\n\";\n}\n\nint main() {\n\n    function(T(), T(), T().val);\n\n    return 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>T created \nT created \nT created \nfunc-start \n0, 0, 0\nfunc-end \nT destroyed \nT destroyed \nT destroyed \n</code></pre>\n<p>Working Draft, Standard for Programming Language C++ 2016-07-12: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4606.pdf\" rel=\"nofollow noreferrer\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4606.pdf</a></p>\n<blockquote>\n<p id=\"so_38837592_38837592_0\">\u00a7 5.2.2 Function call </p>\n<p id=\"so_38837592_38837592_1\">\u00a7 5.2.2 </p>\n<p id=\"so_38837592_38837592_2\">1 A function call is a postfix\n  expression followed by parentheses containing a possibly empty,\n  comma-separated list of initializer-clauses which constitute the\n  arguments to the function.</p>\n</blockquote>\n<p>But can be any of <strong>T created</strong> after <strong>func-start</strong>?</p>\n<p>Or is there any way to pass arguments as g/r/l/x/pr-value so that the function started before the temporary object be created?</p>\n<p><a href=\"https://i.stack.imgur.com/rIxo6.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/rIxo6.png\"/></a></p>\n", "AcceptedAnswerId": "38837675", "Title": "Does standard C++11 guarantee that temporary object passed to a function will have been created before function call?", "CreationDate": "2016-08-08T20:02:37.637", "Id": "38837592", "CommentCount": "3", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2016-08-08T20:14:05.163", "Score": "3", "OwnerUserId": "1558037", "Tags": "<c++><c++11><standards><lazy-sequences><sequence-points>", "AnswerCount": "2"}, "38837662": {"Id": "38837662", "PostTypeId": "2", "Body": "<p>From [expr.call]/8 we have</p>\n<blockquote>\n<p id=\"so_38837592_38837662_0\">[ Note: The evaluations of the postfix expression and of the arguments are all unsequenced relative to one another. All side effects of argument evaluations are sequenced before the function is entered (see 1.9). \u2014end note ]</p>\n</blockquote>\n<p>This means that all parameters are constructed before the function is entered.</p>\n<p>Consequently this also guarantees that all parameters are destroyed after the function exits.</p>\n", "LastEditorUserId": "4342498", "LastActivityDate": "2016-08-08T20:14:05.163", "Score": "7", "CreationDate": "2016-08-08T20:07:03.180", "ParentId": "38837592", "CommentCount": "0", "OwnerUserId": "4342498", "LastEditDate": "2016-08-08T20:14:05.163"}});