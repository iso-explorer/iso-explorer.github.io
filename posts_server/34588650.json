post_cb({"34588884": {"ParentId": "34588650", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>GCC has builtin support for the types <a href=\"https://gcc.gnu.org/onlinedocs/gcc/_005f_005fint128.html\"><code>__int128</code>, <code>unsigned __int128</code></a>, <code>__int128_t</code> and <code>__uint128_t</code> (the last two are undocumented). Use them to define your own types:</p>\n<pre><code>typedef __int128 int128_t;\ntypedef unsigned __int128 uint128_t;\n</code></pre>\n<hr>\n<p>Alternatively, you can use <code>__mode__(TI)</code>:</p>\n<pre><code>typedef int int128_t __attribute__((mode(TI)));\ntypedef unsigned int uint128_t __attribute__((mode(TI)));\n</code></pre>\n<p>Quoting the <a href=\"https://gcc.gnu.org/onlinedocs/gccint/Machine-Modes.html\">documentation</a>:</p>\n<blockquote>\n<p id=\"so_34588650_34588884_0\"><code>TImode</code></p>\n<p id=\"so_34588650_34588884_1\">\u201cTetra Integer\u201d (?) mode represents a sixteen-byte integer.</p>\n</blockquote>\n<p>Sixteen byte = 16 * CHAR_BIT &gt;= 128.</p>\n</hr>", "OwnerUserId": "1913824", "LastEditorUserId": "1913824", "LastEditDate": "2016-01-04T10:36:03.793", "Id": "34588884", "Score": "9", "CreationDate": "2016-01-04T10:17:53.257", "LastActivityDate": "2016-01-04T10:36:03.793"}, "34588650": {"CommentCount": "13", "AcceptedAnswerId": "34588884", "PostTypeId": "1", "LastEditorUserId": "4850040", "CreationDate": "2016-01-04T10:06:02.087", "LastActivityDate": "2016-09-05T10:33:38.247", "LastEditDate": "2016-09-05T10:33:38.247", "ViewCount": "9634", "FavoriteCount": "1", "Title": "uint128_t does not name a type", "Id": "34588650", "Score": "8", "Body": "<p>I am porting some code from C to C++. During the conversion I encountered:</p>\n<blockquote>\n<p id=\"so_34588650_34588650_0\"><code>uint128_t</code> does not name a type</p>\n</blockquote>\n<p>My compiler: gcc version 5.2.1<br>\nMy operating system: Ubuntu 15.1</br></p>\n<p>First and foremost; this compiled fine as C.\nI thought this would be resolved by including <code>stdint.h</code> but it has not. So far I have not tried anything else since there doesn't seem to be any other information on this error (<a href=\"https://www.google.nl/search?client=ubuntu&amp;channel=fs&amp;q=uint128_t%20does%20not%20name%20a%20type&amp;ie=utf-8&amp;oe=utf-8&amp;gfe_rd=cr&amp;ei=OUSKVsyaFom-oQfPx6mwAQ#channel=fs&amp;q=uint128_t%20does%20not%20name%20a%20type&amp;nirf=uint32_t%20does%20not%20name%20a%20type\" rel=\"noreferrer\">for example</a>). <code>uint128_t</code> is used throughout the entire program and is essential for the build, therefore I can not remove it, or use a different integer type.</p>\n<p>The code that sparks the error is widespread, for example:</p>\n<pre><code>union {\n    uint16_t  u16;\n    uint32_t  u32;\n    uint128_t u128;\n} value;\n</code></pre>\n<p>Is there any way to either define <code>uint128_t</code> or update my compiler to handle it correctly?</p>\n", "Tags": "<c++><c><types><integer>", "OwnerUserId": "1037960", "AnswerCount": "3"}, "34588976": {"ParentId": "34588650", "CommentCount": "0", "Body": "<p>As pointed out by other answer, C++ standard does not require 128 bit integer to be available, nor to be <code>typedef</code>ed as <code>uint128_t</code> even if present. If your compiler/architecture does not support 128 bit integers and you need them, you could use boost to emulate them:</p>\n<p><a href=\"http://www.boost.org/doc/libs/1_58_0/libs/multiprecision/doc/html/boost_multiprecision/tut/ints/cpp_int.html\" rel=\"nofollow\">http://www.boost.org/doc/libs/1_58_0/libs/multiprecision/doc/html/boost_multiprecision/tut/ints/cpp_int.html</a></p>\n<p>I think that the boost library will automatically use the native type if available</p>\n", "OwnerUserId": "686184", "PostTypeId": "2", "Id": "34588976", "Score": "0", "CreationDate": "2016-01-04T10:23:02.510", "LastActivityDate": "2016-01-04T10:23:02.510"}, "bq_ids": {"n4140": {"so_34588650_34588805_2": {"section_id": 6797, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_34588650_34588805_2": {"section_id": 6552, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_34588650_34588805_2": {"section_id": 8287, "quality": 0.6666666666666666, "length": 6}}}, "34588805": {"ParentId": "34588650", "PostTypeId": "2", "CommentCount": "6", "Body": "<blockquote>\n<p id=\"so_34588650_34588805_0\"><em>I thought this would be resolved by including <code>stdint.h</code> but it has not.</em></p>\n</blockquote>\n<p>Well, it may not. </p>\n<p>First to check the C++ header, <code>cstdint</code>, from C++14, chapter \u00a7 18.4.1,</p>\n<blockquote id=\"so_34588650_34588805_1\">\n<pre><code>namespace std {.....\n\ntypedef unsigned integer type uint8_t; // optional\ntypedef unsigned integer type uint16_t; // optional\ntypedef unsigned integer type uint32_t; // optional\ntypedef unsigned integer type uint64_t; // optional\n.....\n</code></pre>\n</blockquote>\n<p>and, </p>\n<blockquote>\n<p id=\"so_34588650_34588805_2\">The header defines all functions, types, and macros the same as 7.18 in the C standard. [..]</p>\n</blockquote>\n<p>Then quote the <code>C11</code> standard, chapter \u00a77.20.1.1 (<em>emphasis mine</em>)</p>\n<blockquote>\n<ol start=\"2\">\n<li><p id=\"so_34588650_34588805_3\">The typedef name <code>uintN_t</code> designates an unsigned integer type with width <code>N</code> and no\n  padding bits. Thus, <code>uint24_t</code> denotes such an unsigned integer type with a width of\n  exactly <code>24</code> bits.</p></li>\n<li><p id=\"so_34588650_34588805_4\"><strong>These types are optional. However, if an implementation provides integer types with\n  widths of 8, 16, 32, or 64 bits, no padding bits, and (for the signed types) that have a\n  two\u2019s complement representation, it shall define the corresponding typedef names.</strong></p></li>\n</ol>\n</blockquote>\n<p>So, here we notice two things.</p>\n<ol>\n<li><p>An implementation is not mandated to provide support for the fixed-width <code>int</code>s.</p></li>\n<li><p>Standard limits the width upto <code>64</code>, as we see it. having a width more than that is once again not mandated in the standard. You need to check the documentation of the environment in use.</p></li>\n</ol>\n", "OwnerUserId": "2173917", "LastEditorUserId": "2173917", "LastEditDate": "2016-01-04T10:30:23.370", "Id": "34588805", "Score": "2", "CreationDate": "2016-01-04T10:13:55.460", "LastActivityDate": "2016-01-04T10:30:23.370"}});