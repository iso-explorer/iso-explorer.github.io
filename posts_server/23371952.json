post_cb({"bq_ids": {"n4140": {"so_23371952_23372350_0": {"length": 12, "quality": 1.0, "section_id": 3894}}, "n3337": {"so_23371952_23372350_0": {"length": 12, "quality": 1.0, "section_id": 3754}}, "n4659": {"so_23371952_23372350_0": {"length": 12, "quality": 1.0, "section_id": 4780}}}, "23372350": {"Id": "23372350", "PostTypeId": "2", "Body": "<p>The <code>case</code> statement did not (in C++03) and still does not (in C++11) introduce a scope.</p>\n<p>The standard says in <code>[stmt.switch]</code> (6.4.2/6):</p>\n<blockquote>\n<p id=\"so_23371952_23372350_0\">case and default labels in themselves do not alter the flow of\n  control, which continues unimpeded across such labels.</p>\n</blockquote>\n<p>Thus it is allowed to \"fall through\" <code>case</code> statements like this:</p>\n<pre><code>int x, a = 1;\nswitch(a) {\ncase 1:\n    x = 5;\n    // no break here!\ncase 10:\n    x *= 4; // x is now 20.\n}\n</code></pre>\n<p>If you would introduce a varible declaration for example below the first <code>case</code> statement, it could be skipped when a jump to the second <code>case</code> statement would happen.</p>\n<p>You can however declare a local variable right at the start of the <code>switch</code> block:</p>\n<pre><code>switch (i) \n{\n    int j;\ncase 0: j = 0; break; \ncase 1: j = 0; break; \ncase 2: j = 0; break; \n}\n</code></pre>\n<p>A <code>switch</code> is really more a jump table than a series of <code>if</code>/<code>else if</code> statements.</p>\n", "LastEditorUserId": "316448", "LastActivityDate": "2014-04-29T20:50:39.637", "Score": "4", "CreationDate": "2014-04-29T18:20:41.060", "ParentId": "23371952", "CommentCount": "3", "OwnerUserId": "316448", "LastEditDate": "2014-04-29T20:50:39.637"}, "23372130": {"Id": "23372130", "PostTypeId": "2", "Body": "<p>You can not write this because of scope problem. Your code will lead to a redefinition of the variable <code>j</code></p>\n<p>In your code :</p>\n<pre><code>const int i = ...\nswitch (i) { case 0: int j = 0; break; } // the error should be linked to default statement that is not there\nswitch (i) { case 0: { int j = 0; } break; } // here  you define a local scope in which you can define `j` ; j will be destroyed after the closing bracket.\n</code></pre>\n<p>Even in c++11, trying to do this :</p>\n<pre><code>switch (i) \n{ \n  case 0: int j = 0; break; \n  case 1: int j = 0; break; \n  case 2: int j = 0; break; \n} \n</code></pre>\n<p>lead to the same error than if you want to write :</p>\n<pre><code>for ( ; ; ) {\n      int i = 0 ;\n      int i = 0 ;\n      int i = 0 ;\n}\n</code></pre>\n<p>That will lead to a redefinition error</p>\n", "LastActivityDate": "2014-04-29T18:08:38.783", "CommentCount": "1", "CreationDate": "2014-04-29T18:08:38.783", "ParentId": "23371952", "Score": "0", "OwnerUserId": "3457685"}, "23371952": {"ViewCount": "2321", "Body": "<p>I know that C++03 doesn't allow to define variables within switch block without using \ncurly braces.</p>\n<pre><code>const int i = ...\nswitch (i) { case 0: int j = 0; break; } // 1. error here\nswitch (i) { case 0: { int j = 0; } break; } // 2. ok\n</code></pre>\n<p>What is regarding new C++11 standard?\nDoes it allow first form?\nCan I also write something like this:</p>\n<pre><code>switch (i) \n{ \n  case 0: int j = 0; break; \n  case 1: int j = 0; break; \n  case 2: int j = 0; break; \n} \n</code></pre>\n", "Title": "C++11: Declare variable within switch statement", "CreationDate": "2014-04-29T17:58:23.557", "LastActivityDate": "2014-04-30T09:08:04.163", "CommentCount": "3", "LastEditDate": "2014-04-30T09:08:04.163", "PostTypeId": "1", "LastEditorUserId": "2061081", "Id": "23371952", "Score": "2", "OwnerUserId": "2061081", "Tags": "<c++><variables><c++11><switch-statement><definition>", "AnswerCount": "3"}, "23372431": {"Id": "23372431", "PostTypeId": "2", "Body": "<p>C++03 certainly allows you to define variables within the body of a switch statement. That body is not at all different from any other compound statement, the rules for jumping to a label apply the same way: you can only jump into scope of </p>\n<ul>\n<li>scalar types declared without initializers</li>\n<li>class types with trivial default constructors and trivial destructors declared without initializers</li>\n<li>arrays of the above</li>\n</ul>\n<p>these rules didn't change in C++11.</p>\n<pre><code>#include &lt;iostream&gt;\nint main()\n{\n    int n;\n    std::cin &gt;&gt; n;\n\n    switch(n)\n    {\n               int a;      // okay, scalar with no initializer\n       case 1: int b = 10; // okay, no more labels, no way jump into scope\n               a = b = 3*n;\n               break;\n    }\n</code></pre>\n", "LastActivityDate": "2014-04-29T18:24:22.613", "CommentCount": "0", "CreationDate": "2014-04-29T18:24:22.613", "ParentId": "23371952", "Score": "1", "OwnerUserId": "273767"}});