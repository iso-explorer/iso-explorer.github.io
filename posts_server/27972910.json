post_cb({"27973022": {"ParentId": "27972910", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>For class methods, the <code>this</code> part is considered as if it were an extra argument. So if you made the <code>CString</code> one const, that makes the overload set:</p>\n<pre><code>Comparison(const TestBed&amp;, CString const&amp;) // (1)\nComparison(TestBed&amp;, std::string const&amp;)   // (2)\n</code></pre>\n<p>For <code>(1)</code>, we need to do two conversions: a <code>const</code> conversion, and a conversion to <code>CString</code>. But for <code>(2)</code>, we only need to do a single conversion: to <code>std::string</code>. Thus, <code>(2)</code> is preferred.</p>\n<p>We can verify this by adding a third function that does one single conversion for <code>this</code>:</p>\n<pre><code>Comparison(const TestBed&amp;, const char*)  // (3)\n</code></pre>\n<p>Here, we again only have a single conversion (in the \"first\" argument), and thus the overload set is ambiguous. </p>\n<hr>\n<p>In [over.match.funcs]:</p>\n<blockquote>\n<p id=\"so_27972910_27973022_0\">a member function is considered to have an extra parameter, called the implicit object parameter, which\n  represents the object for which the member function has been called. For the purposes of overload resolution, both static and non-static member functions have an implicit object parameter, but constructors do not.</p>\n<p id=\"so_27972910_27973022_1\">For non-static member functions, the type of the implicit object parameter is</p>\n<p id=\"so_27972910_27973022_2\">\u2014 \u201clvalue reference to cv X\u201d for functions declared without a ref-qualifier or with the &amp; ref-qualifier</p>\n<p id=\"so_27972910_27973022_3\">\u2014 \u201crvalue reference to cv X\u201d for functions declared with the &amp;&amp; ref-qualifier</p>\n<p id=\"so_27972910_27973022_4\">where X is the class of which the function is a member and cv is the cv-qualification on the member\n  function declaration. [ Example: for a const member function of class X, the extra parameter is assumed to\n  have type \u201creference to const X\u201d. \u2014end example ]</p>\n<p id=\"so_27972910_27973022_5\">During overload resolution, the implied object argument is indistinguishable from other arguments.</p>\n</blockquote>\n<p>That establishes why we consider <code>const TestBed&amp;</code> vs <code>TestBed&amp;</code>. And then it's just a matter of comparison the conversion sequences between the overloads <code>(1)</code> and <code>(2)</code>. For the 2nd argument, both conversion sequences are equal, but for the 1st argument, <code>(2)</code> has a better conversion sequence (namely Exact) - which is why it wins without ambiguity. </p>\n</hr>", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2015-01-15T21:20:02.457", "Id": "27973022", "Score": "7", "CreationDate": "2015-01-15T21:09:02.223", "LastActivityDate": "2015-01-15T21:20:02.457"}, "27972910": {"CommentCount": "4", "ViewCount": "251", "PostTypeId": "1", "LastEditorUserId": "2069064", "CreationDate": "2015-01-15T21:01:38.503", "LastActivityDate": "2015-02-07T13:59:39.227", "Title": "How does const modifier for member functions affect overload resolution?", "AcceptedAnswerId": "27973022", "LastEditDate": "2015-02-07T13:59:39.227", "Id": "27972910", "Score": "8", "Body": "<p>I have the following test code:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nclass CString\n{\npublic:\n    CString(char const*) {}\n};\n\nclass TestBed\n{\npublic:\n    void Comparison(CString const&amp;) { std::cout &lt;&lt; \"CString Overload\" &lt;&lt; std::endl; }\n    void Comparison(std::string const&amp;) { std::cout &lt;&lt; \"std::string overload\" &lt;&lt; std::endl; }\n};\n\nint main()\n{\n    TestBed tb;\n    tb.Comparison(\"Hello World\");\n}\n</code></pre>\n<p>This code fails to compile because the call to <code>Comparison()</code> is ambiguous. I expect this behavior.</p>\n<p>However, when I make either of the <code>Comparison()</code> overloads <code>const</code>, as in: <code>void Comparison(std::string const&amp;) const</code> or <code>void Comparison(CString const&amp;) const</code> (but not both), the code compiles and chooses the non-const overload.</p>\n<p>Overload resolution rules are pretty complex and I haven't seen anything that describes how <code>const</code> affects this situation. My understanding is:</p>\n<ol>\n<li>Function with exact matching argument is chosen first</li>\n<li>1-level implicit conversion is tried next</li>\n</ol>\n<p>In both cases, 1 &amp; 2 are ambiguous. Can someone explain this? Thanks.</p>\n", "Tags": "<c++><c++11><overloading>", "OwnerUserId": "157971", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_27972910_27973022_1": {"section_id": 568, "quality": 0.875, "length": 7}, "so_27972910_27973022_2": {"section_id": 568, "quality": 1.0, "length": 6}, "so_27972910_27973022_4": {"section_id": 568, "quality": 0.8636363636363636, "length": 19}, "so_27972910_27973022_3": {"section_id": 568, "quality": 1.0, "length": 5}, "so_27972910_27973022_5": {"section_id": 569, "quality": 1.0, "length": 9}, "so_27972910_27973022_0": {"section_id": 566, "quality": 0.9333333333333333, "length": 28}}, "n3337": {"so_27972910_27973022_1": {"section_id": 559, "quality": 0.875, "length": 7}, "so_27972910_27973022_2": {"section_id": 559, "quality": 1.0, "length": 6}, "so_27972910_27973022_4": {"section_id": 559, "quality": 0.8636363636363636, "length": 19}, "so_27972910_27973022_3": {"section_id": 559, "quality": 1.0, "length": 5}, "so_27972910_27973022_5": {"section_id": 560, "quality": 1.0, "length": 9}, "so_27972910_27973022_0": {"section_id": 557, "quality": 0.9333333333333333, "length": 28}}, "n4659": {"so_27972910_27973022_1": {"section_id": 591, "quality": 0.875, "length": 7}, "so_27972910_27973022_2": {"section_id": 591, "quality": 1.0, "length": 6}, "so_27972910_27973022_4": {"section_id": 591, "quality": 0.8636363636363636, "length": 19}, "so_27972910_27973022_3": {"section_id": 591, "quality": 1.0, "length": 5}, "so_27972910_27973022_5": {"section_id": 592, "quality": 1.0, "length": 9}, "so_27972910_27973022_0": {"section_id": 589, "quality": 0.9333333333333333, "length": 28}}}});