post_cb({"31635036": {"ParentId": "31634962", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_31634962_31635036_0\">Since the value is legal</p>\n</blockquote>\n<p>How do you know that? <code>char</code>s signedness is implementation defined. And if it's unsigned, your code is ill-formed by narrowing - \u00a78.5.4/7:</p>\n<blockquote>\n<p id=\"so_31634962_31635036_1\">A <em>narrowing conversion</em> is an implicit conversion   <br>[\u2026]<br>   (7.4) \u2014\n  <strong>from an integer type [\u2026] to an integer type\n  that cannot represent all the values of the original type</strong>, except\n  where the source is a constant expression whose value after integral promotions will fit into the target type.</br></br></p>\n</blockquote>\n<p>\u00a78.5.1/2:</p>\n<blockquote>\n<p id=\"so_31634962_31635036_2\">If the <em>initializer-clause</em> is an expression and a narrowing conversion (8.5.4) is required to convert the expression, the program is ill-formed.</p>\n</blockquote>\n<p>However, if you need a signed <code>char</code>, use <code>signed char</code>.</p>\n<pre><code>signed char c[1] = {-108};\n</code></pre>\n<p>\u2026is guaranteed to work.</p>\n", "OwnerUserId": "3647361", "PostTypeId": "2", "Id": "31635036", "Score": "9", "CreationDate": "2015-07-26T08:27:56.683", "LastActivityDate": "2015-07-26T08:27:56.683"}, "38851748": {"ParentId": "31634962", "CommentCount": "0", "Body": "<p>This should be even better:</p>\n<pre><code>signed char c[] = { (signed char)(-108) };\n</code></pre>\n<p>Because in brackets the value could be treated as int by default.</p>\n", "OwnerUserId": "6695813", "PostTypeId": "2", "Id": "38851748", "Score": "-1", "CreationDate": "2016-08-09T13:11:11.990", "LastActivityDate": "2016-08-09T13:11:11.990"}, "31634962": {"CommentCount": "8", "ViewCount": "11868", "PostTypeId": "1", "LastEditorUserId": "2022010", "CreationDate": "2015-07-26T08:16:17.410", "LastActivityDate": "2016-08-09T13:11:11.990", "Title": "\"Narrowing conversion from 'int' to 'char' inside { }\" for legal values when cross compiling", "AcceptedAnswerId": "31635045", "LastEditDate": "2015-07-26T08:21:43.993", "Id": "31634962", "Score": "7", "Body": "<p>I have a C++ project that I compile both using <code>g++</code> on my machine (compiling to \"host\") and to an ARM processor using a cross compiler (in my case <code>arm-cortex_a8-linux-gnueabi-g++</code>). I am in the process of converting to C++0x/11 standart and there is an error I get when compiling initialization list, which I was able to reproduce in the following snippet:</p>\n<pre><code>int main(void) {\n    char c[1] = {-108};\n}\n</code></pre>\n<p>This program is seemingly correct as <code>-108</code> is a legal value for a <code>char</code>.\nCompiling this with <code>g++</code> yields no error with the following command line:</p>\n<pre><code>g++ example.cc -std=c++0x\n</code></pre>\n<p>However, when I compile with the cross-compiler, like so:</p>\n<pre><code>arm-cortex_a8-linux-gnueabi-g++ example.cc -std=c++0x\n</code></pre>\n<p>I get the following error:</p>\n<pre><code>example.cc: In function 'int main()':\nexample.cc:2:22: error: narrowing conversion of '-0x0000000000000006c' from 'int' to 'char' inside { } [-fpermissive]\n</code></pre>\n<p>Since the value is legal, this seems like a bug. Can you explain why I get this error and what to do to solve it?</p>\n<p><strong>Edit</strong>: note that using positive values (e.g., <code>108</code>) is legal and does not result in an error on both compilers.</p>\n", "Tags": "<c++><linux><c++11><cross-compiling>", "OwnerUserId": "2022010", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_31634962_31635036_1": {"section_id": 3329, "quality": 0.9655172413793104, "length": 28}, "so_31634962_31635036_2": {"section_id": 3299, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_31634962_31635036_1": {"section_id": 3199, "quality": 0.8620689655172413, "length": 25}, "so_31634962_31635036_2": {"section_id": 3169, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_31634962_31635036_1": {"section_id": 4095, "quality": 0.9655172413793104, "length": 28}, "so_31634962_31635036_2": {"section_id": 4065, "quality": 0.8888888888888888, "length": 8}}}, "31635045": {"ParentId": "31634962", "CommentCount": "0", "Body": "<p>When you declare a variable as <code>char</code>, it's implementation-dependent whether it's signed or unsigned. If you need to be able to store negative values, you should declare it <code>signed</code> explicitly, rather than relying on the implementation-defined default.</p>\n<pre><code>signed char c[1] = { -108 };\n</code></pre>\n", "OwnerUserId": "1491895", "PostTypeId": "2", "Id": "31635045", "Score": "12", "CreationDate": "2015-07-26T08:29:08.527", "LastActivityDate": "2015-07-26T08:29:08.527"}});