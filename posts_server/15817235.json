post_cb({"15817235": {"CommentCount": "0", "ViewCount": "238", "CreationDate": "2013-04-04T16:57:19.630", "LastActivityDate": "2013-04-04T17:56:30.113", "Title": "How do steady clocks interact with limited-bit time representations?", "PostTypeId": "1", "Id": "15817235", "Score": "4", "Body": "<p>20.11.7.2/1 begins:</p>\n<blockquote>\n<p id=\"so_15817235_15817235_0\">Objects of class <code>steady_clock</code> \n  represent clocks for which values of <code>time_point</code> never decrease as\n  physical time advances and for which values of <code>time_point</code> advance at a\n  steady rate relative to real time. That is, the clock may not be\n  adjusted.</p>\n</blockquote>\n<p>In concept, this is lovely, but given that there will almost certainly be a limited number of bits to represent a point in time, it's hard to imagine an implementation where a steady clock's value just keeps increasing forever.</p>\n<p>20.11.3/2 seems to back up my lack of imagination, because it refers (in a non-normative note) to a clock \"wrapping around.\" This suggests that if I have a <code>time_point t1</code> and a later <code>time_point t2</code> taken from the same steady clock, <code>t2</code> could appear to come earlier in time, because the clock could have wrapped between <code>t1</code> and <code>t2</code>.</p>\n<p>I find it very difficult to make sense of the Standard in this area. Can somebody lend clarity regarding the relationship and interaction of a steady clock and clock wrapping?</p>\n", "Tags": "<c++><c++11><chrono>", "OwnerUserId": "1426649", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_15817235_15817235_0": {"section_id": 4852, "quality": 0.9583333333333334, "length": 23}}, "n3337": {"so_15817235_15817235_0": {"section_id": 4647, "quality": 0.9583333333333334, "length": 23}}, "n4659": {"so_15817235_15817235_0": {"section_id": 6277, "quality": 0.9583333333333334, "length": 23}}}, "15817468": {"ParentId": "15817235", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2013-04-04T17:10:03.793", "Score": "3", "LastEditorUserId": "576911", "LastEditDate": "2013-04-04T17:56:30.113", "Id": "15817468", "OwnerUserId": "576911", "Body": "<p>Please submit a bug report when you actually witness the <code>steady_clock</code> roll over.  On my system, if I don't reboot my computer for the next 292 years, that will happen in the year 2305.  Sorry if I don't respond at that time. :-)</p>\n<p>Kidding around aside, the implementation is required to support a sufficiently large bit length such that a clock roll over can not be observed during a practical duration of time.  Counting nanoseconds in a 64 bit integer from the time of computer boot is one reasonable implementation of this.</p>\n", "LastActivityDate": "2013-04-04T17:56:30.113"}});