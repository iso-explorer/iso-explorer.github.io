post_cb({"bq_ids": {"n4140": {"so_42032760_42033473_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 6111}, "so_42032760_42033459_0": {"length": 11, "quality": 0.7333333333333333, "section_id": 7175}, "so_42032760_42033459_2": {"length": 16, "quality": 0.8, "section_id": 7183}, "so_42032760_42033459_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 7182}}, "n3337": {"so_42032760_42033459_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 6926}, "so_42032760_42033473_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 5877}, "so_42032760_42033459_2": {"length": 16, "quality": 0.8, "section_id": 6927}, "so_42032760_42033459_0": {"length": 11, "quality": 0.7333333333333333, "section_id": 6919}}, "n4659": {"so_42032760_42033459_1": {"length": 17, "quality": 0.9444444444444444, "section_id": 8690}, "so_42032760_42033473_0": {"length": 14, "quality": 1.0, "section_id": 7608}, "so_42032760_42033459_2": {"length": 19, "quality": 0.95, "section_id": 8691}, "so_42032760_42033459_0": {"length": 11, "quality": 0.7333333333333333, "section_id": 8683}}}, "42033459": {"Id": "42033459", "PostTypeId": "2", "Body": "<p>From [basic.stc.dynamic]:</p>\n<blockquote>\n<p id=\"so_42032760_42033459_0\">Any allocation and/or deallocation functions defined in a C++ program, including the default versions in the\n  library, shall confrm to the semantics specified in 3.7.4.1 and 3.7.4.2.</p>\n</blockquote>\n<p>From [basic.stc.dynamic.deallocation]:</p>\n<blockquote>\n<p id=\"so_42032760_42033459_1\">The value of the first argument supplied to a deallocation function <strong>may be a null pointer value</strong>; if so, and if the deallocation function is one supplied in the standard library, the call has no effect.  </p>\n<p id=\"so_42032760_42033459_2\">If the argument given to a deallocation function in the standard library is a pointer that is not the null\n  pointer value (4.11), the deallocation function shall deallocate the storage referenced by the pointer, ending\n  the duration of the region of storage.</p>\n</blockquote>\n<p>It's required that the deallocation function have no effect if provided a null pointer value. That basically is the same thing as requiring that the deallocation function ignore null pionter values. </p>\n", "LastActivityDate": "2017-02-03T21:42:40.873", "CommentCount": "5", "CreationDate": "2017-02-03T21:42:40.873", "ParentId": "42032760", "Score": "5", "OwnerUserId": "2069064"}, "42032760": {"ViewCount": "335", "Body": "<p>Is it required for user-defined and class-specific delete operators to ignore <code>nullptr</code> as that operators from standard library do?</p>\n<hr>\n<p>parallel <a href=\"https://groups.google.com/a/isocpp.org/forum/?fromgroups#!searchin/std-discussion/user-defined$20delete$20nullptr/std-discussion/isCFU1NcuV8/y8xBtWMeDwAJ\" rel=\"nofollow noreferrer\">discussion</a> at google groups.</p>\n</hr>", "Title": "c++ is it required to handle nullptr in user-defined and class-specific delete operators.?", "CreationDate": "2017-02-03T20:46:38.443", "LastActivityDate": "2017-02-09T11:31:33.767", "CommentCount": "11", "LastEditDate": "2017-02-09T11:31:33.767", "PostTypeId": "1", "LastEditorUserId": "4625005", "Id": "42032760", "Score": "16", "OwnerUserId": "4625005", "Tags": "<c++><language-lawyer><delete-operator><nullptr>", "AnswerCount": "2"}, "42033473": {"Id": "42033473", "PostTypeId": "2", "Body": "<p>From [expr.delete],</p>\n<blockquote>\n<p id=\"so_42032760_42033473_0\">If the value of the operand of the <em>delete-expression</em> is a null\n  pointer value, it is unspecified whether a deallocation function will be called as described above.</p>\n</blockquote>\n<p>So it sounds like your user defined or class specific delete operators to handle a <code>nullptr</code>.</p>\n<p>Elsewhere in [class.free], when describing deallocation functions for classes, classes with virtual destructors can have the deallocation function called based on the dynamic type.  In that case the deallocation function would not need to check for nullptr.</p>\n", "LastActivityDate": "2017-02-03T21:43:32.237", "CommentCount": "4", "CreationDate": "2017-02-03T21:43:32.237", "ParentId": "42032760", "Score": "6", "OwnerUserId": "5231607"}});