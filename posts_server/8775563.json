post_cb({"8775617": {"ParentId": "8775563", "CommentCount": "0", "Body": "<p>According to 7.3.4 [namespace.udir] paragraph 4 a namespace directive is transitive:</p>\n<blockquote>\n<p id=\"so_8775563_8775617_0\">For unqualified lookup nominates a second namespace that itself contains using-directives, the effect is as if the using-directives from the second namespace also appeared in the first.</p>\n</blockquote>\n<p>... and according to 7.3.1.1 [namespace.unnamed] paragraph 1 there is kind of an implicit using directive for the unnamed namespace:</p>\n<blockquote>\n<p id=\"so_8775563_8775617_1\">An unnamed-namespace-definition behaves as if it were replaced by  </p>\n<p id=\"so_8775563_8775617_2\">inline namespace unique { /* empty body */ }<br>\n     using namespace unique ;<br>\n     namespace unique { namespace-body }  </br></br></p>\n<p id=\"so_8775563_8775617_3\">where inline appears if and only if it appears in the unnamed-namespace-definition, all occurrences of unique in a translation unit are replaced by the same identifier, and this identifier differs from all other identifiers in the entire program.</p>\n</blockquote>\n<p>Thus, the answer is \"yes, this is supposed to compile\" (and it does with all C++ compilers I tried it with).</p>\n", "OwnerUserId": "1120273", "PostTypeId": "2", "Id": "8775617", "Score": "11", "CreationDate": "2012-01-08T05:30:15.093", "LastActivityDate": "2012-01-08T05:30:15.093"}, "8775610": {"ParentId": "8775563", "CommentCount": "0", "Body": "<p>Yes.</p>\n<p>This is because an anonymous namespace is automatically brought into the containing scope.</p>\n", "OwnerUserId": "16287", "PostTypeId": "2", "Id": "8775610", "Score": "3", "CreationDate": "2012-01-08T05:29:40.523", "LastActivityDate": "2012-01-08T05:29:40.523"}, "8775563": {"CommentCount": "3", "ViewCount": "1405", "LastActivityDate": "2017-07-19T14:40:13.613", "Body": "<p>When using a <code>using namespace</code> statement inside an anonymous namespace bring the namespace used in to the file scope? Eg:</p>\n<pre><code>namespace foo\n{\n    int f() { return 1; }\n}\nnamespace\n{\n    using namespace foo;\n}\nint a()\n{\n    return f(); // Will this compile?\n}\n</code></pre>\n", "PostTypeId": "1", "AcceptedAnswerId": "8775617", "FavoriteCount": "1", "Title": "\"using namespace\" statement inside an anonymous namespace", "Id": "8775563", "Score": "11", "CreationDate": "2012-01-08T05:16:25.053", "Tags": "<c++><namespaces>", "OwnerUserId": "359653", "AnswerCount": "3"}, "8775634": {"ParentId": "8775563", "LastEditDate": "2017-07-19T14:40:13.613", "CommentCount": "3", "CreationDate": "2012-01-08T05:34:06.447", "OwnerUserId": "368167", "LastEditorUserId": "25050", "PostTypeId": "2", "Id": "8775634", "Score": "1", "Body": "<p>Yes, because, as Dietmar K\u00fchl quoted, an anonymous namespace is replaced by its content.</p>\n<p>However, you should pay attention that it is replaced exactly where it is <strong>declared</strong> (edit), so there is no \"magic\" in this. For example, this won't work:</p>\n<pre><code>namespace foo\n{\n    int f() { return 1; }\n}\n\nint a()\n{\n    return f(); // Will this compile?\n}\n\nnamespace\n{\n    using namespace foo;\n}\n</code></pre>\n", "LastActivityDate": "2017-07-19T14:40:13.613"}, "bq_ids": {"n4140": {"so_8775563_8775617_1": {"section_id": 5482, "quality": 1.0, "length": 4}, "so_8775563_8775617_3": {"section_id": 5482, "quality": 0.9473684210526315, "length": 18}, "so_8775563_8775617_0": {"section_id": 5512, "quality": 0.9375, "length": 15}}, "n3337": {"so_8775563_8775617_1": {"section_id": 5268, "quality": 1.0, "length": 4}, "so_8775563_8775617_3": {"section_id": 5268, "quality": 0.9473684210526315, "length": 18}, "so_8775563_8775617_0": {"section_id": 5298, "quality": 0.9375, "length": 15}}, "n4659": {"so_8775563_8775617_1": {"section_id": 6917, "quality": 1.0, "length": 4}, "so_8775563_8775617_3": {"section_id": 6917, "quality": 0.8947368421052632, "length": 17}, "so_8775563_8775617_0": {"section_id": 6947, "quality": 0.9375, "length": 15}}}});