post_cb({"295154": {"ParentId": "295120", "CommentCount": "0", "CreationDate": "2008-11-17T09:14:03.603", "OwnerUserId": "7891", "Id": "295154", "PostTypeId": "2", "OwnerDisplayName": "R.A", "Score": "4", "Body": "<p>Dealing with portable projects it's almost inevitable that you at some point need a section of preprocessed alternatives for a range of platforms. #ifdef this #ifdef that and so on. </p>\n<p>In such a section you could very well conditionally define a way to deprecate symbols. My preference is usually to define a \"warning\" macro since most toolchains support custom compiler warnings. Then you can go on with a specific warning macro for deprecation etc.\nFor the platforms supporting dedicated deprecation methods you can use that instead of warnings.</p>\n", "LastActivityDate": "2008-11-17T09:14:03.603"}, "295120": {"CommentCount": "0", "ViewCount": "54744", "PostTypeId": "1", "LastEditorUserId": "3747990", "FavoriteCount": "36", "CreationDate": "2008-11-17T08:51:29.670", "LastActivityDate": "2014-09-15T10:20:08.583", "LastEditDate": "2014-09-15T10:20:08.583", "AcceptedAnswerId": "295229", "LastEditorDisplayName": "Greg Hewgill", "Title": "C++ mark as deprecated", "Id": "295120", "Score": "109", "Body": "<p>I have a method in an interface that I want to deprecate with portable C++.\nWhen I Googled for this all I got was a Microsoft specific solution; <a href=\"http://msdn.microsoft.com/en-us/library/c8xdzzhh(VS.80).aspx\" rel=\"noreferrer\">#pragma deprecated</a> and <a href=\"http://msdn.microsoft.com/en-us/library/044swk7y(VS.80).aspx\" rel=\"noreferrer\">__declspec(deprecated)</a>.</p>\n<p>A second prize solution would be to ifdef a MSVC and a GCC solution.<br>\nThanks</br></p>\n", "Tags": "<c++>", "OwnerUserId": "8524", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_295120_21192071_0": {"section_id": 5549, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_295120_21192071_0": {"section_id": 6980, "quality": 0.9333333333333333, "length": 14}}}, "295229": {"CommentCount": "12", "CreationDate": "2008-11-17T10:09:41.137", "LastEditorUserId": "-1", "LastActivityDate": "2014-01-21T17:39:22.200", "ParentId": "295120", "LastEditDate": "2017-05-23T12:26:36.137", "LastEditorDisplayName": "Michael", "PostTypeId": "2", "Id": "295229", "Score": "115", "Body": "<p>This should do the trick:</p>\n<pre><code>#ifdef __GNUC__\n#define DEPRECATED(func) func __attribute__ ((deprecated))\n#elif defined(_MSC_VER)\n#define DEPRECATED(func) __declspec(deprecated) func\n#else\n#pragma message(\"WARNING: You need to implement DEPRECATED for this compiler\")\n#define DEPRECATED(func) func\n#endif\n\n...\n\n//don't use me any more\nDEPRECATED(void OldFunc(int a, float b));\n\n//use me instead\nvoid NewFunc(int a, double b);\n</code></pre>\n<p>However, you will encounter problems if a function return type has a commas in its name e.g. <code>std::pair&lt;int, int&gt;</code> as this will be interpreted by the preprocesor as passing 2 arguments to the DEPRECATED macro. In that case you would have to typedef the return type.</p>\n<p>Edit: simpler (but possibly less widely compatible) version <a href=\"https://stackoverflow.com/a/21265197/2651243\">here</a>.</p>\n", "OwnerUserId": "2651243", "OwnerDisplayName": "Michael"}, "21265197": {"ParentId": "295120", "LastEditDate": "2017-05-23T11:55:11.427", "CommentCount": "6", "CreationDate": "2014-01-21T17:33:49.147", "Score": "38", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "21265197", "OwnerUserId": "2651243", "Body": "<p>Here's a simplified version of my <a href=\"https://stackoverflow.com/a/295229/2651243\">2008 answer</a>:</p>\n<pre><code>#ifdef __GNUC__\n#define DEPRECATED __attribute__((deprecated))\n#elif defined(_MSC_VER)\n#define DEPRECATED __declspec(deprecated)\n#else\n#pragma message(\"WARNING: You need to implement DEPRECATED for this compiler\")\n#define DEPRECATED\n#endif\n\n//...\n\n//don't use me any more\nDEPRECATED void OldFunc(int a, float b);\n\n//use me instead\nvoid NewFunc(int a, double b);\n</code></pre>\n", "LastActivityDate": "2014-01-21T17:33:49.147"}, "295149": {"CommentCount": "0", "CreationDate": "2008-11-17T09:11:43.047", "LastEditorUserId": "365496", "LastActivityDate": "2012-06-13T15:21:57.490", "ParentId": "295120", "LastEditDate": "2012-06-13T15:21:57.490", "OwnerDisplayName": "Terje Mikal", "PostTypeId": "2", "Id": "295149", "Score": "21", "Body": "<p>In GCC you can declare your function with the attribute deprecated like this:</p>\n<pre><code>void myfunc() __attribute__ ((deprecated));\n</code></pre>\n<p>This will trigger a compile-time warning when that function is used in a .c file.</p>\n<p>You can find more info under \"Diagnostic pragmas\" at \n<a href=\"http://gcc.gnu.org/onlinedocs/gcc/Pragmas.html\" rel=\"noreferrer\">http://gcc.gnu.org/onlinedocs/gcc/Pragmas.html</a></p>\n", "OwnerUserId": "37570"}, "21192071": {"ParentId": "295120", "LastEditDate": "2014-09-15T10:16:43.497", "CommentCount": "2", "CreationDate": "2014-01-17T17:24:43.110", "Score": "118", "LastEditorUserId": "150634", "PostTypeId": "2", "Id": "21192071", "OwnerUserId": "150634", "Body": "<p>In C++14, you can mark a function as deprecated using the <code>[[deprecated]]</code> attribute (see section 7.6.5 [dcl.attr.deprecated]).</p>\n<blockquote>\n<p id=\"so_295120_21192071_0\">The <em>attribute-token</em> <code>deprecated</code> can be used to mark names and entities whose use is still allowed, but is discouraged for some reason.</p>\n</blockquote>\n<p>For example, the following function <code>foo</code> is deprecated:</p>\n<pre><code>[[deprecated]]\nvoid foo(int);\n</code></pre>\n<p>It is possible to provide a message that describes why the name or entity was deprecated:</p>\n<pre><code>[[deprecated(\"Replaced by bar, which has an improved interface\")]]\nvoid foo(int);\n</code></pre>\n<p>The message must be a string literal.</p>\n<p>For further details, see <a href=\"http://josephmansfield.uk/articles/marking-deprecated-c++14.html\" rel=\"noreferrer\">\u201cMarking as deprecated in C++14\u201d</a>.</p>\n", "LastActivityDate": "2014-09-15T10:16:43.497"}});