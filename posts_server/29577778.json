post_cb({"bq_ids": {"n4140": {"so_29577778_29577884_0": {"length": 25, "quality": 0.9259259259259259, "section_id": 5421}}, "n3337": {"so_29577778_29577884_0": {"length": 16, "quality": 0.5925925925925926, "section_id": 5216}}, "n4659": {"so_29577778_29577884_0": {"length": 20, "quality": 0.7407407407407407, "section_id": 6843}}}, "29577778": {"ViewCount": "473", "Body": "<p>I have read that <code>constexpr</code> function return type can be a non const and also in my book there is a code like this: </p>\n<pre><code>constexpr bool isShorter(const string&amp; str1, const string&amp; str2)\n{\n    return str1.size() &lt; str2.size();\n}\n</code></pre>\n<p>but there is an error under <code>str1.size()</code> that says: <code>constexpr</code>function return is non-const. According to the book it must be right but the compiler disagree.</p>\n<p>Also every time I use <code>constexpr</code> in different codes there is always this error: <strong>missing type specifier - int assumed. Note: C++ does not support default-int</strong>. But I don't know what it means.</p>\n", "Title": "can constexpr function return type be a non const?", "CreationDate": "2015-04-11T12:17:34.897", "Id": "29577778", "CommentCount": "15", "LastEditDate": "2015-04-11T12:51:02.993", "PostTypeId": "1", "LastEditorUserId": "520217", "LastActivityDate": "2015-04-11T12:51:02.993", "Tags": "<c++>", "Score": "-3", "OwnerUserId": "4719663", "ClosedDate": "2015-04-11T17:15:03.930", "AnswerCount": "2"}, "29577859": {"Id": "29577859", "PostTypeId": "2", "Body": "<p><code>constexpr</code> means the function returns a value that the compiler can determine before the program is run.</p>\n<p><code>const</code> just means the function, when called, does not change the object at run time.</p>\n<p>The contents of a <code>std::string</code> are not fixed at compile time, so the <code>size()</code> method is <code>const</code> (e.g. calling it will not change a string containing data <code>\"ABCD\"</code> into <code>\"ABCDEFG\"</code>) but is not constexpr (the length of a <code>std::string</code> is not fixed at compile time, because the string can be populated at run time - such as based on user input).</p>\n<p>This assumes compiling for C++11 or later - earlier versions of C++ do not support <code>constexpr</code>.</p>\n", "LastActivityDate": "2015-04-11T12:26:40.713", "CommentCount": "0", "CreationDate": "2015-04-11T12:26:40.713", "ParentId": "29577778", "Score": "0", "OwnerUserId": "4706785"}, "29577884": {"Id": "29577884", "PostTypeId": "2", "Body": "<p>No, the return value must be a constant expression for at least one set of possible inputs. </p>\n<p>N3797 \u00a77.1.5 [dcl.constexpr]/5 says:</p>\n<blockquote>\n<p id=\"so_29577778_29577884_0\">For a non-template, non-defaulted constexpr function or a\n  non-template, non-defaulted, non-inheriting constexpr constructor, if\n  no argument values exist such that an invocation of the function or\n  constructor could be an evaluated subexpression of a core constant\n  expression (5.19), the program is ill-formed; no diagnostic required.</p>\n</blockquote>\n<p>Since <code>std::string::size</code> is not <code>constexpr</code>, there is no possible case where the return value is a constant expression.</p>\n", "LastActivityDate": "2015-04-11T12:29:12.303", "CommentCount": "0", "CreationDate": "2015-04-11T12:29:12.303", "ParentId": "29577778", "Score": "5", "OwnerUserId": "962089"}});