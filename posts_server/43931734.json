post_cb({"43931925": {"CommentCount": "1", "Body": "<p>Quote from C++'03 Standard 14.2/4:</p>\n<blockquote>\n<p id=\"so_43931734_43931925_0\">When the name of a member template specialization appears after . or\n  -&gt; in a postfix-expression, or after nested-name-specifier in a qualified-id, and the postfix-expression or qualified-id explicitly\n  depends on a template-parameter (14.6.2), the member <strong>template</strong> name\n  must be prefixed by the keyword template. Otherwise the name is\n  assumed to name a non-template.</p>\n</blockquote>\n<pre><code>Factory&lt;T1&gt;::get_instance()-&gt; template add&lt;T2&gt;(name);\n</code></pre>\n<p>Btw, some compilers has special mode that allows to compile original code without errors</p>\n", "CreationDate": "2017-05-12T07:32:23.220", "ParentId": "43931734", "Id": "43931925", "LastActivityDate": "2017-05-12T07:32:23.220", "PostTypeId": "2", "Score": "0", "OwnerUserId": "3552478"}, "43931734": {"CreationDate": "2017-05-12T07:22:35.187", "ViewCount": "51", "Id": "43931734", "Score": "1", "Title": "static template function in template class", "LastEditorUserId": "3684343", "CommentCount": "3", "Body": "<p>Here we have two template classes.</p>\n<p>The first one named \"Factory\", it't a singleton-Factory-Model class and have a template-member-function that is responsible for registering class-producer in this factory.</p>\n<p>The second named \"FactoryRegister\", it's only duty is to register T2 in Factory T1.</p>\n<p>In the end, we have a macro that declare a FactoryRegister variable, by using this macro in global scope, we realise that register all classes in factories before our program is running.</p>\n<pre><code>#include &lt;memory&gt;\n#include &lt;mutex&gt;\n#include &lt;map&gt;\n#include &lt;string&gt;\n\ntemplate &lt;typename Base&gt;\nclass Factory {\npublic:\n\n    static std::shared_ptr&lt;Factory&lt;Base&gt; &gt; get_instance() {\n        static std::shared_ptr&lt;Factory&gt; factory;\n        if (!factory) {\n            static std::mutex _new_mutex;\n            std::lock_guard&lt;std::mutex&gt; guard(_new_mutex);\n            if (!factory) {\n                factory.reset(new Factory);\n            }\n        }\n\n        return factory;\n    }\n\n    template &lt;typename Derived,\n              typename = typename std::enable_if&lt;std::is_base_of&lt;Base, Derived&gt;::value&gt;::type&gt;\n    void add(std::string pname) {\n        std::lock_guard&lt;std::mutex&gt; guard(_mutex);\n        _producers.emplace(pname, [](std::string name) {return new Derived(name);});\n    }\n\n    void del(std::string pname) {\n        std::lock_guard&lt;std::mutex&gt; guard(_mutex);\n        _producers.erase(pname);\n    }\n\n    bool is_exist(std::string pname) {\n        return _producers.find(pname) != _producers.end();\n    }\n\n    std::shared_ptr&lt;Base&gt; create(std::string pname, std::string name) {\n        std::shared_ptr&lt;Base&gt; ret;\n        if (is_exist(pname)) {\n            ret.reset(_producers[pname](name));\n        }\n        return ret;\n    }\n\nprivate:\n    Factory() = default;\n\n    Factory(const Factory&amp;) = delete;\n\n    Factory&amp; operator=(Factory&amp;) = delete;\n\nprivate:\n    std::mutex _mutex;\n    std::map&lt;std::string, std::function&lt;Base*(std::string)&gt; &gt; _producers;\n};\n\ntemplate&lt;typename T1, typename T2&gt;\nstruct FactoryRegister {\n    FactoryRegister(std::string name) {\n        Factory&lt;T1&gt;::get_instance()-&gt;add&lt;T2&gt;(name);\n    }\n};\n\n#define REGISTER_TO_FACTORY(BaseClass, DerivedClass) \\\n    const FactoryRegister&lt;BaseClass, DerivedClass&gt; \\\n    REGISTER_WITH_##BaseClass_##DerivedClass(#DerivedClass)\n</code></pre>\n<p>with codes, the compiler(gcc4.8.2) show below:</p>\n<pre><code>factory.h: In constructor 'FactoryRegister&lt;T1, T2&gt;::FactoryRegister(std::string)':\nfactory.h:62:44: error: expected primary-expression before '&gt;' token\n         Factory&lt;T1&gt;::get_instance()-&gt;add&lt;T2&gt;(name);\n</code></pre>\n<p>Could any body tell the reason ?</p>\n", "Tags": "<c++><templates>", "LastEditDate": "2017-05-12T07:27:10.297", "LastActivityDate": "2017-05-12T07:32:23.220", "PostTypeId": "1", "AnswerCount": "1", "OwnerUserId": "8001305"}, "bq_ids": {"n4140": {"so_43931734_43931925_0": {"length": 25, "quality": 0.8620689655172413, "section_id": 72}}, "n3337": {"so_43931734_43931925_0": {"length": 25, "quality": 0.8620689655172413, "section_id": 67}}}});