post_cb({"40801765": {"CommentCount": "9", "ViewCount": "90", "CreationDate": "2016-11-25T09:38:51.390", "LastActivityDate": "2016-11-25T10:04:36.893", "Title": "Is it an Rvalue or Lvalue After a Cast", "AcceptedAnswerId": "40802025", "PostTypeId": "1", "Id": "40801765", "Score": "0", "Body": "<p>The code here test for lvalue or rvalue after a type cast:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\ntemplate &lt;typename T&gt;\nT const f1(T  const &amp;t) {\n  printf(\"T const \\n\");\n  return t;\n}\ntemplate &lt;typename T&gt;\nT  f1(T  &amp;t) {\n  printf(\"T\\n\");\n  return t;\n}\nstruct KK {\n  int a;\n};\n\nint main()\n{\n  KK kk;\n  kk.a=0;\n\n  int ii;\n  f1(kk);\n  f1((KK)kk);\n\n  f1(ii);\n  f1((int)ii);\n return 0;\n}\n</code></pre>\n<p>In gcc <a href=\"http://coliru.stacked-crooked.com/a/8ccf850f3bcaa11d\" rel=\"nofollow noreferrer\">link</a> the result is like this indicating rvalue resulted after a type cast:</p>\n<pre><code>T\nT const \nT\nT const \n</code></pre>\n<p>But in VC++2010, this is the result indicating rvalue only if it is a class type:</p>\n<pre><code>T\nT const\nT\nT\n</code></pre>\n<p>So is it a compiler bug or just some undefined behaviour when type cast to int?</p>\n", "Tags": "<c++><compiler-bug><lvalue-to-rvalue>", "OwnerUserId": "237575", "AnswerCount": "1"}, "40802025": {"ParentId": "40801765", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>From <a href=\"http://eel.is/c++draft/expr.cast#1\" rel=\"nofollow noreferrer\">expr.cast</a> (this is applicable from C++11 and later)</p>\n<blockquote>\n<p id=\"so_40801765_40802025_0\">The result of the expression (T) cast-expression is of type T. The result is an lvalue if T is an lvalue reference type or an rvalue reference to function type and an xvalue if T is an rvalue reference to object type; <strong>otherwise the result is a prvalue</strong>. [ Note: If T is a non-class type that is cv-qualified, the cv-qualifiers are discarded when determining the type of the resulting prvalue; see Clause [expr].  \u2014 end note ]</p>\n</blockquote>\n<hr>\n<p>For C++98:</p>\n<blockquote>\n<p id=\"so_40801765_40802025_1\">The result of the expression (T) cast-expression is of type T. The result is an lvalue if T is a reference type, otherwise the result is an rvalue. [ Note: if T is a non-class type that is cv-qualified, the cv-qualifiers are ignored when determining the type of the resulting rvalue; see 3.10. \u2014 end note ]</p>\n</blockquote>\n<p>Then, gcc is right</p>\n<hr>\n<p>From mkaes's comment, it seems like this is the <em>(arguably useful) MSVC extension</em></p>\n</hr></hr>", "OwnerUserId": "4115625", "LastEditorUserId": "4115625", "LastEditDate": "2016-11-25T10:04:36.893", "Id": "40802025", "Score": "1", "CreationDate": "2016-11-25T09:50:36.290", "LastActivityDate": "2016-11-25T10:04:36.893"}, "bq_ids": {"n4140": {"so_40801765_40802025_1": {"section_id": 6123, "quality": 0.6785714285714286, "length": 19}, "so_40801765_40802025_0": {"section_id": 6123, "quality": 0.8461538461538461, "length": 33}}, "n3337": {"so_40801765_40802025_1": {"section_id": 5887, "quality": 0.7142857142857143, "length": 20}, "so_40801765_40802025_0": {"section_id": 5887, "quality": 0.7948717948717948, "length": 31}}, "n4659": {"so_40801765_40802025_1": {"section_id": 7620, "quality": 0.6785714285714286, "length": 19}, "so_40801765_40802025_0": {"section_id": 7620, "quality": 0.8461538461538461, "length": 33}}}});