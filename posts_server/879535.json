post_cb({"879793": {"ParentId": "879535", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>This is a common point of confusion for many (including the Generic Programming page on Wikipedia, some C++ tutorials, and other answers on this page).  As far as C++ is concerned, <strong>there is no such thing as a \"template class,\" there is only a \"class template.\"</strong>  The way to read that phrase is \"a template for a class,\" as opposed to a \"function template,\" which is \"a template for a function.\"  <strong>Again: classes do not define templates, templates define classes</strong> (and functions).  For example, this is a <em>template</em>, specifically a <em>class template</em>, but <em>it is <strong>not</strong> a class</em>:</p>\n<pre><code>template&lt;typename T&gt; class MyClassTemplate\n{ \n    ...\n};\n</code></pre>\n<p>The declaration <code>MyClassTemplate&lt;int&gt;</code> <strong>is a class,</strong> or pedantically, a class based on a template.  <em>There are no special properties of a class based on a template vs. a class not based on a template.</em>  The special properties are <em>of the template itself</em>.</p>\n<p>The phrase \"template class\" means nothing, because the word \"template\" has no meaning as an adjective when applied to the noun \"class\" as far as C++ is concerned.  It implies the existence of a <em>class</em> that <strong>is</strong> (or defines) a <em>template</em>, which is not a concept that exists in C++.</p>\n<p>I understand the common confusion, as it is probably based on the fact that the words appear in the order \"template class\" in the actual language, which is a whole other story.</p>\n", "OwnerUserId": "63136", "LastEditorUserId": "34509", "LastEditDate": "2012-05-17T11:10:39.580", "Id": "879793", "Score": "94", "CreationDate": "2009-05-18T20:54:25.457", "LastActivityDate": "2012-05-17T11:10:39.580"}, "879535": {"CommentCount": "0", "AcceptedAnswerId": "879793", "CreationDate": "2009-05-18T20:07:06.673", "LastActivityDate": "2016-09-24T22:36:06.247", "PostTypeId": "1", "ViewCount": "24713", "FavoriteCount": "23", "Title": "What is the difference between a template class and a class template?", "Id": "879535", "Score": "67", "Body": "<p>What is the difference between a template class and a class template?</p>\n", "Tags": "<c++>", "OwnerUserId": "108989", "AnswerCount": "6"}, "39681575": {"ParentId": "879535", "CommentCount": "1", "Body": "<p>Bjarne Stroustrup, the creator of C++, says in his book <em>The C++ Programming Language 4th edition</em>, 23.2.1 Defining a Template:</p>\n<blockquote>\n<p id=\"so_879535_39681575_0\">There are people who make semantic distinctions between the terms <em>class template</em> and <em>template class</em>. I don't; that would be too subtle: please consider those terms interchangeable. Similarly, I consider <em>function template</em> interchangeable with <em>template function</em>.</p>\n</blockquote>\n", "OwnerUserId": "894233", "PostTypeId": "2", "Id": "39681575", "Score": "4", "CreationDate": "2016-09-24T22:36:06.247", "LastActivityDate": "2016-09-24T22:36:06.247"}, "880323": {"ParentId": "879535", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The difference is that the term \"template class\" does simply not exist in the C++ Standard. It's a term used mostly by people that think that the term \"class template\" is confusing (like the Qt companies Nokia and formerly Trolltech). </p>\n<p>The Standard has no concept of it, so it's up to other peoples to make a difference. Some people use it synonymously, and others say that the term \"template class\" refers to an instantiated or explicitly specialized class template, which would make it equivalent to the term \"class template specialization\". Historyically, it had this meaning. The <a href=\"http://rads.stackoverflow.com/amzn/click/0201514591\" rel=\"noreferrer\">Annotated Reference Manual</a> defines at page 343</p>\n<blockquote>\n<p id=\"so_879535_880323_0\">A class generated from a class template is called a template class, as is a class specifically defined with a <em>template-class-name</em> as its name</p>\n</blockquote>\n<p>The non-terminal <em>template-class-name</em> is equivalent to the non-terminal <em>template-id</em> used in todays Standard and comes down <code>template-name &lt; arguments &gt;</code>. </p>\n<hr>\n<p>To get you familiar with the today terms, which is more important than using dubious old terms</p>\n<pre><code>// (1) defines a class template\ntemplate&lt;typename T&gt; class A { }; \n\n// (2) defines a class template explicit specialization \ntemplate&lt;&gt; class A&lt;int&gt; { };\n\n// (3) defines a class template partial specialization\ntemplate&lt;typename T&gt; class A&lt;T*&gt; { };\n\n// (4) explicitly instantiates A&lt;char&gt;. \ntemplate class A&lt;char&gt;;\n\n// (5) implicitly instantiates A&lt;short&gt; (because of the member declaration)\nstruct D { A&lt;short&gt; a; };\n</code></pre>\n<ul>\n<li>The ARM called the class (2), and the classes generated by (4) and (5) a <em>template class</em>. I'm not sure whether the ARM already knew about partial specializations. But if so (3) was not called a template class, because (3) does not define a class, but defines a template. </li>\n<li>The current Standard calls class (2), and the ones generated by (4) and (5) <em>class template specializations</em>. And (3) is called a <em>partial specialization</em>, as opposed to an <em>explicit specialization</em>. It also sometimes calls (3) a specialization (3.2/5 - however with clarifying cross-links), although i find this isn't entirely clear to me, since it defines a \"specialization\" as being a \"class, function or class member\", which (3) doesn't satisfy. </li>\n</ul>\n</hr>", "OwnerUserId": "34509", "LastEditorUserId": "34509", "LastEditDate": "2014-04-20T09:37:01.963", "Id": "880323", "Score": "11", "CreationDate": "2009-05-18T23:44:23.193", "LastActivityDate": "2014-04-20T09:37:01.963"}, "33877842": {"ParentId": "879535", "CommentCount": "0", "Body": "<p>Template class: A class that has generic definition or a class with parameters which is not instantiated until the information is provided by the client. It is referred to a jargon for plain templates.simply class with prefix template  and use of T .                               Class template: The individual construction of a class is specified by a class template which is almost similar the way how individual objects are constructed by using a class. It is referred to a object of the template class Ex- classname objectname(argument list)</p>\n", "OwnerUserId": "5596461", "PostTypeId": "2", "Id": "33877842", "Score": "0", "CreationDate": "2015-11-23T18:19:02.790", "LastActivityDate": "2015-11-23T18:19:02.790"}, "879550": {"ParentId": "879535", "CommentCount": "1", "Body": "<p>A template class is related to the <a href=\"http://en.wikipedia.org/wiki/Template_method_pattern\" rel=\"noreferrer\">Template Method design pattern</a>, while class template is just a \"fill-in-the-blanks\" class template.</p>\n", "OwnerUserId": "81520", "PostTypeId": "2", "Id": "879550", "Score": "7", "CreationDate": "2009-05-18T20:10:22.067", "LastActivityDate": "2009-05-18T20:10:22.067"}, "bq_ids": {"n4140": {"so_879535_880323_0": {"section_id": 110, "quality": 0.6153846153846154, "length": 8}}, "n3337": {"so_879535_880323_0": {"section_id": 105, "quality": 0.6153846153846154, "length": 8}}, "n4659": {"so_879535_880323_0": {"section_id": 114, "quality": 0.6153846153846154, "length": 8}}}, "37889113": {"ParentId": "879535", "CommentCount": "0", "Body": "<p>Class template is a generic class for different types of objects. Basically it provides a specification for generating classes based on parameters. Whenever a new object is created a new class will take place in the memory for that purpose. This is called instantiating a class template and each instantiated version of the class is called template class.</p>\n", "OwnerUserId": "6452448", "PostTypeId": "2", "Id": "37889113", "Score": "0", "CreationDate": "2016-06-17T19:32:48.600", "LastActivityDate": "2016-06-17T19:32:48.600"}});