post_cb({"21897015": {"CommentCount": "0", "ViewCount": "664", "PostTypeId": "1", "LastEditorUserId": "819272", "CreationDate": "2014-02-20T02:41:23.463", "LastActivityDate": "2014-03-03T18:01:10.563", "Title": "C++14: can you call new in a constexpr?", "AcceptedAnswerId": "21897696", "LastEditDate": "2014-03-03T18:01:10.563", "Id": "21897015", "Score": "4", "Body": "<p>When C++14 lifted restrictions on <code>constexpr</code> it seemed to include the following (copied from <a href=\"http://en.wikipedia.org/wiki/C++14#Relaxed_constexpr_restrictions\" rel=\"nofollow\">Wikipedia</a>):</p>\n<blockquote>\n<p id=\"so_21897015_21897015_0\">Expressions may change the value of an object if the lifetime of that\n  object began within the constant expression function. This includes\n  calls to any non-const constexpr-declared non-static member functions.</p>\n</blockquote>\n<p>That seems to imply that you could create an object using <code>new</code> and as long as you <code>delete</code> it within the expression, then it would be allowed.</p>\n", "Tags": "<c++><c++11><language-lawyer><c++14>", "OwnerUserId": "2963099", "AnswerCount": "2"}, "21897696": {"ParentId": "21897015", "CommentCount": "1", "Body": "<p>Language lawyer answer. All references to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf\" rel=\"noreferrer\">N3797</a>.</p>\n<p>7.1.5/5 states:</p>\n<blockquote>\n<p id=\"so_21897015_21897696_0\">For a non-template, non-defaulted <code>constexpr</code> function or a non-template, non-defaulted, non-inheriting <code>constexpr</code> constructor, if no argument values exist such that an invocation of the function or constructor could be an evaluated  subexpression of a core constant expression (5.19), the program is ill-formed; no diagnostic required.</p>\n</blockquote>\n<p>Jumping over to 5.19, we see:</p>\n<blockquote>\n<p id=\"so_21897015_21897696_1\">A <em>conditional-expression</em> <code>e</code> is a <em>core constant expression</em> unless the evaluation of <code>e</code>, following the rules of the abstract machine (1.9), would evaluate one of the following expressions:</p>\n<ul>\n<li><p id=\"so_21897015_21897696_2\">... [lots of bullets]...</p></li>\n<li><p id=\"so_21897015_21897696_3\">a <em>new-expression</em> (5.3.4);</p></li>\n<li><p id=\"so_21897015_21897696_4\">a <em>delete-expression</em> (5.3.5);</p></li>\n<li><p id=\"so_21897015_21897696_5\">... [lots more bullets]...</p></li>\n</ul>\n</blockquote>\n<p>So no: a program containing a <code>constexpr</code> function with a <code>new</code> or <code>delete</code> in it is ill-formed, no diagnostic required. (I'd be surprised, however, if any half-decent compiler failed to diagnose instances of <code>new</code> or <code>delete</code> in a <code>constexpr</code> function, required or not.)</p>\n", "OwnerUserId": "923854", "PostTypeId": "2", "Id": "21897696", "Score": "7", "CreationDate": "2014-02-20T03:49:13.130", "LastActivityDate": "2014-02-20T03:49:13.130"}, "21897269": {"ParentId": "21897015", "CommentCount": "1", "Body": "<p>I don't think so. You are still limited to calling other <code>constexpr</code> functions. <code>new</code> is actually a function call to <code>operator new()</code> which is not a <code>constexpr</code> function. The same goes for <code>delete</code>.</p>\n", "OwnerUserId": "4086", "PostTypeId": "2", "Id": "21897269", "Score": "2", "CreationDate": "2014-02-20T03:05:14.370", "LastActivityDate": "2014-02-20T03:05:14.370"}, "bq_ids": {"n4140": {"so_21897015_21897696_1": {"section_id": 6185, "quality": 0.9285714285714286, "length": 13}, "so_21897015_21897696_0": {"section_id": 5421, "quality": 0.9259259259259259, "length": 25}}, "n3337": {"so_21897015_21897696_0": {"section_id": 5216, "quality": 0.5925925925925926, "length": 16}}, "n4659": {"so_21897015_21897696_1": {"section_id": 7687, "quality": 0.7857142857142857, "length": 11}, "so_21897015_21897696_0": {"section_id": 6843, "quality": 0.7407407407407407, "length": 20}}}});