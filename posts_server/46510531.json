post_cb({"bq_ids": {"n4140": {"so_46510531_46510612_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 6185}}, "n4659": {"so_46510531_46510612_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 7687}}}, "46510612": {"Id": "46510612", "PostTypeId": "2", "Body": "<p>GCC complains because your definition of <code>y</code> is explicitly an ill-formed <code>constexpr</code> declaration. The initialzier violates <a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr.const#2\" rel=\"nofollow noreferrer\">[expr.const]/2</a>, which specifies:</p>\n<blockquote>\n<p id=\"so_46510531_46510612_0\">An expression e is a <em>core constant expression</em> <strong>unless</strong> the\n  evaluation of e, following the rules of the abstract machine, would\n  evaluate one of the following expressions:</p>\n<ul>\n<li>an operation that would have undefined behavior as specified in Clauses [intro] through [cpp] of this International Standard [\u2009Note:\n  including, for example, signed integer overflow (Clause [expr]),\n  certain pointer arithmetic ([expr.add]), division by zero, <strong>or\n  certain shift operations</strong> \u2009\u2014\u2009end note\u2009] ;</li>\n</ul>\n</blockquote>\n<p>So you can't use <code>1&lt;&lt;x</code> to initialize <code>y</code>. It doesn't matter that the branch will never be executed and can be eliminated. GCC is still obligated to verify it's semantically correct. </p>\n", "Score": "4", "LastActivityDate": "2017-10-01T08:32:04.317", "CreationDate": "2017-10-01T08:32:04.317", "ParentId": "46510531", "CommentCount": "0", "OwnerUserId": "817643"}, "46512823": {"Id": "46512823", "PostTypeId": "2", "LastEditDate": "2017-10-01T13:35:47.790", "CommentCount": "0", "LastEditorUserId": "2881849", "LastActivityDate": "2017-10-01T13:35:47.790", "CreationDate": "2017-10-01T13:26:30.677", "ParentId": "46510531", "Score": "2", "Body": "<p>Just as StoryTeller explained, this is the expected behavior, as left shifting by a negative number is undefined behavior and an expression resulting in UB can't be used in a core constant expression (the fact that you don't try to access the result of that expression during runtime doesnT' change the fact that you require the compiler to evaluate it during compiletime).</p>\n<p>If your branch actually depends on a template parameter you can work around this by using <code>if constexpr</code>:</p>\n<pre><code>template&lt;int x&gt;\nconstexpr int foo() {\n    if constexpr (x &gt;= 0) {\n        constexpr int y = 1 &lt;&lt; x;\n        return y;\n    }\n    return 0;\n}\n</code></pre>\n<p>Edit: As the answers to <a href=\"https://stackoverflow.com/questions/46512248/why-doesnt-an-if-constexpr-make-this-core-constant-expression-error-dissappear\">StoryTeller's question</a> explain, this ONLY works inside a template and only if the conditional depends on the template parameter (more detailed explanation in the answers).</p>\n", "OwnerUserId": "2881849"}, "46510531": {"ViewCount": "99", "LastEditDate": "2017-10-01T08:27:25.387", "AcceptedAnswerId": "46510612", "Title": "Undefined behavior when constexpr-evaluating negative bitshift?", "CreationDate": "2017-10-01T08:21:25.653", "LastActivityDate": "2017-10-01T13:35:47.790", "CommentCount": "8", "Body": "<p>Consider the following snippet of code:</p>\n<pre><code>int main(){\n    constexpr int x = -1;\n    if(x &gt;= 0){\n        constexpr int y = 1&lt;&lt;x;\n    }\n}\n</code></pre>\n<p>GCC 7 (and probably other versions of GCC) refuses to compile this and says:</p>\n<pre><code>error: right operand of shift expression '(1 &lt;&lt; -1)' is negative [-fpermissive]\n</code></pre>\n<p>I can guess where this may have come from: the <code>constexpr</code> declaration on <code>y</code> makes GCC evaluate <code>y</code> at compile time, where it might be negative.  Removing the <code>constexpr</code> fixes the error.</p>\n<p>However, is this undefined behavior by the standard?  The condition is always false, so the value of <code>y</code> will never be used.</p>\n<p>In my actual code, <code>x</code> is a template parameter, which may or may not be negative.</p>\n", "PostTypeId": "1", "LastEditorUserId": "1021959", "Id": "46510531", "AnswerCount": "2", "Score": "2", "OwnerUserId": "1021959", "Tags": "<c++><undefined-behavior><bit-shift><constexpr>", "FavoriteCount": "0"}});