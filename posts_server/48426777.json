post_cb({"bq_ids": {"n4140": {"so_48426777_48427421_1": {"length": 29, "quality": 0.9354838709677419, "section_id": 7168}, "so_48426777_48427421_2": {"length": 12, "quality": 1.0, "section_id": 7169}}, "n3337": {"so_48426777_48427421_1": {"length": 29, "quality": 0.9354838709677419, "section_id": 6912}, "so_48426777_48427421_2": {"length": 12, "quality": 1.0, "section_id": 6913}}, "n4659": {"so_48426777_48427421_1": {"length": 29, "quality": 0.9354838709677419, "section_id": 8676}, "so_48426777_48427421_2": {"length": 12, "quality": 1.0, "section_id": 8677}}}, "48426945": {"Id": "48426945", "PostTypeId": "2", "Body": "<p>A shared_ptr is not a magic bullet. It will only delete its content when it is assigned something else. From your comments, it seems you keep it forever, once assigned. As such, it will not delete the object, by design.</p>\n<p>The scenario I imagine is the same as:</p>\n<pre><code>#include &lt;memory&gt;\n#include &lt;iostream&gt;\n#include &lt;thread&gt;\n\nclass Foo\n{\npublic:\n    ~Foo() { std::cout &lt;&lt; \"Deleted\" &lt;&lt; std::endl;}\n};\n\nthread_local std::shared_ptr&lt;Foo&gt; f;\n\nvoid t()\n{\n    f = std::shared_ptr&lt;Foo&gt;(new Foo);\n}\n\nint main()\n{\n    std::thread thread(t);\n    thread.detach();\n}\n</code></pre>\n", "LastEditorUserId": "4474230", "LastActivityDate": "2018-01-24T16:26:30.230", "Score": "1", "CreationDate": "2018-01-24T16:12:54.817", "ParentId": "48426777", "CommentCount": "4", "OwnerUserId": "4474230", "LastEditDate": "2018-01-24T16:26:30.230"}, "48426777": {"ViewCount": "95", "Body": "<p>So I have this WCF webservice server where one of my webservices is written in C++/CLI. The webservice method is only a stub. It is used to call native C++ useful code.</p>\n<p>In the useful C++ code, I have this thread_local std::shared_ptr variable. It is allocated in a method called by the web service.</p>\n<pre><code>thread_local std::shared_ptr&lt;MyClass&gt; leaking(new MyClass());\n</code></pre>\n<p>The problem is: my variable is never deallocated. The destructor is never called. \nI am compiling my code using Microsoft C++ 14.0 64-bit compiler.</p>\n<p><strong>My question is : Is there some weird limitation with thread_local support and the Microsoft compiler ?</strong> </p>\n<p>I couldn't find anything on MSDN.</p>\n<p><strong>What I have tried :</strong> </p>\n<p>I know WCF uses a .NET thread pool to handle web service requests.I read somewhere that a .Net thread is not guaranteed to be mapped to the same native thread during its lifetime. However, in the  current implementation, .Net threads <em>are</em> mapped 1 to 1 to the same native thread. </p>\n<p>I tried enumerating the active threads right before process exit and only the process main thread was active. </p>\n<p><strong>Edit:</strong> </p>\n<p>I just found this on MSDN:</p>\n<blockquote>\n<p id=\"so_48426777_48426777_0\">Automatic data objects cannot be declared with the thread attribute. </p>\n</blockquote>\n<p><a href=\"https://msdn.microsoft.com/en-us/library/6yh4a9k1.aspx\" rel=\"nofollow noreferrer\">Link to MSDN</a></p>\n<p>However this seems to apply only to Microsoft's 'thread' modifier. Compilation does show the documented error with 'thread' but not with 'thread_local' so I guess this does not solve my problem.</p>\n", "Title": "Leaking std::shared_ptr thread_local variable in C++ - C++/CLI environment", "CreationDate": "2018-01-24T16:05:14.470", "LastActivityDate": "2018-01-25T15:19:15.120", "CommentCount": "5", "LastEditDate": "2018-01-25T15:19:15.120", "PostTypeId": "1", "LastEditorUserId": "1704574", "Id": "48426777", "Score": "0", "OwnerUserId": "1704574", "Tags": "<c++><multithreading><web-services><wcf><c++-cli>", "AnswerCount": "2"}, "48427421": {"Id": "48427421", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_48426777_48427421_0\"><strong>6.7.2 Thread storage duration.</strong></p>\n<p id=\"so_48426777_48427421_1\">All variables declared with the <strong>thread_local</strong> keyword have <em>thread storage duration</em>. The storage for these entities shall last for the duration of the thread in which they are created. There is a distinct object or reference per thread, an use  of the declared name refers to the entity associated with the current thread.</p>\n<p id=\"so_48426777_48427421_2\">A variable with the <strong>storage duration</strong> shall be initialized before its first odr-use (6.2) and, if constructed, shall be destroyed on thread exit.</p>\n</blockquote>\n", "LastEditorUserId": "6752050", "LastActivityDate": "2018-01-24T16:54:36.910", "Score": "2", "CreationDate": "2018-01-24T16:35:58.330", "ParentId": "48426777", "CommentCount": "7", "OwnerUserId": "6752050", "LastEditDate": "2018-01-24T16:54:36.910"}});