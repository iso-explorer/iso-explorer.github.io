post_cb({"40471868": {"ParentId": "40470650", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2016-11-07T18:18:34.287", "Score": "7", "LastEditorUserId": "212858", "LastEditDate": "2016-11-07T18:27:31.107", "Id": "40471868", "OwnerUserId": "212858", "Body": "<p><strong>tl;dr</strong> it looks like this is a deliberate decision, specifically to support the alternate syntax you already used.</p>\n<p>An approximate walkthrough of the standardese below:</p>\n<pre><code>this-&gt; B &lt;\n         ^\n</code></pre>\n<ul>\n<li>this could be either the start of a template id or a less-than, so let's check both!\n\n<ol>\n<li><code>this-&gt;B</code> does name something, but it's a template <code>B&lt;T&gt;</code>, so keep going</li>\n<li><code>B</code> on it's own also names something, a class template <code>B&lt;T&gt;</code></li>\n<li>wait, they're the same thing! That means we're using <code>this-&gt;B&lt;T&gt;</code> as a qualifier, and it <em>isn't</em> a less-than after all</li>\n</ol></li>\n</ul>\n<p>In the other case,</p>\n<pre><code>this-&gt;bitset\n</code></pre>\n<p>proceeds <em>identically</em> until the third step, when it realises there are two <em>different</em> things called <code>bitset</code> (a template class member and a class template), and just gives up.</p>\n<hr>\n<p>This is from a working draft I have lying around, so not necessarily the most recent, but:</p>\n<blockquote>\n<p id=\"so_40470650_40471868_0\"><strong>3.4.5 Class member access [basic.lookup.classref ]</strong></p>\n<p id=\"so_40470650_40471868_1\"><code>1</code> In a class member access expression (5.2.5), <em>if the . or -&gt; token is immediately\n  followed by an identifier followed by a &lt;</em>, the identifier must be\n  looked up to determine whether the &lt; is the beginning of a template\n  argument list (14.2) or a less-than operator. The identifier is first\n  looked up in the class of the object expression. If the identifier is\n  not found, it is then looked up in the context of the entire\n  postfix-expression and shall name a class template. <strong>If the lookup in\n  the class of the object expression finds a template</strong>, the name is also\n  looked up in the context of the entire postfix-expression and</p>\n<ul>\n<li>if the name is not found, the name found in the class of the object expression is used, otherwise</li>\n<li>if the name is found in the context of the entire postfix-expression and does not name a class template,\n  the name found in the class of the object expression is used, otherwise</li>\n<li>if the name found is a class template, it shall refer to the same entity as the one found in the class of\n  the object expression, otherwise the program is ill-formed.</li>\n</ul>\n</blockquote>\n<p>So, in any expression like <code>this-&gt;id &lt; ...</code>, it has to handle cases where <code>id&lt;...</code> is the start of a template identifier (like <code>this-&gt;B&lt;T&gt;::bitset</code>).</p>\n<p>It still checks the object first, but if <code>this-&gt;id</code> finds a template, further steps apply. And in your case, <code>this-&gt;bitset</code> is presumably considered a template as it still depends on <code>T</code>, so it finds the conflicting <code>std::bitset</code> and fails at the third bullet above.</p>\n</hr>", "LastActivityDate": "2016-11-07T18:27:31.107"}, "40470650": {"CommentCount": "10", "AcceptedAnswerId": "40471868", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-11-07T17:06:33.180", "LastActivityDate": "2016-11-12T13:57:33.273", "LastEditDate": "2017-05-23T12:30:23.367", "ViewCount": "255", "FavoriteCount": "2", "Title": "Template dependent base member is not resolved properly", "Id": "40470650", "Score": "7", "Body": "<p>This question is a follow up of \n<a href=\"https://stackoverflow.com/q/40462612/3093378\">Moving a member function from base class to derived class breaks the program for no obvious reason</a> (this is a prime example of why one shouldn't use <code>using namespace std;</code>)</p>\n<p>where the answers suggested qualifying by <code>this-&gt;</code> a dependent template name (which indeed is the way to go when referring to such dependent members).  However, there seems to be an issue, so I'll list a minimal example that reproduces the problem.</p>\n<p>Consider the code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;bitset&gt;\n\nusing namespace std;\n\ntemplate&lt;class T&gt;\nstruct B\n{\n    T bitset{};\n};\n\ntemplate&lt;class T&gt;\nstruct D : B&lt;T&gt;\n{\n    bool foo()\n    {\n        return this-&gt;bitset &lt; 32; \n    }\n};\n\nint main(){}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/d69c55049e19a617\" rel=\"nofollow noreferrer\"><kbd>Live on Coliru</kbd></a></p>\n<p>The perplexing thing is that even though <code>this-&gt;bitset</code> should refer to the member <code>B&lt;T&gt;::bitset</code>, the compiler is still confused and believes that we try to refer to <a href=\"http://en.cppreference.com/w/cpp/utility/bitset\" rel=\"nofollow noreferrer\"><code>std::bitset&lt;std::size_t&gt;</code></a>. The error appears on both gcc6 and clang3.7. Any ideas why this happens? Qualifying it with <code>B&lt;T&gt;::bitset</code> works though.</p>\n<p>Error (verbatim):</p>\n<blockquote>\n<p id=\"so_40470650_40470650_0\"><code>In member function 'bool D&lt;T&gt;::foo(T, std::__cxx11::string)': cpp/scratch/minimal.cpp:24:22: error: invalid use of 'class std::bitset&lt;1ul&gt;'</code></p>\n</blockquote>\n<p><strong>EDIT</strong></p>\n<p>This looks to me like a parsing/name lookup bug. If we replace <code>&lt;</code> by any other comparison operator (thanks @Leon for the remark), e.g.</p>\n<pre><code>return this-&gt;bitset == 32; \n</code></pre>\n<p>the program compiles. So I guess in <code>this-&gt;bitset &lt; 32</code> the parser believes that we are trying to instantiate a template (the <code>&lt;</code> sign), and we forgot to close the <code>&gt;</code>. But again have no idea if this is indeed a bug or that's how the language is suppose to work.</p>\n", "Tags": "<c++><c++11><templates>", "OwnerUserId": "3093378", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_40470650_40471868_1": {"section_id": 7126, "quality": 0.7058823529411765, "length": 36}}, "n3337": {"so_40470650_40471868_1": {"section_id": 6870, "quality": 0.7058823529411765, "length": 36}}, "n4659": {"so_40470650_40471868_1": {"section_id": 8627, "quality": 0.7058823529411765, "length": 36}}}});