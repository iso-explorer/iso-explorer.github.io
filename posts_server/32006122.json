post_cb({"bq_ids": {"n4140": {"so_32006122_32006122_0": {"length": 27, "quality": 0.9310344827586207, "section_id": 5846}, "so_32006122_32006973_1": {"length": 7, "quality": 1.0, "section_id": 7114}, "so_32006122_32006973_0": {"length": 7, "quality": 1.0, "section_id": 7114}, "so_32006122_32006973_3": {"length": 5, "quality": 1.0, "section_id": 7114}}, "n3337": {"so_32006122_32006122_0": {"length": 27, "quality": 0.9310344827586207, "section_id": 5616}, "so_32006122_32006973_1": {"length": 7, "quality": 1.0, "section_id": 6858}, "so_32006122_32006973_0": {"length": 4, "quality": 0.5714285714285714, "section_id": 574}, "so_32006122_32006973_3": {"length": 5, "quality": 1.0, "section_id": 6858}}, "n4659": {"so_32006122_32006122_0": {"length": 27, "quality": 0.9310344827586207, "section_id": 7325}, "so_32006122_32006973_1": {"length": 7, "quality": 1.0, "section_id": 8615}, "so_32006122_32006973_0": {"length": 7, "quality": 1.0, "section_id": 8615}, "so_32006122_32006973_3": {"length": 5, "quality": 1.0, "section_id": 8615}}}, "32006122": {"ViewCount": "542", "Body": "<p>Consider this code:</p>\n<pre><code>struct foo{};\n\nint main() {\n    foo::foo a;\n}\n</code></pre>\n<p>I would expect this to be well-formed, declaring a variable of type <code>foo</code> by the rule in [class]/2 (N4140, emphasis mine):</p>\n<blockquote>\n<p id=\"so_32006122_32006122_0\">A <em>class-name</em> is inserted into the scope in which it is declared immediately after the <em>class-name</em> is seen.\n  <strong>The <em>class-name</em> is also inserted into the scope of the class itself</strong>; this is known as the <em>injected-class-name</em>.\n  For purposes of access checking, the injected-class-name is treated as if it were a public member name.</p>\n</blockquote>\n<p><a href=\"http://coliru.stacked-crooked.com/a/3f2622297cbb99e6\"><code>clang 3.6.0</code></a> agrees with me, compiling the above code with no applicable warnings with <code>-Wall -pedantic</code>.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/e507bb6594ccae93\"><code>gcc 5.2.0</code></a> disagrees, providing the following error message:</p>\n<pre><code>main.cpp: In function 'int main()':\nmain.cpp:5:5: error: 'foo::foo' names the constructor, not the type\n   foo::foo a;\n</code></pre>\n<p>The above holds no matter how deep the nesting of injected class names, e.g. <code>foo::foo::foo::foo</code>.</p>\n<p>Is there a rule which forces that construct to be interpreted as a constructor in that context, or is this a<code>gcc</code> bug? Or am I interpreting the standards quote incorrectly?</p>\n", "AcceptedAnswerId": "32006973", "Title": "Injected class name compiler discrepancy", "CreationDate": "2015-08-14T08:56:22.213", "Id": "32006122", "CommentCount": "2", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2015-08-14T09:55:00.113", "Score": "18", "OwnerUserId": "496161", "Tags": "<c++><gcc><clang><language-lawyer><c++14>", "AnswerCount": "3"}, "32006445": {"Id": "32006445", "PostTypeId": "2", "Body": "<p>I think this is the subject of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#147\" rel=\"nofollow\">language defect #147</a>\nwhich contains this example</p>\n<pre><code>class B { };\nclass A: public B {\n    A::B ab;       // B is the inherited injected B\n    A::A aa;       // Error: A::A is the constructor\n};\n</code></pre>\n<p>At least gcc seems to believe that. :-)</p>\n", "LastActivityDate": "2015-08-14T09:13:18.050", "CommentCount": "2", "CreationDate": "2015-08-14T09:13:18.050", "ParentId": "32006122", "Score": "0", "OwnerUserId": "597607"}, "32006495": {"Id": "32006495", "PostTypeId": "2", "Body": "<p>Relevant, but not an answer: The GCC people discussed <em>exactly</em> this <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=11764\" rel=\"nofollow\">for years</a> and figured that it should not be accepted. They explicitly made this an error in GCC <a href=\"http://goo.gl/Qkg3SN\" rel=\"nofollow\">4.5</a> and newer - in <a href=\"http://goo.gl/pKmzW6\" rel=\"nofollow\">4.4.7</a> it was accepted.</p>\n<p>BTW: You probably want to use Clang's <code>-Weverything</code> instead of <code>-Wall -pedantic</code> when investigating such stuff.</p>\n", "LastEditorUserId": "2200540", "LastActivityDate": "2015-08-14T09:38:01.243", "Score": "5", "CreationDate": "2015-08-14T09:15:38.753", "ParentId": "32006122", "CommentCount": "0", "OwnerUserId": "2200540", "LastEditDate": "2015-08-14T09:38:01.243"}, "32006973": {"Id": "32006973", "PostTypeId": "2", "Body": "<p>It appears that <code>clang</code> is wrong in this case. The relevant exception I was looking for is in [class.qual]/2:</p>\n<blockquote>\n<p id=\"so_32006122_32006973_0\">2 In a lookup in which function names are not ignored and the nested-name-specifier nominates a class C:</p>\n<ul>\n<li><p id=\"so_32006122_32006973_1\">(2.1)\n  <strong>if the name specified after the nested-name-specifier, when looked up in C, is the injected-class-name of C</strong>, or</p></li>\n<li><p id=\"so_32006122_32006973_2\">[...]</p></li>\n</ul>\n<p id=\"so_32006122_32006973_3\"><strong>the name is instead considered to name the constructor of class C.</strong></p>\n</blockquote>\n<p>The standard has a near-equivalent (non-normative, obviously) example:</p>\n<pre><code>struct A { A(); };\nstruct B: public A { B(); };\n\nA::A() { }\nB::B() { }\n\nB::A ba;// object of type A\nA::A a;// error, A::A is not a type name\nstruct A::A a2;// object of type A\n</code></pre>\n<p>However, <code>clang</code> actually issues a correct diagnostic in this case:</p>\n<pre><code>error: qualified reference to 'A' is a constructor name rather than a type wherever a constructor can be declared\n</code></pre>\n<p>Perhaps <code>clang</code> interprets the line <code>In a lookup in which function names are not ignored</code> as <code>In a lookup in which a constructor declaration is valid</code>, but that doesn't seem to be a correct interpretation.</p>\n<p>There is an <a href=\"https://llvm.org/bugs/show_bug.cgi?id=13403\" rel=\"noreferrer\">existing bug</a> for this in the <code>clang</code> bugzilla.</p>\n", "LastEditorUserId": "496161", "LastActivityDate": "2015-08-14T09:55:00.113", "Score": "8", "CreationDate": "2015-08-14T09:39:49.377", "ParentId": "32006122", "CommentCount": "1", "OwnerUserId": "496161", "LastEditDate": "2015-08-14T09:55:00.113"}});