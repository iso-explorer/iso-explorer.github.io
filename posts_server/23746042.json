post_cb({"23746042": {"ViewCount": "41", "Body": "<p>when you <code>push_back()</code> items into an <code>std::vector</code>, and retain the pointers to the objects in the vector via the <code>back()</code> reference -- are you guaranteed (assuming no deletions occur) that the address of the objects in the vector will remain the same?</p>\n<p>It seems like my vector changes the pointers of the objects I use, such that if I push 10 items into it, and retain the pointers to those 10 items by remembering the <code>back()</code> reference after each <code>push_back</code>.</p>\n<p>if your vector is to store objects, not pointers to objects, are the addresses of those objects subject to constant change upon pushing more items?</p>\n", "AcceptedAnswerId": "23746114", "Title": "std::vector and pointer predictability", "CreationDate": "2014-05-19T19:49:57.297", "Id": "23746042", "CommentCount": "0", "LastEditDate": "2015-10-13T16:26:46.043", "PostTypeId": "1", "LastEditorUserId": "3204551", "LastActivityDate": "2015-10-13T16:26:46.043", "Score": "0", "OwnerUserId": "282918", "Tags": "<c++><vector><std><stdvector><c++-standard-library>", "AnswerCount": "3"}, "23746114": {"Id": "23746114", "PostTypeId": "2", "Body": "<p>Any method that causes the vector to resize itself will invalidate all iterators, pointers, and references to the elements contained within.  This can be avoided by reserving mememory, or using <code>boost::stable_vector</code>.</p>\n<p>23.3.6.5/1:</p>\n<blockquote>\n<p id=\"so_23746042_23746114_0\">Remarks: Causes reallocation if the new size is greater than the old capacity. If no reallocation happens,\n  all the iterators and references before the insertion point remain valid.</p>\n</blockquote>\n", "LastActivityDate": "2014-05-19T19:54:01.360", "Score": "0", "CreationDate": "2014-05-19T19:54:01.360", "ParentId": "23746042", "CommentCount": "0", "OwnerUserId": "845092"}, "23746166": {"Id": "23746166", "PostTypeId": "2", "Body": "<p>It's not guaranteed.  If you push_back enough items to exceed the size of the memory buffer that's the backing store of the vector, a new buffer will be created, all the contents will be copied to the new location, and the old buffer will be deleted.  At that point, old pointers (as well as iterators!) will be invalid.</p>\n<p>If you know exactly how much maximum space you will ever need, you could set the size of the vector's buffer to that size when you create it, to avoid reallocation.  However, I prefer to store \"references\" to elements of a vector as a reference to the vector and a size_t index into the vector, instead of using pointers.  It's not necessarily slower than pointers (depending on the CPU type) but, even if it is, it won't be much slower and in my opinion it's worth it for the peace of mind knowing that no matter how the vector is used in the future or reallocated, it'll still refer to the proper element.</p>\n", "LastActivityDate": "2014-05-19T19:57:21.863", "Score": "0", "CreationDate": "2014-05-19T19:57:21.863", "ParentId": "23746042", "CommentCount": "0", "OwnerUserId": "170361"}, "bq_ids": {"n4140": {"so_23746042_23746114_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 986}}, "n3337": {"so_23746042_23746114_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 971}}, "n4659": {"so_23746042_23746114_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 1049}}}, "23746094": {"Id": "23746094", "PostTypeId": "2", "Body": "<p>No, <code>std::vector</code> is not a stable container, i.e. pointers and iterators may get invalidated by resizing the vector (or, better, by the corresponding reallocation). If you want to avoid this behaviour, use <code>boost::stable_vector</code> or <code>std::list</code> or <code>std::deque</code> instead (I would prefer the last).  Or, more easily, you can simply store your locations by indices.</p>\n<p>For more information, consider also the answer to this question <a href=\"https://stackoverflow.com/questions/16709828/how-to-check-whether-a-container-is-stable\">here</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-05-19T19:52:52.787", "Score": "0", "CreationDate": "2014-05-19T19:52:52.787", "ParentId": "23746042", "CommentCount": "0", "LastEditDate": "2017-05-23T10:27:04.450", "OwnerUserId": "2412846"}});