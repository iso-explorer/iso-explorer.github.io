post_cb({"43096848": {"ParentId": "43096640", "CommentCount": "0", "Body": "<p>Unlike <code>std::swap</code>, which by default only relies on move constructors and therefore should usually be <code>noexcept</code>, <code>std::exchange</code> may allocate resources if the new value needs to be copied. While there could probably be a complicated expression for a conditional <code>noexcept</code> when <code>new_val</code> is a <code>U&amp;&amp;</code> and neither the move assignment nor the old value's move throw, it seems nobody has made such a proposal</p>\n", "OwnerUserId": "2356414", "PostTypeId": "2", "Id": "43096848", "Score": "2", "CreationDate": "2017-03-29T14:45:35.533", "LastActivityDate": "2017-03-29T14:45:35.533"}, "43096640": {"CommentCount": "1", "ViewCount": "62", "CreationDate": "2017-03-29T14:36:47.090", "LastActivityDate": "2017-03-29T14:45:35.533", "Title": "Why is std::exchange not noexcept?", "AcceptedAnswerId": "43096848", "PostTypeId": "1", "Id": "43096640", "Score": "0", "Body": "<p>According to the Standard (N4659, \u00a723.2.4, [utility.exchange]), <code>std::exchange</code> should do a <code>std::move</code> and a <code>std::forward</code>:</p>\n<blockquote>\n<p id=\"so_43096640_43096640_0\"><code>template &lt;class T, class U = T&gt; T exchange(T&amp; obj, U&amp;&amp; new_val);</code></p>\n<p id=\"so_43096640_43096640_1\"><em>Effects:</em> Equivalent to:  </p>\n<pre><code>T old_val = std::move(obj);\nobj = std::forward&lt;U&gt;(new_val);\nreturn old_val;\n</code></pre>\n</blockquote>\n<p>Both <code>move</code> and <code>forward</code> are marked as <code>noexcept</code>:<br>\n(N4659, \u00a723.2.5, [forward]):</br></p>\n<blockquote>\n<p id=\"so_43096640_43096640_2\"><code>template &lt;class T&gt; constexpr T&amp;&amp; forward(remove_reference_t&lt;T&gt;&amp; t) noexcept;</code>\n<code>template &lt;class T&gt; constexpr T&amp;&amp; forward(remove_reference_t&lt;T&gt;&amp;&amp; t) noexcept;</code></p>\n<p id=\"so_43096640_43096640_3\"><em>Returns:</em> <code>static_cast&lt;T&amp;&amp;&gt;(t)</code>.</p>\n<p id=\"so_43096640_43096640_4\">(...)</p>\n<p id=\"so_43096640_43096640_5\"><code>template &lt;class T&gt; constexpr remove_reference_t&lt;T&gt;&amp;&amp; move(T&amp;&amp; t) noexcept;</code></p>\n<p id=\"so_43096640_43096640_6\"><em>Returns:</em> <code>static_cast&lt;remove_reference_t&lt;T&gt;&amp;&amp;&gt;(t)</code>.</p>\n</blockquote>\n<p>So why isn't <code>exchange</code> <code>noexcept</code>? Is there some other reason for this or did the committee simply overlook this? Is this being proposed or can I write one?</p>\n", "Tags": "<c++><language-lawyer><standards>", "OwnerUserId": "3725053", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_43096640_43096640_5": {"section_id": 3947, "quality": 1.0, "length": 6}, "so_43096640_43096640_2": {"section_id": 3943, "quality": 1.0, "length": 10}}, "n3337": {"so_43096640_43096640_5": {"section_id": 3806, "quality": 0.6666666666666666, "length": 4}, "so_43096640_43096640_2": {"section_id": 3802, "quality": 0.6, "length": 6}}, "n4659": {"so_43096640_43096640_0": {"section_id": 1084, "quality": 0.6666666666666666, "length": 4}, "so_43096640_43096640_5": {"section_id": 4834, "quality": 1.0, "length": 6}, "so_43096640_43096640_2": {"section_id": 4831, "quality": 1.0, "length": 10}}}, "43096709": {"ParentId": "43096640", "CommentCount": "2", "Body": "<p>The code is also using constructors and the assignment operator for type <code>T</code>. One of these might throw.</p>\n", "OwnerUserId": "597607", "PostTypeId": "2", "Id": "43096709", "Score": "2", "CreationDate": "2017-03-29T14:39:21.193", "LastActivityDate": "2017-03-29T14:39:21.193"}});