post_cb({"28113986": {"ParentId": "28113769", "CommentCount": "8", "CreationDate": "2015-01-23T16:08:57.197", "OwnerUserId": "1312406", "PostTypeId": "2", "Id": "28113986", "Score": "2", "Body": "<p>It means that the code in <code>use_count()</code> is either lock-free or uses mutexs to lock critical sections. In other words you can call it from threads without worring about race conditions.</p>\n", "LastActivityDate": "2015-01-23T16:08:57.197"}, "28113769": {"CommentCount": "9", "ViewCount": "895", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-01-23T15:57:49.920", "LastActivityDate": "2015-08-02T17:28:10.803", "Title": "What is the meaning of this piece of Standardese about shared_ptr's use_count()?", "AcceptedAnswerId": "28114649", "LastEditDate": "2017-05-23T12:21:58.243", "Id": "28113769", "Score": "25", "Body": "<p>While trying to wrap my head around the problem shown in <a href=\"https://stackoverflow.com/questions/28111666/why-is-stdweak-ptrexpired-optimized-away?noredirect=1#comment44599229_28111666\">this question</a> I found myself stuck on the following sentence from [util.smartptr.shared]/4:</p>\n<blockquote>\n<p id=\"so_28113769_28113769_0\">[...] Changes in <code>use_count()</code> do not reflect modifications that can introduce data races.</p>\n</blockquote>\n<p>I don't understand how I should read that, and what conclusions shall I draw. \nHere are a few interpretations:</p>\n<ul>\n<li>Invoking <code>use_count()</code> does not introduce data races (but this should be guaranteed by the <code>const</code>-ness of that function alone, together with the corresponding library-wide guarantees)</li>\n<li>The value returned by <code>use_count()</code> is not influenced by (\"does not reflect\"?) the outcome of operations that require atomicity or synchronization (but what are these relevant operations?)</li>\n<li><code>use_count()</code> is executed atomically, but without preventing reordering by the CPU or the compiler (i.e. without sequential consistency, but then why not mentioning the particular model?)</li>\n</ul>\n<p>To me, none of the above seems to follow from that sentence, and I am at loss trying to interpret it.</p>\n", "Tags": "<c++><c++11><shared-ptr><language-lawyer><c++14>", "OwnerUserId": "1932150", "AnswerCount": "3"}, "28114649": {"ParentId": "28113769", "CommentCount": "13", "CreationDate": "2015-01-23T16:45:59.457", "OwnerUserId": "567292", "PostTypeId": "2", "Id": "28114649", "Score": "11", "Body": "<p>The current wording derives from library <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3054.html#896\">issue 896</a>, which also addressed the question of whether <code>shared_ptr</code> should be thread safe in the sense that distinct <code>shared_ptr</code>s owning the same object can be accessed (in particular, copied and destructed) from distinct threads simultaneously.  The conclusion of that discussion was that <code>shared_ptr</code> should be thread-safe; the mechanism to guarantee this was to pretend that <code>shared_ptr</code> member functions only access the <code>shared_ptr</code> object itself and not its on-heap control block:</p>\n<blockquote>\n<p id=\"so_28113769_28114649_0\">For purposes of determining the presence of a data race, member functions access and modify only the <code>shared_ptr</code> and <code>weak_ptr</code> objects themselves and not objects they refer to.</p>\n</blockquote>\n<p>Here \"objects they refer to\" means the control block.</p>\n<p>However this raises an issue; if we pretend that distinct <code>shared_ptr</code>s owning the same object don't access the control block, then surely <code>use_count()</code> cannot change? This is patched by making <code>use_count()</code> a magic function that produces a result out of thin air:</p>\n<blockquote>\n<p id=\"so_28113769_28114649_1\">Changes in <code>use_count()</code> do not reflect modifications that can introduce data races.</p>\n</blockquote>\n<p>That is, <code>use_count()</code> can change from one call to the next, but that does not mean that a data race (or potential data race) has occurred. This is perhaps clearer from the previous wording of that sentence:</p>\n<blockquote>\n<p id=\"so_28113769_28114649_2\">[<em>Note:</em> This is true in spite of that fact that such functions often modify use_count() <em>--end note</em>]</p>\n</blockquote>\n", "LastActivityDate": "2015-01-23T16:45:59.457"}, "bq_ids": {"n4140": {"so_28113769_28113769_0": {"section_id": 4377, "quality": 1.0, "length": 8}, "so_28113769_28114649_1": {"section_id": 4377, "quality": 1.0, "length": 8}, "so_28113769_28114649_0": {"section_id": 4377, "quality": 0.9411764705882353, "length": 16}, "so_28113769_28114915_0": {"section_id": 4377, "quality": 0.96, "length": 24}}, "n3337": {"so_28113769_28113769_0": {"section_id": 4214, "quality": 1.0, "length": 8}, "so_28113769_28114649_1": {"section_id": 4214, "quality": 1.0, "length": 8}, "so_28113769_28114649_0": {"section_id": 4214, "quality": 0.9411764705882353, "length": 16}, "so_28113769_28114915_0": {"section_id": 4214, "quality": 0.96, "length": 24}}, "n4659": {"so_28113769_28113769_0": {"section_id": 5640, "quality": 1.0, "length": 8}, "so_28113769_28114649_1": {"section_id": 5640, "quality": 1.0, "length": 8}, "so_28113769_28114649_0": {"section_id": 5640, "quality": 0.9411764705882353, "length": 16}, "so_28113769_28114915_0": {"section_id": 5640, "quality": 0.96, "length": 24}}}, "28114915": {"ParentId": "28113769", "CommentCount": "6", "CreationDate": "2015-01-23T16:59:44.670", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "28114915", "Score": "2", "Body": "<p>I think when we add the previous sentence the intent becomes a little clearer:</p>\n<blockquote>\n<p id=\"so_28113769_28114915_0\">For purposes of determining the presence of a data race, member functions shall access and modify only the shared_ptr and weak_ptr objects themselves and not objects they refer to. Changes in use_count() do not reflect modifications that can introduce data races.</p>\n</blockquote>\n<p>So, the last sentence is just emphasizing the same point as the first sentence. For example, if I copy a <code>shared_ptr</code>, its use-count will be incremented to reflect the fact that the <code>shared_ptr</code> has been copied--therefore the result from <code>use_count()</code> will be changed--but this is <em>not</em> allowed to access (and, especially, not allowed to <em>modify</em>) the pointee object, so it can never introduce a data race in use of that pointee object.</p>\n", "LastActivityDate": "2015-01-23T16:59:44.670"}});