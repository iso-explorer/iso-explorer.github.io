post_cb({"bq_ids": {"n4140": {"so_33436341_33436474_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 32}, "so_33436341_33436493_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 32}}, "n3337": {"so_33436341_33436474_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 29}, "so_33436341_33436493_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 29}}, "n4659": {"so_33436341_33436474_0": {"length": 11, "quality": 0.7857142857142857, "section_id": 32}, "so_33436341_33436493_0": {"length": 11, "quality": 0.9166666666666666, "section_id": 32}}}, "33436474": {"Id": "33436474", "PostTypeId": "2", "Body": "<p>The result of an overflowing assignment to a signed integer type is implementation defined:</p>\n<blockquote>\n<p id=\"so_33436341_33436474_0\">If the destination type is signed, the value is unchanged if it can be represented in the destination type (and\n  bit-field width); <strong>otherwise, the value is implementation-defined</strong>.</p>\n</blockquote>\n<p>(4.7 Clause 3 in N4140) </p>\n<p>So you would have to ask whoever provides your implementation what he says the result will be, the C++ standard does not say anything in regards to that.</p>\n", "LastActivityDate": "2015-10-30T12:53:14.783", "CommentCount": "0", "CreationDate": "2015-10-30T12:53:14.783", "ParentId": "33436341", "Score": "9", "OwnerUserId": "3002139"}, "33436477": {"Id": "33436477", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_33436341_33436477_0\">By what logic does b take that value?</p>\n</blockquote>\n<p>It is implementation-defined, in your case the value is truncated:</p>\n<pre><code>2346436346346346 in binary is:\n\n0000000000001000 0101011000010010 0100100011101001 0111101101101010\n\n1223261034 in binary is:\n                                  0100100011101001 0111101101101010\n</code></pre>\n", "LastActivityDate": "2015-10-30T12:53:27.537", "CommentCount": "0", "CreationDate": "2015-10-30T12:53:27.537", "ParentId": "33436341", "Score": "8", "OwnerUserId": "1490355"}, "33436493": {"Id": "33436493", "PostTypeId": "2", "Body": "<p>According to the standard <em>4.7\\p3 Integral conversions [conv.integral]</em> <strong>(Emphasis Mine)</strong>:</p>\n<blockquote>\n<p id=\"so_33436341_33436493_0\">If the destination type is signed, the value is unchanged if it can be\n  represented in the destination type; otherwise, <strong>the value is\n  implementation-defined</strong></p>\n</blockquote>\n", "LastActivityDate": "2015-10-30T12:54:03.997", "CommentCount": "0", "CreationDate": "2015-10-30T12:54:03.997", "ParentId": "33436341", "Score": "2", "OwnerUserId": "2352671"}, "33436341": {"ViewCount": "65", "Body": "<p>For example I have the following: </p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    long long a = 2346436346346346;\n\n    int b = a;\n    //int b = static_cast&lt;int&gt;(a) //same result\n\n    std::cout &lt;&lt; a &lt;&lt; \"\\n\" &lt;&lt; b;\n\n    std::cin.get();\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>2346436346346346\n1223261034\n</code></pre>\n<p>By what logic does <code>b</code> take that value?</p>\n", "AcceptedAnswerId": "33436477", "Title": "How does converting long long to int work?", "CreationDate": "2015-10-30T12:47:01.963", "Id": "33436341", "CommentCount": "0", "LastEditDate": "2015-10-30T13:26:23.690", "PostTypeId": "1", "LastEditorUserId": "1505939", "LastActivityDate": "2015-10-30T13:26:23.690", "Score": "1", "OwnerUserId": "5212827", "Tags": "<c++><integer><type-conversion>", "AnswerCount": "3"}});