post_cb({"41248520": {"Id": "41248520", "PostTypeId": "2", "Body": "<p>You have run afoul of <a href=\"http://eel.is/c++draft/dcl.init.list#7\" rel=\"nofollow noreferrer\">[dcl.init.list]/7</a></p>\n<blockquote>\n<p id=\"so_41248340_41248520_0\">A narrowing conversion is an implicit conversion[...] from an integer type or unscoped enumeration type to an integer type that cannot represent all the values of the original type, except where the source is a constant expression whose value after integral promotions will fit into the target type.</p>\n</blockquote>\n<p>Since <code>i</code> is not a constant expression this counts as a narrowing conversion and narrowing conversions are not allowed in initializer list.  If you were to use</p>\n<pre><code>std::initializer_list&lt;std::size_t&gt; i_l = { 0 };\n</code></pre>\n<p>Then it would not narrow even though <code>0</code> is an <code>int</code> since the compiler knows <code>0</code> can be represented in each type.</p>\n", "LastActivityDate": "2016-12-20T17:58:01.890", "CommentCount": "0", "CreationDate": "2016-12-20T17:58:01.890", "ParentId": "41248340", "Score": "7", "OwnerUserId": "4342498"}, "bq_ids": {"n4140": {"so_41248340_41249238_2": {"length": 6, "quality": 1.0, "section_id": 3325}, "so_41248340_41249238_4": {"length": 21, "quality": 0.875, "section_id": 3325}, "so_41248340_41248520_0": {"length": 32, "quality": 1.0, "section_id": 3329}, "so_41248340_41248530_0": {"length": 32, "quality": 1.0, "section_id": 3329}}, "n3337": {"so_41248340_41249238_2": {"length": 6, "quality": 1.0, "section_id": 3195}, "so_41248340_41249238_4": {"length": 21, "quality": 0.875, "section_id": 3195}, "so_41248340_41248520_0": {"length": 29, "quality": 0.90625, "section_id": 3199}, "so_41248340_41248530_0": {"length": 29, "quality": 0.90625, "section_id": 3199}}, "n4659": {"so_41248340_41249238_2": {"length": 6, "quality": 1.0, "section_id": 4091}, "so_41248340_41249238_4": {"length": 21, "quality": 0.875, "section_id": 4091}, "so_41248340_41248530_0": {"length": 32, "quality": 1.0, "section_id": 4095}, "so_41248340_41248520_0": {"length": 32, "quality": 1.0, "section_id": 4095}}}, "41248340": {"ViewCount": "1345", "Body": "<p>I am wondering about the following warning of the clang compiler when I pass an <code>integer</code> to an <code>std::initializer_list&lt; size_t &gt;</code> :</p>\n<pre><code>non-constant-expression cannot be narrowed from type 'int' to 'unsigned long' in initializer list\n</code></pre>\n<p>Why can <code>int</code> be casted to a <code>size_t</code>but an <code>int</code> not be passed to an <code>std::initializer_list&lt; size_t &gt;</code>, i.e.</p>\n<pre><code>int main()\n{\n  size_t s_t = 0;\n  int    i   = 0;\n\n  std::initializer_list&lt;size_t&gt; i_l = { i };            // warning\n  s_t = i;                                              // no warning\n\n  return 0;\n}    \n</code></pre>\n", "AcceptedAnswerId": "41248520", "Title": "Converting int to a size_t", "CreationDate": "2016-12-20T17:47:13.447", "Id": "41248340", "CommentCount": "4", "LastEditDate": "2016-12-20T17:59:11.753", "PostTypeId": "1", "LastEditorUserId": "2069064", "LastActivityDate": "2016-12-20T18:47:43.600", "Score": "3", "OwnerUserId": "7006673", "Tags": "<c++><casting><initializer-list>", "AnswerCount": "3"}, "41248530": {"Id": "41248530", "PostTypeId": "2", "Body": "<p>From [dcl.init.list]:</p>\n<blockquote>\n<p id=\"so_41248340_41248530_0\">A <em>narrowing conversion</em> is an implicit conversion [...] \u2014 from an integer type or unscoped enumeration type to an integer type that cannot represent all the values of the original type, except where the source is a constant expression whose value after integral promotions will fit into the target type.</p>\n</blockquote>\n<p>We are converting from <code>int</code> (which allows for negative values) to <code>size_t</code> (which does not), so this is a narrowing conversion. Narrowing conversions are ill-formed in list-initialization, which is what you're doing here:</p>\n<pre><code>std::initializer_list&lt;size_t&gt; i_l = { i };\n</code></pre>\n<p>However, narrowing conversions are fine elsewhere (as far as the standard is concerned):</p>\n<pre><code>s_t = i;\n</code></pre>\n<p>That's why the first line is ill-formed but the second is not.</p>\n", "LastActivityDate": "2016-12-20T17:58:26.917", "CommentCount": "0", "CreationDate": "2016-12-20T17:58:26.917", "ParentId": "41248340", "Score": "7", "OwnerUserId": "2069064"}, "41249238": {"Id": "41249238", "PostTypeId": "2", "Body": "<p>When a narrowing conversion is required while using list initialization to initialize an object, the program is ill-formed.</p>\n<p>From the C++11 Standard (emphasis mine):</p>\n<blockquote>\n<p id=\"so_41248340_41249238_0\"><strong>8.5.4 List-initialization</strong></p>\n<p id=\"so_41248340_41249238_1\">...</p>\n<p id=\"so_41248340_41249238_2\">3 List-initialization of an object or reference of type T is defined as follows:</p>\n<p id=\"so_41248340_41249238_3\">...</p>\n<p id=\"so_41248340_41249238_4\">\u2014 Otherwise, if <code>T</code> is a class type, constructors are considered. The applicable constructors are enumerated and the best one is chosen through overload resolution (13.3, 13.3.1.7). <strong>If a narrowing conversion (see below) is required to convert any of the arguments, the program is ill-formed.</strong></p>\n</blockquote>\n<p>The use of</p>\n<pre><code>int i = 0;\nsize_t s = {i};\n</code></pre>\n<p>falls under the same clause.</p>\n", "LastActivityDate": "2016-12-20T18:47:43.600", "CommentCount": "0", "CreationDate": "2016-12-20T18:47:43.600", "ParentId": "41248340", "Score": "1", "OwnerUserId": "434551"}});