post_cb({"40674779": {"CommentCount": "14", "ViewCount": "145", "PostTypeId": "1", "LastEditorUserId": "2756719", "CreationDate": "2016-11-18T10:31:43.070", "LastActivityDate": "2016-11-19T01:11:07.323", "Title": "Who is correct here, GCC or MSVC?", "AcceptedAnswerId": "40685194", "LastEditDate": "2016-11-19T01:11:07.323", "Id": "40674779", "Score": "2", "Body": "<p>Suppose we have this structure:  </p>\n<pre><code>namespace some_namespace::types {\n    using foo_t = int;\n}\n\nnamespace some_namespace::classes {\n    class bar {\n    public:\n        auto do_stuff() -&gt; types::foo_t;\n    };\n}\n\nusing namespace some_namespace::classes;\n\nauto bar::do_stuff() -&gt; types::foo_t {\n    return 1;\n}\n</code></pre>\n<p>This code compiles happily in GCC6.<br>\nOn the other hand, VS15 with the <code>/std:c++latest</code> switch enabled doesn't recognize the return type of <code>do_stuff</code>. It returns <a href=\"https://msdn.microsoft.com/query/dev14.query?appId=Dev14IDEF1&amp;l=EN-US&amp;k=k(C2653)&amp;rd=true\" rel=\"nofollow noreferrer\">C2653</a>.</br></p>\n<p>Now, what I find highly suspicious is that this gets fixed by changing the second half to this:</p>\n<pre><code>using namespace some_namespace;\n\nauto classes::bar::do_stuff() -&gt; types::foo_t {\n    return 1;\n}\n</code></pre>\n<p>which in my eyes should be equal. Am I mistaken in thinking that this is a MSVC bug? What does the standard say about this?</p>\n", "Tags": "<c++><visual-studio><gcc><namespaces><name-lookup>", "OwnerUserId": "5903309", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_40674779_40685194_4": {"section_id": 7094, "quality": 1.0, "length": 9}, "so_40674779_40685194_1": {"section_id": 7094, "quality": 0.8571428571428571, "length": 6}, "so_40674779_40685194_0": {"section_id": 7094, "quality": 0.9375, "length": 15}, "so_40674779_40685194_2": {"section_id": 187, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_40674779_40685194_4": {"section_id": 6838, "quality": 1.0, "length": 9}, "so_40674779_40685194_1": {"section_id": 6838, "quality": 0.8571428571428571, "length": 6}, "so_40674779_40685194_2": {"section_id": 181, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_40674779_40685194_4": {"section_id": 8595, "quality": 1.0, "length": 9}, "so_40674779_40685194_1": {"section_id": 8595, "quality": 0.8571428571428571, "length": 6}, "so_40674779_40685194_0": {"section_id": 8595, "quality": 0.9375, "length": 15}, "so_40674779_40685194_2": {"section_id": 192, "quality": 0.8333333333333334, "length": 5}}}, "40685194": {"ParentId": "40674779", "CommentCount": "0", "Body": "<p>This has nothing to do with the C++17 feature, which didn't touch using-directives, nor indeed with using-directives at all. MSVC produces the same error from</p>\n<pre><code>namespace some_namespace{\n    namespace types {\n        using foo_t = int;\n    }\n    namespace classes {\n        class bar {\n        public:\n            auto do_stuff() -&gt; types::foo_t;\n        };\n    }\n}\n\nusing some_namespace::classes::bar;\n\nauto bar::do_stuff() -&gt; types::foo_t {\n    return 1;\n}\n</code></pre>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/basic.lookup.unqual#8\" rel=\"nofollow noreferrer\">[basic.lookup.unqual]/8</a>:</p>\n<blockquote>\n<p id=\"so_40674779_40685194_0\">For the members of a class <code>X</code>, a name used [...] in the definition of\n  a class member outside of the definition of <code>X</code>, following the\n  member's <em>declarator-id</em>, shall be declared in one of the following\n  ways:</p>\n<ul>\n<li><p id=\"so_40674779_40685194_1\">before its use in the block in which it is used or in an enclosing block ([stmt.block]), or</p></li>\n<li><p id=\"so_40674779_40685194_2\">shall be a member of class <code>X</code> or be a member of a base class of <code>X</code> ([class.member.lookup]), or</p></li>\n<li><p id=\"so_40674779_40685194_3\">[...two bullet points about nested and local classes omitted...] </p></li>\n<li><p id=\"so_40674779_40685194_4\">if <code>X</code> is a member of namespace <code>N</code> [...], before the use of the name, in namespace <code>N</code> or in one of <code>N</code>'s enclosing namespaces.</p></li>\n</ul>\n</blockquote>\n<p>Name lookup for <code>types</code> should first look inside <code>bar</code>, then inside <code>classes</code>, then inside <code>some_namespace</code>. That last one should find the namespace <code>types</code>.</p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "40685194", "Score": "4", "CreationDate": "2016-11-18T20:07:53.900", "LastActivityDate": "2016-11-18T20:07:53.900"}});