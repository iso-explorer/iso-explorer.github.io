post_cb({"bq_ids": {"n4140": {"so_13091804_13091820_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 5366}}, "n3337": {"so_13091804_13091820_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 5162}}, "n4659": {"so_13091804_13091820_0": {"length": 32, "quality": 0.9411764705882353, "section_id": 6791}}}, "13092125": {"Id": "13092125", "PostTypeId": "2", "Body": "<p>The other answers are right.  But I wanted to say a little more about <strong>why</strong> <code>nullptr</code> is better.</p>\n<p>In C++11 \"perfect forwarding\" is very important.  It is used everywhere.  Obvious places are <code>bind</code> and <code>function</code>.  But it is also used in a multitude of other places under the covers.  But \"perfect forwarding\" isn't perfect.  And one of the places it fails is null pointer constants.</p>\n<pre><code>template &lt;class T&gt;\nvoid display(T)\n{\n    std::cout &lt;&lt; type_name&lt;T&gt;() &lt;&lt; '\\n';\n}\n\ntemplate &lt;class T&gt;\nvoid\nf(T&amp;&amp; t)\n{\n    display(std::forward&lt;T&gt;(t));  // \"perfectly forward\" T\n}\n\nint main()\n{\n    f(0);\n    f(NULL);\n    f(nullptr);\n}\n</code></pre>\n<p>With an appropriate definition of <code>type_name&lt;T&gt;()</code>, on my system this prints out:</p>\n<pre><code>int\nlong\nstd::nullptr_t\n</code></pre>\n<p>This can easily make the difference between working code and errors.  With any luck your errors will come at compile time (with horrible error messages).  But you may also get run time errors in some circumstances.</p>\n<p><strong>Aggressively ban use of 0 and NULL in your code.</strong></p>\n<p>Even if you're not perfect forwarding in your code, code you call (such as the std::lib) is very likely using it under the covers.</p>\n", "LastActivityDate": "2012-10-26T18:08:23.070", "CommentCount": "3", "CreationDate": "2012-10-26T18:08:23.070", "ParentId": "13091804", "Score": "23", "OwnerUserId": "576911"}, "13091804": {"ViewCount": "2020", "Body": "<p>Nowadays, with C++11, Whats recommended to use, <code>Zero</code> or <code>NULL</code>? The first of the second if?</p>\n<pre><code>int * p = getPointer();\n\nif( 0 == p ){\n    // something\n}\n\nif( NULL == p ){\n    // something\n}\n</code></pre>\n<p><strong>UPDATE:</strong> I forget the new</p>\n<pre><code>if( nullptr == p ){\n    // something\n}\n</code></pre>\n<p><strong>UPDATE 2:</strong> the examples are to show the options to write null pointer, I know is more pleasant to write <code>if( !p )</code>.</p>\n", "AcceptedAnswerId": "13092125", "Title": "Whats better to use in C++11 , Zero or NULL?", "CreationDate": "2012-10-26T17:42:57.183", "Id": "13091804", "CommentCount": "3", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2012-10-27T15:07:08.513", "LastEditorUserId": "824499", "LastActivityDate": "2012-10-27T15:07:08.513", "Score": "13", "OwnerUserId": "824499", "Tags": "<c++><pointers><c++11>", "AnswerCount": "3"}, "13091846": {"Id": "13091846", "PostTypeId": "2", "Body": "<p>C++11 has a new literal keyword <code>nullptr</code>.  It's better than <code>0</code> or <code>NULL</code> for things like this because there's no chance it will be used as an <code>int</code> in overload resolution.</p>\n<pre><code>if ( nullptr == p )\n</code></pre>\n<p>Or of course you can just use a pointer in a bool context:</p>\n<pre><code>if ( !p )\n</code></pre>\n", "LastActivityDate": "2012-10-26T17:46:04.083", "CommentCount": "0", "CreationDate": "2012-10-26T17:46:04.083", "ParentId": "13091804", "Score": "11", "OwnerUserId": "459640"}, "13091820": {"Id": "13091820", "PostTypeId": "2", "Body": "<p>Neither, it's <code>nullptr</code>.</p>\n<p>Though, in your case, I'd just go with </p>\n<pre><code>if ( !p ){\n   //something\n}\n</code></pre>\n<h3>2.14.7 Pointer literals [lex.nullptr]</h3>\n<blockquote>\n<p id=\"so_13091804_13091820_0\">1 The pointer literal is the keyword <code>nullptr</code>. It is a prvalue of type <code>std::nullptr_t</code>. [ Note: <code>std::nullptr_t</code>\n  is a distinct type that is neither a pointer type nor a pointer to member type; rather, a prvalue of this type is\n  a null pointer constant and can be converted to a null pointer value or null member pointer value.</p>\n</blockquote>\n", "LastActivityDate": "2012-10-26T17:43:52.440", "CommentCount": "9", "CreationDate": "2012-10-26T17:43:52.440", "ParentId": "13091804", "Score": "28", "OwnerUserId": "673730"}});