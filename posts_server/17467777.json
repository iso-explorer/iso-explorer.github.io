post_cb({"17468140": {"ParentId": "17467777", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>\u00a7 3.9.5 </p>\n<blockquote>\n<p id=\"so_17467777_17468140_0\">A class that has been declared but not defined, or an array of unknown size or of incomplete element type, is an incompletely-defined object type.43 Incompletely-defined object types and the void types are incomplete types (3.9.1). <strong>Objects shall not be defined to have an incomplete type.</strong></p>\n</blockquote>\n<pre><code>struct X; // X is an incomplete type\nX* xp;    // OK, xp is a pointer to an incomplete type. \n\nstruct Y\n{\n   X x;   // ill-formed, X is incomplete type\n}     \n\nstruct Z\n{\n   X* xp;   // OK, xp is a pointer to an incomplete type\n}     \n\n\nvoid foo() {\n//  xp++; // ill-formed: X is incomplete\n}\n\nstruct X { int i; }; // now X is a complete type\n\nX x;           // OK, X is complete type, define an object is fine\n\nvoid bar() {\n  xp = &amp;x;     // OK; type is \u201cpointer to X\u201d\n}\n\nvoid t()\n{   \n  xp++; // OK: X is complete\n}\n</code></pre>\n", "OwnerUserId": "951757", "LastEditorUserId": "951757", "LastEditDate": "2013-07-04T11:56:20.060", "Id": "17468140", "Score": "3", "CreationDate": "2013-07-04T10:38:12.730", "LastActivityDate": "2013-07-04T11:56:20.060"}, "17467777": {"CommentCount": "6", "ViewCount": "1349", "CreationDate": "2013-07-04T10:19:26.837", "LastActivityDate": "2013-07-04T11:56:20.060", "Title": "Forward declaration cv::Mat", "AcceptedAnswerId": "17467803", "PostTypeId": "1", "Id": "17467777", "Score": "2", "Body": "<p>Hi I am trying to forward declarate the cv::Mat class but I cant get it to work. It gives the message <strong>field 'frame' has incomplete type</strong>.</p>\n<p>OpenGlImpl.h</p>\n<pre><code>namespace cv {\n    class Mat;\n}\n\nclass OpenGLImpl {\n\nprivate:\n   cv::Mat frame;\n\n};\n</code></pre>\n<p>How should I properly forward declarate this?</p>\n", "Tags": "<c++><opencv>", "OwnerUserId": "944409", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_17467777_17468140_0": {"section_id": 7203, "quality": 0.8888888888888888, "length": 24}}, "n3337": {"so_17467777_17468140_0": {"section_id": 6947, "quality": 0.9259259259259259, "length": 25}}, "n4659": {"so_17467777_17468140_0": {"section_id": 8712, "quality": 0.7407407407407407, "length": 20}}}, "17467803": {"ParentId": "17467777", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>You cannot use a forward declaration here. The compiler needs to have the definition of <code>cv::Mat</code> in order for it to be a data member of <code>OpenGLImpl</code>.</p>\n<p>If you want to avoid this constraint, you could have <code>OpneGLImpl</code> hold a (smart) pointer to <code>cv::Mat</code>:</p>\n<pre><code>#include &lt;memory&gt;\n\nnamespace cv {\n    class Mat;\n}\n\nclass OpenGLImpl {\n\nprivate:\n   std::unique_ptr&lt;cv::Mat&gt; frame;\n\n};\n</code></pre>\n<p>You can then instantiate the <code>cv::Mat</code> owned by the <code>unique_ptr</code> in an implementation file.</p>\n<p>Note that a reference would also work with a forward declaration, but it is unlikely you need refernce semantics here.</p>\n", "OwnerUserId": "661519", "LastEditorUserId": "661519", "LastEditDate": "2013-07-04T10:29:17.273", "Id": "17467803", "Score": "9", "CreationDate": "2013-07-04T10:20:59.457", "LastActivityDate": "2013-07-04T10:29:17.273"}});