post_cb({"26700151": {"ParentId": "26699720", "PostTypeId": "2", "CommentCount": "7", "Body": "<blockquote>\n<p id=\"so_26699720_26700151_0\">So, if I read correctly all of that, in the function <code>foo</code> above,\n  <code>bar.value</code> should always be initialized with <code>0</code> and it should never be\n  initialized with garbage, am I right?</p>\n</blockquote>\n<p>Yes. Your object is direct-list-initialized. C++14's* [dcl.init.list]/3 specifies that </p>\n<blockquote>\n<p id=\"so_26699720_26700151_1\">List-initialization of an object or reference of type <code>T</code> is defined\n  as follows:</p>\n<ul>\n<li><p id=\"so_26699720_26700151_2\">[\u2026 Inapplicable bullet points\u2026]</p></li>\n<li><p id=\"so_26699720_26700151_3\">Otherwise, if <code>T</code> is an aggregate, aggregate initialization is performed (8.5.1).</p></li>\n<li><p id=\"so_26699720_26700151_4\">Otherwise, if the initializer list has no elements and T is a class type with a default constructor, the object is value-initialized.</p></li>\n<li><p id=\"so_26699720_26700151_5\">[\u2026]</p></li>\n</ul>\n</blockquote>\n<p>Your class isn't an aggregate since it has user-provided constructors, but it does have a default constructor. [dcl.init]/7:</p>\n<blockquote>\n<p id=\"so_26699720_26700151_6\">To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li><p id=\"so_26699720_26700151_7\">if <code>T</code> is a (possibly cv-qualified) class type (Clause 9) with either no default constructor (12.1) or <strong>a default constructor that\n  is user-provided or deleted</strong>, then the object is default-initialized;</p></li>\n<li><p id=\"so_26699720_26700151_8\">if T is a (possibly cv-qualified) class type <strong>without a user-provided or deleted default constructor</strong>, then the object is\n  zero-initialized and the semantic constraints for\n  default-initialization are checked, and if <code>T</code> has a non-trivial\n  default constructor, the object is default-initialized;</p></li>\n</ul>\n</blockquote>\n<p>[dcl.fct.def.default]/4:</p>\n<blockquote>\n<p id=\"so_26699720_26700151_9\">A special member function is <em>user-provided</em> if it is user-declared <strong>and\n  not explicitly defaulted [\u2026] on its first declaration.</strong></p>\n</blockquote>\n<p>So your constructor is not user-provided, therefore the object is zero-initialized. (The constructor is not called since its trivial)</p>\n<p>And finally, in case this was not clear, to <em>zero-initialize</em> an object or reference of type <code>T</code> means:</p>\n<blockquote>\n<ul>\n<li><p id=\"so_26699720_26700151_10\">if <code>T</code> is a scalar type (3.9), the object is initialized to the value obtained by converting the integer literal <code>0</code> (zero) to <code>T</code>;</p></li>\n<li><p id=\"so_26699720_26700151_11\">if <code>T</code> is a (possibly cv-qualified) non-union class type, each non-static data member and each base-class subobject is zero-initialized and padding is initialized to zero bits;</p></li>\n<li><p id=\"so_26699720_26700151_12\">[\u2026]</p></li>\n</ul>\n</blockquote>\n<p><br>\nThus either</br></p>\n<ul>\n<li><p>Your compiler is bugged</p></li>\n<li><p>\u2026or your code triggers undefined behavior at some other point. </p></li>\n</ul>\n<hr>\n<p>* The answer is still yes in C++11, though the quoted sections are not equivalent.</p>\n</hr>", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2015-09-08T08:42:40.500", "Id": "26700151", "Score": "9", "CreationDate": "2014-11-02T14:03:22.967", "LastActivityDate": "2015-09-08T08:42:40.500"}, "26699720": {"CommentCount": "11", "AcceptedAnswerId": "26700151", "PostTypeId": "1", "LastEditorUserId": "1364752", "CreationDate": "2014-11-02T13:20:58.793", "LastActivityDate": "2015-09-08T08:42:40.500", "LastEditDate": "2014-11-03T09:35:29.773", "ViewCount": "777", "FavoriteCount": "2", "Title": "Value initialization: default initialization or zero initialization?", "Id": "26699720", "Score": "16", "Body": "<p>I have templated <code>gray_code</code> class which is meant to store some unsigned integer whose underlying bits are stored in Gray code order. Here it is:</p>\n<pre><code>template&lt;typename UnsignedInt&gt;\nstruct gray_code\n{\n    static_assert(std::is_unsigned&lt;UnsignedInt&gt;::value,\n                  \"gray code only supports built-in unsigned integers\");\n\n    // Variable containing the gray code\n    UnsignedInt value;\n\n    // Default constructor\n    constexpr gray_code()\n        = default;\n\n    // Construction from UnsignedInt\n    constexpr explicit gray_code(UnsignedInt value):\n        value( (value &gt;&gt; 1) ^ value )\n    {}\n\n    // Other methods...\n};\n</code></pre>\n<p>In some generic algorithm, I wrote something like this:</p>\n<pre><code>template&lt;typename UnsignedInt&gt;\nvoid foo( /* ... */ )\n{\n    gray_code&lt;UnsignedInt&gt; bar{};\n    // Other stuff...\n}\n</code></pre>\n<p>In this piece of code, I expected <code>bar</code> to be zero-intialized and therefore <code>bar.value</code> to be zero-initialized. However, after having struggled with unexpected bugs, it appears that <code>bar.value</code> is initialized with garbage (4606858 to be exact) instead of <code>0u</code>. That surprised me, so I went to cppreference.com to see what the line above was exactly supposed to do...</p>\n<hr>\n<p>From what I can read, the form <code>T object{};</code> corresponds to <a href=\"http://en.cppreference.com/w/cpp/language/value_initialization\">value initialization</a>. I found this quote interesting:</p>\n<blockquote>\n<p id=\"so_26699720_26699720_0\">In all cases, if the empty pair of braces {} is used and T is an aggregate type, aggregate-initialization is performed instead of value-initialization.</p>\n</blockquote>\n<p>However, <code>gray_code</code> has a user-provided constructor. Therefore it is not an aggregate thus <a href=\"http://en.cppreference.com/w/cpp/language/aggregate_initialization\">aggregate initialization</a> is not performed. <code>gray_code</code> has no constructor taking an <code>std::initializer_list</code> so <a href=\"http://en.cppreference.com/w/cpp/language/list_initialization\">list initialization</a> is not performed either. The value-initialized of <code>gray_code</code> should then follow the usual C++14 rules of value initialization:</p>\n<blockquote>\n<p id=\"so_26699720_26699720_1\">1) If T is a class type with no default constructor or with a user-provided default constructor or with a deleted default constructor, the object is default-initialized. </p>\n<p id=\"so_26699720_26699720_2\">2) If T is a class type without a user-provided or deleted default constructor (that is, it may be a class with a defaulted default constructor or with an implicitly-defined one) then the object is zero-initialized and then it is default-initialized if it has a non-trivial default constructor.</p>\n<p id=\"so_26699720_26699720_3\">3) If T is an array type, each element of the array is value-initialized.</p>\n<p id=\"so_26699720_26699720_4\">4) Otherwise, the object is zero-initialized.</p>\n</blockquote>\n<p>If I read correctly, <code>gray_code</code> has an explicitly defaulted (not user-provided) default constructor, therefore 1) does not apply. It has a defaulted default constructor, so 2) applies: <code>gray_code</code> is <a href=\"http://en.cppreference.com/w/cpp/language/zero_initialization\">zero-initialized</a>. The defaulted default constructor seems to meet all the requirements of a trivial default constructor, so default initialization should not happen. Let's have a look then at how <code>gray_code</code> is zero-initialized:</p>\n<blockquote>\n<ul>\n<li><p id=\"so_26699720_26699720_5\">If T is a scalar type, the object's initial value is the integral constant zero implicitly converted to T. </p></li>\n<li><p id=\"so_26699720_26699720_6\">If T is an non-union class type, all base classes and non-static data members are zero-initialized, and all padding is initialized to zero bits. The constructors, if any, are ignored. </p></li>\n<li><p id=\"so_26699720_26699720_7\">If T is a union type, the first non-static named data member is zero-initialized and all padding is initialized to zero bits. </p></li>\n<li><p id=\"so_26699720_26699720_8\">If T is array type, each element is zero-initialized </p></li>\n<li><p id=\"so_26699720_26699720_9\">If T is reference type, nothing is done.</p></li>\n</ul>\n</blockquote>\n<p><code>gray_code</code> is a non-union class type. Therefore, all of its non-static data members should be initialized which means that <code>value</code> is zero-initialized. <code>value</code> satisfies <code>std::is_unsigned</code> and is therefore a scalar type, which means that it should be initialized with \"the integral constant zero implicitly converted to T\".</p>\n<p>So, if I read correctly all of that, in the function <code>foo</code> above, <code>bar.value</code> should always be initialized with <code>0</code> and it should never be initialized with garbage, am I right?</p>\n<p><strong>Note:</strong> the compiler I compiled my code with is MinGW_w4 GCC 4.9.1 with (POSIX threads and dwarf exceptions) in case that helps. While I sometimes get garbage on my computer, I never managed to get anything else than zero with online compilers.</p>\n<hr>\n<p><strong>Update:</strong> It seems <s>to be a GCC bug</s> that the error is mine and not that of my compiler. Actually, when writing this question, I assumed for the sake of simplicity that</p>\n<pre><code>class foo {\n    foo() = default;\n};\n</code></pre>\n<p>and</p>\n<pre><code>class foo {\n    foo();\n};\n\nfoo::foo() = default;\n</code></pre>\n<p>were equivalent. They are not. Here is the quote from the C++14 standard, section [dcl.fct.def.default]:</p>\n<blockquote>\n<p id=\"so_26699720_26699720_10\">A function is <em>user-provided</em> if it is user-declared and not explicitly defaulted or\n  deleted on its first declaration.</p>\n</blockquote>\n<p>In other words, when I got garbage values, my defaulted default constructor was indeed user-provided since it was not explicitly efaulted on its first declaration. Therefore, what happened was not zero initialization but default initialization. Thanks @Columbo again for pointing out the real problem.</p>\n</hr></hr>", "Tags": "<c++><constructor><initialization><language-lawyer><c++14>", "OwnerUserId": "1364752", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26699720_26700151_9": {"section_id": 3274, "quality": 0.7, "length": 7}, "so_26699720_26699720_7": {"section_id": 3285, "quality": 0.9230769230769231, "length": 12}, "so_26699720_26699720_8": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_26699720_26700151_3": {"section_id": 633, "quality": 0.6666666666666666, "length": 4}, "so_26699720_26699720_10": {"section_id": 3274, "quality": 0.8888888888888888, "length": 8}, "so_26699720_26699720_3": {"section_id": 3287, "quality": 0.8333333333333334, "length": 5}, "so_26699720_26700151_1": {"section_id": 3325, "quality": 1.0, "length": 6}, "so_26699720_26699720_2": {"section_id": 3287, "quality": 0.6190476190476191, "length": 13}, "so_26699720_26700151_8": {"section_id": 3287, "quality": 1.0, "length": 20}, "so_26699720_26700151_10": {"section_id": 3285, "quality": 1.0, "length": 10}, "so_26699720_26699720_1": {"section_id": 3287, "quality": 0.9166666666666666, "length": 11}, "so_26699720_26700151_4": {"section_id": 3325, "quality": 1.0, "length": 10}, "so_26699720_26700151_11": {"section_id": 3285, "quality": 1.0, "length": 17}, "so_26699720_26699720_6": {"section_id": 3285, "quality": 0.5555555555555556, "length": 10}, "so_26699720_26700151_6": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_26699720_26700151_7": {"section_id": 3287, "quality": 0.9375, "length": 15}}, "n3337": {"so_26699720_26700151_9": {"section_id": 3145, "quality": 0.9, "length": 9}, "so_26699720_26699720_7": {"section_id": 3155, "quality": 0.9230769230769231, "length": 12}, "so_26699720_26699720_8": {"section_id": 3155, "quality": 1.0, "length": 5}, "so_26699720_26700151_1": {"section_id": 3195, "quality": 1.0, "length": 6}, "so_26699720_26699720_10": {"section_id": 3145, "quality": 0.8888888888888888, "length": 8}, "so_26699720_26700151_11": {"section_id": 3155, "quality": 1.0, "length": 17}, "so_26699720_26699720_6": {"section_id": 3155, "quality": 0.5555555555555556, "length": 10}, "so_26699720_26699720_2": {"section_id": 359, "quality": 0.5238095238095238, "length": 11}, "so_26699720_26700151_10": {"section_id": 3155, "quality": 0.6, "length": 6}, "so_26699720_26699720_1": {"section_id": 359, "quality": 0.75, "length": 9}, "so_26699720_26700151_3": {"section_id": 3195, "quality": 0.8333333333333334, "length": 5}, "so_26699720_26699720_3": {"section_id": 3157, "quality": 0.8333333333333334, "length": 5}, "so_26699720_26700151_4": {"section_id": 3195, "quality": 0.9, "length": 9}, "so_26699720_26700151_6": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_26699720_26700151_7": {"section_id": 3157, "quality": 0.6875, "length": 11}}, "n4659": {"so_26699720_26700151_4": {"section_id": 4091, "quality": 1.0, "length": 10}, "so_26699720_26699720_7": {"section_id": 4047, "quality": 0.9230769230769231, "length": 12}, "so_26699720_26699720_8": {"section_id": 4047, "quality": 1.0, "length": 5}, "so_26699720_26700151_3": {"section_id": 4091, "quality": 0.8333333333333334, "length": 5}, "so_26699720_26699720_10": {"section_id": 4032, "quality": 0.8888888888888888, "length": 8}, "so_26699720_26700151_11": {"section_id": 4047, "quality": 0.9411764705882353, "length": 16}, "so_26699720_26699720_6": {"section_id": 4047, "quality": 0.6111111111111112, "length": 11}, "so_26699720_26699720_2": {"section_id": 4049, "quality": 0.6190476190476191, "length": 13}, "so_26699720_26700151_8": {"section_id": 4049, "quality": 1.0, "length": 20}, "so_26699720_26700151_10": {"section_id": 4047, "quality": 1.0, "length": 10}, "so_26699720_26699720_1": {"section_id": 4049, "quality": 0.9166666666666666, "length": 11}, "so_26699720_26700151_1": {"section_id": 4091, "quality": 1.0, "length": 6}, "so_26699720_26699720_3": {"section_id": 4048, "quality": 0.8333333333333334, "length": 5}, "so_26699720_26700151_9": {"section_id": 4032, "quality": 0.7, "length": 7}, "so_26699720_26700151_7": {"section_id": 4049, "quality": 0.9375, "length": 15}}}});