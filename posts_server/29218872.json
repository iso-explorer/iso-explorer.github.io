post_cb({"29218954": {"ParentId": "29218872", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>As noted in the question <code>Code Blocks</code> is indeed correct while <code>Orwell Dev C++</code> is incorrect. Visual Studio on the other hand is non-conforming. </p>\n<p>cppreferences <a href=\"http://en.cppreference.com/w/c/io/fprintf\" rel=\"nofollow\">C documentation for printf says</a> says:</p>\n<blockquote>\n<p id=\"so_29218872_29218954_0\">returns the number of characters written so far by this call to the function. </p>\n</blockquote>\n<p>I don't see anything in the draft standard that makes this optional, C++ refers to the C standard with respect to <code>printf</code>. <a href=\"https://msdn.microsoft.com/en-us/library/hf4y5e3w\" rel=\"nofollow\">MSDN documents this</a> and says:</p>\n<blockquote>\n<p id=\"so_29218872_29218954_1\">Because the %n format is inherently insecure, it is disabled by default. If %n is encountered in a format string, the invalid parameter handler is invoked, as described in Parameter Validation. To enable %n support, see _set_printf_count_output.</p>\n</blockquote>\n<p><b>Why is the %n format is inherently insecure?</b></p>\n<p>I am assuming that they consider it unsafe because of security issues such as those outlined in <a href=\"http://www.cis.syr.edu/~wedu/Teaching/cis643/LectureNotes_New/Format_String.pdf\" rel=\"nofollow\">Format String Vulnerability</a> documents one possible way to exploit this. It is predicated on the format string being controlled by user input. The paper gives the following example:</p>\n<pre><code>char user_input[100];\nscanf(\"%s\", user_input); \nprintf(user_input); \n</code></pre>\n<p>Retired Ninja linked to <a href=\"http://seclists.org/bugtraq/1999/Sep/328\" rel=\"nofollow\">Bugtraq post</a> which demonstrates an real example of such a bug ending up in an exploit in <code>proftpd 1.2.0pre6</code>:</p>\n<blockquote>\n<ul>\n<li>ftp to host</li>\n<li>login (anonymous or no)</li>\n</ul>\n<p id=\"so_29218872_29218954_2\">(this should be all on one line, no spaces)</p>\n<p id=\"so_29218872_29218954_3\">ftp&gt; ls aaaXXXX%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u%u\n  %u%u%u%u%u%u%u%u%u%653300u%n</p>\n<p id=\"so_29218872_29218954_4\">(replace the X's with the characters with ascii values\n  0xdc,0x4f,0x07,0x08 consecutively)</p>\n<p id=\"so_29218872_29218954_5\">Lots of other nasties can easily be easily done with this.  Since\n  proftpd will pass on user input data to snprintf, argument attacks are\n  easy.</p>\n</blockquote>\n<p>The problem with Visual Studios approach is that it breaks portability. Other approaches include using flags like <a href=\"https://fedoraproject.org/wiki/Format-Security-FAQ\" rel=\"nofollow\">Wformat-security used by gcc</a> which combined with <code>-WError</code> can make it an error but you can choose this as part of your build process.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-03-29T14:20:02.793", "Id": "29218954", "Score": "9", "CreationDate": "2015-03-23T19:41:13.500", "LastActivityDate": "2015-03-29T14:20:02.793"}, "29219223": {"ParentId": "29218872", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The Code Blocks output is correct.</p>\n<p>The Orwell Dev C++ output is incorrect. Either that implementation is not non-conforming by default (read the documentation to see if there's a way to make it behave correctly), or it has a bug.</p>\n<p>Microsoft's implementation is non-conforming by default. It disables the standard <code>%n</code> format specifier to prevent some possible security problems (though there are no such problems in the code in your question). Apparently there are ways to re-enable it; see <a href=\"https://stackoverflow.com/a/29218954/827263\">Shafik Yaghmour's answer</a>.</p>\n<p>The only potential problem I see with your program is that it doesn't print a newline at the end of its output, but that's not relevant to the <code>%n</code> issue.</p>\n", "OwnerUserId": "827263", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:58:33.883", "Id": "29219223", "Score": "4", "CreationDate": "2015-03-23T19:58:31.800", "LastActivityDate": "2015-03-23T19:58:31.800"}, "bq_ids": {"n4140": {"so_29218872_29218954_0": {"section_id": 47, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_29218872_29218954_0": {"section_id": 2149, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_29218872_29218954_0": {"section_id": 48, "quality": 0.5714285714285714, "length": 4}}}, "29218872": {"CommentCount": "15", "AcceptedAnswerId": "29218954", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-03-23T19:36:32.980", "LastActivityDate": "2015-03-29T14:20:02.793", "LastEditDate": "2017-05-23T12:05:55.320", "ViewCount": "842", "FavoriteCount": "3", "Title": "%n format specifier program giving different outputs on different compilers. Why?", "Id": "29218872", "Score": "17", "Body": "<p>I was reading about <code>%n</code> format specifier in C at <a href=\"https://stackoverflow.com/questions/3401156/what-is-the-use-of-the-n-format-specifier-in-c\">this question</a>. But when I tried the following program on different C++ compilers, it gave me different outputs.</p>\n<p>Why? What is the reason? Is there undefined or implementation defined behavior occurring?</p>\n<pre><code>#include&lt;stdio.h&gt;\n\nint main()\n{\n  int c = -1;\n  printf(\"geeks for %ngeeks \", &amp;c);\n  printf(\"%d\", c);\n  getchar();\n  return 0;\n}\n</code></pre>\n<p>Output:</p>\n<h3>Code blocks 13.12: (correct output)</h3>\n<pre><code>geeks for geeks 10\n</code></pre>\n<h3>Borland/CodeGear/Embarcadero C++: (correct output)</h3>\n<pre><code>geeks for geeks 10\n</code></pre>\n<h3>Orwell Dev C++:</h3>\n<pre><code>geeks -1\n</code></pre>\n<h3>Microsoft Visual Studio 2010:</h3>\n<pre><code>Debug assertion failed (\"'n' format specifier disabled\",0) \n</code></pre>\n", "Tags": "<c++><c><printf>", "OwnerUserId": "3777958", "AnswerCount": "2"}});