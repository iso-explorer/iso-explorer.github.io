post_cb({"30317714": {"ParentId": "30317541", "PostTypeId": "2", "CommentCount": "1", "Body": "<p><code>int* foo(int *N)</code> is a function that takes a pointer, this pointer points to at least one int, but possibly to an array of integers, C is a bit sloppy on this disiction.</p>\n<pre><code>{\n   int n = 0;\n   foo(&amp;n);\n}\n</code></pre>\n<p>or maybe</p>\n<pre><code>{\n   int a[17];\n   foo(a);\n}\n</code></pre>\n", "OwnerUserId": "4204307", "LastEditorUserId": "1213296", "LastEditDate": "2015-05-19T05:59:23.737", "Id": "30317714", "Score": "2", "CreationDate": "2015-05-19T05:51:27.403", "LastActivityDate": "2015-05-19T05:59:23.737"}, "30317541": {"CommentCount": "9", "AcceptedAnswerId": "30317741", "PostTypeId": "1", "LastEditorUserId": "661519", "CreationDate": "2015-05-19T05:38:20.503", "LastActivityDate": "2015-05-19T06:45:41.773", "LastEditDate": "2015-05-19T05:39:01.887", "ViewCount": "212", "FavoriteCount": "0", "Title": "C/C++ pointers as/in functions", "Id": "30317541", "Score": "0", "Body": "<p>This is a very novice question, but I have noticed that some C-functions are of the form:</p>\n<pre><code>int* foo(int *N){...}\n</code></pre>\n<p>Can someone: </p>\n<p>a) explain what the int* foo means? In one such function there is no \n<code>return</code> statement.</p>\n<p>b) explain how flexible the int *N is? I.e., I know that this means that the argument is a pointer to an int, but from what I understand from looking at one such function, this means that the function foo can actually take vector arguments. This makes no sense to me.</p>\n", "Tags": "<c++><c><function><pointers>", "OwnerUserId": "2081456", "AnswerCount": "3"}, "30317747": {"ParentId": "30317541", "CommentCount": "0", "Body": "<p>In this example, foo is a pointer to a function taking one argument, an integer pointer, and that returns int. It's as if you're declaring a function called \"*foo\", which takes an integer pointer and returns an interger; now, if *foo is a function, then foo must be a pointer to a function.</p>\n<p>The key to writing the declaration for a function pointer is that you're just writing out the declaration of a function but with (*func_name) where you'd normally just put func_name. </p>\n", "OwnerUserId": "4737610", "PostTypeId": "2", "Id": "30317747", "Score": "2", "CreationDate": "2015-05-19T05:53:39.713", "LastActivityDate": "2015-05-19T05:53:39.713"}, "30317741": {"ParentId": "30317541", "PostTypeId": "2", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_30317541_30317741_0\">a) explain what the <code>int* foo</code> means? In one such function there is no <code>return</code> statement.</p>\n</blockquote>\n<p>It means <code>foo</code> is a function that returns a pointer to an <code>int</code>. If such a function does not have a <code>return</code> statement, then calling that function will lead to undefined behavior.</p>\n<p>From the C++ Standard:</p>\n<blockquote>\n<p id=\"so_30317541_30317741_1\"><strong>6.6.3 The <code>return</code> statement</strong></p>\n<p id=\"so_30317541_30317741_2\">...</p>\n<p id=\"so_30317541_30317741_3\">Flowing off the end of a function is equivalent to a return with no value; this results in undefined behavior in a value-returning function.</p>\n</blockquote>\n<p></p>\n<blockquote>\n<p id=\"so_30317541_30317741_4\">b) explain how flexible the <code>int *N</code> is?</p>\n</blockquote>\n<p>That depends on the implementation of <code>foo</code>. The following are syntactically valid ways to call <code>foo</code>. Whethe they are semantically valid depends on <code>foo</code>.</p>\n<pre><code>int a;\nint b[10];\nint* c = new int;\nint* d = new int[20];\n\nfoo(&amp;a);\nfoo(b);\nfoo(c);\nfoo(d);\nfoo(nullptr);\n</code></pre>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2015-05-19T06:45:41.773", "Id": "30317741", "Score": "4", "CreationDate": "2015-05-19T05:53:20.047", "LastActivityDate": "2015-05-19T06:45:41.773"}, "bq_ids": {"n4140": {"so_30317541_30317741_3": {"section_id": 3913, "quality": 1.0, "length": 12}}, "n3337": {"so_30317541_30317741_3": {"section_id": 3773, "quality": 1.0, "length": 12}}, "n4659": {"so_30317541_30317741_3": {"section_id": 4799, "quality": 0.75, "length": 9}}}});