post_cb({"bq_ids": {"n4140": {"so_31892608_31892671_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 336}}, "n3337": {"so_31892608_31892671_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 326}}, "n4659": {"so_31892608_31892671_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 345}}}, "31892671": {"Id": "31892671", "PostTypeId": "2", "Body": "<p><code>T</code> in <code>typename enabler&lt;is_integral&lt;T&gt;::value, T&gt;::type</code> is non-deducible:</p>\n<p>\u00a7 14.8.2.5 [temp.deduct.type]/p5:</p>\n<blockquote>\n<p id=\"so_31892608_31892671_0\">The non-deduced contexts are:</p>\n<p id=\"so_31892608_31892671_1\"><sup>(5.1)</sup> \u2014 The <em>nested-name-specifier</em> of a type that was specified using a <em>qualified-id</em>.</p>\n</blockquote>\n<p>An option is to place <code>enabler</code> in return type syntax and let <code>T</code> be deduced as a plain parameter:</p>\n<pre><code>template &lt;typename T&gt;\ntypename enabler&lt;std::is_integral&lt;T&gt;::value, void&gt;::type test1(T input)\n{\n    std::cout &lt;&lt; \"this is for only integral\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/0354c895279a6c49\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n", "LastActivityDate": "2015-08-08T11:35:32.797", "CommentCount": "0", "CreationDate": "2015-08-08T11:35:32.797", "ParentId": "31892608", "Score": "2", "OwnerUserId": "3953764"}, "31892608": {"ViewCount": "120", "Body": "<pre><code>template &lt;bool,typename T&gt;\nstruct enabler\n{\n\n};\n\ntemplate &lt;typename T&gt;\nstruct enabler&lt;true,T&gt;\n{\n    typedef T type;\n};\n\n\ntemplate &lt;typename T&gt;\nvoid test1(typename enabler&lt; is_integral&lt;T&gt;::value,T &gt;::type input)\n{\n    cout &lt;&lt; \"this is for only integral\" &lt;&lt; endl;\n}\n\nint main()\n{\n    test1(10);//error\n    test1&lt;int&gt;(10); // compiles fine\n\n    return 0;\n}\n</code></pre>\n<p>Compilation fails with error message.</p>\n<p>note:   template argument deduction/substitution failed</p>\n<p>note:   couldn't deduce template parameter \u2018T\u2019</p>\n<p>When the parameter is explicitly specified, it is fine. But when it is not, compiler finds a problem in deducing. why?</p>\n", "Title": "template argument deduction/substitution failed. y?", "CreationDate": "2015-08-08T11:28:16.457", "LastActivityDate": "2015-08-08T11:35:32.797", "CommentCount": "3", "PostTypeId": "1", "Id": "31892608", "Score": "-1", "OwnerUserId": "4966271", "Tags": "<c++><c++11>", "AnswerCount": "1"}});