post_cb({"33874942": {"ParentId": "33873788", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2015-11-23T15:41:53.277", "Score": "5", "LastEditorUserId": "3647361", "LastEditDate": "2015-11-23T16:03:15.787", "Id": "33874942", "OwnerUserId": "3647361", "Body": "<blockquote>\n<p id=\"so_33873788_33874942_0\">Should this be considered a bug in clang 3.8?</p>\n</blockquote>\n<p>Yep. A capture is only needed if [expr.prim.lambda]/12 mandates so:</p>\n<p><a href=\"https://i.stack.imgur.com/iolZF.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/iolZF.png\"/></a></p>\n<p>Note in particular the highlighted example. <code>f(x)</code> does not necessitate <code>x</code> to be captured, because it isn't odr-used (overload resolution selects the overload with the object parameter). The same argumentation applies to your code - [basic.def.odr]/3:</p>\n<blockquote>\n<p id=\"so_33873788_33874942_1\">A variable <code>x</code> whose name appears as a <em>potentially-evaluated</em> expression\n  <code>ex</code> is odr-used by <code>ex</code> <strong>unless applying the lvalue-to-rvalue conversion\n  (4.1) to <code>x</code> yields a constant expression (5.20) that does not invoke\n  any non-trivial functions\u2026</strong></p>\n</blockquote>\n<p>This requirement is certainly met.</p>\n<blockquote>\n<p id=\"so_33873788_33874942_2\"><strong>\u2026and, if <code>x</code> is an object, <code>ex</code> is an element of\n  the set of potential results of an expression <code>e</code>, where either the\n  lvalue-to-rvalue conversion (4.1) is applied to <code>e</code></strong>, or <code>e</code> is a\n  discarded-value expression (Clause 5).</p>\n</blockquote>\n<p><code>i</code> is its set of potential results as per [basic.def.odr]/(2.1), and the l-t-r conversion is indeed immediately applied as its passed to a non-type template parameter of object type.</p>\n<p>Hence, as we have shown that (12.1) isn't applicable - and (12.2) clearly isn't, either - Clang is wrong in rejecting your snippet.</p>\n", "LastActivityDate": "2015-11-23T16:03:15.787"}, "bq_ids": {"n4140": {"so_33873788_33874942_2": {"section_id": 7040, "quality": 1.0, "length": 14}, "so_33873788_33874942_1": {"section_id": 7040, "quality": 0.8888888888888888, "length": 16}}, "n3337": {"so_33873788_33874942_1": {"section_id": 6785, "quality": 0.5555555555555556, "length": 10}}, "n4659": {"so_33873788_33874942_2": {"section_id": 8537, "quality": 1.0, "length": 14}, "so_33873788_33874942_1": {"section_id": 8537, "quality": 0.8888888888888888, "length": 16}}}, "33873788": {"CommentCount": "7", "AcceptedAnswerId": "33874942", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-11-23T14:44:17.507", "LastActivityDate": "2015-11-23T16:24:30.123", "LastEditDate": "2017-05-23T12:07:25.063", "ViewCount": "645", "FavoriteCount": "5", "Title": "How can I use a constexpr value in a lambda?", "Id": "33873788", "Score": "14", "Body": "<p>I would want to use a constexpr value in a lambda. Reading the answer to\n<em><a href=\"https://stackoverflow.com/q/28763375/1065190\">Using lambda captured constexpr value as an array dimension</a></em>, I assumed the following should work:</p>\n<pre><code>  #include&lt;array&gt;\n  int main()\n  { \n    constexpr int i = 0;\n    auto f = []{  \n      std::array&lt;int, i&gt; a;\n    };\n    return 0;\n  }\n</code></pre>\n<p>However, Clang 3.8 (with std=c++14) complains that </p>\n<blockquote>\n<p id=\"so_33873788_33873788_0\">variable 'i' cannot be implicitly captured in a lambda with no\n  capture-default specified</p>\n</blockquote>\n<p>Should this be considered a bug in clang 3.8?</p>\n<p>BTW:</p>\n<p>The above code does compile with gcc 4.9.2.\nIf I change the lambda expresion to capture explicitly:</p>\n<pre><code>...\nauto f = [i]{\n...\n</code></pre>\n<p>clang 3.8 compiles it, but gcc 4.9.2 fails:</p>\n<blockquote>\n<p id=\"so_33873788_33873788_1\">error: the value of \u2018i\u2019 is not usable in a constant expression\n  ...</p>\n</blockquote>\n", "Tags": "<c++><lambda><c++14><constexpr>", "OwnerUserId": "5595478", "AnswerCount": "1"}});