post_cb({"bq_ids": {"n4140": {"so_19338452_19339440_0": {"length": 16, "quality": 1.0, "section_id": 190}}, "n3337": {"so_19338452_19339440_0": {"length": 16, "quality": 1.0, "section_id": 184}}, "n4659": {"so_19338452_19339440_0": {"length": 11, "quality": 0.6875, "section_id": 195}}}, "19339440": {"Id": "19339440", "PostTypeId": "2", "Body": "<p>Although I don't know why they've decided to include those <em>using-declarations</em>, I can tell why the code would be ill-formed without them.</p>\n<p>But first, repeating from a comment:</p>\n<p>A <em>using-declaration</em> doesn't require the existence of the definition the nominated entity (here: it doesn't require the existence of the definition of those functions). Consider:</p>\n<pre><code>void foo();\n\nint main()\n{\n    using ::foo; // doesn't require the definition of `foo` to exist\n    return 0;\n}\n</code></pre>\n<p>If a class template gets implicitly instantiated, the declarations of its member functions are instantiated, but not their definitions (as per [temp.inst]/1). The base classes of a class template are also instantiated if said class template is implicitly instantiated (which in turn leads to the instantiation of the declarations of the member functions of those base class templates). Therefore, the <em>using-declaration</em> doesn't help with instantiation.</p>\n<hr>\n<p>An effect of those <em>using-declarations</em> is that the names declared are visible for non-dependent name lookup. As per [temp.dep]/3</p>\n<blockquote>\n<p id=\"so_19338452_19339440_0\">In the definition of a class or class template, if a base class depends on a template-parameter, the base class scope is not examined during unqualified name lookup [...].</p>\n</blockquote>\n<p>In the linked code, we find for example <code>i&lt;size()</code>. The name <code>size</code> here is non-dependent, therefore the base class scope is not searched, and <code>eoPop &lt; MOEOT &gt; :: size</code> would not be found without the <em>using-declaration</em>.</p>\n<p>Another reason to use <em>using-declarations</em> is if you want to overload a member function of a base class. If you don't use the using-decl, the member function in the derived class simply hides every overload (with the same name) in the base class. As far as I can see, this is not used in the linked code.</p>\n</hr>", "LastActivityDate": "2013-10-12T21:36:38.863", "CommentCount": "1", "CreationDate": "2013-10-12T21:36:38.863", "ParentId": "19338452", "Score": "2", "OwnerUserId": "420683"}, "19338452": {"ViewCount": "602", "Body": "<p>What is the point of the following using-declarations</p>\n<pre><code>using eoPop&lt;MOEOT&gt;::size;\nusing eoPop&lt;MOEOT&gt;::operator[];\nusing eoPop&lt;MOEOT&gt;::back;\nusing eoPop&lt;MOEOT&gt;::pop_back;\n</code></pre>\n<p>Taken from the class defined <a href=\"http://paradiseo.gforge.inria.fr/addon/moeo/doc/moeoArchive_8h_source.html#l00051\" rel=\"nofollow\">here</a>. Surely, because <code>eoPop&lt;EOT&gt;</code> inherits <code>std::vector&lt;EOT&gt;</code>, the methods <code>size</code>, <code>operator[]</code> , <code>back</code> and <code>pop_back</code> are public there is no need for the using declaration. Are the using declaration used to force instantiation?</p>\n", "AcceptedAnswerId": "19339440", "Title": "C++ using-declarations", "CreationDate": "2013-10-12T19:43:24.310", "Id": "19338452", "CommentCount": "1", "LastEditDate": "2013-10-12T21:14:27.643", "PostTypeId": "1", "LastEditorUserId": "181783", "LastActivityDate": "2013-10-12T21:36:38.863", "Score": "1", "OwnerUserId": "181783", "Tags": "<c++><using>", "AnswerCount": "1"}});