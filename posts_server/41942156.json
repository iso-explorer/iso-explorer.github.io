post_cb({"41942228": {"PostTypeId": "2", "Body": "<p>Your answer can be found here:</p>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/storage_duration\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/language/storage_duration</a></p>\n<blockquote>\n<p id=\"so_41942156_41942228_0\">In C, the address of a register variable cannot be taken, but in C++,\n  a variable declared register is semantically indistinguishable from a\n  variable declared without any storage class specifiers.</p>\n</blockquote>\n", "LastActivityDate": "2017-01-30T17:47:16.943", "Id": "41942228", "CommentCount": "0", "CreationDate": "2017-01-30T17:47:16.943", "ParentId": "41942156", "Score": "3", "OwnerUserId": "7016303"}, "41942156": {"ViewCount": "142", "Body": "<p>I am curious to know to behavior of <code>register</code> storage specifier in <code>C/C++</code>. Following program valid in <code>C++</code>, but in case of <code>C</code> it's not valid.</p>\n<pre><code>int main()\n{\n        register int i;\n        int* b = &amp;i; // Valid in C++ but not in C\n}\n</code></pre>\n<p>So, My question I, <strong>Why C++ allowed address operator(&amp;) to a register variable?</strong></p>\n<p>P.S : I know <strong>register</strong> storage specifier is deprecated in modern compiler.</p>\n", "Title": "Register storage specifier in C++", "CreationDate": "2017-01-30T17:43:34.377", "LastActivityDate": "2017-01-30T18:13:53.370", "CommentCount": "10", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-01-30T18:13:53.370", "LastEditorUserId": "54200", "Id": "41942156", "Score": "0", "OwnerUserId": "6935629", "Tags": "<c++><cpu-registers>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_41942156_41942235_0": {"length": 16, "quality": 0.6153846153846154, "section_id": 5393}, "so_41942156_41942340_0": {"length": 20, "quality": 0.7692307692307693, "section_id": 5393}}, "n3337": {"so_41942156_41942235_0": {"length": 16, "quality": 0.6153846153846154, "section_id": 5187}, "so_41942156_41942340_0": {"length": 20, "quality": 0.7692307692307693, "section_id": 5187}}}, "41942340": {"PostTypeId": "2", "Body": "<p>The difference is explained by this quote from the C++ Standard (7.1.1 Storage class speci\ufb01ers)</p>\n<blockquote>\n<p id=\"so_41942156_41942340_0\">3 A register speci\ufb01er is a hint to the implementation that the\n  variable so declared will be heavily used. [Note: The hint can be\n  ignored and <strong>in most implementations it will be ignored if the\n  address of the variable is taken</strong>. This use is deprecated (see D.2).\n  \u2014end note]</p>\n</blockquote>\n", "LastActivityDate": "2017-01-30T17:53:24.637", "Id": "41942340", "CommentCount": "0", "CreationDate": "2017-01-30T17:53:24.637", "ParentId": "41942156", "Score": "2", "OwnerUserId": "2877241"}, "41942235": {"PostTypeId": "2", "Body": "<p>C and C++ diverged before the C language was standardized. Both adopted the <code>register</code> keyword but only C added the restriction on the <code>&amp;</code> operator.</p>\n<p>Digging into the history, the C++98 standard says,</p>\n<blockquote>\n<p id=\"so_41942156_41942235_0\">A <code>register</code> specifier has the same semantics as an <code>auto</code> specifier together with a hint to the implementation that the object so declared will be heavily used. [<em>Note:</em> the hint can be ignored and in most implementations it will be ignored if the address of the object is taken. \u2014<em>end note</em>]</p>\n</blockquote>\n<p>Subsequently it was deprecated, which is an opposite direction from strengthening it with semantic restrictions. It is scheduled for removal in the upcoming C++17 standard.</p>\n<p>(<code>auto</code> was later repurposed in C++11. Its old meaning was the same as the default storage of a local variable.)</p>\n", "LastActivityDate": "2017-01-30T17:54:08.520", "LastEditorUserId": "153285", "Id": "41942235", "CommentCount": "6", "CreationDate": "2017-01-30T17:47:42.027", "ParentId": "41942156", "Score": "2", "OwnerUserId": "153285", "LastEditDate": "2017-01-30T17:54:08.520"}, "41942319": {"PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_41942156_41942319_0\">So, My question I, <strong>Why C++ allowed address operator(&amp;) to a register variable?</strong></p>\n</blockquote>\n<p>The answer is:<br>\nBecause C and C++ are different languages and follow different standards as pointed out in the other answers.</br></p>\n", "LastActivityDate": "2017-01-30T17:52:10.797", "Id": "41942319", "CommentCount": "0", "CreationDate": "2017-01-30T17:52:10.797", "ParentId": "41942156", "Score": "2", "OwnerUserId": "1413395"}});