post_cb({"35737897": {"ParentId": "35737741", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2016-03-02T03:23:11.567", "Score": "5", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:24:29.913", "Id": "35737897", "OwnerUserId": "2069064", "Body": "<blockquote>\n<p id=\"so_35737741_35737897_0\">but to my eyes, libc++ breaks the API defined by the C++ standard:</p>\n</blockquote>\n<p>Actually, it does not. The standard specifies in [contents]:</p>\n<blockquote>\n<p id=\"so_35737741_35737897_1\">It is <strong>unspecified</strong> whether names declared in a specific\n  namespace are declared directly in that namespace or in an inline namespace inside that namespace.</p>\n</blockquote>\n<p>libc++ is allowed to put <code>mutex</code> in <code>inline namespace __1</code>. Note that there are <a href=\"https://stackoverflow.com/q/11016220/2069064\">good reasons</a> for wanting inline namespaces, and typically as the user you don't even care if they exist or not.</p>\n<p>To your specific question, you <em>can</em> still forward-declare <code>std::mutex</code> with libc++... you just have to include all the namespaces (see <a href=\"https://stackoverflow.com/q/31657499/2069064\">this question</a> for how to detect -std=libc++):</p>\n<pre><code>namespace std {\n#ifdef _LIBCPP_VERSION\n    inline namespace __1 {\n        struct mutex;\n    }\n#else\n    struct mutex;\n#endif\n}\n</code></pre>\n<p>However, from [namespace.std]:</p>\n<blockquote>\n<p id=\"so_35737741_35737897_2\">The behavior of a C++ program is undefined if it adds declarations or definitions to namespace std or to a\n  namespace within namespace std unless otherwise specified.</p>\n</blockquote>\n<p>A forward-declaration is still a declaration, so even the above version which accounts for inline namespaces is undefined behavior. So prefer to do it the direct way:</p>\n<pre><code>#include &lt;mutex&gt;\n</code></pre>\n", "LastActivityDate": "2016-03-02T13:17:02.537"}, "35737741": {"CommentCount": "0", "ViewCount": "258", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-03-02T03:06:41.790", "LastActivityDate": "2016-03-02T13:17:02.537", "Title": "What is the portable way to forward-declare classes in an inline namespace in libc++?", "AcceptedAnswerId": "35737897", "LastEditDate": "2017-05-23T11:52:58.193", "Id": "35737741", "Score": "2", "Body": "<p>The following code doesn't compile only when I specify <code>-stdlib=libc++</code> to <code>clang++</code>:</p>\n<pre><code>namespace std {\n  class mutex;\n}\n\nvoid f(std::mutex &amp;x);\n\n#include &lt;mutex&gt;\n\nvoid f(std::mutex &amp;x) { }\n</code></pre>\n<ul>\n<li><a href=\"http://goo.gl/Uqpv6f\" rel=\"nofollow noreferrer\">http://goo.gl/Uqpv6f</a> (gcc.godbolt.org)</li>\n</ul>\n<blockquote>\n<p id=\"so_35737741_35737741_0\">note: candidate found by name lookup is 'std::__1::mutex'</p>\n</blockquote>\n<p>I understand what is <code>::__1</code> there,</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/29293394/where-does-the-1-symbol-come-from-when-using-llvms-libc\">Where does the __1 symbol come from when using LLVM's libc++?</a></li>\n</ul>\n<p>but to my eyes, <code>libc++</code> breaks the API defined by the C++ standard:</p>\n<ul>\n<li><a href=\"http://en.cppreference.com/w/cpp/thread/mutex\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/thread/mutex</a> (well, this is not really a standard...)</li>\n</ul>\n<p>It <em>should</em> be possible to forward-declare <code>std::mutex</code> because it should reside directly under <code>std</code>, shouldn't it?</p>\n<p>Note that the compilation phase, rather than linking phase, is failing.  So I don't think the answer to my question should be along the line of \"because libc++ employs a different ABI from GNU libstdc++...\"</p>\n", "Tags": "<c++><c++11><clang><libc++>", "OwnerUserId": "1190965", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_35737741_35737897_1": {"section_id": 6254, "quality": 1.0, "length": 13}, "so_35737741_35737897_2": {"section_id": 6299, "quality": 0.9285714285714286, "length": 13}, "so_35737741_35737741_0": {"section_id": 224, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_35737741_35737897_1": {"section_id": 6014, "quality": 1.0, "length": 13}, "so_35737741_35737897_2": {"section_id": 6056, "quality": 0.9285714285714286, "length": 13}, "so_35737741_35737741_0": {"section_id": 217, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_35737741_35737897_1": {"section_id": 7758, "quality": 1.0, "length": 13}, "so_35737741_35737741_0": {"section_id": 232, "quality": 0.6666666666666666, "length": 4}, "so_35737741_35737897_2": {"section_id": 7808, "quality": 0.9285714285714286, "length": 13}}}});