post_cb({"26219063": {"CommentCount": "2", "ViewCount": "298", "PostTypeId": "1", "LastEditorUserId": "4370109", "CreationDate": "2014-10-06T15:01:03.893", "LastActivityDate": "2016-07-04T11:29:04.800", "Title": "C++ preprocessor removes whitespace in calls to variadic macros (Solaris Studio 12.3)", "FavoriteCount": "3", "LastEditDate": "2016-07-04T11:29:04.800", "Id": "26219063", "Score": "11", "Body": "<p>The C++ preprocessor of Oracle Solaris Studio 12.3 removes whitespace completely when expanding <code>__VA_ARGS__</code>. </p>\n<p>Can anybody confirm this behaviour on their system? Is it a known compiler bug? Are there any workarounds for this problem?</p>\n<p>To illustrate, here is a simple test program, <code>vaargs.c</code>:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\n#define PRINT(...) printf(\"%s\\n\", #__VA_ARGS__)\n\nint main()\n{\n    PRINT(hello world);\n\n    return 0;\n}\n</code></pre>\n<p>The C preprocessor works as expected:</p>\n<pre><code>$ cc vaargs.c -o vaargs &amp;&amp; ./vaargs\nhello world\n\n$ cc -V\ncc: Sun C 5.12 SunOS_i386 2011/11/16\n</code></pre>\n<p>But the C++ preprocessor removes the space between \"hello\" and \"world\":</p>\n<pre><code>$ CC vaargs.c -o vaargs &amp;&amp; ./vaargs\nhelloworld\n\n$ CC -V\nCC: Sun C++ 5.12 SunOS_i386 2011/11/16\n</code></pre>\n", "Tags": "<c++><c-preprocessor><solaris><variadic-macros><solaris-studio>", "OwnerUserId": "1355754", "AnswerCount": "1"}, "26724701": {"ParentId": "26219063", "CommentCount": "2", "CreationDate": "2014-11-03T22:46:58.793", "OwnerUserId": "3657206", "PostTypeId": "2", "Id": "26724701", "Score": "4", "Body": "<p>This is a compiler bug, as per <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">N3337</a> 16.3.2 (cpp.stringize) p2 (the rest of the quote is snipped):</p>\n<blockquote>\n<p id=\"so_26219063_26724701_0\">A <em>character string literal</em> is a <em>string-literal</em> with no prefix. If, in the replacement \n  list, a parameter is immediately preceded by a <code>#</code> preprocessing token, both are replaced \n  by a single character string literal preprocessing token that contains the spelling of the \n  preprocessing token sequence for the corresponding argument. Each occurrence of white space \n  between the argument\u2019s preprocessing tokens becomes a single space character in the \n  character string literal.</p>\n</blockquote>\n", "LastActivityDate": "2014-11-03T22:46:58.793"}, "bq_ids": {"n4140": {"so_26219063_26724701_0": {"section_id": 526, "quality": 0.9761904761904762, "length": 41}}, "n3337": {"so_26219063_26724701_0": {"section_id": 517, "quality": 0.9761904761904762, "length": 41}}, "n4659": {"so_26219063_26724701_0": {"section_id": 547, "quality": 0.9761904761904762, "length": 41}}}});