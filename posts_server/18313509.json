post_cb({"bq_ids": {"n4140": {"so_18313509_18313750_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 3254}, "so_18313509_18313750_0": {"length": 8, "quality": 1.0, "section_id": 369}, "so_18313509_18313509_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 369}}, "n3337": {"so_18313509_18313750_0": {"length": 8, "quality": 1.0, "section_id": 359}, "so_18313509_18313750_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 3126}, "so_18313509_18313509_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 359}}, "n4659": {"so_18313509_18313750_0": {"length": 6, "quality": 0.75, "section_id": 381}, "so_18313509_18313750_1": {"length": 6, "quality": 0.8571428571428571, "section_id": 4012}, "so_18313509_18313509_0": {"length": 5, "quality": 0.5555555555555556, "section_id": 381}}}, "18313750": {"Id": "18313750", "PostTypeId": "2", "Body": "<p>I would say CLANG is right. The standard says (12.1.5 for the both old and new versions of the standard): </p>\n<blockquote>\n<p id=\"so_18313509_18313750_0\">A default constructor for a class X is a constructor of class X that can be called without an argument</p>\n</blockquote>\n<p>Adding the default value to the only argument of the constructor definitely makes it possible to call it without arguments, thus making it a default one. Also, 8.3.6 says (emphasis mine):</p>\n<blockquote>\n<p id=\"so_18313509_18313750_1\">A default argument expression shall be specified <strong>only</strong> in the\n  parameter-declaration-clause\n  of a <strong>function declaration</strong> &lt;...&gt;</p>\n</blockquote>\n", "LastActivityDate": "2013-08-19T12:23:26.983", "CommentCount": "2", "CreationDate": "2013-08-19T12:23:26.983", "ParentId": "18313509", "Score": "1", "OwnerUserId": "1490355"}, "18313936": {"Id": "18313936", "PostTypeId": "2", "Body": "<p>This has been discussed on the <a href=\"http://clang-developers.42468.n3.nabble.com/Reason-for-Diagnostic-on-default-ctors-redeclaration-td4032117.html\">Clang mailinglist</a> and has been submitted as a <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#1344\">Defect Report</a> Core Issue 1344.</p>\n<p>From the mailinglist discussion:</p>\n<blockquote>\n<p id=\"so_18313509_18313936_0\">The idea is that the presence of certain special members affects core\n  properties of a class type, like whether it's POD or trivially\n  copyable. Deciding these properties should not require whole-program\n  knowledge; it's important for us to be able to deduce them just from\n  the class definition. The really problematic case is turning a\n  \"normal\" constructor into a copy or move constructor by adding default\n  arguments, but IIRC introducing a default constructor was also\n  problematic.</p>\n<p id=\"so_18313509_18313936_1\">The fix is that you should put the default argument in the initial\n  declaration of the constructor.</p>\n<p id=\"so_18313509_18313936_2\">This was last discussed by WG21 at the Bloomington meeting. Notes from\n  there:</p>\n<p id=\"so_18313509_18313936_3\">\"Consensus: Make this ill-formed as suggested in the write-up. Core\n  issue 1344. Priority 0, Doug drafting.\"</p>\n<p id=\"so_18313509_18313936_4\">So CWG has agreed (in principle) that this should be ill-formed.</p>\n</blockquote>\n<p><strong>TL;DR</strong> Clang is right whenever the defect gets fixed (not sure if that can officially only happen with C++14, or if such Committee decisions can also be done retroactively on C++11)</p>\n", "LastActivityDate": "2013-08-19T12:34:26.053", "CommentCount": "1", "CreationDate": "2013-08-19T12:34:26.053", "ParentId": "18313509", "Score": "10", "OwnerUserId": "819272"}, "18313749": {"Id": "18313749", "PostTypeId": "2", "Body": "<p>You have a declaration and a definition. In your declaration you do not have a default value, while in your definition you have a default value. In fact the signature of the declaration is very similar to the signature of the definition, but not the same. I believe that strictness is a good idea, so I believe it is better to enforce that the declaration is the same as the definition.</p>\n", "LastActivityDate": "2013-08-19T12:23:25.493", "CommentCount": "0", "CreationDate": "2013-08-19T12:23:25.493", "ParentId": "18313509", "Score": "0", "OwnerUserId": "436560"}, "18313509": {"ViewCount": "4004", "Body": "<p>Code looks like:</p>\n<pre><code>struct Foo {\n    Foo(const char *);\n};\n\nFoo::Foo(const char *str = 0)\n{\n}\n</code></pre>\n<p>VS 2013 and gcc 4.8.0 accept such code,\nwhile clang 3.3 reject such code with:</p>\n<blockquote>\n<p id=\"so_18313509_18313509_0\">error: addition of default argument on redeclaration makes this constructor a default constructor</p>\n</blockquote>\n<p>who is right from standard (C++03 and C++11) point of view?</p>\n<p>Note:</p>\n<p>I like clang's choice too, but I going to report bug  to gcc and visual studio,\nand if this is not correct from standard point of view, this helps to \nconvince compiler's developers to fix this issue.</p>\n<p><strong>GCC</strong></p>\n<p>I described issue here: <a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=58194\" rel=\"noreferrer\">http://gcc.gnu.org/bugzilla/show_bug.cgi?id=58194</a></p>\n<p>But no luck, they suspend bug fixing untill draft become standard. </p>\n", "AcceptedAnswerId": "18313936", "Title": "default argument, gcc vs clang", "CreationDate": "2013-08-19T12:12:16.980", "Id": "18313509", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-06-29T17:45:22.733", "LastEditorUserId": "819272", "LastActivityDate": "2014-06-29T17:45:22.733", "Score": "17", "OwnerUserId": "1034749", "Tags": "<c++><visual-c++><gcc><c++11><clang++>", "AnswerCount": "3"}});