post_cb({"37287942": {"CommentCount": "0", "AcceptedAnswerId": "37288127", "PostTypeId": "1", "LastEditorUserId": "187690", "CreationDate": "2016-05-17T23:44:28.593", "LastActivityDate": "2016-05-18T00:05:49.517", "LastEditDate": "2016-05-17T23:59:58.953", "ViewCount": "81", "FavoriteCount": "2", "Title": "Calling a constexpr method through a reference - is the result a constant expression?", "Id": "37287942", "Score": "7", "Body": "<p>The following code</p>\n<pre><code>#include &lt;array&gt;\n\nvoid foo(const std::array&lt;int, 42&gt; &amp;a)\n{\n  constexpr size_t S = a.size();\n}\n\nint main() {}\n</code></pre>\n<p>compiles fine in GCC, but fails to compile in clang with the following error message</p>\n<pre><code>main.cpp:5:28: error: constexpr variable 'S' must be initialized by a constant expression\n      constexpr size_t S = a.size();\n                           ^~~~~~~~\n</code></pre>\n<p>Meanwhile, many posts about <code>constexpr</code> issues on SO seem to imply that clang often has better (more pedantic?) support for <code>constexpr</code>. So, which compiler would be correct in this case?</p>\n<p>Note that both compilers gladly accept the code once the reference parameter is replaced with pass-by-value parameter.</p>\n", "Tags": "<c++><gcc><clang><language-lawyer><constexpr>", "OwnerUserId": "187690", "AnswerCount": "1"}, "37288127": {"ParentId": "37287942", "CommentCount": "0", "Body": "<p><a href=\"http://eel.is/c++draft/expr.const#2\">[expr.const]/2</a>:</p>\n<blockquote>\n<p id=\"so_37287942_37288127_0\">A <em>conditional-expression</em> <code>e</code> is a <em>core constant expression</em> unless\n  the evaluation of <code>e</code>, following the rules of the abstract machine\n  ([intro.execution]), would evaluate one of the following expressions:</p>\n<ul>\n<li>[...]</li>\n<li><p id=\"so_37287942_37288127_1\">an <em>id-expression</em> that refers to a variable or data member of reference type unless the reference has a preceding initialization and either</p>\n<ul>\n<li>it is initialized with a constant expression or  </li>\n<li>its lifetime began within the evaluation of <code>e</code>;</li>\n</ul></li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>Evaluating <code>a.size()</code> evaluates the <em>id-expression</em> <code>a</code>, which \"refers to a variable...of reference type\" and has no preceding initialization. It is therefore not a core constant expression and so not a constant expression.</p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "37288127", "Score": "7", "CreationDate": "2016-05-18T00:05:49.517", "LastActivityDate": "2016-05-18T00:05:49.517"}, "bq_ids": {"n4140": {"so_37287942_37288127_1": {"section_id": 6185, "quality": 1.0, "length": 11}, "so_37287942_37288127_0": {"section_id": 6185, "quality": 0.8666666666666667, "length": 13}}, "n3337": {"so_37287942_37288127_1": {"section_id": 5946, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_37287942_37288127_1": {"section_id": 7687, "quality": 1.0, "length": 11}, "so_37287942_37288127_0": {"section_id": 7687, "quality": 0.7333333333333333, "length": 11}}}});