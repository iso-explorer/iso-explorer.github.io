post_cb({"bq_ids": {"n4140": {"so_28545644_28545644_1": {"length": 15, "quality": 1.0, "section_id": 467}, "so_28545644_28545644_0": {"length": 14, "quality": 1.0, "section_id": 456}}, "n3337": {"so_28545644_28545644_1": {"length": 15, "quality": 1.0, "section_id": 458}, "so_28545644_28545644_0": {"length": 14, "quality": 1.0, "section_id": 447}}, "n4659": {"so_28545644_28545644_1": {"length": 15, "quality": 1.0, "section_id": 490}, "so_28545644_28545644_0": {"length": 14, "quality": 1.0, "section_id": 479}}}, "28545780": {"Id": "28545780", "PostTypeId": "2", "Body": "<p>If the move constructor were deleted in that case, then trying to copy-initialise from an <em>rvalue</em> would be an error - the deleted move constructor would be a better match than the copy constructor. </p>\n<p>Usually, you'd want copy-initialisation to copy, rather than be disallowed, if you haven't defined move semantics. To give that behaviour, the move constructor is simply not declared at all, so that copy-initialisation uses the copy constructor whether copying from an <em>lvalue</em> or an <em>rvalue</em>. (As long as the copy constructor takes its argument by <code>const</code> reference.)</p>\n<p>You can still delete the move operations yourself, if for some reason you want the rather odd quality of only being copyable from an <em>lvalue</em>.</p>\n", "LastEditorUserId": "204847", "LastActivityDate": "2015-02-16T16:24:35.520", "Score": "2", "CreationDate": "2015-02-16T16:17:03.517", "ParentId": "28545644", "CommentCount": "0", "OwnerUserId": "204847", "LastEditDate": "2015-02-16T16:24:35.520"}, "28545644": {"ViewCount": "534", "Body": "<p>As per the C++ standard 12.8.7:</p>\n<blockquote>\n<p id=\"so_28545644_28545644_0\">If the class definition declares a move constructor or move\n  assignment  operator, the implicitly declared copy constructor is\n  defined as deleted;</p>\n</blockquote>\n<p>and 12.8.18</p>\n<blockquote>\n<p id=\"so_28545644_28545644_1\">If the class definition declares a move constructor or move assignment\n  operator, the implicitly declared copy assignment operator is defined\n  as  deleted;</p>\n</blockquote>\n<p>I am wondering why the move constructor/move assignment are not implicitly declared and defined as deleted (c++11 standard will not generate implicitly declared move constructor/move assignment in this case), if we only defined copy constructor or copy assignment operator?</p>\n", "AcceptedAnswerId": "28545711", "Title": "why the move constructor/move assignment are not implicitly declared and defined as deleted if we only define copy constructor/oper=?", "CreationDate": "2015-02-16T16:10:30.270", "Id": "28545644", "CommentCount": "3", "LastEditDate": "2015-02-16T16:30:36.183", "PostTypeId": "1", "LastEditorUserId": "2756719", "LastActivityDate": "2015-02-16T16:30:36.183", "Score": "3", "OwnerUserId": "440403", "Tags": "<c++><c++11>", "AnswerCount": "2"}, "28545711": {"Id": "28545711", "PostTypeId": "2", "Body": "<p>If this was the case, then using an rvalue as the source of construction or assginment would result in a compilation error instead of falling back to a copy.</p>\n<p>A function which does not exist (obviously) does not participate in overload resolution. A function which is defined as deleted <em>does</em> participate in overload resolution normally; if it's chosen, the compilation results in an error.</p>\n<p>This code <a href=\"http://coliru.stacked-crooked.com/a/9a8adc216cbd1e8c\" rel=\"nofollow\">compiles</a>:</p>\n<pre><code>struct Normal\n{\n    Normal() {}\n\n    Normal(const Normal &amp;) {}\n};\n\n\nint main()\n{\n    Normal n(Normal{});\n}\n</code></pre>\n<p>While this code <a href=\"http://coliru.stacked-crooked.com/a/27ba0ac9fe74cbd8\" rel=\"nofollow\">results in an error</a>:</p>\n<pre><code>struct Deleted\n{\n    Deleted() {}\n\n    Deleted(const Deleted &amp;) {}\n\n    Deleted(Deleted&amp;&amp;) = delete;\n};\n\n\nint main()\n{\n    Deleted d(Deleted{});\n}\n</code></pre>\n", "LastEditorUserId": "1782465", "LastActivityDate": "2015-02-16T16:20:05.850", "Score": "3", "CreationDate": "2015-02-16T16:13:47.557", "ParentId": "28545644", "CommentCount": "6", "OwnerUserId": "1782465", "LastEditDate": "2015-02-16T16:20:05.850"}});