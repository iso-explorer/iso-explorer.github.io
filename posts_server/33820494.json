post_cb({"33820494": {"CommentCount": "0", "ViewCount": "86", "PostTypeId": "1", "LastEditorUserId": "5380721", "CreationDate": "2015-11-20T06:42:20.493", "LastActivityDate": "2015-11-20T06:58:20.813", "Title": "In c++, which reasons is true that the singleton(static instance) will be destroy once the program exit", "FavoriteCount": "0", "LastEditDate": "2015-11-20T06:58:20.813", "Id": "33820494", "Score": "0", "Body": "<p>Thanks in advance!</p>\n<p>Referring to Effective c++ item 4, Scott Meyers said all static variable/instance will be destroyed once main() exit. Here, we assume the singleton is only used in main(). </p>\n<p>Indeed, we know that if we use both two following forms of singleton, the instance will be destroyed automatically once the main() exit. But I want to distinguish two reasons below, which one is the direct reason to free the singleton? BTW, what is the difference between this two forms?</p>\n<p><strong>Reason:</strong></p>\n<ol>\n<li><p>normal instance will be destroyed once main() exit. (Not related to static)</p></li>\n<li><p>all static variable/instance will be destroyed once main() exit.</p></li>\n</ol>\n<p><strong>case 1:</strong></p>\n<blockquote>\n<p id=\"so_33820494_33820494_0\">//Singleton.h</p>\n</blockquote>\n<pre><code>class Singleton\n{\nprivate:\n   Singleton();\n   ~Singleton();\npublic:\n   Singleton&amp; Instance()\n   {\n      Return instance_;\n   }\n   static Singleton instance_;\n};\n</code></pre>\n<blockquote>\n<p id=\"so_33820494_33820494_1\">//Singleton.c</p>\n</blockquote>\n<pre><code>Singleton Singleton::instance_\n</code></pre>\n<p><strong>Instance destruction step:</strong></p>\n<ol>\n<li>Referring to Effective c++ item 4, static instance_ will be free by compiler. \nThis is reason 2.</li>\n</ol>\n<p><strong>case 2:</strong></p>\n<blockquote>\n<p id=\"so_33820494_33820494_2\">//Singleton.h</p>\n</blockquote>\n<pre><code>class Singleton\n{\nprivate:\n   Singleton();\n   ~Singleton();\npublic:\n   Singleton&amp; Instance()\n   {\n      static Singleton instance_;\n      Return instance_;\n   }\n\n};\n</code></pre>\n<p><strong>Instance destruction step:</strong></p>\n<ol>\n<li><p>The singleton 's destructor is called once program exit.</p></li>\n<li><p>Then the destructor will free all the member, but no member inside class. This is reason 1.</p></li>\n<li><p>Then the compiler will free all the static variable/instance, including instance_, this is not the job of class destructor. This is reason 2.</p></li>\n</ol>\n", "Tags": "<c++><design-patterns><static><singleton><destructor>", "OwnerUserId": "5380721", "AnswerCount": "1"}, "33820556": {"ParentId": "33820494", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>From the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_33820494_33820556_0\"><strong>3.6.3 Termination</strong></p>\n<p id=\"so_33820494_33820556_1\">1 Destructors (12.4) for initialized objects (that is, objects whose lifetime (3.8) has begun) with <code>static</code> storage duration are called as a result of returning from <code>main</code> and as a result of calling <code>std::exit</code> (18.5).</p>\n</blockquote>\n<p>In both case, the singleton objects are of <code>static</code> storage duration.</p>\n<p>In the first case, the object is always initialized. The destructor of the object will be always called at termination time.</p>\n<p>In the second case, the object will be initialized only if <code>Singleton::Instance()</code> is called at least once. Otherwise the object will remain uninitialized. The destructor of the object won't be called if the object is not initialized. If the object is initialized, the destructor will be called at termination time.</p>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2015-11-20T06:51:48.603", "Id": "33820556", "Score": "1", "CreationDate": "2015-11-20T06:46:39.917", "LastActivityDate": "2015-11-20T06:51:48.603"}, "bq_ids": {"n4140": {"so_33820494_33820556_1": {"section_id": 7156, "quality": 0.8947368421052632, "length": 17}}, "n3337": {"so_33820494_33820556_1": {"section_id": 6900, "quality": 0.8947368421052632, "length": 17}}, "n4659": {"so_33820494_33820556_1": {"section_id": 8661, "quality": 0.6842105263157895, "length": 13}}}});