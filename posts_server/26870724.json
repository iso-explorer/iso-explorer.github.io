post_cb({"26871006": {"ParentId": "26870724", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>It seems to be invalid. [class.friend]/3:</p>\n<blockquote>\n<p id=\"so_26870724_26871006_0\">A <code>friend</code> declaration that does not declare a function shall have one\n  of the following forms:<br> <code>friend</code>\n<em>elaborated-type-specifier</em><code>;</code><br> <code>friend</code> <em>simple-type-specifier</em><code>;</code><br> <code>friend</code> <em>typename-specifier</em><code>;</code><br/></br></br></br></p>\n</blockquote>\n<p>However, there is an important restriction on elaborated-type-specifiers: [dcl.type.elab]/2:</p>\n<blockquote>\n<p id=\"so_26870724_26871006_1\"><strong>If the identifier resolves to a typedef-name</strong> [\u2026] the\n  elaborated-type-specifier is ill-formed.</p>\n</blockquote>\n<p>In that respect, GCC and Clang are wrong and, surprisingly, VC++ is right.<br>\nYou can make use of the third bullet of the first quote and use a typename-specifier.</br></p>\n<pre><code>friend typename Foo&lt;T&gt;::Type;\n</code></pre>\n", "OwnerUserId": "3647361", "LastEditorUserId": "3647361", "LastEditDate": "2014-11-11T17:51:36.940", "Id": "26871006", "Score": "4", "CreationDate": "2014-11-11T17:39:27.523", "LastActivityDate": "2014-11-11T17:51:36.940"}, "26870945": {"ParentId": "26870724", "CommentCount": "1", "Body": "<p>Remove the <code>struct</code> keyword and replace it with <code>typename</code>:</p>\n<pre><code>template&lt;typename T&gt;\nstruct Bar\n{\n    friend typename Foo&lt;T&gt;::Type;     \n    typedef typename Foo&lt;T&gt;::Type   Foo;\n};\n</code></pre>\n", "OwnerUserId": "3133316", "PostTypeId": "2", "Id": "26870945", "Score": "6", "CreationDate": "2014-11-11T17:35:49.447", "LastActivityDate": "2014-11-11T17:35:49.447"}, "26870724": {"CommentCount": "1", "ViewCount": "75", "PostTypeId": "1", "LastEditorUserId": "3647361", "CreationDate": "2014-11-11T17:24:39.417", "LastActivityDate": "2016-03-18T10:23:00.393", "Title": "MSVC 2008 error 'Type' is not a struct (although it is)", "AcceptedAnswerId": "26870945", "LastEditDate": "2016-03-18T10:23:00.393", "Id": "26870724", "Score": "3", "Body": "<p>The following MWE compiles on gcc 4.8.2 but not on MSVC 2008 (company policy)</p>\n<pre><code>struct B\n{\n};\n\nstruct A\n{\n    typedef B Handler;\n};\n\ntemplate&lt;typename T&gt;\nstruct Foo\n{\n    typedef typename T::Handler  Type;\n};\n\ntemplate&lt;typename T&gt;\nstruct Bar\n{\n    friend struct Foo&lt;T&gt;::Type;     // MSVC 2008 does not like this\n    typedef typename Foo&lt;T&gt;::Type   Foo;\n};\n\nint main() \n{\n}\n</code></pre>\n<p>MSVC 2008 error</p>\n<pre><code>error C2649: 'Foo&lt;T&gt;::Type' : is not a 'struct'\n</code></pre>\n<p>Is this a compiler bug or am I doing something illegal here? More importantly is there a fix?</p>\n", "Tags": "<c++><templates><visual-c++><language-lawyer><friend>", "OwnerUserId": "181783", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_26870724_26871006_1": {"section_id": 5443, "quality": 1.0, "length": 5}, "so_26870724_26871006_0": {"section_id": 6686, "quality": 0.8, "length": 12}}, "n3337": {"so_26870724_26871006_1": {"section_id": 5238, "quality": 1.0, "length": 5}, "so_26870724_26871006_0": {"section_id": 6441, "quality": 0.8, "length": 12}}, "n4659": {"so_26870724_26871006_1": {"section_id": 6870, "quality": 1.0, "length": 5}, "so_26870724_26871006_0": {"section_id": 8161, "quality": 0.8, "length": 12}}}});