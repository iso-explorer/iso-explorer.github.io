post_cb({"bq_ids": {"n4140": {"so_35040614_35041134_0": {"length": 12, "quality": 1.0, "section_id": 7041}}, "n3337": {"so_35040614_35041134_0": {"length": 12, "quality": 1.0, "section_id": 6786}}, "n4659": {"so_35040614_35041134_0": {"length": 12, "quality": 1.0, "section_id": 8538}}}, "35040614": {"ViewCount": "64", "Body": "<p>I have the situation that two C++ Libraries export the very same C-function symbols from shared code. When I now compile an executable which links both libraries, I do not get any linker error or warning from VC12. Why is this? It silently just chooses one of the two symbols and I have no idea which one is chosen.;</p>\n<pre><code>extern \"C\" { __declspec(dllexport) int function(void* argument);}\n</code></pre>\n<p>There is a flag named /FORCE which whould be able to convice VC to compile even if there are multiply defined symbols, but this flag is not set.</p>\n<p>I do not find any official information from Microsoft why this links at all. I was expecting to get a LNK4006 warning, but I don't.</p>\n<ol>\n<li>I just want to know if this is the expected or undefined behavior, which only did not explode by coincidence. I read things about the One Definition Rule not being applied generally to C-Code, but I cannot find any reliable statement for the VC compiler.</li>\n<li>Can I assume that, given the functions do not use any singletons, use the very same code and compiler flags, it does not matter which one is chosen?</li>\n</ol>\n", "Title": "Why can I link two libraries exporting the same C-Function in VC?", "CreationDate": "2016-01-27T14:54:36.743", "LastActivityDate": "2016-01-27T15:52:23.057", "CommentCount": "2", "LastEditDate": "2016-01-27T15:05:27.167", "PostTypeId": "1", "LastEditorUserId": "4774918", "Id": "35040614", "Score": "3", "OwnerUserId": "5847109", "Tags": "<c++><visual-c++><visual-studio-2013>", "AnswerCount": "1"}, "35041134": {"Id": "35041134", "PostTypeId": "2", "Body": "<p>You are violating the <strong>one definition rule</strong>.\nThe behavior of you program is undefined.</p>\n<p>See section \"<em>3.2 One definition rule [basic.def.odr]</em>\" in the C++ standard.</p>\n<blockquote id=\"so_35040614_35041134_0\">\n<ol start=\"4\">\n<li>Every program shall contain <strong>exactly one definition of every non-inline function</strong> or variable that is odr-used in that program; no diagnostic required. ...</li>\n</ol>\n</blockquote>\n<p>Section 3.2.6 describes when there can be <strong>more than one definition</strong>\nof a class type, inline function with external linkage etc. in a program.</p>\n<hr>\n<blockquote id=\"so_35040614_35041134_1\">\n<ol>\n<li>I just want to know if this is the expected or undefined behavior, which only did not explode by coincidence. I read things about the One Definition Rule not being applied generally to C-Code, but I cannot find any reliable statement for the VC compiler.</li>\n</ol>\n</blockquote>\n<ul>\n<li>It is undefined behavior.</li>\n<li>The C++ standard is the master, not the VC compiler.</li>\n</ul>\n<blockquote id=\"so_35040614_35041134_2\">\n<ol start=\"2\">\n<li>Can I assume that, given the functions do not use any singletons, use the very same code and compiler flags, it does not matter which one is chosen?</li>\n</ol>\n</blockquote>\n<ul>\n<li>It is still undefined behavior - though the program might appear to behave as expected.</li>\n</ul>\n</hr>", "LastEditorUserId": "2020827", "LastActivityDate": "2016-01-27T15:52:23.057", "Score": "2", "CreationDate": "2016-01-27T15:16:10.633", "ParentId": "35040614", "CommentCount": "0", "OwnerUserId": "2020827", "LastEditDate": "2016-01-27T15:52:23.057"}});