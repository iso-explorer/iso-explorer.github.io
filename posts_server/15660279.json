post_cb({"15660279": {"CommentCount": "1", "ViewCount": "111", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2013-03-27T13:39:31.453", "LastActivityDate": "2013-03-27T13:55:03.617", "Title": "What does this declare `void func(bool b ...)`?", "AcceptedAnswerId": "15660326", "LastEditDate": "2017-05-23T10:32:04.860", "Id": "15660279", "Score": "1", "Body": "<p>I answered this question <a href=\"https://stackoverflow.com/questions/15659859/how-can-i-get-my-va-list-arguments-to-repeat-itself\">How can I get my va_list arguments to repeat itself?</a> and noticed the uncommon function declaration:</p>\n<pre><code>void ordered(int num1, double list ...);\n</code></pre>\n<p>First i thought the compiler would complain but clang 3.2 didn't and neither did g++ 4.7.2.</p>\n<p>What does this declaration expand to? As what does it get interpreted?</p>\n<p>Edit: I know about the ellipsis. But the normal form is <code>&lt;return type&gt; &lt;function-name&gt;(&lt;argument1-type&gt; &lt;arg-name&gt;, ...);</code> in the example the comma is missing.</p>\n", "Tags": "<c++><function>", "OwnerUserId": "551045", "AnswerCount": "5"}, "15660362": {"ParentId": "15660279", "CommentCount": "0", "Body": "<p>I guess you mean the \"...\" right? </p>\n<p>For some functions it is not possible to specify the number and type of all arguments expected in a call. Such a function is declared by terminating the list of argument declarations with the ellipsis (...).</p>\n", "OwnerUserId": "2151893", "PostTypeId": "2", "Id": "15660362", "Score": "1", "CreationDate": "2013-03-27T13:42:57.810", "LastActivityDate": "2013-03-27T13:42:57.810"}, "15660445": {"ParentId": "15660279", "CommentCount": "2", "Body": "<p>This is a snippet of the grammar in the C++ standard:</p>\n<pre><code>parameter-declaration-clause:\n  parameter-declaration-list[opt] ...[opt]\n  parameter-declaration-list , ...\n</code></pre>\n<p>Basically the ellipsis can be preceded by <code>,</code> if the are other parameter declarations, but it need not be. The function declaration:</p>\n<pre><code>void f(int,double...);\n</code></pre>\n<p>really means:</p>\n<pre><code>void f(int,double,...);\n</code></pre>\n", "OwnerUserId": "36565", "PostTypeId": "2", "Id": "15660445", "Score": "3", "CreationDate": "2013-03-27T13:46:42.223", "LastActivityDate": "2013-03-27T13:46:42.223"}, "15660477": {"ParentId": "15660279", "PostTypeId": "2", "CommentCount": "0", "Body": "<pre><code>void ordered(int num1, double list ...);\n</code></pre>\n<p>is same as:     </p>\n<pre><code>void ordered(int num1, double list, ...);\n</code></pre>\n<p>Reference:<br>\n<strong>Standard C++11 8.3.5.3/4:</strong> </br></p>\n<pre><code>parameter-declaration-clause:\nparameter-declaration-listopt ...opt\nparameter-declaration-list , ...\n</code></pre>\n<blockquote>\n<p id=\"so_15660279_15660477_0\">If the <code>parameter-declaration-clause</code> terminates with an ellipsis or a function parameter pack (14.5.3), the number of arguments shall be equal to or greater than the number of parameters that do not have a default argument and are not function parameter packs. Where syntactically correct and where <code>\u201c...\u201d</code> is not part of an <code>abstract-declarator</code>, <strong><em><code>\u201c, ...\u201d</code> is synonymous with <code>\u201c...\u201d</code>.</em></strong></p>\n</blockquote>\n", "OwnerUserId": "452307", "LastEditorUserId": "452307", "LastEditDate": "2013-03-27T13:55:03.617", "Id": "15660477", "Score": "2", "CreationDate": "2013-03-27T13:48:16.570", "LastActivityDate": "2013-03-27T13:55:03.617"}, "15660340": {"ParentId": "15660279", "CommentCount": "0", "Body": "<p>The three dots (<code>...</code>) are called \"ellipses\" and denote a variable argument list. So you can pass as many arguments as you like (there is an OS-specified limitation, though). In this way, <code>printf</code> works, for example.</p>\n<p>See <a href=\"http://publications.gbdirect.co.uk/c_book/chapter9/stdarg.html\" rel=\"nofollow\">here</a> for further explanation.</p>\n", "OwnerUserId": "2000082", "PostTypeId": "2", "Id": "15660340", "Score": "1", "CreationDate": "2013-03-27T13:42:22.267", "LastActivityDate": "2013-03-27T13:42:22.267"}, "15660326": {"ParentId": "15660279", "CommentCount": "3", "Body": "<p>It's the same as:</p>\n<pre><code>void ordered(int num1, double list, ...);\n</code></pre>\n", "OwnerUserId": "962089", "PostTypeId": "2", "Id": "15660326", "Score": "3", "CreationDate": "2013-03-27T13:41:44.403", "LastActivityDate": "2013-03-27T13:41:44.403"}, "bq_ids": {"n4140": {"so_15660279_15660477_0": {"section_id": 3240, "quality": 0.9629629629629629, "length": 26}}, "n3337": {"so_15660279_15660477_0": {"section_id": 3113, "quality": 0.9629629629629629, "length": 26}}, "n4659": {"so_15660279_15660477_0": {"section_id": 3996, "quality": 0.9629629629629629, "length": 26}}}});