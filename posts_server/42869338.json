post_cb({"bq_ids": {"n4140": {"so_42869338_42869338_0": {"length": 6, "quality": 1.0, "section_id": 485}}, "n3337": {"so_42869338_42869338_0": {"length": 6, "quality": 1.0, "section_id": 476}}}, "42869338": {"ViewCount": "60", "Body": "<p>When inheriting a constructor template, GCC (6.2.0 via MinGW-w64, 6.3 via <a href=\"http://ideone.com/\" rel=\"nofollow noreferrer\">Ideone.com</a>) seems to ignore access modifiers.</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Base\n{\nprotected:\n    template&lt;typename ...Args&gt;\n    Base(Args ...args)\n    {\n        std::cout &lt;&lt; \"variadic ctor\" &lt;&lt; std::endl;\n    }\n\n    template&lt;typename T&gt;\n    Base(T t)\n    {\n        std::cout &lt;&lt; \"template ctor\" &lt;&lt; std::endl;\n    }\n\n    Base(char const *s)\n    {\n        std::cout &lt;&lt; s &lt;&lt; std::endl;\n    }\n};\n\nclass Derived : public Base\n{\nprotected:\n    using Base::Base;\n};\n\nint main(int, char**) noexcept\n{\n    //Base bv{ 0, 1 }; // error: 'Base::Base(Args ...) [with Args = {int, int}]' is protected within this context\n    //Base bt{ 0 }; // error: 'Base::Base(T) [with T = int]' is protected within this context\n    //Base bs{ \"base\" }; // error: 'Base::Base(const char*)' is protected within this context\n    Derived dv{ 0, 1 };\n    Derived dt{ 0 };\n    //Derived ds{ \"derived\" }; // error: 'Derived::Derived(const char*)' is protected within this context\n    return 0;\n}\n</code></pre>\n<p>None of these should be constructible, but the Derived class is still constructible through the templated constructors. As shown by the <code>char const</code> constructor, only the non-template constructor inherits proper access modifiers.</p>\n<p><a href=\"http://ideone.com/5JVFxc\" rel=\"nofollow noreferrer\">Live Demo</a></p>\n<p>This is incorrect behavior, isn't it?</p>\n<p><strong>EDIT</strong>: <a href=\"https://stackoverflow.com/a/21016082/1136311\">This answer</a> provides the following related citation when <code>using X::X;</code>:</p>\n<blockquote>\n<p id=\"so_42869338_42869338_0\">A constructor so declared has the same access as the corresponding constructor in X.</p>\n</blockquote>\n<p>From 12.9/4, \"Inheriting constructors\".</p>\n", "Title": "Inheriting constructor template with access modifiers", "CreationDate": "2017-03-18T01:09:39.417", "LastActivityDate": "2017-03-18T02:01:53.250", "CommentCount": "7", "LastEditDate": "2017-05-23T10:29:58.003", "PostTypeId": "1", "LastEditorUserId": "-1", "Id": "42869338", "Score": "3", "OwnerUserId": "1136311", "Tags": "<c++><c++11><gcc><mingw>", "AnswerCount": "0"}});