post_cb({"25599196": {"CommentCount": "3", "ViewCount": "92", "ClosedDate": "2014-09-01T07:22:02.250", "OwnerDisplayName": "user2953119", "CreationDate": "2014-09-01T05:14:26.303", "LastActivityDate": "2014-09-01T05:14:26.303", "Title": "UB: Destructor prodecues side-effect the program depends on, but not explicitly called", "PostTypeId": "1", "Id": "25599196", "Score": "1", "Body": "<p>Could you give an example of such undefined behavior? I mean, there is a quote from 3.8/4:</p>\n<blockquote>\n<p id=\"so_25599196_25599196_0\">For an object of a class type with a non-trivial destructor, the\n  program is not required to call the destructor explicitly before the\n  storage which the object occupies is reused or released; however, if\n  <strong>there is no explicit call to the destructor</strong> or if a <strong>delete-expression</strong>\n  (5.3.5) <strong>is not used to release the storage</strong>, the destructor shall not\n  be implicitly called and any program that depends on the side effects\n  produced by the destructor <strong>has undefined behavior</strong>.</p>\n</blockquote>\n<p>I've been trying to invent my own example, but I've doubts about it. I think one does not properly reflect the rule I cited.</p>\n<p>The code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n\nusing std::cout;\nusing std::endl;\n\nstruct A\n{\n    ~A()\n    {\n        cout &lt;&lt; \"~A\" &lt;&lt; endl; //side-effect\n    }\n\n    A()\n    { \n        cout &lt;&lt; \"A()\" &lt;&lt; endl;\n    }\n};\n\nA *a = new A;\n\n\nint main()\n{\n    //Prints A()\n    //Is such behavior undefined?\n}\n</code></pre>\n<p>The programm doesn't call destructor or <code>operator delete</code> explicitly. So, it must have UB. But it is strange if the programm has UB, because there is no explicitly destructor call and there is memory leak. Does memory leak produce UB?</p>\n", "Tags": "<c++><destructor><undefined-behavior>", "AnswerCount": "0"}, "bq_ids": {"n4140": {"so_25599196_25599196_0": {"section_id": 7192, "quality": 0.9428571428571428, "length": 33}}, "n3337": {"so_25599196_25599196_0": {"section_id": 6936, "quality": 0.9428571428571428, "length": 33}}, "n4659": {"so_25599196_25599196_0": {"section_id": 8701, "quality": 0.9428571428571428, "length": 33}}}});