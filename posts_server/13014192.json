post_cb({"13014761": {"Id": "13014761", "PostTypeId": "2", "Body": "<p>Another extraction from <code>27.7.2.3 Unformatted input functions/1</code> gives us a clue that zero-size input buffers are valid case:</p>\n<blockquote>\n<p id=\"so_13014192_13014761_0\">unformatted input functions taking a character array of <strong>non-zero size</strong> as an argument shall also store a null character (using charT()) in the first location of the array.</p>\n</blockquote>\n", "LastActivityDate": "2012-10-22T15:33:48.213", "CommentCount": "0", "CreationDate": "2012-10-22T15:33:48.213", "ParentId": "13014192", "Score": "0", "OwnerUserId": "1599260"}, "bq_ids": {"n4140": {"so_13014192_13014761_0": {"length": 18, "quality": 1.0, "section_id": 2208}, "so_13014192_13014542_2": {"length": 6, "quality": 1.0, "section_id": 2312}, "so_13014192_13014542_0": {"length": 7, "quality": 1.0, "section_id": 2237}}, "n3337": {"so_13014192_13014761_0": {"length": 18, "quality": 1.0, "section_id": 2196}, "so_13014192_13014542_2": {"length": 6, "quality": 1.0, "section_id": 2300}, "so_13014192_13014542_0": {"length": 7, "quality": 1.0, "section_id": 2225}}, "n4659": {"so_13014192_13014761_0": {"length": 18, "quality": 1.0, "section_id": 2481}, "so_13014192_13014542_2": {"length": 6, "quality": 1.0, "section_id": 2586}, "so_13014192_13014542_0": {"length": 7, "quality": 1.0, "section_id": 2510}}}, "13014192": {"ViewCount": "723", "Body": "<p>Is it perfectly ok (= well defined behaviour according to the standard) to call :</p>\n<pre><code>mystream.read(buffer, 0);\n</code></pre>\n<p>or</p>\n<pre><code>mystream.write(buffer, 0);\n</code></pre>\n<p>(and of course nothing will be read or written). \nI would like to know if I have to test if the provided size is null before calling one of these two functions.</p>\n", "AcceptedAnswerId": "13014542", "Title": "std::ifstream::read or std::ofstream::write with a zero parameter?", "CreationDate": "2012-10-22T15:02:31.613", "Id": "13014192", "CommentCount": "4", "LastEditDate": "2012-10-22T15:14:28.113", "PostTypeId": "1", "LastEditorUserId": "882932", "LastActivityDate": "2012-10-22T15:33:48.213", "Score": "6", "OwnerUserId": "882932", "Tags": "<c++><file><stream><zero><standards-compliance>", "AnswerCount": "2"}, "13014542": {"Id": "13014542", "PostTypeId": "2", "Body": "<p>Yes, the behavior is well-defined: both functions will go through the motions for unformatted input/output functions (constructing the sentry, setting failbit if eofbit is set, flushing the tied stream if necessary), and then they will get to this clause:</p>\n<p>\u00a727.7.2.3[istream.unformatted]/30</p>\n<blockquote>\n<p id=\"so_13014192_13014542_0\">Characters are extracted and stored until either of the following occurs:</p>\n<p id=\"so_13014192_13014542_1\">\u2014 n characters are stored;</p>\n</blockquote>\n<p>\u00a727.7.3.7[ostream.unformatted]/5</p>\n<blockquote>\n<p id=\"so_13014192_13014542_2\">Characters are inserted until either of the following occurs</p>\n<p id=\"so_13014192_13014542_3\">\u2014 n characters are inserted;</p>\n</blockquote>\n<p>\"zero characters are stored/inserted\" is true before anything is stored or extracted. </p>\n<p>Looking at actual implementations, I see <code>for (; gcount &lt; n; ++gcount)</code> <a href=\"http://llvm.org/svn/llvm-project/libcxx/trunk/include/istream\" rel=\"noreferrer\">in libc++</a> or <code>sgetn(buffer, n);</code> <a href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc++-v3/include/bits/istream.tcc?view=markup\" rel=\"noreferrer\">in stdlibc++</a> which has the <a href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc++-v3/include/bits/streambuf.tcc?view=markup\" rel=\"noreferrer\">equivalent loop</a> </p>\n", "LastEditorUserId": "273767", "LastActivityDate": "2012-10-22T15:28:25.670", "Score": "8", "CreationDate": "2012-10-22T15:21:25.753", "ParentId": "13014192", "CommentCount": "0", "OwnerUserId": "273767", "LastEditDate": "2012-10-22T15:28:25.670"}});