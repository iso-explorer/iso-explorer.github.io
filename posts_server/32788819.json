post_cb({"bq_ids": {"n4140": {"so_32788819_32789099_0": {"length": 7, "quality": 0.5384615384615384, "section_id": 95}, "so_32788819_32789309_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 87}, "so_32788819_32788819_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 355}}, "n3337": {"so_32788819_32789099_0": {"length": 7, "quality": 0.5384615384615384, "section_id": 86}, "so_32788819_32789309_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 82}, "so_32788819_32788819_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 345}}, "n4659": {"so_32788819_32789309_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 90}, "so_32788819_32789099_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 90}, "so_32788819_32789309_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 90}, "so_32788819_32788819_1": {"length": 5, "quality": 0.5555555555555556, "section_id": 365}}}, "32788819": {"ViewCount": "77", "Body": "<p>Consider the code:</p>\n<pre><code>class Base{};\nclass Derived: public Base{};\n\ntemplate&lt;Base&amp; b&gt; // references (and pointers) can be used as non-types\nvoid f(){}\n\nint main()\n{\n    Derived d;\n    // f(d); // Error, template type must match exactly\n    f&lt;(Base&amp;)d&gt;(); // Error here, why?!\n}\n</code></pre>\n<p>I understand why the commented call fails: the template type must match exactly. I try however a cast in the second call, and get this error (gcc5.2):</p>\n<blockquote>\n<p id=\"so_32788819_32788819_0\">error: 'd' is not a valid template argument for type 'Base&amp;' because it is not an object with external linkage</p>\n</blockquote>\n<p>Same error if I make <code>Derived d;</code> global. clang is a bit more helpful, saying</p>\n<blockquote>\n<p id=\"so_32788819_32788819_1\">... note: candidate template ignored: invalid explicitly-specified\n        argument for template parameter 'b'</p>\n</blockquote>\n<p>My question is: is the code above legal or not? If not, are there any reasons why?</p>\n", "AcceptedAnswerId": "32789099", "Title": "Error when explicitly converting a template non-type parameter", "CreationDate": "2015-09-25T18:51:55.777", "Id": "32788819", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-09-26T12:46:07.917", "Score": "5", "OwnerUserId": "3093378", "Tags": "<c++><templates>", "AnswerCount": "2"}, "32789099": {"Id": "32789099", "PostTypeId": "2", "Body": "<p><sub><em>This answer assumes C++11 or higher</em></sub></p>\n<p>Two issues here:</p>\n<p>1) No derived-to-base conversion for non-type template parameter <em>[temp.arg.nontype]/p1</em></p>\n<blockquote>\n<p id=\"so_32788819_32789099_0\">For a non-type template-parameter of reference or pointer type, the\n  value of the constant expression <strong>shall not refer to</strong> (or for a pointer type, shall not be the address of):</p>\n<p id=\"so_32788819_32789099_1\">\u2014 a subobject (1.8),</p>\n</blockquote>\n<p>2) The object's address should be available at compile time. Summarizing <em>[temp.arg.nontype]/p1</em> and <em>[expr.const]/p5</em> it follows that it should have <a href=\"http://en.cppreference.com/w/cpp/language/storage_duration#Storage_duration\" rel=\"nofollow\">static storage duration</a>.</p>\n<p>Put these two points together and you'll have that the following compiles</p>\n<pre><code>class Base{};\nclass Derived: public Base{};\n\ntemplate&lt;Base&amp; b&gt; // references (and pointers) can be used as non-types\nvoid f(){}\n\nBase obj; // Static storage duration\n\nint main()\n{\n    f&lt;obj&gt;();\n}\n</code></pre>\n<p><kbd><a href=\"http://coliru.stacked-crooked.com/a/2badba848287ae4e\" rel=\"nofollow\">Live Example</a></kbd></p>\n", "LastEditorUserId": "1938163", "LastActivityDate": "2015-09-25T19:54:05.300", "Score": "4", "CreationDate": "2015-09-25T19:11:36.540", "ParentId": "32788819", "CommentCount": "1", "OwnerUserId": "1938163", "LastEditDate": "2015-09-25T19:54:05.300"}, "32789309": {"Id": "32789309", "PostTypeId": "2", "Body": "<p>From [temp.arg.nontype]:</p>\n<blockquote>\n<p id=\"so_32788819_32789309_0\">A <em>template-argument</em> for a non-type <em>template-parameter</em> <strong>shall be a converted constant expression</strong> (5.20) of\n  the type of the <em>template-parameter</em>.</p>\n</blockquote>\n<p>There are two issues here. First, <code>d</code> doesn't have linkage so you can't take a reference to it in a constant expression. That's an easy fix though:</p>\n<pre><code>Derived d;\nint main() {\n    f&lt;d&gt;(); // still an error\n}\n</code></pre>\n<p>Now, we have another issue. We move onto the next sentence:</p>\n<blockquote>\n<p id=\"so_32788819_32789309_1\">For a non-type <em>template-parameter</em> of reference or pointer type, the\n  value of the constant expression shall not refer to (or for a pointer type, shall not be the address of):<br>\n  (1.1) \u2014 a subobject (1.8),</br></p>\n</blockquote>\n<p>We're trying to take a reference is a subobject (a base class subobject) of <code>Derived</code>. That is explicitly disallowed, regardless of linkage. </p>\n", "LastEditorUserId": "2069064", "LastActivityDate": "2015-09-26T12:46:07.917", "Score": "2", "CreationDate": "2015-09-25T19:27:14.840", "ParentId": "32788819", "CommentCount": "0", "OwnerUserId": "2069064", "LastEditDate": "2015-09-26T12:46:07.917"}});