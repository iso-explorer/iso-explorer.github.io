post_cb({"bq_ids": {"n4140": {"so_4191680_4191969_1": {"length": 20, "quality": 0.9523809523809523, "section_id": 6115}, "so_4191680_4191969_0": {"length": 59, "quality": 0.9833333333333333, "section_id": 7181}}, "n3337": {"so_4191680_4191969_1": {"length": 21, "quality": 1.0, "section_id": 408}, "so_4191680_4191969_0": {"length": 59, "quality": 0.9833333333333333, "section_id": 6925}}, "n4659": {"so_4191680_4191969_1": {"length": 14, "quality": 0.6666666666666666, "section_id": 7612}}}, "4191969": {"Id": "4191969", "PostTypeId": "2", "Body": "<p>These are operator delete overloading and are called when <code>delete</code> is invoked on the object. From 3.7.3.2 (Deallocation functions) :</p>\n<blockquote>\n<p id=\"so_4191680_4191969_0\">Each deallocation function shall return void and its first parameter shall be void*. A deallocation function\n  can have more than one parameter. <strong>If a class T has a member deallocation function named operator\n  delete with exactly one parameter, then that function is a usual (non-placement) deallocation function</strong>. If\n  class T does not declare such an operator delete but does declare a member deallocation function\n  named operator delete with exactly two parameters, the second of which has type std::size_t\n  (18.1), then this function is a usual deallocation function.</p>\n</blockquote>\n<p>And in 12.5 Free store :</p>\n<blockquote>\n<p id=\"so_4191680_4191969_1\">When a delete-expression is executed, the selected deallocation function shall be called with the address of\n  <strong>the block of storage to be reclaimed as its first argument and (if the two-parameter style is used) the size of\n  the block as its second argument</strong>.</p>\n</blockquote>\n<p>I'm not sure your second function can ever be called as it is not a 'usual deallocation function'.</p>\n", "LastEditorUserId": "451980", "LastActivityDate": "2010-11-16T07:28:31.383", "Score": "0", "CreationDate": "2010-11-16T07:22:56.570", "ParentId": "4191680", "CommentCount": "2", "OwnerUserId": "451980", "LastEditDate": "2010-11-16T07:28:31.383"}, "4191820": {"Id": "4191820", "PostTypeId": "2", "Body": "<p>They're overloading the delete operator, and the second one is using \"placement delete\".  Placement new/delete are a hack so that you can have C++ constructors initialize the class on top of memory you provide (instead of ::new), and possibly with additional arguments like you see here.  Google can fill you in with the gory details.</p>\n", "LastActivityDate": "2010-11-16T06:51:07.487", "CommentCount": "5", "CreationDate": "2010-11-16T06:51:07.487", "ParentId": "4191680", "Score": "0", "OwnerUserId": "447065"}, "4191966": {"Id": "4191966", "PostTypeId": "2", "Body": "<pre><code>void  operator delete(void*) {}\nvoid  operator delete(void* p, void*) {}\n</code></pre>\n<p>These are custom deallocation functions. A deallocation function is called via a <code>delete</code>expression. E.g.</p>\n<pre><code>YourClass* p = new YourClass();    // Allocates memory &amp; calls constructor\n// ... whatever, then\ndelete p;                          // Calls destructor &amp; deallocates memory\n</code></pre>\n<p>For your class the <code>delete</code> expression in the last line above would first call the destructor, and then it would call the single <code>void*</code> argument deallocation function that the class defines, the first of your two functions, <em>if</em> that deallocation is accessible.</p>\n<p>However, it might be that the deallocation function is declared as <code>private</code> or <code>protected</code>, for the purpose of making it inaccessible. In the first case a <code>delete</code> expression outside the class' own code won't compile (inaccessible deallocation function). And if so then that may be the whole point  --  or, don't be surprised if there's no point at all.</p>\n<p>By the way, have a look at <a href=\"http://www.cplusplus.com/doc/tutorial/\" rel=\"nofollow\">this tutorial</a>. It's apparently the least bad free introduction to C++ on the net. Bruce Eckel's e-book <a href=\"http://www.mindview.net/Books/TICPP/ThinkingInCPP2e.html\" rel=\"nofollow\">\"Thinking in C++\"</a> is also free, but it has some errors and misinformation (it used to be the other way around though, the tutorial at cplusplus.com used to be very bad, once).</p>\n<p>Cheers &amp; hth.,</p>\n", "LastActivityDate": "2010-11-16T07:22:35.273", "CommentCount": "3", "CreationDate": "2010-11-16T07:22:35.273", "ParentId": "4191680", "Score": "1", "OwnerUserId": "464581"}, "4191680": {"ViewCount": "683", "Body": "<p>anybody me about constructor overriding.. </p>\n<p>i have this </p>\n<pre><code>void  operator delete(void*) {}\n\nvoid  operator delete(void* p, void*) {}\n</code></pre>\n<p>in my class.. that looks like overloading(same function name and return type but different parameter list) but its overriding .. how its overriding.. </p>\n<p>anyone an explain me these two lines function.</p>\n", "Title": "Overriding operator", "CreationDate": "2010-11-16T06:24:57.280", "LastActivityDate": "2010-11-16T07:32:06.387", "CommentCount": "5", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2010-11-16T07:32:06.387", "LastEditorUserId": "418110", "Id": "4191680", "Score": "1", "OwnerUserId": "494192", "Tags": "<c++><override><overloading><new-operator>", "AnswerCount": "3"}});