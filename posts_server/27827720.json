post_cb({"bq_ids": {"n4140": {"so_27827720_33489694_0": {"length": 18, "quality": 1.0, "section_id": 3327}}, "n3337": {"so_27827720_33489694_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 3197}}, "n4659": {"so_27827720_33489694_0": {"length": 14, "quality": 0.7777777777777778, "section_id": 4093}}}, "27827720": {"ViewCount": "291", "Body": "<p>Why doesn't this work:</p>\n<pre><code>constexpr initializer_list&lt;int&gt; ilist = {1,2,3,4};\nconstexpr int my_min = min(ilist);\n</code></pre>\n<p>While this does:</p>\n<pre><code>constexpr int my_min = min({1,2,3,4});\n</code></pre>\n<p>I'm basing my code on the constexpr std::min() function as shown <a href=\"http://en.cppreference.com/w/cpp/algorithm/min\">here</a> and I'm using clang3.5.0 to compiler (g++4.9.1 doesn't seem to be aware of a constexpr std::min()).</p>\n<p>I can't make sense of the error I'm getting:</p>\n<pre><code>clang35 -stdlib=libc++ -std=c++14 test.cpp  -o test;\ntest.cpp:158:35: error: constexpr variable 'ilist' must be initialized by a constant expression\n  constexpr initializer_list&lt;int&gt; ilist = {1,2,3,4};\n                                  ^       ~~~~~~~~~\ntest.cpp:158:35: note: pointer to subobject of temporary is not a constant expression\ntest.cpp:158:43: note: temporary created here\n  constexpr initializer_list&lt;int&gt; ilist = {1,2,3,4};\n                                          ^\ntest.cpp:159:17: error: constexpr variable 'my_min' must be initialized by a constant expression\n  constexpr int my_min = min(ilist);\n                ^        ~~~~~~~~~~\ntest.cpp:159:30: note: initializer of 'ilist' is not a constant expression\n  constexpr int my_min = min(ilist);\n                             ^\ntest.cpp:159:30: note: in call to 'initializer_list(ilist)'\ntest.cpp:158:35: note: declared here\n  constexpr initializer_list&lt;int&gt; ilist = {1,2,3,4};\n</code></pre>\n", "AcceptedAnswerId": "33489694", "Title": "pass constexpr intializer_list as argument in c++14", "CreationDate": "2015-01-07T20:04:06.670", "Id": "27827720", "CommentCount": "4", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-01-07T20:39:11.390", "LastEditorUserId": "241631", "LastActivityDate": "2015-11-03T00:52:34.277", "Score": "6", "OwnerUserId": "3272850", "Tags": "<c++><c++11><c++14>", "AnswerCount": "2"}, "33489694": {"Id": "33489694", "PostTypeId": "2", "Body": "<p>The reason why your first snippet doesn't compile as opposed to the second one is the point in time at which the underlying array is being created. [dcl.init.list]/5:</p>\n<blockquote>\n<p id=\"so_27827720_33489694_0\">An object of type <code>std::initializer_list&lt;E&gt;</code> is constructed from an\n  initializer list as if the implementation allocated a <strong>temporary array</strong>\n<strong>of <code>N</code> elements of type <code>const E</code></strong>, where <code>N</code> is the number of elements in\n  the initializer list.</p>\n</blockquote>\n<p>Now, when calling <code>min</code>, we access elements of that array. However, [expr.const]/7 is inviolable:</p>\n<p><a href=\"https://i.stack.imgur.com/3UNop.png\" rel=\"nofollow noreferrer\"><img alt=\"enter image description here\" src=\"https://i.stack.imgur.com/3UNop.png\"/></a></p>\n<p>None of the exceptions apply, but note the last bullet point which is applicable in your second example.</p>\n<p>Clang is (unsurprisingly) correct, while GCC spuriously accepts your code. The above ruling is also why @dyp's code fails: Performing an l-t-r conversion on <code>i</code> is not a constant expression. In particular, (2.7.1) doesn't apply since the temporary isn't <code>const</code>.</p>\n", "LastActivityDate": "2015-11-03T00:52:34.277", "Score": "2", "CreationDate": "2015-11-03T00:52:34.277", "ParentId": "27827720", "CommentCount": "0", "OwnerUserId": "3647361"}, "28342838": {"Id": "28342838", "PostTypeId": "2", "Body": "<p>C++14 is not implemented in full yet in neither g++ nor clang++. In your particular case: g++ STL does not have implemented <code>template constexpr T min(std::initializer_list ilist);</code> \nwhile clang++ does not have constexptr constructor for initializer_list yet.</p>\n", "LastActivityDate": "2015-02-05T11:31:40.103", "Score": "-2", "CreationDate": "2015-02-05T11:31:40.103", "ParentId": "27827720", "CommentCount": "2", "OwnerUserId": "2033752"}});