post_cb({"bq_ids": {"n4140": {"so_22021524_22038330_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 7094}}, "n3337": {"so_22021524_22038330_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 6837}}, "n4659": {"so_22021524_22038330_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 8595}}}, "22022274": {"Id": "22022274", "PostTypeId": "2", "Body": "<p>You can only forward declare InternalState and then use pointers or references to it before the compiler sees the definition:</p>\n<pre><code>template &lt;class T&gt;\nclass MyClass {\npublic:\n   // only the stuff the client needs to see here\n   void userCallableFunction() {\n      std::unique_ptr&lt;InternalState&gt; state = createInternal();\n      doPrivateStuff(*state);\n   }\n\n private:\n   void doPrivateStuff(InternalState const&amp;);\n\n   // fine for the private noise to be down here\n   struct InternalState {\n   };\n\n   std::unique_ptr&lt;InternalState&gt; createInternal() {\n       return std::make_unique&lt;InternalState&gt;();\n   }\n\n };\n</code></pre>\n<p>It is similar to the PIMPL idiom, so you might want to look this up.</p>\n", "LastActivityDate": "2014-02-25T17:55:37.497", "CommentCount": "1", "CreationDate": "2014-02-25T17:55:37.497", "ParentId": "22021524", "Score": "0", "OwnerUserId": "2169853"}, "22038330": {"Id": "22038330", "PostTypeId": "2", "Body": "<p>As an unqualified-id (no <code>::</code>) and not being of a syntax that it could be interpreted as a function, where ADL could apply, the name <code>InternalState</code> in the statement</p>\n<pre><code>InternalState state;\n</code></pre>\n<p>is looked up using normal unqualified lookup (lookup for unqualifed names).</p>\n<p>For unqualified names inside the <em>body</em> of a member function, a special rule applies, see [basic.lookup.unqual]/8</p>\n<blockquote>\n<p id=\"so_22021524_22038330_0\">For the members of a class <code>X</code>, a name used in a member function body [...], shall be declared in one of the following ways:</p>\n<ul>\n<li>before its use in the block in which it is used or in an enclosing block (6.3), or</li>\n<li>shall be a member of class <code>X</code> or be a member of a base class of <code>X</code> (10.2), or</li>\n</ul>\n</blockquote>\n<p>Note that this imposes an ordering on the unqualified lookup: First, the enclosing blocks are searched, then, if nothing has been found, the class members are searched. Also note: as <code>InternalState</code> in this context is not dependent on a template-parameter, the base class scope won't be searched (if there was a base class).</p>\n<p>The important part is a bit subtle, unfortunately: <em>shall be a member of class <code>X</code></em> does <strong>not</strong> imply <em>shall be declared before the member function body</em>. For example,</p>\n<pre><code>struct X\n{\n    int meow()\n    {\n        return m; // (A)\n    }\n\n    int m;\n} // (B)\n;\n</code></pre>\n<p>In the line <code>(A)</code>, the name <code>m</code> cannot be found in the current block (or any enclosing blocks, blocks are compound-statements, not just any <code>{}</code>). Therefore, it is looked up in the <em>whole</em> set of members of <code>X</code>. This is only possible once <code>X</code> has been completed, i.e. at the point <code>(B)</code>.</p>\n<p>The same applies to names that refer to nested classes -- after all, name lookup needs to find out what kind (e.g. function, variable, type) of entity the name refers to. Also, lookup for non-elaborated names IIRC doesn't discriminate between these kinds.</p>\n<p>Unfortunately, that's the best I can find right now :/ I'm not happy as it's quite subtle and only answers the question indirectly.</p>\n", "LastActivityDate": "2014-02-26T10:21:12.787", "CommentCount": "2", "CreationDate": "2014-02-26T10:21:12.787", "ParentId": "22021524", "Score": "1", "OwnerUserId": "420683"}, "22021524": {"ViewCount": "48", "Body": "<p>I have a situation where I've got a template class that really just exposes one public function, and uses a locally-defined struct used for internal state which I don't want cluttering up the public section of my header. For instance:</p>\n<pre><code>template &lt;class T&gt;\nclass MyClass {\npublic:\n\n   struct InternalState {\n       // lots of noisy stuff I don't want to see in the public section\n   };\n\n   void userCallableFunction() {\n      InternalState state;\n      doPrivateStuff(state);\n   }\n\n private:\n   doPrivateStuff(InternalState&amp; state) {\n      // ok for the internals to go here \n   }\n };\n</code></pre>\n<p>I want to push the definition of <code>InternalState</code> down into the private section as the client of the class doesn't need to see it.  I want to reduce the noise so it looks like this:</p>\n<pre><code>template &lt;class T&gt;\nclass MyClass {\npublic:\n   // only the stuff the client needs to see here\n   void userCallableFunction() {\n      InternalState state;\n      doPrivateStuff(state);\n   }\n\n private:\n   // fine for the private noise to be down here\n   struct InternalState {\n   };\n\n    ... \n };\n</code></pre>\n<p>The question is: is it legal to do this? ie declare <code>InternalState</code> <em>after</em> it's used in <code>userCallableFunc()</code> ?  I know that you can't do this for non-inlined/templated functions, but which rules apply for inline/template functions?</p>\n<p>EDIT: </p>\n<p>I've tried this in Visual Studio 2010, Clang 4.1 and gcc 4.8.1 (sample in <a href=\"http://ideone.com/VOiDjE\" rel=\"nofollow\">IdeOne</a>, and also a non-templated but <a href=\"http://ideone.com/b0TYrC\" rel=\"nofollow\">inlined case</a>) and it builds successfully for all.  So the issue is, is it safe and portable to do this?  Please provide references rather than just saying 'no you can't do this'.</p>\n", "Title": "Can class-local types be used in template classes before they are defined", "CreationDate": "2014-02-25T17:19:54.803", "LastActivityDate": "2014-02-26T12:09:21.480", "CommentCount": "3", "LastEditDate": "2014-02-26T12:09:21.480", "PostTypeId": "1", "LastEditorUserId": "188414", "Id": "22021524", "Score": "1", "OwnerUserId": "188414", "Tags": "<c++><templates>", "AnswerCount": "2"}});