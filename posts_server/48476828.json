post_cb({"bq_ids": {"n4140": {"so_48476828_48478218_0": {"length": 33, "quality": 0.9705882352941176, "section_id": 6299}}, "n3337": {"so_48476828_48478218_0": {"length": 33, "quality": 0.9705882352941176, "section_id": 6056}}, "n4659": {"so_48476828_48478218_0": {"length": 33, "quality": 0.9705882352941176, "section_id": 7808}}}, "48476828": {"ViewCount": "82", "Body": "<p>I was able to define the output stream operator for a simple struct, however, not for std::array. The following code fails to compile. What is wrong and how can I fix it?</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;array&gt;\n#include &lt;iostream&gt;\n#include &lt;boost/log/core.hpp&gt;\n#include &lt;boost/log/trivial.hpp&gt;\n\nusing hash_t = std::array&lt; unsigned char, 32 &gt;;\n\nstd::ostream&amp; operator&lt;&lt; ( std::ostream&amp; os, hash_t const&amp; arr )\n{\n    os &lt;&lt; \"ole!\";\n    return os;\n}\n\nint main(int, char*[])\n{\n    hash_t arr;\n    std::cerr &lt;&lt; arr &lt;&lt; std::endl; // complies cleanly\n    BOOST_LOG_TRIVIAL(debug) &lt;&lt; arr; // Error\n    return 0;\n}\n</code></pre>\n<p>Here come the errors.</p>\n<p>GCC (boost 1.55, gcc-4.9.2):</p>\n<pre><code>In file included from /usr/include/boost/log/sources/record_ostream.hpp:31:0,\n                 from /usr/include/boost/log/trivial.hpp:23,\n                 from trival.cpp:4:\n/usr/include/boost/log/utility/formatting_ostream.hpp: In instantiation of \u2018boost::log::v2s_mt_posix::basic_formatting_ostream&lt;CharT, TraitsT, AllocatorT&gt;&amp; boost::log::v2s_mt_posix::operator&lt;&lt;(boost::log::v2s_mt_posix::basic_formatting_ostream&lt;CharT, TraitsT, AllocatorT&gt;&amp;, const T&amp;) [with CharT = char; TraitsT = std::char_traits&lt;char&gt;; AllocatorT = std::allocator&lt;char&gt;; T = std::array&lt;unsigned char, 32ul&gt;]\u2019:\ntrival.cpp:18:30:   required from here\n/usr/include/boost/log/utility/formatting_ostream.hpp:710:19: error: cannot bind \u2018boost::log::v2s_mt_posix::basic_formatting_ostream&lt;char&gt;::ostream_type {aka std::basic_ostream&lt;char&gt;}\u2019 lvalue to \u2018std::basic_ostream&lt;char&gt;&amp;&amp;\u2019\n     strm.stream() &lt;&lt; value;\n                   ^\nIn file included from /usr/include/c++/4.9/iostream:39:0,\n                 from trival.cpp:2:\n/usr/include/c++/4.9/ostream:602:5: note: initializing argument 1 of \u2018std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::operator&lt;&lt;(std::basic_ostream&lt;_CharT, _Traits&gt;&amp;&amp;, const _Tp&amp;) [with _CharT = char; _Traits = std::char_traits&lt;char&gt;; _Tp = std::array&lt;unsigned char, 32ul&gt;]\u2019\n     operator&lt;&lt;(basic_ostream&lt;_CharT, _Traits&gt;&amp;&amp; __os, const _Tp&amp; __x)\n</code></pre>\n<p>Clang error (boost 1.64, clang-800.0.42.1):</p>\n<pre><code>In file included from /usr/local/include/boost/log/trivial.hpp:23:\nIn file included from /usr/local/include/boost/log/sources/record_ostream.hpp:36:\n/usr/local/include/boost/log/utility/formatting_ostream.hpp:878:19: error: invalid operands to binary expression ('ostream_type' (aka\n      'basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;') and 'std::__1::array&lt;unsigned char, 32&gt;')\n    strm.stream() &lt;&lt; value;\n    ~~~~~~~~~~~~~ ^  ~~~~~\n/usr/local/include/boost/log/sources/record_ostream.hpp:390:51: note: in instantiation of function template specialization\n      'boost::log::v2_mt_posix::operator&lt;&lt;&lt;boost::log::v2_mt_posix::basic_formatting_ostream&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;,\n      std::__1::array&lt;unsigned char, 32&gt; &gt;' requested here\n    static_cast&lt; formatting_ostream_type&amp; &gt;(strm) &lt;&lt; value;\n                                                  ^\n/Users/adam/GitPen/BoostLog/trival/trival.cpp:18:27: note: in instantiation of function template specialization\n      'boost::log::v2_mt_posix::operator&lt;&lt;&lt;boost::log::v2_mt_posix::basic_record_ostream&lt;char&gt;, std::__1::array&lt;unsigned char, 32&gt; &gt;' requested here\n        BOOST_LOG_TRIVIAL(debug) &lt;&lt; arr;\n</code></pre>\n", "AcceptedAnswerId": "48478218", "Title": "How to define output stream operator for boost log and a custom type", "CreationDate": "2018-01-27T14:35:22.390", "Id": "48476828", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2018-01-27T17:10:46.640", "Score": "1", "OwnerUserId": "6181762", "Tags": "<c++><templates><boost-log><stream-operators>", "AnswerCount": "1"}, "48478218": {"Id": "48478218", "PostTypeId": "2", "Body": "<p>You may not like this answer.</p>\n<p>To get this to work properly at the moment you need to add your <code>operator&lt;&lt;</code> to <code>namespace std</code>:</p>\n<pre><code>namespace std{\n   std::ostream&amp; operator&lt;&lt; ( std::ostream&amp; os, const hash_t&amp; arr )\n   {/*...*/}\n}\n</code></pre>\n<p>because of how ADL works, it is going to only consider the <code>operator&lt;&lt;</code> and its specializations within <code>namespace std</code></p>\n<p>You wont like it because adding this function to <code>namespace std</code> is not a legal thing to do:</p>\n<p>[namespace.std]</p>\n<blockquote>\n<p id=\"so_48476828_48478218_0\">The behavior of a C++ program is undefined if it adds declarations or definitions to namespace <code>std</code> or to a\n  namespace within namespace std unless otherwise specified. A program may add a template specialization\n  for any standard library template to namespace std only if the declaration depends on a user-defined type\n  and the specialization meets the standard library requirements for the original template and is not explicitly\n  prohibited.</p>\n</blockquote>\n<p>Maybe the easiest thing to do would be to inherit from (and do nothing else) the <code>std</code> type instead:</p>\n<pre><code>struct hash_t : std::array&lt; unsigned char, 32 &gt;{};\n</code></pre>\n", "LastEditorUserId": "27678", "LastActivityDate": "2018-01-27T17:09:39.307", "Score": "1", "CreationDate": "2018-01-27T17:03:17.467", "ParentId": "48476828", "CommentCount": "4", "OwnerUserId": "27678", "LastEditDate": "2018-01-27T17:09:39.307"}});