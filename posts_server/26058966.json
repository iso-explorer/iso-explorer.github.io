post_cb({"26059261": {"ParentId": "26058966", "CommentCount": "0", "Body": "<p>Clang's unit tests for <code>namespace using</code> and <code>alias directives</code> is exactly the answer to your question:</p>\n<blockquote>\n<p id=\"so_26058966_26059261_0\">clang-cc -fsyntax-only -verify %s</p>\n</blockquote>\n<pre><code>struct ns1 {}; // This is not a namespace, although a namespace has ns1 as a name\nvoid ns2();\nint ns3 = 0;\n\nnamespace ns0 {\n  namespace ns1 {\n    struct test0 {};\n  }\n  namespace ns2 {\n    struct test1 {};\n  }\n  namespace ns3 {\n    struct test2 {};\n  }\n}\n\nusing namespace ns0;\n\nnamespace test3 = ns1; // don't get confused\nnamespace test4 = ns2;\nnamespace test5 = ns3;\n\nusing namespace ns1; // don't get confused\nusing namespace ns2;\nusing namespace ns3;\n\ntest0 a;\ntest1 b;\ntest2 c;\n</code></pre>\n<p>This issue has also been discussed in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3160.html\" rel=\"nofollow\">n3160 defect report</a></p>\n", "OwnerUserId": "1938163", "PostTypeId": "2", "Id": "26059261", "Score": "1", "CreationDate": "2014-09-26T12:11:17.950", "LastActivityDate": "2014-09-26T12:11:17.950"}, "26059248": {"ParentId": "26058966", "PostTypeId": "2", "CommentCount": "2", "Body": "<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3160.html#373\" rel=\"nofollow\">Defect report 373: Lookup on namespace qualified name in using-directive</a> gives an example of why the wording matters:</p>\n<pre><code>namespace X {\n  namespace Y {\n    struct X {\n      void f()\n      {\n        using namespace X::Y;\n        namespace Z = X::Y;\n      }\n    };\n  }\n}\n</code></pre>\n<p>Which <code>X</code> is being referred to in <code>using namespace X::Y</code> the struct or the namespace? Without that wording in <code>3.4.6</code> it would be ambiguous.</p>\n<p>This actually lead to the change in the wording from:</p>\n<blockquote>\n<p id=\"so_26058966_26059248_0\">When looking up a namespace-name in a using-directive or namespace-alias-definition, only namespace names are considered. </p>\n</blockquote>\n<p>to what we have today because the original wording did not cover the <em>nested-name-specifier</em>.</p>\n<p>The ambiguity is with the <em>nested-name-specifier</em> which if we look at the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">draft C++11 standard</a> the grammar in section <code>5.1.1</code> <em>General</em> is as follows:</p>\n<pre><code>nested-name-specifier:\n    ::opt type-name ::\n    ::opt namespace-name ::\n    decltype-specifier ::\n    nested-name-specifier identifier ::\n    nested-name-specifier templateopt simple-template-id ::\n</code></pre>\n<p>and the following paragraphs which I won't copy since they are large do not restrict <em>nested-name-specifier</em> to a <em>namespace</em>. </p>\n<p>As far as I can tell section <code>7.3.1</code> <em>Namespace definition</em> sufficiently restricts <em>namespace-name</em> to prevent ambiguities. </p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2014-11-03T20:32:52.927", "Id": "26059248", "Score": "2", "CreationDate": "2014-09-26T12:10:47.260", "LastActivityDate": "2014-11-03T20:32:52.927"}, "bq_ids": {"n4140": {"so_26058966_26059248_0": {"section_id": 5487, "quality": 0.8571428571428571, "length": 6}, "so_26058966_26058966_0": {"section_id": 7133, "quality": 1.0, "length": 9}}, "n3337": {"so_26058966_26059248_0": {"section_id": 5273, "quality": 0.8571428571428571, "length": 6}, "so_26058966_26058966_0": {"section_id": 6877, "quality": 1.0, "length": 9}}, "n4659": {"so_26058966_26059248_0": {"section_id": 6922, "quality": 0.8571428571428571, "length": 6}, "so_26058966_26058966_0": {"section_id": 8634, "quality": 1.0, "length": 9}}}, "26058966": {"CommentCount": "0", "ViewCount": "120", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2014-09-26T11:55:23.060", "LastActivityDate": "2014-11-03T20:32:52.927", "Title": "What other names could be considered during the lookup for a namespace-name, different than namespace names?", "FavoriteCount": "0", "LastEditDate": "2014-09-27T00:18:49.907", "Id": "26058966", "Score": "3", "Body": "<p>\u00a73.4.6/1:</p>\n<blockquote>\n<p id=\"so_26058966_26058966_0\">In a <em>using-directive</em> or <em>namespace-alias-definition</em>, during the\n  lookup for a <em>namespace-name</em> or for a name in a\n  <em>nested-name-specifier</em> only namespace names are considered.</p>\n</blockquote>\n<p>Basically, what I'm asking is: \"why is this paragraph necessary?\"</p>\n", "Tags": "<c++><c++11><namespaces><language-lawyer><name-lookup>", "OwnerUserId": "3694387", "AnswerCount": "2"}});