post_cb({"bq_ids": {"n4140": {"so_31793983_31794110_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 3298}}, "n3337": {"so_31793983_31794110_0": {"length": 17, "quality": 0.8947368421052632, "section_id": 3168}}, "n4659": {"so_31793983_31794110_0": {"length": 12, "quality": 0.631578947368421, "section_id": 4063}}}, "31794110": {"Id": "31794110", "PostTypeId": "2", "Body": "<p>You can only do aggregate initialization on aggregates. An aggregate is, from [dcl.init.aggr]:</p>\n<blockquote>\n<p id=\"so_31793983_31794110_0\">An aggregate is an array or a class (Clause 9) with no user-provided constructors (12.1), no private or\n  protected non-static data members (Clause 11), <strong>no base classes (Clause 10)</strong>, and no virtual functions (10.3).</p>\n</blockquote>\n<p><code>MoveEvent</code> is not an aggregate. Thus, you will have to add a constructor:</p>\n<pre><code>template &lt;class Derived&gt;\nstruct Event {\n};\n\nstruct MoveEvent: Event&lt;MoveEvent&gt; {\n    MoveEvent(int x, int y) : x(x), y(y) { }\n    int x, y;\n};\n\n\nint main() {\n    MoveEvent event{5, 4}; // NOW this is fine\n}\n</code></pre>\n", "LastActivityDate": "2015-08-03T18:19:00.330", "CommentCount": "0", "CreationDate": "2015-08-03T18:19:00.330", "ParentId": "31793983", "Score": "5", "OwnerUserId": "2069064"}, "31793983": {"ViewCount": "202", "Body": "<p>I am trying to use struct initialization on a derived from template struct. The code goes something like this:</p>\n<pre><code>template &lt;class Derived&gt;\nstruct Event{\n//the level of access on the ctor has nothing to do with the problem\n//protected:\n//    Event() = default;\n};\n\nstruct MoveEvent: Event&lt;MoveEvent&gt;{\n    int x, y;\n};\n\n\nint main(){\n    //how do I make this work?\n  //MoveEvent event = {.x =5, .y = 4};\n}\n</code></pre>\n<p>I thought it might have something to do with CTRP, but changing <code>Event&lt;MoveEvent&gt;</code> to <code>Event&lt;int&gt;</code> yields the same problem. Furthermore, I thought it was an issue with POD, but <code>std::is_pod</code> returns <code>true</code> for <code>MoveEvent</code>. So what's the problem here? Why can't I use struct initialization?</p>\n", "AcceptedAnswerId": "31794110", "Title": "Struct initialization of derived struct with a templated base type", "CreationDate": "2015-08-03T18:11:29.140", "LastActivityDate": "2015-08-03T18:19:27.573", "CommentCount": "8", "LastEditDate": "2015-08-03T18:12:28.487", "PostTypeId": "1", "Tags": "<c++><c++11>", "Id": "31793983", "AnswerCount": "2", "Score": "0", "OwnerUserId": "975989", "ClosedDate": "2015-08-03T18:20:05.000", "LastEditorUserId": "975989"}, "31794114": {"Id": "31794114", "PostTypeId": "2", "Body": "<p>You cannot use this syntax for a couple reasons, firstly that \"designated initializers\" are a C feature, <a href=\"https://stackoverflow.com/questions/18731707/why-does-c11-not-support-designated-initializer-list-as-c99\">not a C++ feature</a></p>\n<pre><code>MoveEvent event = {.x = 5, .y = 4};\n</code></pre>\n<p>Secondly, you cannot use aggregate initialization for a derived class, because as soon as you introduce inheritance, you <a href=\"https://stackoverflow.com/questions/16983539/why-can-i-not-brace-initialize-a-struct-derived-from-another-struct\">no longer have a POD aggregate type</a>.</p>\n<p>Your best best is to define a constructor for the derived class</p>\n<pre><code>struct MoveEvent: Event&lt;MoveEvent&gt;\n{\n    MoveEvent(int _x, int _y) : x{_x}, y{_y} {}\n    int x, y;\n};\n</code></pre>\n<p>Then you can do this</p>\n<pre><code>MoveEvent event{5, 4};\n</code></pre>\n", "LastActivityDate": "2015-08-03T18:19:27.573", "CommentCount": "0", "CreationDate": "2015-08-03T18:19:27.573", "ParentId": "31793983", "Score": "2", "OwnerUserId": "2296458"}});