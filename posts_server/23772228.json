post_cb({"23786520": {"ParentId": "23772228", "CommentCount": "0", "Body": "<p>The standard says clearly and explicitly that the answer is yes. See n3797 s8.3.4. Some of the language is hard to read, but the final note says:</p>\n<blockquote>\n<p id=\"so_23772228_23786520_0\">[Note: It follows from all this that arrays in C++ are stored row-wise (last subscript varies fastest) and that the first subscript in the declaration helps determine the amount of storage consumed by an array but plays no other part in subscript calculations. \u2014end note ]</p>\n</blockquote>\n<p>So you can reference the storage in any array by a calculation that uses simple pointer arithmetic, and iterate over all the storage in any array simply by incrementing a pointer.</p>\n<p>Please note that arrays are not required to be packed. They usually are, but there could be padding inserted between elements (but not extra padding between rows or columns).</p>\n", "OwnerUserId": "1105562", "PostTypeId": "2", "Id": "23786520", "Score": "1", "CreationDate": "2014-05-21T14:42:02.217", "LastActivityDate": "2014-05-21T14:42:02.217"}, "23772228": {"CommentCount": "3", "ViewCount": "89", "PostTypeId": "1", "LastEditorUserId": "3525545", "CreationDate": "2014-05-21T00:46:54.907", "LastActivityDate": "2014-05-21T14:42:02.217", "Title": "can i represent multi dimension array using pointers?", "FavoriteCount": "1", "LastEditDate": "2014-05-21T04:24:35.810", "Id": "23772228", "Score": "0", "Body": "<p>Given the following code, I'm trying to understand if the pointer manipulation is legit:</p>\n<pre><code>struct Foo{\n int *temp1;\n}\n</code></pre>\n<p>temp1 =&gt; 2d array</p>\n<pre><code>struct Foo1{\n int temp1[2][2];\n}\n</code></pre>\n<p>temp1 =&gt; 3d array</p>\n<pre><code>struct Foo2{\n int temp1[3][2][3];\n}\n</code></pre>\n<p>I assign value to Foo1 and Foo2 using static data. For e.g.:</p>\n<pre><code>Foo1 f1 =\n{\n { 2, 4 },\n { 1, 3 }\n};\n\nFoo2 f2 = \n{\n   {\n       {\n           {101, 102, 103},\n           {104, 105, 106},\n       },\n       {\n           {107, 108, 109},\n           {110, 111, 112},\n       },\n       {\n           {113, 114, 115},\n           {116, 117, 118},\n       },\n   }\n};\n</code></pre>\n<p>Can I reference Foo data from Foo1 like this: </p>\n<pre><code>Foo f;\nf.temp1 = (int*)f1.temp1;\nfor(int i = 0; i &lt; 2; ++i)\n{\n for(int j = 0; j &lt; 2; ++j)\n {\n  cout &lt;&lt; \"i \" &lt;&lt; i &lt;&lt; \" j \" &lt;&lt; j &lt;&lt; \" value: \" &lt;&lt; f.temp1[(i * 2) + j] &lt;&lt; endl;\n }\n}\n</code></pre>\n<p>Can I reference Foo data from Foo2 like this: </p>\n<pre><code>Foo f;\nf.temp1 = (int*)f2.temp1;\nfor(int i = 0; i &lt; 3; ++i)\n{\n for(int j = 0; j &lt; 2; ++j)\n {\n   for(int k = 0; k &lt; 3; ++k)\n   {\n    cout &lt;&lt; \"i \" &lt;&lt; i &lt;&lt; \" j \" &lt;&lt; j &lt;&lt; \" k \" &lt;&lt; k &lt;&lt; \" value: \" &lt;&lt; f.temp1[(i * 3 * 2) + (j * 2) + k] &lt;&lt; endl;\n   }\n }\n}\n</code></pre>\n<p>Essentially, I am assuming the array is going to arranged in contiguous memory and can I dereference it like this ?</p>\n", "Tags": "<c++><arrays><pointers><multidimensional-array>", "OwnerUserId": "280924", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_23772228_23786520_0": {"section_id": 3236, "quality": 0.8888888888888888, "length": 24}}, "n3337": {"so_23772228_23786520_0": {"section_id": 3109, "quality": 0.8888888888888888, "length": 24}}, "n4659": {"so_23772228_23786520_0": {"section_id": 3992, "quality": 0.8888888888888888, "length": 24}}}, "23774204": {"ParentId": "23772228", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>The answer to <a href=\"https://stackoverflow.com/questions/2565039/how-are-multi-dimensional-arrays-formatted-in-memory\">this question</a> suggests that the answer is <strong>yes</strong>.  Multidimensional arrays are indeed laid out contiguously in memory, assuming they are declared with the <code>[size1][size2][size3]</code> notation.</p>\n<p>Empirically, the answer is also <strong>yes</strong>. Consider the following code, which I wrote by cobbling together the fragments you wrote in your question.</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\nstruct Foo {\n    int *temp1;\n};\n\nstruct Foo1{\n    int temp1[2][2];\n};\n\nstruct Foo2{\n    int temp1[3][2][3];\n};\n\n\nFoo1 f1 =\n{\n    {\n        { 2, 4 },\n        { 1, 3 }\n    }\n};\nFoo2 f2 = \n{\n    {\n        {\n            {101, 102, 103},\n            {104, 105, 106},\n        },\n        {\n            {107, 108, 109},\n            {110, 111, 112},\n        },\n        {\n            {113, 114, 115},\n            {116, 117, 118},\n        },\n    }\n};\n\n\nint main(){\n\n\n    int* temp1 = (int*) f1.temp1;\n    for(int i = 0; i &lt; 2; ++i)\n        for(int j = 0; j &lt; 2; ++j)\n            cout &lt;&lt; \"i \" &lt;&lt; i &lt;&lt; \" j \" &lt;&lt; j &lt;&lt; \" value: \" \n                &lt;&lt; temp1[(i * 2) + j] &lt;&lt; endl;\n\n    temp1 = (int*) f2.temp1;\n    cout &lt;&lt; endl;\n    for(int i = 0; i &lt; 3; ++i)\n        for(int j = 0; j &lt; 2; ++j)\n            for(int k = 0; k &lt; 3; ++k)\n                cout &lt;&lt; \"i \" &lt;&lt; i &lt;&lt; \" j \" &lt;&lt; j &lt;&lt; \" k \" &lt;&lt; k &lt;&lt; \" value: \" \n                    &lt;&lt; temp1[(i * 3 * 2) + (j * 3) + k] &lt;&lt; endl;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>i 0 j 0 value: 2\ni 0 j 1 value: 4\ni 1 j 0 value: 1\ni 1 j 1 value: 3\n\ni 0 j 0 k 0 value: 101\ni 0 j 0 k 1 value: 102\ni 0 j 0 k 2 value: 103\ni 0 j 1 k 0 value: 104\ni 0 j 1 k 1 value: 105\ni 0 j 1 k 2 value: 106\ni 1 j 0 k 0 value: 107\ni 1 j 0 k 1 value: 108\ni 1 j 0 k 2 value: 109\ni 1 j 1 k 0 value: 110\ni 1 j 1 k 1 value: 111\ni 1 j 1 k 2 value: 112\ni 2 j 0 k 0 value: 113\ni 2 j 0 k 1 value: 114\ni 2 j 0 k 2 value: 115\ni 2 j 1 k 0 value: 116\ni 2 j 1 k 1 value: 117\ni 2 j 1 k 2 value: 118\n</code></pre>\n", "OwnerUserId": "391161", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:50:23.690", "Id": "23774204", "Score": "1", "CreationDate": "2014-05-21T04:51:53.163", "LastActivityDate": "2014-05-21T04:51:53.163"}});