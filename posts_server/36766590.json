post_cb({"36766719": {"ParentId": "36766590", "CommentCount": "0", "Body": "<p>Do not use incrementation inside expressions:</p>\n<pre><code>printf(\"bitcount[%d] : %d\\n\", x, bitcount(x));\nx++;\nprintf(\"bitcount[%d] : %d\\n\", x, bitcount(x));\n</code></pre>\n", "OwnerUserId": "6186816", "PostTypeId": "2", "Id": "36766719", "Score": "1", "CreationDate": "2016-04-21T10:24:01.910", "LastActivityDate": "2016-04-21T10:24:01.910"}, "36766590": {"CommentCount": "5", "ViewCount": "121", "PostTypeId": "1", "ClosedDate": "2016-04-21T10:39:35.903", "LastEditorUserId": "3128926", "CreationDate": "2016-04-21T10:17:03.480", "LastActivityDate": "2016-04-22T16:04:10.003", "Title": "GCC prefix increment operator misbehaving when passing value to the function", "AcceptedAnswerId": "36766684", "LastEditDate": "2016-04-22T16:04:10.003", "Id": "36766590", "Score": "1", "Body": "<p>Prefix Increment operator not sending incremented value of the variable (x) in a call to <code>printf()</code>, when compiled with <strong>GCC</strong>.</p>\n<p>Here is my code;</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint bitcount(unsigned);\n\nint main()\n{\n    unsigned int x = 127;\n\n    printf(\"bitcount[%d] : %d\\n\", x, bitcount(x));\n    printf(\"bitcount[%d] : %d\\n\", ++x, bitcount(x));\n\n    return 0;\n}\n\nint bitcount(unsigned int x)\n{\n    int bitcount = 0;\n    for(; x != 0; x &gt;&gt;= 1)\n        if( x &amp; 1 )\n            bitcount++;\n\n    return bitcount;\n}\n</code></pre>\n<p>in main() method, the problem is at the line below;</p>\n<pre><code>printf(\"bitcount[%d] : %d\\n\", ++x, bitcount(x));\n</code></pre>\n<p>X should be incremented and send to the <code>bitcount()</code> with the incremented value of x. The value of x is incremented however, instead of incremented value, the old value is send to the <code>bitcount()</code> function.</p>\n<p>I've tried the same thing with MS VS, this misbehaving didn't occur. The outputs are as below;</p>\n<h2>Output of Program compiled with GCC on Windows 10</h2>\n<pre><code>D:\\C\\chapter2&gt;gcc bitcount.c -o bitcount.exe\n\nD:\\C\\chapter2&gt;bitcount\nbitcount[127] : 7\nbitcount[128] : 7\n</code></pre>\n<h2>Output of Program compiled with MS VS on Windows 10</h2>\n<pre><code>bitcount[127] : 7\nbitcount[128] : 1\n</code></pre>\n<p>To ensure the problem, I've updated code to see the value which is sent to the function;</p>\n<h2>Bitcount V2</h2>\n<pre><code>#include &lt;stdio.h&gt;\n\nint bitcount(unsigned);\n\nint main()\n{\n    unsigned int x = 127;\n\n    printf(\"bitcount[%d] : %d\\n\", x, bitcount(x));\n    printf(\"bitcount[%d] : %d\\n\", ++x, bitcount(x));\n\n    return 0;\n}\n\nint bitcount(unsigned int x)\n{\n    printf(\"\\nDebug::\\tbitcount()::x=%d\\n\", x);\n    int bitcount = 0;\n    for(; x != 0; x &gt;&gt;= 1)\n        if( x &amp; 1 )\n            bitcount++;\n\n    return bitcount;\n}\n</code></pre>\n<h2>Output of Bitcount v2 compiled with GCC on Windows 10 system</h2>\n<p>Debug:: bitcount()::x=127\nbitcount[127] : 7</p>\n<p>Debug:: bitcount()::x=127\nbitcount[128] : 7</p>\n<p>As it is obvious, GCC sending the old value of X to bitcount() function.</p>\n<p>To generalize the problem, I've written the program below;</p>\n<h2>InsideFunc.c</h2>\n<pre><code>#include &lt;stdio.h&gt;\n\nint func(unsigned);\n\nint main()\n{\n    unsigned int x = 127;\n\n    printf(\"x: %d, func(): %d\\n\",   x, func(x));\n    printf(\"x: %d, func(): %d\\n\", ++x, func(x));\n\n    return 0;\n}\n\nint func(unsigned x)\n{\n    printf(\"\\n\\tDebug::func()::x=%d\\n\", x);\n\n    return x;\n}\n</code></pre>\n<h2>Output compiled with GCC on Windows 10 System</h2>\n<p>D:\\C\\chapter2&gt;gcc InsideFunc.c -o InsideFunc.exe</p>\n<p>D:\\C\\chapter2&gt;InsideFunc</p>\n<pre><code>    Debug::func()::x=127\n</code></pre>\n<p>x: 127, func(): 127</p>\n<pre><code>    Debug::func()::x=127\n</code></pre>\n<p>x: 128, func(): 127</p>\n<p>Again, value of the variable incremented but old value send to the function.</p>\n<p>Here is my gcc version;</p>\n<pre><code>D:\\C\\chapter2&gt;gcc --version\ngcc (GCC) 5.2.0\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</code></pre>\n<p>Any ideas ?</p>\n<p><strong>Late Note</strong> : I've just seen on <strong>The C Programming Language</strong> book of <strong>Kernighan &amp; Ritchie</strong>, page 49 that which explains the order of evaluation in the function arguments are uncertain and compiler dependent;</p>\n<blockquote>\n<p id=\"so_36766590_36766590_0\">Similarly, the order in which function arguments are evaluated is not\n  specified, so the statement</p>\n<p id=\"so_36766590_36766590_1\"><code>printf(\"%d %d\\n\", ++n, power(2, n)); /*WRONG */</code></p>\n<p id=\"so_36766590_36766590_2\">can produce different results with different compilers, depending on\n  whether n is incremented before power is called. The solution, of\n  course, is to write</p>\n<p id=\"so_36766590_36766590_3\"><code>++n;</code></p>\n<p id=\"so_36766590_36766590_4\"><code>printf(\"%d %d\\n\", n, power(2, n));</code></p>\n</blockquote>\n", "Tags": "<c++><c><gcc><mingw><prefix-operator>", "OwnerUserId": "3128926", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_36766590_36766590_0": {"section_id": 3161, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_36766590_36766590_0": {"section_id": 3034, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_36766590_36766590_0": {"section_id": 3923, "quality": 0.5714285714285714, "length": 4}}}, "36766684": {"ParentId": "36766590", "CommentCount": "5", "Body": "<p>Order of evaluation of function calls arguments in is unspecified in C++, so on line:</p>\n<p><code>printf(\"bitcount[%d] : %d\\n\", ++x, bitcount(x));</code></p>\n<p>there is no guarantee that <code>++x</code> will be evaluated before <code>bitcount(x)</code>, so <code>bitcount</code> may be passed <code>x</code> pre-incrementation. All your compilers have different yet valid (i.e. standard-compliant) behavior.</p>\n", "OwnerUserId": "1049435", "PostTypeId": "2", "Id": "36766684", "Score": "1", "CreationDate": "2016-04-21T10:22:06.743", "LastActivityDate": "2016-04-21T10:22:06.743"}});