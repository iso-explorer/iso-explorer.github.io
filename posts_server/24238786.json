post_cb({"24238786": {"CommentCount": "4", "AcceptedAnswerId": "24239151", "CreationDate": "2014-06-16T07:43:32.297", "LastActivityDate": "2014-06-16T08:18:54.377", "PostTypeId": "1", "ViewCount": "1372", "FavoriteCount": "7", "Title": "Is a copy constructor required when returning by implicit conversion?", "Id": "24238786", "Score": "22", "Body": "<p>The following code compiles fine in Visual C++ 2013, but not under GCC or Clang.</p>\n<p>Which is correct?<br>\nIs an accessible copy constructor required when returning an object via an implicit conversion?</br></p>\n<pre><code>class Noncopyable\n{\n    Noncopyable(Noncopyable const &amp;);\npublic:\n    Noncopyable(int = 0) { }\n};\n\nNoncopyable foo() { return 0; }\n\nint main()\n{\n    foo();\n    return 0;\n}\n</code></pre>\n<p>GCC:</p>\n<pre><code>error: 'Noncopyable::Noncopyable(const Noncopyable&amp;)' is private\n  Noncopyable(Noncopyable const &amp;);\n  ^\nerror: within this context\n Noncopyable foo() { return 0; }\n</code></pre>\n<p>Clang:</p>\n<pre><code>error: calling a private constructor of class 'Noncopyable'\nNoncopyable foo() { return 0; }\n                    ^\nnote: implicitly declared private here\n        Noncopyable(Noncopyable const &amp;);\n        ^\nwarning: C++98 requires an accessible copy constructor for class 'Noncopyable' when binding a reference to a temporary; was private [-Wbind-to-temporary-copy]\nNoncopyable foo() { return 0; }\n                           ^\nnote: implicitly declared private here\n        Noncopyable(Noncopyable const &amp;);\n        ^\n</code></pre>\n", "Tags": "<c++><copy-constructor><implicit-conversion><copy-elision>", "OwnerUserId": "541686", "AnswerCount": "3"}, "24239020": {"ParentId": "24238786", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2014-06-16T08:00:46.237", "Score": "5", "LastEditorUserId": "541686", "LastEditDate": "2014-06-16T08:07:43.600", "Id": "24239020", "OwnerUserId": "673730", "Body": "<p><strong>12.8 Copying and moving class objects [class.copy]</strong></p>\n<blockquote>\n<p id=\"so_24238786_24239020_0\">1/ <strong>A class object can be copied</strong> or moved in two ways: by initialization (12.1, 8.5), including for function argument\n  passing (5.2.2) and <strong>for function value return (6.6.3);</strong> [...]</p>\n</blockquote>\n<p>In <strong>6.6.3 The return statement [stmt.return]</strong>:</p>\n<blockquote>\n<p id=\"so_24238786_24239020_1\">2/ [...] The value of the expression is implicitly\n  converted to the return type of the function in which it appears. <strong>A return statement can involve the\n  construction and copy</strong> or move <strong>of a temporary object</strong> (12.2) [...]</p>\n</blockquote>\n<p>and <strong>12.2 Temporary objects [class.temporary]</strong>:</p>\n<blockquote>\n<p id=\"so_24238786_24239020_2\">1/ <strong>Temporaries of class type are created</strong> in various contexts: binding a reference to a prvalue (8.5.3), <strong>returning\n  a prvalue (6.6.3), a conversion that creates a prvalue (4.1, 5.2.9, 5.2.11, 5.4)</strong>, [...] Note: even if there is no call to the destructor or copy/move constructor, all\n  the semantic restrictions, such as accessibility (Clause 11) and whether the function is deleted (8.4.3), shall\n  be satisfied. [...]</p>\n</blockquote>\n<p>I'd argue that GCC and clang are correct - I'd even go as far as saying that any time you return by value, the return type has to have an accessible copy or move constructor.</p>\n<p>The logic would be that a temporary is created to convert the original type to the new type (<code>int</code> to <code>Noncopyable</code>), and afterwards a copy of that temporary is made to return for the function.</p>\n<p>It's essentialy the same as:</p>\n<pre><code>Noncopyable foo() { return Noncopyable(0); }\n</code></pre>\n<p>Would you expect a copy to be required there? I certainly would.</p>\n", "LastActivityDate": "2014-06-16T08:07:43.600"}, "24239155": {"ParentId": "24238786", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2014-06-16T08:11:08.470", "Score": "4", "LastEditorUserId": "2352671", "LastEditDate": "2014-06-16T08:18:54.377", "Id": "24239155", "OwnerUserId": "2352671", "Body": "<ul>\n<li><p>Function <code>foo</code> returns a <code>Noncopyable</code> object by value. Thus, theoretically a copy constructor must be evoked. </p></li>\n<li><p>If you make the copy constructor available (i.e., <code>public</code>) and print a message to flag its evocation, you'll see that this message is not printed <a href=\"http://coliru.stacked-crooked.com/a/5a3e842b2ec08c7a\" rel=\"nofollow\">DEMO</a> and only the overloaded conversion operator is evoked.</p></li>\n<li><p>This is due to the fact of the copy elision optimization.</p></li>\n<li><p>Thus, is not that the overloaded conversion operator requires a copy constructor, but rather the return statement of <code>foo</code> requires a copy constructor because you return by value.</p></li>\n<li><p>Eventually, the copy constructor is not going to be evoked due to copy elision but still must be available.</p></li>\n</ul>\n", "LastActivityDate": "2014-06-16T08:18:54.377"}, "24239151": {"ParentId": "24238786", "CommentCount": "5", "CreationDate": "2014-06-16T08:10:57.323", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "24239151", "Score": "15", "Body": "<p>When you <code>return</code> an expression, a temporary object of the return type is created, initialised with that expression, and then moved (or copied, if moving is not an option), into the return value. So you need an accessible copy or move constructor.</p>\n<p>It is however possible to initialise the return value directly, by using a braced list. So the following works:</p>\n<pre><code>Noncopyable foo() { return {0}; }\n</code></pre>\n<p>Similar case in <a href=\"http://ideone.com/SMCKPG\"><strong>live example</strong></a>.</p>\n", "LastActivityDate": "2014-06-16T08:10:57.323"}, "bq_ids": {"n4140": {"so_24238786_24239020_0": {"section_id": 450, "quality": 0.8333333333333334, "length": 15}, "so_24238786_24239020_1": {"section_id": 3913, "quality": 0.8947368421052632, "length": 17}, "so_24238786_24239020_2": {"section_id": 378, "quality": 0.5555555555555556, "length": 20}}, "n3337": {"so_24238786_24239020_0": {"section_id": 441, "quality": 0.8333333333333334, "length": 15}, "so_24238786_24239020_1": {"section_id": 3773, "quality": 0.8947368421052632, "length": 17}, "so_24238786_24239020_2": {"section_id": 369, "quality": 0.8333333333333334, "length": 30}}, "n4659": {"so_24238786_24239020_0": {"section_id": 472, "quality": 0.8333333333333334, "length": 15}}}});