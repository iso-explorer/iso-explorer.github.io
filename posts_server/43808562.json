post_cb({"bq_ids": {"n4659": {"so_43808562_43808676_0": {"length": 35, "section_id": 6909, "quality": 0.9459459459459459}}}, "43810131": {"ParentId": "43808562", "Score": "1", "CreationDate": "2017-05-05T16:50:35.330", "Id": "43810131", "OwnerUserId": "2015579", "LastActivityDate": "2017-05-05T16:50:35.330", "Body": "<p>Do it by building a new namespace, rather than an alias:</p>\n<pre><code>// external namespace\n\nnamespace othernamespace {\n\n    struct X {};\n    void foo(X&amp; x) {};\n}\n\n// my namespace\n\nnamespace mynamespace\n{\n    using namespace othernamespace; // equivalent to import * from othernamespace\n}\n\n\nint main()\n{\n    mynamespace::X x;\n\n    foo(x);\n}\n</code></pre>\n", "PostTypeId": "2", "CommentCount": "1"}, "43808562": {"Tags": "<c++><namespaces><c++14>", "ViewCount": "103", "LastEditDate": "2017-05-05T15:27:22.983", "CreationDate": "2017-05-05T15:19:44.123", "LastEditorUserId": "133203", "Title": "How to Alias a namespace and extend the original namespace based on the alias", "CommentCount": "0", "AcceptedAnswerId": "43808676", "Score": "3", "OwnerUserId": "2036035", "Id": "43808562", "LastActivityDate": "2017-05-05T16:50:35.330", "Body": "<p>I have the current problem in C++:</p>\n<p>I have a namespace for a given external library. I didn't like the name of this external namespace, so I did this following:</p>\n<pre><code>namespace mynamespace = othernamespace;\n</code></pre>\n<p>and this works fine if I want to say do the following:</p>\n<pre><code>mynamespace::foo(...);\n</code></pre>\n<p>but I found that I needed to have a special function to convert values found in <code>othernamespace</code> to values found in an external library.   I defined a function the following way:</p>\n<pre><code>Y xToY(mynamespace::X x);\n</code></pre>\n<p>I realized I only wanted to use this function in the context of <code>mynamespace</code>, and I still didn't like using the namespace name for <code>othernamespace</code> so I thought simple, I would do the following:</p>\n<pre><code>namespace mynamespace = othernamespace;\n\nnamespace mynamespace{\n    Y xToY(mynamespace::X x);\n}\n</code></pre>\n<p>however I get the following compiler error telling me that this can't be done:</p>\n<pre><code>myheader.h:13:11: error: namespace alias 'mynamespace' not allowed here, assuming 'othernamespace'\n</code></pre>\n<p>and thus it doesn't compile.  Note I'm currently using c++14.  I would like to know if it is possible for me to extend this namespace using my alias name for the namespace <code>othernamespace</code>.</p>\n", "PostTypeId": "1", "FavoriteCount": "1", "AnswerCount": "2"}, "43808676": {"ParentId": "43808562", "Score": "4", "CreationDate": "2017-05-05T15:27:13.883", "Id": "43808676", "OwnerUserId": "2069064", "LastActivityDate": "2017-05-05T15:27:13.883", "Body": "<p>Nope. It's unfortunately not possible. The rule, from [namespace.def], explicitly excludes aliases:</p>\n<blockquote>\n<p id=\"so_43808562_43808676_0\">In a <em>named-namespace-definition</em>, the identifier is the name of the namespace. If the identifier, when looked up (3.4.1), refers to a <em>namespace-name</em> <strong>(but not a <em>namespace-alias</em>)</strong> that was introduced in the\n  namespace in which the <em>named-namespace-definition</em> appears or that was introduced in a member of the inline namespace set of that namespace, the <em>namespace-definition</em> <em>extends</em> the previously-declared namespace.\n  Otherwise, the identifier is introduced as a <em>namespace-name</em> into the declarative region in which the <em>named-namespace-definition</em> appears.</p>\n</blockquote>\n<p>You cannot extend a namespace by alias, you can only extend a namespace by the original namespace name. </p>\n", "PostTypeId": "2", "CommentCount": "3"}});