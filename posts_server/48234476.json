post_cb({"48234814": {"Id": "48234814", "PostTypeId": "2", "Body": "<p><code>size_t</code> is really a grey area. <code>std::size_t</code> is the result type of <code>sizeof</code>, but <code>sizeof</code> is a built-in operator you can use without any <code>#include</code> at all. Consider this complete little program:</p>\n<pre><code>// no includes, no using namespace std\n\nint main()\n{\n    auto x = sizeof(int); // x is std::size_t\n}\n</code></pre>\n<p>On top of that, Visual C++ has always behaved a bit strangely here. Even with settings like <code>/permissive- /std:c++latest</code> in the newest version of the compiler, it still allows the following illegal code:</p>\n<pre><code>// no includes, no using namespace std\n\nint main()\n{\n    size_t i  = 0;\n}\n</code></pre>\n<p>In fact, it would even allow <em>this</em>:</p>\n<pre><code>// no includes, no using namespace std\n\nint main()\n{\n    int ar[10];\n\n    for (size_t x = 0; x &lt; 10; ++x)\n        ar[x] = x;\n\n    for (auto a : ar)\n        ;\n\n    return 0;\n}\n</code></pre>\n<p>Nevertheless, what others said about the indirect inclusion of headers is correct. To be precise, the C++ standard says the following about standard-library headers at \u00a720.5.5.2:</p>\n<blockquote>\n<p id=\"so_48234476_48234814_0\">A C++ header may include other C++ headers.</p>\n</blockquote>\n<p>Which means that Visual C++ behaves correctly in your case anyway. Once you include <code>&lt;iostream&gt;</code>, the implementation is free to indirectly include one of the <a href=\"http://en.cppreference.com/w/cpp/types/size_t\" rel=\"nofollow noreferrer\">six standard C++ headers that define <code>std::size_t</code></a>, and your <code>using namespace std;</code> (which is evil) does the rest.</p>\n<p>The C++ standard even guarantees some of such indirect inclusions, but this isn't one of them, so in order to make your code compatible with other compilers, you are strongly encouraged to include <code>&lt;cstddef&gt;</code> or one of the others that guarantee <code>std::size_t</code>.</p>\n", "LastActivityDate": "2018-01-12T22:21:28.160", "Score": "2", "CreationDate": "2018-01-12T22:21:28.160", "ParentId": "48234476", "CommentCount": "2", "OwnerUserId": "3313064"}, "48234542": {"Id": "48234542", "PostTypeId": "2", "Body": "<p>Standard header will usually include other standard headers, so in many cases you might get away with not including proper ones.</p>\n<p>The problem is that such relations between headers are not in the standard e.g. depend on implementatation. If you don't include required headers, your code might work on one compiler, but might fail on another.</p>\n<p>Usually if you know that something defined in header X uses type T in its definition, you might assume type T will be available after including X. For example <code>&lt;vector&gt;</code> uses <code>std::size_t</code> as part of <code>std::vector</code> definition, so it will usually include <code>&lt;cstddef&gt;</code>.</p>\n<p>Sometimes forward declarations can be used to avoid including other standard headers. But this is only possible with classes and structures, not typedefs.</p>\n<p>Some implementations, like GNU Libc for example, are more strict and try to avoid including standard headers internally. Others, like MSVC, are less strict. Code that works with GNU Libc will usually work with MSVC.</p>\n<p>It is hard to verify that your code includes everything you need. There are tools that can help you find missing include's, but building your code with multiple compilers is usually the best way to find those issues.</p>\n", "LastEditorUserId": "1143634", "LastActivityDate": "2018-01-12T22:04:48.410", "Score": "2", "CreationDate": "2018-01-12T21:54:52.347", "ParentId": "48234476", "CommentCount": "1", "OwnerUserId": "1143634", "LastEditDate": "2018-01-12T22:04:48.410"}, "48234809": {"Id": "48234809", "PostTypeId": "2", "Body": "<p>Firstly, <code>std::size_t</code> is defined in a number of standard headers:  <code>&lt;cstddef&gt;</code>, <code>&lt;cstdio&gt;</code>, <code>&lt;cstdlib&gt;</code>, <code>&lt;cstring&gt;</code>, <code>&lt;ctime&gt;</code>, and <code>&lt;cwchar&gt;</code>.</p>\n<p>Without <code>#include</code>ing one of these, your code is not required to compile.</p>\n<p>Practically, a lot of implementations of the standard library have various standard headers <code>#include</code> each other, in which case your code will compile.   It is pretty common, but NOT guaranteed, for at least one of the headers that defines <code>std::size_t</code> (or even their C header equivalents like <code>&lt;stddef.h&gt;</code>) to be included by other headers in the C++ standard library.</p>\n<p>More specifically, a lot of parts of the standard library work use dynamic memory allocation (standard containers, stream buffers, etc).  An obvious - but not required - implementation choice is that they use <code>size_t</code> to represent sizes.   For example, standard containers like <code>std::vector</code> have an associated <code>size_type</code>, and <code>std::vector&lt;any_type&gt;::size_type</code> can be, and often is, equivalent to <code>std::size_t</code>.</p>\n<p><code>&lt;iostream&gt;</code> (along with headers it automatically <code>#include</code>s) is not required to include a header that defines <code>std::size_t</code>, but - equally - nothing in the standard disallows it.</p>\n<p>In the end it comes down to how cautious you want to be concerning portability.    If <code>&lt;iostream&gt;</code> brings in a definition of <code>std::size_t</code> with your particular compiler, then your code will compile.    It is possible (although unlikely in practice, not impossible) that a future release of your compiler will update the standard headers to change that.    If you intend to port your code to another implementation (compiler and standard library) in future, there is a greater likelihood your code will need to be modified.</p>\n<p>Practically, there is no harm by explicitly <code>#include</code>ing <code>&lt;cstddef&gt;</code> or any other header that defines <code>std::size_t</code>.    That way, your code that uses <code>std::size_t</code> will compile, regardless of how other standard headers vary between implementations.</p>\n", "LastActivityDate": "2018-01-12T22:21:10.730", "Score": "2", "CreationDate": "2018-01-12T22:21:10.730", "ParentId": "48234476", "CommentCount": "0", "OwnerUserId": "4706785"}, "bq_ids": {"n4140": {"so_48234476_48234814_0": {"length": 5, "quality": 1.0, "section_id": 6331}}, "n3337": {"so_48234476_48234814_0": {"length": 5, "quality": 1.0, "section_id": 6088}}, "n4659": {"so_48234476_48234814_0": {"length": 5, "quality": 1.0, "section_id": 7841}}}, "48234538": {"Id": "48234538", "PostTypeId": "2", "Body": "<p>Standard headers are allowed to include other standard headers. Since headers in different implementations have different dependencies, you should still try to explicitly include everything that you need. It's possible that your program wouldn't build on Linux's libstdc++ or macOS's libc++, for instance.</p>\n", "LastActivityDate": "2018-01-12T21:54:37.900", "Score": "2", "CreationDate": "2018-01-12T21:54:37.900", "ParentId": "48234476", "CommentCount": "0", "OwnerUserId": "251153"}, "48234476": {"ViewCount": "112", "Body": "<p>I'm learning C++ with the book C++ Primer, and it says that \"size_t\" is defined in \"cstddef\" header, but in this exercise:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    int ar[10];\n\n    for (size_t x = 0; x &lt; 10; ++x)\n        ar[x] = x;\n\n    for (auto a : ar)\n        cout &lt;&lt; ar[a] &lt;&lt; \" \";\n\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>\n<p>That doesn't have included the header, Visual Studio 2017 (and c++ shell) compiles the program without error.</p>\n", "AcceptedAnswerId": "48234814", "Title": "C++ \"size_t\" doesn't need \"cstddef\" header?", "CreationDate": "2018-01-12T21:50:27.177", "LastActivityDate": "2018-01-12T22:21:28.160", "CommentCount": "2", "LastEditDate": "2018-01-12T21:56:05.373", "PostTypeId": "1", "LastEditorUserId": "8785698", "Id": "48234476", "Score": "3", "OwnerUserId": "9210942", "Tags": "<c++>", "AnswerCount": "5"}, "48234509": {"Id": "48234509", "PostTypeId": "2", "Body": "<p>Nope, <a href=\"http://en.cppreference.com/w/cpp/types/size_t\" rel=\"nofollow noreferrer\"><code>std::size_t</code></a> might be defined in multiple headers:</p>\n<pre><code>Defined in header &lt;cstddef&gt;\nDefined in header &lt;cstdio&gt;\nDefined in header &lt;cstdlib&gt;\nDefined in header &lt;cstring&gt;\nDefined in header &lt;ctime&gt;\nDefined in header &lt;cwchar&gt;\n</code></pre>\n<p>Also note, that <code>&lt;iostream&gt;</code> itself includes other headers.</p>\n", "LastActivityDate": "2018-01-12T21:52:26.240", "Score": "1", "CreationDate": "2018-01-12T21:52:26.240", "ParentId": "48234476", "CommentCount": "0", "OwnerUserId": "5507349"}});