post_cb({"bq_ids": {"n4140": {"so_12689870_12689935_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5440}}, "n3337": {"so_12689870_12689935_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 5235}}, "n4659": {"so_12689870_12689935_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 6867}}}, "12689935": {"Id": "12689935", "PostTypeId": "2", "Body": "<p>Yes and this is the standard behavior. It is written in \u00a77.1.6.2[dcl.type.simple]/4, where:</p>\n<blockquote>\n<p id=\"so_12689870_12689935_0\">The type denoted by <code>decltype(e)</code> is defined as follows:</p>\n<ul>\n<li>if <code>e</code> is an <strong>unparenthesized <em>id-expression</em></strong> or an unparenthesized class member access, <code>decltype(e)</code>\n  is the type of the entity named by e.</li>\n<li>...</li>\n<li>otherwise, if <code>e</code> is an lvalue, <code>decltype(e)</code> is <code>T&amp;</code>, where <code>T</code> is the type of <code>e</code>;</li>\n<li>...</li>\n</ul>\n</blockquote>\n<p>Since <code>c</code> does not have parenthesis and is an <em>id-expression</em> (here, an identifier, see \u00a75.1.1[expr.prim.general]/7), <code>decltype(c)</code> will be the type of <code>c</code>, which is <code>int</code>. </p>\n<p>Since <code>(c)</code> do have parenthesis and is an lvalue (e.g. <code>(c)=1</code> is a valid expression), <code>decltype((c))</code> will be the lvalue reference type of type of <code>(c)</code>, which is <code>int&amp;</code>.</p>\n", "LastEditorUserId": "224671", "LastActivityDate": "2012-10-02T12:18:01.283", "Score": "2", "CreationDate": "2012-10-02T12:09:27.493", "ParentId": "12689870", "CommentCount": "5", "OwnerUserId": "224671", "LastEditDate": "2012-10-02T12:18:01.283"}, "12689870": {"ViewCount": "154", "Body": "<blockquote>\n<p id=\"so_12689870_12689870_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/3097779/decltype-and-parenthesis\">decltype and parenthesis</a> </br></p>\n</blockquote>\n<p>I found this on wikipedia :</p>\n<pre><code>    auto c = 0;           // c has type int\n    auto d = c;           // d has type int\n    decltype(c) e;        // e has type int, the type of the entity named by c\n    decltype((c)) f = c;  // f has type int&amp;, because (c) is an lvalue\n</code></pre>\n<p>And using ideone compiler (C++0x idk what they use) and typeinfo I was unable to see diff between e and f. Obviously it is probably fail on my part, so I would like to know if this is final C++11 standard behaviour. </p>\n", "Title": "Do decltype(c) e; and decltype((c)) f; declare different types?", "CreationDate": "2012-10-02T12:04:14.383", "Id": "12689870", "CommentCount": "0", "LastEditDate": "2017-05-23T12:18:49.447", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2012-10-03T19:23:12.007", "Tags": "<c++><c++11><decltype>", "Score": "2", "OwnerUserId": "700825", "ClosedDate": "2012-10-03T11:42:50.643", "AnswerCount": "1"}});