post_cb({"30819548": {"ParentId": "30819547", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-06-13T14:07:49.790", "Score": "9", "LastEditorUserId": "1938163", "LastEditDate": "2015-06-13T14:13:28.443", "Id": "30819548", "OwnerUserId": "1938163", "Body": "<p>According to \u00a7 14.5.3/9</p>\n<blockquote>\n<p id=\"so_30819547_30819548_0\">The instantiation of a fold-expression produces:</p>\n<p id=\"so_30819547_30819548_1\">(9.1) \u2014 <strong>((E1 op E2) op \u00b7 \u00b7 \u00b7 )</strong> op EN for a unary left fold,</p>\n<p id=\"so_30819547_30819548_2\">(9.2) \u2014 <strong>E1 op (\u00b7 \u00b7 \u00b7 op (EN-1 op EN ))</strong> for a unary right fold,</p>\n<p id=\"so_30819547_30819548_3\">(9.3) \u2014 (((E op E1) op E2) op \u00b7 \u00b7 \u00b7 ) op EN for a binary left fold, and</p>\n<p id=\"so_30819547_30819548_4\">(9.4) \u2014 E1 op (\u00b7 \u00b7 \u00b7 op (EN-1 op (EN op E))) for a binary right fold</p>\n<p id=\"so_30819547_30819548_5\">In each case, op is the fold-operator, N is the number of elements in the pack expansion parameters, and each Ei is generated by instantiating the pattern and replacing each pack expansion parameter with its ith element.</p>\n</blockquote>\n<p>in the code above they're both unary fold expressions and their expansion is</p>\n<pre><code>template&lt;typename F, typename... T&gt;\nvoid for_each1(F fun, T&amp;&amp;... args) {\n\n    // Unary right fold (fun(args_0) , (fun(args_1) , (fun(args_2) , ...)))\n    (fun (std::forward&lt;T&gt;(args)), ...);\n}\n\ntemplate&lt;typename F, typename... T&gt;\nvoid for_each2(F fun, T&amp;&amp;... args) {\n\n    // Unary left fold ((fun(args_0) , fun(args_1)) , fun(args_2)) , ...\n    (..., fun (std::forward&lt;T&gt;(args))); \n}\n</code></pre>\n<p>so the expressions have the same <strong>evaluation order</strong> as defined by the <a href=\"http://en.cppreference.com/w/cpp/language/operator_other#Built-in_comma_operator\">comma operator</a> and thus the output is the same.</p>\n<p><sub>Credits: thanks to my friend <a href=\"http://www.italiancpp.org/utenti/marco/\">Marco</a> who raised the original question in the first place and gave me the chance to solve this <em>potentially-misleading</em> issue.</sub></p>\n", "LastActivityDate": "2015-06-13T14:13:28.443"}, "30819547": {"CommentCount": "0", "CreationDate": "2015-06-13T14:07:49.790", "PostTypeId": "1", "AcceptedAnswerId": "30819548", "LastEditorUserId": "1938163", "LastActivityDate": "2015-08-06T12:05:10.400", "LastEditDate": "2015-08-06T12:05:10.400", "ViewCount": "276", "FavoriteCount": "1", "Title": "Why doesn't a left fold expression invert the output of a right fold expression?", "Id": "30819547", "Score": "10", "Body": "<p>I'm taking a look at C++17 <a href=\"http://en.cppreference.com/w/cpp/language/fold\" rel=\"nofollow noreferrer\">fold expressions</a> and I'm wondering why does the following program outputs</p>\n<pre><code>4 5 6 \n4 5 6 \n</code></pre>\n<p>for both of the <code>for_each</code> calls</p>\n<pre><code>template&lt;typename F, typename... T&gt;\nvoid for_each1(F fun, T&amp;&amp;... args)\n{\n    (fun (std::forward&lt;T&gt;(args)), ...);\n}\n\ntemplate&lt;typename F, typename... T&gt;\nvoid for_each2(F fun, T&amp;&amp;... args)\n{\n    (..., fun (std::forward&lt;T&gt;(args)));\n}\n\nint main()\n{\n     for_each1([](auto i) { std::cout &lt;&lt; i &lt;&lt; std::endl; }, 4, 5, 6);\n     std::cout &lt;&lt; \"-\" &lt;&lt; std::endl;\n     for_each2([](auto i) { std::cout &lt;&lt; i &lt;&lt; std::endl; }, 4, 5, 6);\n}\n</code></pre>\n<p><kbd><a href=\"http://coliru.stacked-crooked.com/a/b22748999b7ec40c\" rel=\"nofollow noreferrer\">Live Example</a></kbd></p>\n<p>I thought that the second fold expression was meant to output the numbers in reverse order</p>\n<pre><code>6 5 4\n</code></pre>\n<p>How come the results are the same?</p>\n", "Tags": "<c++><templates><c++14><fold-expression>", "OwnerUserId": "1938163", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_30819547_30819548_5": {"section_id": 124, "quality": 0.8, "length": 16}}, "n3337": {"so_30819547_30819548_5": {"section_id": 118, "quality": 0.8, "length": 16}}, "n4659": {"so_30819547_30819548_5": {"section_id": 130, "quality": 1.0, "length": 20}}}});