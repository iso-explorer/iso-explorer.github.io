post_cb({"bq_ids": {"n4140": {"so_26410497_26410990_0": {"length": 16, "quality": 1.0, "section_id": 1921}}, "n3337": {"so_26410497_26410990_0": {"length": 16, "quality": 1.0, "section_id": 1910}}, "n4659": {"so_26410497_26410990_0": {"length": 14, "quality": 0.875, "section_id": 2192}}}, "26410990": {"Id": "26410990", "PostTypeId": "2", "Body": "<p>The error is mixing <code>std::cout</code> and <code>std::wcout</code>:</p>\n<blockquote>\n<h2>27.4 Standard iostream objects <code>[iostream.objects]</code></h2>\n<h3>27.4.1 Overview <code>[iostream.objects.overview]</code></h3>\n<p id=\"so_26410497_26410990_0\">3 Mixing operations on corresponding wide- and narrow-character streams follows the same semantics as\n  mixing such operations on FILEs, as specified in Amendment 1 of the ISO C standard.</p>\n</blockquote>\n<blockquote>\n<h3>7.21.2 Streams</h3>\n<p id=\"so_26410497_26410990_1\">4 Each stream has an orientation. After a stream is associated with an external file, but\n  before any operations are performed on it, the stream is without orientation. Once a wide\n  character input/output function has been applied to a stream without orientation, the\n  stream becomes a wide-oriented stream. Similarly, once a byte input/output function has\n  been applied to a stream without orientation, the stream becomes a byte-oriented stream.\n  Only a call to the freopen function or the fwide function can otherwise alter the\n  orientation of a stream. (A successful call to freopen removes any orientation.)267)<br>\n  5 <strong>Byte input/output functions shall not be applied to a wide-oriented stream and wide\n  character input/output functions shall not be applied to a byte-oriented stream.</strong> [...]</br></p>\n</blockquote>\n<p>See here for a better demonstration highlighting what goes wrong and what does not:<br>\n<a href=\"http://coliru.stacked-crooked.com/a/5c3a34c0c4523016\" rel=\"nofollow\">http://coliru.stacked-crooked.com/a/5c3a34c0c4523016</a></br></p>\n", "LastEditorUserId": "3204551", "LastActivityDate": "2014-10-16T18:17:35.770", "Score": "2", "CreationDate": "2014-10-16T18:03:19.023", "ParentId": "26410497", "CommentCount": "0", "LastEditDate": "2014-10-16T18:17:35.770", "OwnerUserId": "3204551"}, "26410497": {"ViewCount": "718", "Body": "<p>Why <code>std::wcout &lt;&lt; L\"\u064a\" &lt;&lt; std::endl;</code> doesn't print actual character?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;locale&gt;\n\nint main()\n{\n    std::locale::global (std::locale (\"en_US.UTF-8\"));\n    std::cout &lt;&lt; \"\u064a\" &lt;&lt; std::endl;\n    std::wcout &lt;&lt; L\"\u064a\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/5252259fa9e9838a\" rel=\"nofollow\">DEMO</a></strong>\nI define a suitable locale, but it still doesn't work</p>\n", "Title": "Why does cout << \"\" work but wcout << \"\" not?", "CreationDate": "2014-10-16T17:33:12.513", "LastActivityDate": "2014-10-16T18:17:35.770", "CommentCount": "2", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "Id": "26410497", "Score": "2", "Tags": "<c++><character-encoding>", "AnswerCount": "1"}});