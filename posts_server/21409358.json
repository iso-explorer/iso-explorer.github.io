post_cb({"21409866": {"ParentId": "21409358", "LastEditDate": "2017-05-23T12:28:38.103", "CommentCount": "2", "CreationDate": "2014-01-28T15:32:31.930", "OwnerUserId": "2715219", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "21409866", "Score": "2", "Body": "<p>This seems like a duplicate of this question:<br>\n<a href=\"https://stackoverflow.com/questions/3439074/nested-data-member-pointer-not-possible\">Nested data member pointer - not possible?</a></br></p>\n<p>The crux of the accepted answer says:  </p>\n<blockquote>\n<p id=\"so_21409358_21409866_0\">A pointer-to-member can only be formed by an expression of type &amp;qualified_id, which is not your case</p>\n</blockquote>\n<p>The C++ standard says, in paragraph 8.3.3:<br>\n<strong>Pointer to Members:</strong></br></p>\n<blockquote>\n<p id=\"so_21409358_21409866_1\">In a declaration T D where D has the form  </p>\n</blockquote>\n<pre><code>  nested-name-specifier * attribute-specifier-seqopt cv-qualifier-seqopt D1\n</code></pre>\n<blockquote>\n<p id=\"so_21409358_21409866_2\">and the nested-name-specifier denotes a class, and the type of the identifier in the declaration T D1 is\n  \u201cderived-declarator-type-list T\u201d, then the type of the identifier of D is \u201cderived-declarator-type-list cv\n  qualifier- seq pointer to member of class nested-name-specifier of type T\u201d. \n  The optional attribute-specifier-seq (7.6.1) appertains to the pointer-to-member.</p>\n</blockquote>\n<p>It turns out, there's a way to do what you want, that seems to be working on my current compiler (apple llvm 5.0). However, <em>it is very implementation-dependant, and I would definitely recommend not using this solution in any kind of production code</em>:</p>\n<pre><code>//added a few data members to make it non-trivial\nstruct SubUnit {\n    double d;\n    int   value;\n};\nstruct Unit {\n    bool b;\n    char c;\n    SubUnit sub_unit;\n};\n\nintptr_t suOffset = offsetof(Unit, sub_unit);\nintptr_t intOffset = offsetof(SubUnit, value);\nintptr_t totalOffset = suOffset + intOffset;\n\n// there is no way to convert this offset directly in a\n// pointer-to-member AFAIK, so we have to trick a bit\nint Unit::* pui = nullptr;\nauto puiAddr = &amp;pui;\nintptr_t* puiAddrAsIntPtrPtr = reinterpret_cast&lt;intptr_t*&gt;(puiAddr);\n*puiAddrAsIntPtrPtr = totalOffset;\n\n//pui should now \"point to the right offset\"\n//let's test it\nUnit u;\nu.sub_unit.value = 123456;\n\nint val = u .* pui;\nstd::cout &lt;&lt; \"val: \" &lt;&lt; val &lt;&lt; std::endl;\n</code></pre>\n", "LastActivityDate": "2014-01-28T17:41:05.733"}, "21414534": {"ParentId": "21409358", "CommentCount": "0", "Body": "<p>A workaround can be constructed with a lambda:</p>\n<pre><code>    struct SubUnit\n    {\n        int   value;\n    };\n    struct Unit\n    {\n        SubUnit sub_unit;\n    };\n\n    void Test()\n    {\n        auto  composed_mem_ptr = [](Unit &amp; unit) -&gt; int&amp;{ return  unit.sub_unit.value; };\n        Unit  unit0{};\n        composed_mem_ptr(unit0) = 7;\n    }\n</code></pre>\n", "OwnerUserId": "1115339", "PostTypeId": "2", "Id": "21414534", "Score": "0", "CreationDate": "2014-01-28T19:04:31.590", "LastActivityDate": "2014-01-28T19:04:31.590"}, "21409358": {"CommentCount": "8", "ViewCount": "192", "PostTypeId": "1", "LastEditorUserId": "109525", "CreationDate": "2014-01-28T15:11:02.833", "LastActivityDate": "2014-01-28T19:04:31.590", "Title": "Can I compose pointers to member", "AcceptedAnswerId": "21409659", "LastEditDate": "2014-01-28T15:21:19.167", "Id": "21409358", "Score": "6", "Body": "<p>I'd like to compose member pointers. Basically I have a main class with different member. How do I create a member pointer for the main class that would point to a member of a member of that class. I hope the code below is explains what I'm trying to do:</p>\n<pre><code>  struct SubUnit\n  {\n    int   value;\n  };\n  struct Unit\n  {\n    SubUnit sub_unit;\n  };\n\n  void Test()\n  {\n    SubUnit Unit::* ptr1 = &amp;Unit::sub_unit; // WORKING\n    int Unit::* ptr2 = &amp;Unit::sub_unit::value; // NOT WORKING !\n  }\n</code></pre>\n", "Tags": "<c++><composition><member-pointers>", "OwnerUserId": "109525", "AnswerCount": "4"}, "21409999": {"ParentId": "21409358", "LastEditDate": "2014-01-28T16:18:53.820", "CommentCount": "7", "CreationDate": "2014-01-28T15:37:31.750", "OwnerUserId": "481528", "LastEditorUserId": "481528", "PostTypeId": "2", "Id": "21409999", "Score": "4", "Body": "<p>It seems you have to do it in two phases:</p>\n<pre><code>SubUnit Unit::*pSub = &amp;Unit::sub_unit;\nint SubUnit::*pValue = &amp;SubUnit::value;\n\nUnit u;\nint theVal = (u.*pSub).*pValue;\n</code></pre>\n", "LastActivityDate": "2014-01-28T16:18:53.820"}, "bq_ids": {"n4140": {"so_21409358_21409866_2": {"section_id": 3225, "quality": 0.7083333333333334, "length": 17}}, "n3337": {"so_21409358_21409866_2": {"section_id": 3098, "quality": 0.7083333333333334, "length": 17}}, "n4659": {"so_21409358_21409866_2": {"section_id": 3982, "quality": 0.75, "length": 18}}}, "21409659": {"ParentId": "21409358", "LastEditDate": "2014-01-28T15:40:45.220", "CommentCount": "4", "CreationDate": "2014-01-28T15:23:46.590", "OwnerUserId": "147192", "LastEditorUserId": "147192", "PostTypeId": "2", "Id": "21409659", "Score": "3", "Body": "<p>The use of sub-class is confusing here, since generally sub-class is used for inheritance, so let us talk about a <em>data member</em>: <code>sub_unit</code> is a data member of <code>Unit</code>.</p>\n<p>And what you are asking for is not possible, <code>Unit::*</code> can only represent an offset in either <code>Unit</code> itself or one of its base-classes:</p>\n<pre><code>struct SubUnit { int value; };\n\nstruct Unit: SubUnit {};\n\nint main() { int Unit::* p = &amp;Unit::value; }\n</code></pre>\n", "LastActivityDate": "2014-01-28T15:40:45.220"}});