post_cb({"24241265": {"ParentId": "24240064", "LastEditDate": "2014-06-16T11:41:08.300", "CommentCount": "3", "CreationDate": "2014-06-16T10:10:21.083", "OwnerUserId": "1782465", "LastEditorUserId": "1782465", "PostTypeId": "2", "Id": "24241265", "Score": "2", "Body": "<p>Here's what the C++11 standard <code>[cpp.include]</code> has to say about this:</p>\n<blockquote>\n<p id=\"so_24240064_24241265_0\"><strong>1</strong> A <code>#include</code> directive shall identify a header or source file that can be processed by the implementation.</p>\n<p id=\"so_24240064_24241265_1\"><strong>2</strong> A preprocessing directive of the form</p>\n<pre><code># include &lt; h-char-sequence&gt; new-line\n</code></pre>\n<p id=\"so_24240064_24241265_2\">searches a sequence of implementation-defined places for a header identified uniquely by the specified sequence\n  between the <code>&lt;</code> and <code>&gt;</code> delimiters, and causes the replacement of that directive by the entire contents\n  of the header. How the places are specified or the header identified is implementation-defined.</p>\n<p id=\"so_24240064_24241265_3\"><strong>3</strong> A preprocessing directive of the form</p>\n<pre><code># include \" q-char-sequence\" new-line\n</code></pre>\n<p id=\"so_24240064_24241265_4\">causes the replacement of that directive by the entire contents of the source file identified by the specified\n  sequence between the <code>\"</code> delimiters. The named source file is searched for in an implementation-defined\n  manner. If this search is not supported, or if the search fails, the directive is reprocessed as if it read</p>\n<pre><code># include &lt; h-char-sequence&gt; new-line\n</code></pre>\n<p id=\"so_24240064_24241265_5\">with the identical contained sequence (including <code>&gt;</code> characters, if any) from the original directive.</p>\n</blockquote>\n<p>In other words, <code>#include &lt; &gt;</code> is intended for searching for <em>headers</em> only. A <em>header</em> is one of the things provided by the standard library. I say \"things\" because the standard doesn't specify what it is - it doesn't have to a file at all (although all compilers I know implement headers as files).</p>\n<p><code>#include \" \"</code> is intended for \"everything else\" - in terms of the standard, they're all \"source files,\" although in general speech we usually refer to files intended for being <code>#include</code>d as \"header files.\" Also note that if no such source file is found, a (standard library) header will be searched for instead.</p>\n<p>So, in your case:</p>\n<ul>\n<li><p>The standard doesn't say anything about files like <code>bits/vector.tcc</code>; in fact, it doesn't say anything about <em>any</em> files. All of this falls under the \"implementation-defined\" heading as is thus up to your compiler and its documentation.</p>\n<p>At the same time (thanks to @JamesKanze for pointing this out in the comments), the standard clearly specifies what <code>#include &lt;vector&gt;</code> should do, and never mentions that it could depend on a file's presence or absence. So in this regard, gcc loading your <code>bits/vector.tcc</code> instead of its own is a gcc bug. If gcc loaded its own <code>bits/vector.tcc</code> instead of yours, it would be within its \"implementation-defined\" scope.</p></li>\n<li><p><code>#include \"vector\"</code> is primarily intended to include a source file named <code>vector</code>. However, if no such file is found, the effect is the same as including the standard header <code>&lt;vector&gt;</code> (which causes class template <code>std::vector</code> to be considered defined).</p></li>\n</ul>\n", "LastActivityDate": "2014-06-16T11:41:08.300"}, "24242886": {"ParentId": "24240064", "LastEditDate": "2014-06-18T10:14:07.640", "CommentCount": "4", "CreationDate": "2014-06-16T11:40:17.540", "OwnerUserId": "649665", "LastEditorUserId": "649665", "PostTypeId": "2", "Id": "24242886", "Score": "0", "Body": "<p>The standard is pretty open, but... including <code>&lt;vector&gt;</code> should\nwork; I don't see anything that authorizes it not to (provided\nyou've done <code>#include &lt;vector&gt;</code>, and not <code>#include \"vector\"</code>),\nregardless of the names your personal includes.</p>\n<p>More generally, the more or less universal algorithm for\nsearching for a header is to first search in the directory which\ncontains the file which does the include.  This is done\nprecisely to avoid the type of problems you have encountered.\nNot doing this (or not using some other mechanism to ensure that\nincludes from standard headers find the file they're supposed\nto) is an error in the compiler.  A serious one, IMHO.  (Of\ncourse, the compiler may document that certain options introduce\ncertain restrictions, or that you need to use certain options\nfor it to behave in a standard manner.  I don't think that g++\ndocuments <code>-I</code> as being incompatible with the standard headers,\nbut it does say that if you use <code>-iquote</code>, it shouldn't\ninfluence anything included using <code>&lt;...&gt;</code>.) </p>\n<p>EDIT:</p>\n<p>The second paragraph above really only applies to the <code>\"...\"</code>\nform of the include.  <code>#include &lt;vector&gt;</code> should find the\nstandard header, even if you have a file <code>vector</code> in the same\ndirectory as the file you are compiling.</p>\n<p>In the absense of <code>-I</code> options, this works.  Universally,\nhowever, the <code>-I</code> option adds the directory in the search lists\nfor <em>both</em> types of include.  The reason for this is that you,\nas a developer, will probably want to treat various third party\nlibraries (e.g. X-Windows) as if they were part of the system as\nwell.  (I think Linux does put X-Windows as part of the system,\nputting its headers in <code>/usr/include</code>, but this wasn't the usual\ncase in other Unices in the past.)  So you use <code>-I</code> to specify\nthem, as well as you're other include directories.  And if you\nhave a file <code>vector</code> in one of your other directories, it will\n\"override\" the system one.</p>\n<p>This is clearly a flaw: if I recall correctly (but it's been\nsome time), g++ at one time did have additional options to put\na directory in the list for only one type of include.  And in\nmodern gcc/g++, there's <code>-iquote</code> (and <code>-I-</code>, which specifies\nthat all of the earlier <code>-I</code> options are for the <code>\"...\"</code>\nincludes only).  These features are little used, however,\nbecause gcc/g++ is the only compiler which supported them.</p>\n<p>Given all this, the gcc/g++ handling is probably the best you\ncan hope for.  And the error isn't in the compiler itself, but\nthe library headers, which use <code>&lt;bits/vector.tcc&gt;</code> when it\nabsolutely wants the include file from the same directory as the\nfile doing the including.  (Another way of saying this is that\n<code>bits/vector.tcc</code> isn't a system header, in any sense of the\nword, but an implementation header of system library.)</p>\n<p>None of which helps the original poster much, unless he feels\nlike modifying the library headers for g++.  (If portability\nisn't any issue, and he's not considering his headers as part of\nthe system, he could change the <code>-I</code> to <code>-iquote</code>.)</p>\n", "LastActivityDate": "2014-06-18T10:14:07.640"}, "24240064": {"CommentCount": "14", "ViewCount": "347", "PostTypeId": "1", "LastEditorUserId": "1023390", "CreationDate": "2014-06-16T09:05:55.477", "LastActivityDate": "2014-06-18T10:14:07.640", "Title": "Are header file names such as bits/vector.tcc standard compliant?", "AcceptedAnswerId": "24241265", "LastEditDate": "2014-06-16T10:23:04.930", "Id": "24240064", "Score": "1", "Body": "<p>In my code base, I 'hide' implementation details of heavily templated code in <code>.tcc</code> files inside a <code>bits</code> sub-directory, i.e.</p>\n<pre><code>// file inc/foo.h:\n#ifndef my_foo_h          // include guard\n#define my_foo_h\nnamespace my {\n  /* ... */               // templated code available for user\n}\n#include \"bits/foo.tcc\"   // includes implementation details\nnamespace my {\n  /* ... */               // more templated code using details from foo.tcc\n}\n#endif\n\n// file inc/bits/foo.tcc:\n#ifndef my_foo_tcc        // include guard\n#define my_foo_tcc\n#ifndef my_foo_h\n#  error foo.tcc must be #included from foo.h\n#endif\nnamespace my { namespace details {\n  /* ... */               // defails needed in foo.h\n} }\n#endif\n</code></pre>\n<p>Of course, there must only be one file <code>bits/foo.tcc</code> in the include path. Otherwise, there will be a clash and (hopefully) a compilation error. This just happened to me with <code>bits/vector.tcc</code>, which is included from gcc's (4.8) <code>vector</code> but also my own header (using <code>#include \"bits/vector.tcc\"</code> and not <code>#include &lt;bits/vector.h&gt;</code>).</p>\n<p>My question: is this formally a bug of gcc (since it uses a name <code>bits/vector.tcc</code> which is not protected by the standard) or correct, i.e. even formally my fault? If the latter, what names for header files are guaranteed to be okay to use?</p>\n<p><em>(note I don't want to hear obvious advices of how to avoid this).</em></p>\n<hr>\n<p><em>Edit</em> The problem is that the header file <code>vector</code> provided by the standard library (shipped by the compiler) has a preprocessor directive <code>#include &lt;bits/vector.tcc&gt;</code> which causes the preprocessor to load my file rather than that provided with the standard library.</p>\n</hr>", "Tags": "<c++><language-lawyer>", "OwnerUserId": "1023390", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_24240064_24241265_0": {"section_id": 503, "quality": 0.8888888888888888, "length": 8}, "so_24240064_24241265_2": {"section_id": 504, "quality": 0.9130434782608695, "length": 21}, "so_24240064_24241265_4": {"section_id": 505, "quality": 0.9230769230769231, "length": 24}, "so_24240064_24241265_5": {"section_id": 505, "quality": 1.0, "length": 7}}, "n3337": {"so_24240064_24241265_0": {"section_id": 494, "quality": 0.8888888888888888, "length": 8}, "so_24240064_24241265_2": {"section_id": 495, "quality": 0.9130434782608695, "length": 21}, "so_24240064_24241265_4": {"section_id": 496, "quality": 0.9230769230769231, "length": 24}, "so_24240064_24241265_5": {"section_id": 496, "quality": 1.0, "length": 7}}, "n4659": {"so_24240064_24241265_4": {"section_id": 526, "quality": 0.9230769230769231, "length": 24}, "so_24240064_24241265_2": {"section_id": 525, "quality": 0.9130434782608695, "length": 21}, "so_24240064_24241265_0": {"section_id": 524, "quality": 0.8888888888888888, "length": 8}, "so_24240064_24241265_5": {"section_id": 526, "quality": 1.0, "length": 7}}}});