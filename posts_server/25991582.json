post_cb({"25991582": {"CommentCount": "0", "AcceptedAnswerId": "25993289", "PostTypeId": "1", "LastEditorUserId": "3953764", "CreationDate": "2014-09-23T09:30:40.730", "LastActivityDate": "2015-06-27T20:03:36.930", "LastEditDate": "2014-09-23T12:00:46.367", "ViewCount": "730", "FavoriteCount": "1", "Title": "Emplace a pointer to a multimap of shared_ptr's doesn't work", "Id": "25991582", "Score": "4", "Body": "<p>Vector works properly</p>\n<pre><code>Header\nstd::vector&lt;std::shared_ptr&lt;SceneNode&gt;&gt; subnodes_m;\n\nDefinition\nvoid CompositeSceneNode::AddChild(SceneNode* subnode_p)\n{\n    subnodes_m.emplace_back(subnode_p);\n}\n</code></pre>\n<p>Multimap doesn't</p>\n<pre><code>Header\nstd::multimap&lt;unsigned int, std::shared_ptr&lt;SceneNode&gt;&gt; subnodes_m;\n\nDefinition\nvoid CompositeSceneNode::AddChild(SceneNode* subnode_p, unsigned int layerIndex)\n{\n    subnodes_m.emplace(layerIndex, subnode_p);\n}\n</code></pre>\n<p>I get following error:</p>\n<pre><code>error C2664: 'std::pair&lt;_Ty1,_Ty2&gt;::pair(const unsigned int &amp;,const _Ty2 &amp;)' :\ncannot convert parameter 2 from 'RendererD3DWrapper::SceneNode *'\nto 'const std::shared_ptr&lt;_Ty&gt; &amp;'   \n</code></pre>\n<p>Anybody has a clue?</p>\n", "Tags": "<c++><c++11><shared-ptr><multimap><emplace>", "OwnerUserId": "2032932", "AnswerCount": "1"}, "25993289": {"ParentId": "25991582", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>You can't construct a <code>std::pair&lt;T1,T2&gt;</code> with arguments of types <code>U</code> and <code>V</code> if there is no <strong>implicit</strong> conversion of <code>U</code> into <code>T1</code>, and <code>V</code> into <code>T2</code>. In your case, there is no implicit conversion of <code>SceneNode*</code> into <code>std::shared_ptr&lt;SceneNode&gt;</code>.</p>\n<p>From the C++ standard:</p>\n<blockquote>\n<h3>\u00a7 20.3.2 Class template <code>pair</code> <code>[pairs.pair]</code></h3>\n<pre><code>template&lt;class U, class V&gt; constexpr pair(U&amp;&amp; x, V&amp;&amp; y);\n</code></pre>\n<ol start=\"7\">\n<li><p id=\"so_25991582_25993289_0\"><em>Requires:</em> <code>is_constructible&lt;first_type, U&amp;&amp;&gt;::value</code> is <code>true</code> and <code>is_constructible&lt;second_type, V&amp;&amp;&gt;::value</code> is <code>true</code>.</p></li>\n<li><p id=\"so_25991582_25993289_1\"><em>Effects:</em> The constructor initializes <code>first</code> with <code>std::forward&lt;U&gt;(x)</code> and <code>second</code> with <code>std::forward&lt;V&gt;(y)</code>.</p></li>\n<li><p id=\"so_25991582_25993289_2\"><em>Remarks:</em> If <code>U</code> is not implicitly convertible to <code>first_type</code> or <code>V</code> is not implicitly convertible to <code>second_type</code> this <strong>constructor shall not participate in overload resolution</strong>.</p></li>\n</ol>\n</blockquote>\n<p>Having said that, you can't initialize a <code>std::pair&lt;T1,T2&gt;</code> like below (as <code>emplace</code> builds <em>in-place</em> a <code>std::pair&lt;key_type, mapped_type&gt;</code> known as <code>value_type</code> of <code>std::multimap</code>):</p>\n<pre><code>std::pair&lt;unsigned int, std::shared_ptr&lt;SceneNode&gt;&gt; p( 1, new SceneNode );\n</code></pre>\n<p>because the constructor of <code>std::shared_ptr&lt;T&gt;</code> taking a raw pointer (declared below) is an <code>explicit</code> constructor, hence the error you encounter:</p>\n<blockquote id=\"so_25991582_25993289_3\">\n<h3>\u00a7 20.9.2.2 Class template <code>shared_ptr</code> <code>[util.smartptr.shared]</code></h3>\n<pre><code>[...]\n\ntemplate&lt;class Y&gt; explicit shared_ptr(Y* p);\n</code></pre>\n</blockquote>\n<p>In C++11 you should <strong>either</strong> build a <code>std::shared_ptr&lt;T&gt;</code> before calling <code>emplace</code>:</p>\n<pre><code>subnodes_m.emplace(layerIndex, std::shared_ptr&lt;SceneNode&gt;(subnode_p));\n</code></pre>\n<p>, <strong>or</strong> you can forward arguments to the constructors of pair's elements (rather than forwarding them to the constructor of <code>std::pair&lt;T1,T2&gt;</code> itself), with a <a href=\"http://en.cppreference.com/w/cpp/utility/piecewise_construct\" rel=\"nofollow\"><strong><em>piecewise construction</em></strong></a>:</p>\n<pre><code>subnodes_m.emplace(std::piecewise_construct\n                 , std::forward_as_tuple(layerIndex)\n                 , std::forward_as_tuple(subnode_p));\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/dd8a223498134a55\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n<blockquote>\n<p id=\"so_25991582_25993289_4\"><em>Why does it work with <code>std::vector</code> of <code>std::shared_ptr</code>'s then?</em></p>\n</blockquote>\n<p>The <code>std::vector&lt;std::shared_ptr&lt;T&gt;&gt;::emplace_back</code> member function forwards the arguments of <code>emplace_back</code> to the constructor of <code>std::shared_ptr&lt;T&gt;</code>, satisfying the explicit context requirement. In case of a <code>map</code> and a <code>multimap</code>, the emplaced type is a <code>pair</code> which has the constructor that forwards arguments further into its elements disabled if the conversion between argument's and parameter's types of those elements is not implicit (as cited above).</p>\n", "OwnerUserId": "3953764", "LastEditorUserId": "3953764", "LastEditDate": "2015-06-27T20:03:36.930", "Id": "25993289", "Score": "10", "CreationDate": "2014-09-23T10:54:59.583", "LastActivityDate": "2015-06-27T20:03:36.930"}, "bq_ids": {"n4140": {"so_25991582_25993289_0": {"section_id": 3962, "quality": 0.5714285714285714, "length": 4}, "so_25991582_25993289_1": {"section_id": 3963, "quality": 0.625, "length": 5}, "so_25991582_25993289_2": {"section_id": 3964, "quality": 0.9090909090909091, "length": 10}}, "n3337": {"so_25991582_25993289_0": {"section_id": 3819, "quality": 0.5714285714285714, "length": 4}, "so_25991582_25993289_1": {"section_id": 3820, "quality": 0.625, "length": 5}, "so_25991582_25993289_2": {"section_id": 3821, "quality": 0.9090909090909091, "length": 10}}, "n4659": {"so_25991582_25993289_2": {"section_id": 5649, "quality": 0.5454545454545454, "length": 6}}}});