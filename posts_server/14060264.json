post_cb({"bq_ids": {"n4140": {"so_14060264_14060264_1": {"length": 56, "quality": 0.9032258064516129, "section_id": 3326}}, "n3337": {"so_14060264_14060264_1": {"length": 56, "quality": 0.9032258064516129, "section_id": 3196}}, "n4659": {"so_14060264_14060264_1": {"length": 56, "quality": 0.9032258064516129, "section_id": 4092}}}, "14060981": {"Id": "14060981", "PostTypeId": "2", "Body": "<p><sup>Answering my own question. Deleting the question would not be a good idea, as someone might have the same question in the future.</sup></p>\n<p>Yes. It is a bug in the GCC compiler.</p>\n<ul>\n<li><a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=51253\" rel=\"nofollow\">Bug 51253 - [C++11][DR 1030] Evaluation order (sequenced-before relation) among initializer-clauses in braced-init-list</a></li>\n</ul>\n<p>taken from @Johannes Schaub's comment to the question.</p>\n", "LastEditorUserId": "596781", "LastActivityDate": "2013-08-19T14:44:11.393", "Score": "8", "CreationDate": "2012-12-27T20:37:30.670", "ParentId": "14060264", "CommentCount": "3", "OwnerUserId": "415784", "LastEditDate": "2013-08-19T14:44:11.393"}, "14060264": {"ViewCount": "1559", "Body": "<p>In the <a href=\"https://stackoverflow.com/questions/14056000/how-to-avoid-undefined-execution-order-for-the-constructors-when-using-stdmake\">other topic</a>, @Dietmar gave this solution:</p>\n<pre><code>template &lt;typename... T&gt;\nstd::tuple&lt;T...&gt; parse(std::istream&amp; in) \n{\n    return std::tuple&lt;T...&gt;{ T(in)... };\n}\n</code></pre>\n<p>stating that,</p>\n<blockquote>\n<p id=\"so_14060264_14060264_0\">The use of brace initialization works because the <strong>order of evaluation of the arguments</strong> in a brace initializer list <strong>is the order in which they appear</strong>. (emphasize mine)</p>\n</blockquote>\n<p>The relevant text from the C++ Standard (n3485) is,</p>\n<blockquote>\n<p id=\"so_14060264_14060264_1\">Within the initializer-list of a braced-init-list, the initializer-clauses, including any that result from pack expansions (14.5.3), are evaluated in the order in which they appear. That is, every value computation and side effect associated with a given initializer-clause is sequenced before every value computation and side effect associated with any initializer-clause that follows it in the comma-separated list of the initializer-list. \n  [ Note: This evaluation ordering holds regardless of the semantics of the initialization; for example, it applies when the elements of the initializer-list are interpreted as arguments of a constructor call, even though ordinarily there are no sequencing constraints on the arguments of a call. \u2014end note ]</p>\n</blockquote>\n<hr>\n<p>So I tried to test this with the following code:</p>\n<pre><code>template&lt;int N&gt;\nstruct A \n{ \n    std::string data;\n    A(std::istream &amp; stream) { stream &gt;&gt; data; }\n    friend std::ostream&amp; operator&lt;&lt;(std::ostream &amp; out, A&lt;N&gt; const &amp; a) \n    {\n        return out &lt;&lt; \"A\"&lt;&lt;N&lt;&lt;\"::data = \" &lt;&lt; a.data;\n    }\n};\ntypedef A&lt;1&gt; A1;\ntypedef A&lt;2&gt; A2;\n\ntemplate&lt;typename ...Args&gt;\nvoid test(std::istream &amp; stream)\n{\n    std::tuple&lt;Args...&gt; args { Args(stream)... };\n    std::cout &lt;&lt; std::get&lt;0&gt;(args) &lt;&lt; std::endl;\n    std::cout &lt;&lt; std::get&lt;1&gt;(args) &lt;&lt; std::endl;\n}\n\nint main()\n{\n    std::stringstream ss(\"A1 A2\");\n    test&lt;A1,A2&gt;(ss);\n}\n</code></pre>\n<p>Expected output:</p>\n<pre><code>A1::data = A1\nA2::data = A2\n</code></pre>\n<p>Actual Output:</p>\n<pre><code>A1::data = A2\nA2::data = A1\n</code></pre>\n<p>Did I do anything wrong in my test code? I changed my code to this:</p>\n<pre><code>std::stringstream ss(\"A1 A2\");\nstd::tuple&lt;A1,A2&gt; args{A1(ss), A2(ss)};\nstd::cout &lt;&lt; std::get&lt;0&gt;(args) &lt;&lt; std::endl;\nstd::cout &lt;&lt; std::get&lt;1&gt;(args) &lt;&lt; std::endl\n</code></pre>\n<p>Same output as before. I tested my code with <code>MinGW (GCC) 4.7.0</code> and <code>4.7.2</code>. Even ideone gives <a href=\"http://ideone.com/jPrpiR\" rel=\"nofollow noreferrer\">this output</a>.</p>\n<p>Is it a bug in the compiler?</p>\n</hr>", "AcceptedAnswerId": "14060981", "Title": "Order of evaluation of elements in list-initialization", "CreationDate": "2012-12-27T19:37:08.713", "Id": "14060264", "CommentCount": "7", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:07:28.930", "LastEditorUserId": "-1", "LastActivityDate": "2013-08-19T14:44:11.393", "Score": "19", "OwnerUserId": "415784", "Tags": "<c++><gcc><c++11><initializer-list><order-of-evaluation>", "AnswerCount": "1"}});