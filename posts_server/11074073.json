post_cb({"11074073": {"CommentCount": "0", "ViewCount": "1800", "PostTypeId": "1", "LastEditorDisplayName": "user166390", "CreationDate": "2012-06-17T19:12:08.390", "LastActivityDate": "2012-06-17T23:55:34.837", "LastEditDate": "2012-06-17T19:26:10.057", "AcceptedAnswerId": "11074102", "FavoriteCount": "3", "Title": "What are the different token types in C++ compilation?", "Id": "11074073", "Score": "3", "Body": "<p>Walter Bright's article on C++ Compilation talks about these two phrases</p>\n<p>\"Conversion to preprocessing tokens.\"<br>\nWhat is the initial token? What does a preprocessing token look like?</br></p>\n<p>\"Conversion of preprocessing tokens to C++ tokens\"\nWhat is this C++ Token and why wasn't it converted into it at first?</p>\n<p>Reference: <a href=\"http://www.drdobbs.com/blogs/cpp/228701711\" rel=\"nofollow\">http://www.drdobbs.com/blogs/cpp/228701711</a></p>\n", "Tags": "<c++><parsing><compiler-construction><compilation><lexer>", "OwnerUserId": "82368", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_11074073_11074102_2": {"section_id": 5321, "quality": 1.0, "length": 9}}, "n3337": {"so_11074073_11074102_2": {"section_id": 5118, "quality": 1.0, "length": 9}}, "n4659": {"so_11074073_11074102_2": {"section_id": 6742, "quality": 1.0, "length": 9}}}, "11074102": {"ParentId": "11074073", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2012-06-17T19:16:50.570", "Score": "4", "LastEditorUserId": "129570", "LastEditDate": "2012-06-17T19:22:12.783", "Id": "11074102", "OwnerUserId": "129570", "Body": "<p>A preprocessing token is an element of the grammar of the preprocessor.  From [lex.pptoken] in the C++ standard:</p>\n<blockquote>\n<p id=\"so_11074073_11074102_0\"><em>preprocessing-token</em>:</p>\n<ul>\n<li><em>header-name</em></li>\n<li><em>identifier</em></li>\n<li><em>pp-number</em></li>\n<li><em>character-literal</em></li>\n<li><em>user-defined-character-literal</em></li>\n<li><em>string-literal</em></li>\n<li><em>user-defined-string-literal</em></li>\n<li><em>preprocessing-op-or-punc</em></li>\n<li>each non-white-space character that cannot be one of the above</li>\n</ul>\n<p id=\"so_11074073_11074102_1\">...</p>\n<p id=\"so_11074073_11074102_2\">A preprocessing token is the minimal lexical element of the language in translation phases 3 through 6.</p>\n</blockquote>\n<p>So the \"conversion to preprocessing tokens\" is the process of lexing the translation unit and identifying individual tokens.</p>\n<p>C++ tokens (really just \"tokens\") are listed in [lex.token]:</p>\n<blockquote>\n<p id=\"so_11074073_11074102_3\"><em>token</em>:</p>\n<ul>\n<li><em>identifier</em></li>\n<li><em>keyword</em></li>\n<li><em>literal</em></li>\n<li><em>operator</em></li>\n<li><em>punctuator</em></li>\n</ul>\n</blockquote>\n<p>These only exist after all the other translation phases have occurred (macro expansion and so on).</p>\n<p>For more information on the entire process, I suggest reading [lex.phases] in the C++ standard.</p>\n", "LastActivityDate": "2012-06-17T19:22:12.783"}, "11075726": {"ParentId": "11074073", "CommentCount": "1", "Body": "<p><strong>A simplier explanation.</strong></p>\n<p>And, you may know, many compilers, have a lexical analysis process, where the source code is split in tokens.</p>\n<p>This source code:</p>\n<pre><code>void main()\n{\n  int x = -3 - -5;\n  printf(\"Hello World\");\n} // void main()\n</code></pre>\n<p>Is transform into something similar to this:</p>\n<pre>\n+--------------+------------------+ \n|  TOKEN       |  TEXT            | \n+--------------+------------------+ \n|  void        | \"void\"           | \n+--------------+------------------+ \n|  identifier  | \"main\"           | \n+--------------+------------------+ \n|  leftcurly   | \"{\"              | \n+--------------+------------------+ \n|  identifier  | \"int\"            | \n+--------------+------------------+ \n|  identifier  | \"x\"              | \n+--------------+------------------+ \n|  assign      | \"=\"              | \n+--------------+------------------+ \n|  minus       | \"-\"              | \n+--------------+------------------+ \n|  integer     | \"3\"              | \n+--------------+------------------+ \n|  minus       | \"-\"              | \n+--------------+------------------+ \n|  minus       | \"-\"              | \n+--------------+------------------+ \n|  integer     | \"5\"              | \n+--------------+------------------+ \n|  semicolon   | \";\"              | \n+--------------+------------------+ \n|  identifier  | \"printf\"         | \n+--------------+------------------+ \n|  leftpar     | \"(\"              | \n+--------------+------------------+ \n|  string      | \"Hello World\"    | \n+--------------+------------------+ \n|  rightpar    | \")\"              | \n+--------------+------------------+ \n|  semicolon   | \";\"              | \n+--------------+------------------+ \n|  rightcurly  | \"}\"              | \n+--------------+------------------+ \n|  comment     | \"// void main()\" | \n+--------------+------------------+ \n</pre>\n<p>Each of this pieces of text called \"tokens\", have a meaning.</p>\n<hr>\n<p>Sometimes, in other parts of the compilation process, the tokens may be replaced, by anothers tokens:</p>\n<pre>\n+--------------+------------------+ \n|  TOKEN       |  TEXT            | \n+--------------+------------------+ \n|  void        | \"void\"           | \n+--------------+------------------+ \n|  functiondec | \"main\"           | \n+--------------+------------------+ \n|  leftcurly   | \"{\"              | \n+--------------+------------------+ \n|  type        | \"int\"            | \n+--------------+------------------+ \n|  variabledec | \"x\"              | \n+--------------+------------------+ \n|  assign      | \"=\"              | \n+--------------+------------------+ \n|  negative    | \"-\"              | \n+--------------+------------------+ \n|  integer     | \"3\"              | \n+--------------+------------------+ \n|  substract   | \"-\"              | \n+--------------+------------------+ \n|  negative    | \"-\"              | \n+--------------+------------------+ \n|  integer     | \"5\"              | \n+--------------+------------------+ \n|  semicolon   | \";\"              | \n+--------------+------------------+ \n| functioncall | \"printf\"         | \n+--------------+------------------+ \n|  leftpar     | \"(\"              | \n+--------------+------------------+ \n|  string      | \"Hello World\"    | \n+--------------+------------------+ \n|  rightpar    | \")\"              | \n+--------------+------------------+ \n|  semicolon   | \";\"              | \n+--------------+------------------+ \n|  rightcurly  | \"}\"              | \n+--------------+------------------+ \n|  comment     | \"// void main()\" | \n+--------------+------------------+ \n</pre>\n<hr>\n<p>The conversion from \"minus\" token, to, either \"negative sign token\", &amp; \"substraction token\", is a very good example of this \"preprocess token\" to \"final token\".</p>\n<p>This is a very conceptual explanation. You may want to read a more detailed technical information on your specific compiler documentation.</p>\n<p>Cheers</p>\n</hr></hr>", "OwnerUserId": "535724", "PostTypeId": "2", "Id": "11075726", "Score": "2", "CreationDate": "2012-06-17T23:55:34.837", "LastActivityDate": "2012-06-17T23:55:34.837"}});