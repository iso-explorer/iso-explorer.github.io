post_cb({"bq_ids": {"n4140": {"so_19745768_19759146_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 609}}, "n3337": {"so_19745768_19759146_0": {"length": 9, "quality": 1.0, "section_id": 599}}, "n4659": {"so_19745768_19759146_0": {"length": 6, "quality": 0.6666666666666666, "section_id": 635}}}, "19759146": {"Id": "19759146", "PostTypeId": "2", "Body": "<p>According to this <a href=\"https://stackoverflow.com/questions/12677711/is-it-possible-to-invoke-a-user-defined-conversion-function-via-list-initializat\">answer</a> it was a defect in the standard. This is the correction to the standard @ecatmur proposed.  </p>\n<blockquote>\n<p id=\"so_19745768_19759146_0\">4 - However, when considering the argument of a constructor or user-defined conversion function that is a candidate:</p>\n<ul>\n<li>by 13.3.1.3 [over.match.ctor] when invoked for the copying of the temporary in the second step of a class copy-initialization, or</li>\n<li>by 13.3.1.4 [over.match.copy], 13.3.1.5 [over.match.conv], or 13.3.1.6 [over.match.ref] in all cases,</li>\n</ul>\n<p id=\"so_19745768_19759146_1\">only standard conversion sequences and ellipsis conversion sequences are considered; when considering the first argument of a constructor of a class <code>X</code> that is a candidate by 13.3.1.7 [over.match.list] when passing the initializer list as a single argument or when the initializer list has exactly one element, a user-defined conversion to <code>X</code> or reference to (possibly <em>cv</em>-qualified) <code>X</code> is only considered if its user-defined conversion is specified by a conversion function. [<em>Note:</em> because more than one user-defined conversion is allowed in an implicit conversion sequence in the context of list-initialization, this restriction is necessary to ensure that a converting constructor of <code>X</code>, called with a single argument <code>a</code> that is not of type <code>X</code> or a type derived from <code>X</code>, is not ambiguous against a constructor of <code>X</code> called with a temporary <code>X</code> object itself constructed from <code>a</code>. <em>-- end note</em>]  </p>\n</blockquote>\n<p>I don't know if this is exactly how the standard ended up being changed (since I only have a draft) but I would assume something was done because of the change in results depending on the compiler version</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-11-03T23:22:56.020", "Score": "1", "CreationDate": "2013-11-03T22:48:14.407", "ParentId": "19745768", "CommentCount": "0", "OwnerUserId": "2167655", "LastEditDate": "2017-05-23T12:29:13.977"}, "19745768": {"ViewCount": "230", "Body": "<pre><code>struct X {\n      X() {}\n      X(X&amp;&amp;) { }\n};\nX global_m;\n\nstruct Converts {\n        operator X&amp;&amp; () const { return std::move(global_m); }\n};\n</code></pre>\n<p>I believe the following should work:</p>\n<pre><code>X x { Converts{} };\n</code></pre>\n<p>There is only one single-argument constructor for X. It takes an <code>X&amp;&amp;</code>.  The Converts object is temporary, and it converts to <code>X&amp;&amp;</code>.  So why do I get this error message from clang-3.3:</p>\n<pre><code> // error: \"candidate constructor not viable: no known conversion from 'Converts' to 'X &amp;&amp;' for 1st argument\"\n</code></pre>\n<p>I'm able to explicitly call the operator as:</p>\n<pre><code>X x { Converts{}.operator struct X&amp;&amp; () }; // this works.\n</code></pre>\n<p>Unfortunately for me, it works on <a href=\"http://ideone.com/u5Bnqv\" rel=\"nofollow\">ideone</a>, which is based on g++ as far as I know.  Is there any online clang compiler that's up and running at the moment?</p>\n", "AcceptedAnswerId": "19759146", "Title": "\"no known conversion\" error, even though the conversion operator is written", "CreationDate": "2013-11-02T19:11:46.260", "Id": "19745768", "CommentCount": "11", "PostTypeId": "1", "ClosedDate": "2014-03-19T07:46:46.600", "LastActivityDate": "2013-11-03T23:22:56.020", "Score": "1", "OwnerUserId": "146041", "Tags": "<c++11><move-semantics><move-constructor>", "AnswerCount": "1"}});