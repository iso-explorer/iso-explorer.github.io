post_cb({"24037784": {"Id": "24037784", "PostTypeId": "2", "Body": "<p>Evaluating macro conditions is a part (a major part) of pre-processing, so it occurs and short-circuiting is meaningful there. You can see examples of the other answers.</p>\n<blockquote>\n<p id=\"so_24037595_24037784_0\">A <strong>conditional</strong> is a directive that instructs the <strong>preprocessor</strong> to select\n  whether or not to include a chunk of code in the final token stream\n  passed to the compiler. <strong>Preprocessor conditionals</strong> can test arithmetic\n  expressions, or whether a name is defined as a macro, or both\n  simultaneously using the special defined operator.<a href=\"http://tigcc.ticalc.org/doc/cpp.html#SEC31\" rel=\"nofollow\">\u2020</a></p>\n</blockquote>\n<p>Moreover, it <em>can</em> reduce the compile time. Altering the following evaluations can speed up the compilation (depeds on implementation of a compiler).</p>\n", "LastEditorUserId": "952747", "LastActivityDate": "2014-06-04T14:58:38.957", "Score": "3", "CreationDate": "2014-06-04T12:43:05.927", "ParentId": "24037595", "CommentCount": "0", "OwnerUserId": "952747", "LastEditDate": "2014-06-04T14:58:38.957"}, "24037737": {"Id": "24037737", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_24037595_24037737_0\">There is no evaluation of expressions during preprocessing, so how can it be short-circuited?  </p>\n</blockquote>\n<p><strong>Yes there is evaluation of expression during preprocessing</strong>.  </p>\n<h3>C11: 6.10.1 Conditional inclusion (p4):</h3>\n<blockquote>\n<p id=\"so_24037595_24037737_1\"><strong>Prior to evaluation</strong>, macro invocations in the list of preprocessing tokens that will become ...   </p>\n</blockquote>\n<p>In a footnote 166:  </p>\n<blockquote>\n<p id=\"so_24037595_24037737_2\">Because the <strong>controlling constant expression is evaluated during translation phase 4</strong>, all identifiers.... </p>\n</blockquote>\n<p>These statements clearly testify that <strong>there is evaluation of expression in preprocessing</strong>. The necessary condition is that the controlling expression must evaluate to an integer value.<br>\nNow the operator <code>&amp;&amp;</code> and <code>||</code> will obey the usual short-circuiting rules of standard C as stated in <a href=\"https://gcc.gnu.org/onlinedocs/cpp/If.html\" rel=\"nofollow\">GNU doc</a>.  </br></p>\n<p>Now run this program with and without <code>//</code> and see the result to see the short-circuit behavior:   </p>\n<pre><code>#include&lt;stdio.h&gt;\n#define macro1 1\n//#define macro2 1\nint main( void )\n{\n    #if  defined (macro1)  &amp;&amp; defined (macro2)\n    printf( \"Hello!\\n\" );\n    #endif\n    printf(\"World\\n\"); \n    return 0;\n}\n</code></pre>\n", "LastEditorUserId": "2455888", "LastActivityDate": "2014-06-04T15:32:52.693", "Score": "4", "CreationDate": "2014-06-04T12:40:59.763", "ParentId": "24037595", "CommentCount": "4", "OwnerUserId": "2455888", "LastEditDate": "2014-06-04T15:32:52.693"}, "bq_ids": {"n4140": {"so_24037595_24037737_1": {"length": 9, "quality": 1.0, "section_id": 500}, "so_24037595_24037737_2": {"length": 9, "quality": 0.9, "section_id": 497}}, "n3337": {"so_24037595_24037737_1": {"length": 9, "quality": 1.0, "section_id": 491}, "so_24037595_24037737_2": {"length": 9, "quality": 0.9, "section_id": 488}}, "n4659": {"so_24037595_24037737_1": {"length": 9, "quality": 1.0, "section_id": 519}, "so_24037595_24037737_2": {"length": 9, "quality": 0.9, "section_id": 512}}}, "24039943": {"Id": "24039943", "PostTypeId": "2", "Body": "<p>Very simple: undefined macros have numeric value zero, and division by zero is illegal.</p>\n<pre><code>#if FIXEDSIZE &amp;&amp; CHUNKSIZE/FIXEDSIZE &gt; 42\n#define USE_CELLPOOL\n#endif\n</code></pre>\n<hr>\n<p><code>#if</code> does evaluate the rest of its line as an integer constant expression.  Your linked documentation begins:</p>\n<blockquote>\n<p id=\"so_24037595_24039943_0\">The \u2018#if\u2019 directive allows you to test the value of an arithmetic expression, rather than the mere existence of one macro.</p>\n</blockquote>\n<p>That isn't a gcc extension, the Standard's syntax for <code>#if</code> is </p>\n<blockquote>\n<p id=\"so_24037595_24039943_1\"><code>#if</code><em><code>constant-expression new-line group</code><sub><code>opt</code></sub></em>.</p>\n</blockquote>\n<p>The C99 preprocessor treats all constants as <code>[u]intmax_t</code>.</p>\n</hr>", "LastEditorUserId": "1290731", "LastActivityDate": "2014-06-04T15:21:59.627", "Score": "26", "CreationDate": "2014-06-04T14:17:45.317", "ParentId": "24037595", "CommentCount": "7", "OwnerUserId": "1290731", "LastEditDate": "2014-06-04T15:21:59.627"}, "24037595": {"ViewCount": "2276", "Body": "<p>The <a href=\"http://gcc.gnu.org/onlinedocs/cpp/If.html\">gcc docs for cpp</a> explain about the <code>#if</code> directive:</p>\n<blockquote>\n<p id=\"so_24037595_24037595_0\">[...] and logical operations (&amp;&amp; and ||). The latter two obey the usual short-circuiting rules of standard C.</p>\n</blockquote>\n<p>What does that mean? There is no evaluation of expressions during preprocessing, so how can it be short-circuited?</p>\n", "AcceptedAnswerId": "24039943", "Title": "Is there logical short-circuiting in the C preprocessor?", "CreationDate": "2014-06-04T12:35:11.827", "Id": "24037595", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-06-04T12:37:28.197", "LastEditorUserId": "1670308", "LastActivityDate": "2014-06-04T15:32:52.693", "Score": "28", "OwnerUserId": "2965738", "Tags": "<c++><c><gcc>", "AnswerCount": "4"}, "24037669": {"Id": "24037669", "PostTypeId": "2", "Body": "<p>What they are referring to is <code>&amp;&amp;</code> and <code>||</code> operators for <code>#if</code></p>\n<pre><code>#if defined (AAA) || defined (BBB)\n</code></pre>\n<p>If <code>defined (AAA)</code> is defined then <code>defined (BBB)</code> is never evaluated.</p>\n<hr>\n<p><strong>UPDATE</strong></p>\n<p>So running the calculation will be short circuited. For example, if you build with <code>-Wundef</code> to warn about the usage of undefined macros.</p>\n<pre><code>#if defined FOO &amp;&amp; FOO &gt; 1000\n#endif\n\n#if FOO &gt; 1000\n#endif\n</code></pre>\n<p>will result in</p>\n<pre><code>thomas:~ jeffery$ gcc foo.c -Wundef\nfoo.c:4:5: warning: 'FOO' is not defined, evaluates to 0 [-Wundef]\n#if FOO &gt; 1000\n    ^\n1 warning generated.\n</code></pre>\n<p>So the first version does not generate the undefined macro warning, because <code>FOO &gt; 1000</code> is not evaluated.</p>\n<hr>\n<p><strong>OLD MUSINGS</strong></p>\n<p>This become important if the second part is a macro which has side effects. The macro would not be evaluated, so the side effects would not take place.</p>\n<hr>\n<p>To avoid macro abuse I'll give a somewhat sane example</p>\n<pre><code>#define FOO\n#define IF_WARN(x) _Pragma (#x) 1\n#if defined(FOO) || IF_WARN(GCC warning \"FOO not defined\")\n#endif\n</code></pre>\n<p>Now that I constructed this example, I now run into a problem. <code>IF_WARN</code> is always evaluated.</p>\n<p>huh, more research needed.</p>\n<hr>\n<p>Well foo\u2026 now that I read it again.</p>\n<blockquote>\n<p id=\"so_24037595_24037669_0\">Macros. All macros in the expression are expanded before actual computation of the expression's value begins.</p>\n</blockquote>\n</hr></hr></hr></hr>", "LastEditorUserId": "1298400", "LastActivityDate": "2014-06-04T15:19:38.540", "Score": "9", "CreationDate": "2014-06-04T12:38:18.407", "ParentId": "24037595", "CommentCount": "12", "OwnerUserId": "1298400", "LastEditDate": "2014-06-04T15:19:38.540"}});