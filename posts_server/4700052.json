post_cb({"4700076": {"ParentId": "4700052", "CommentCount": "0", "Body": "<p>Vectors are not linked linked list, they provide random access and are contiguous just like arrays. In order to achieve this they re-allocate memory under the hood. </p>\n<p>List is designed to allow quick insertions and deletions, while not invalidating any references or iterators except\nthe ones to the deleted element. </p>\n", "OwnerUserId": "336471", "PostTypeId": "2", "Id": "4700076", "Score": "0", "CreationDate": "2011-01-15T14:24:46.693", "LastActivityDate": "2011-01-15T14:24:46.693"}, "4700082": {"ParentId": "4700052", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><code>vector</code> will hold <em>all</em> of it's storage in a single place. A <code>vector</code> is not even remotely like a linked list. Infact, if I had to pick two data structures that were most unlike each other, it would be <code>vector</code> and <code>list</code>. \"At most contiguous\" is how a <code>deque</code> operates.</p>\n<p>Vector:</p>\n<ol>\n<li>Guaranteed contiguous storage for all elements - will copy or move elements.</li>\n<li>O(1) access time.</li>\n<li>O(n) for insert or remove.</li>\n<li>Iterators invalidated upon insertion or removal of any element.</li>\n</ol>\n<p>List:</p>\n<ol>\n<li>No contiguous storage at all - never copies or moves elements.</li>\n<li>O(n) access time- plus all the nasty cache misses you're gonna get.</li>\n<li>O(1) insert or remove.</li>\n<li>Iterators valid as long as that specific element is not removed.</li>\n</ol>\n<p>As you can see, they behave differently in every data structure use case.</p>\n", "OwnerUserId": "298661", "LastEditorUserId": "298661", "LastEditDate": "2011-01-15T14:37:23.587", "Id": "4700082", "Score": "8", "CreationDate": "2011-01-15T14:25:45.110", "LastActivityDate": "2011-01-15T14:37:23.587"}, "4700074": {"ParentId": "4700052", "CommentCount": "0", "Body": "<p>By definition,  <code>vector</code>s are contiguous blocks of memory like C arrays. See: <a href=\"http://en.wikipedia.org/wiki/Vector_(C%2B%2B\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Vector_(C%2B%2B</a>)</p>\n<blockquote>\n<p id=\"so_4700052_4700074_0\">Vectors allow random access; that is,\n  an element of a vector may be\n  referenced in the same manner as\n  elements of arrays (by array indices).\n  Linked-lists and sets, on the other\n  hand, do not support random access or\n  pointer arithmetic.</p>\n</blockquote>\n", "OwnerUserId": "23528", "PostTypeId": "2", "Id": "4700074", "Score": "2", "CreationDate": "2011-01-15T14:24:20.577", "LastActivityDate": "2011-01-15T14:24:20.577"}, "4700073": {"ParentId": "4700052", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>I'm sorry to say that your schoolmates are completely wrong. If your schoolmates can honestly say that \"vectors are linked lists\" then you need to respectfully tell them that they need to pick up <a href=\"https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list\">a good C++ book</a> (or any decent computer science book) and read it. Or perhaps even the Wikipedia articles for <a href=\"http://en.wikipedia.org/wiki/Vector_%28C%2B%2B%29\" rel=\"nofollow noreferrer\">vectors</a> and <a href=\"http://en.wikipedia.org/wiki/List_%28C%2B%2B%29\" rel=\"nofollow noreferrer\">lists</a>. (Also see the articles for <a href=\"http://en.wikipedia.org/wiki/Dynamic_array\" rel=\"nofollow noreferrer\">dynamic arrays</a> and <a href=\"http://en.wikipedia.org/wiki/Linked_list\" rel=\"nofollow noreferrer\">linked lists</a>.)</p>\n<hr>\n<p>Vectors (as in <code>std::vector</code>) <strong>are not</strong> linked lists. (Note that <code>std::vector</code> do not derive from <code>std::list</code>). While they both can store a collection of data, how a vector does it is completely different from how a linked list does it. Therefore, they have different performance characteristics in different situations.</p>\n<p>For example, insertions are a constant-time operation on linked lists, while it is a linear-time operation on vectors if it is inserted in somewhere other than the end. (However, it is <em>amortized</em> constant-time if you insert at the end of a vector.)</p>\n<p>The <code>std::vector</code> class in C++ are <strong>required</strong> to be contiguous by the C++ standard:</p>\n<blockquote>\n<p id=\"so_4700052_4700073_0\"><strong>23.2.4/1 Class template <code>vector</code></strong></p>\n<p id=\"so_4700052_4700073_1\">A <code>vector</code> is a kind of sequence that supports random access iterators. In addition, it supports (amortized) constant time insert and erase operations at the end; insert and erase in the middle take linear time. Storage management is handled automatically, though hints can be given to improve efficienty. <strong>The elements of a <code>vector</code> are stored contiguously</strong>, meaning that if <code>v</code> is a <code>vector&lt;T, Allocator&gt;</code> where <code>T</code> is some type other than <code>bool</code>, then it obeys the identity <code>&amp;v[n] == &amp;v[0] + n</code> for all <code>0 &lt;= n &lt; v.size()</code>.</p>\n</blockquote>\n<p>Compare that to <code>std::list</code>:</p>\n<blockquote>\n<p id=\"so_4700052_4700073_2\"><strong>23.2.2/1 Class template <code>list</code></strong></p>\n<p id=\"so_4700052_4700073_3\">A <code>list</code> is a kind of sequence that supports bidirectional iterators and allows constant time insert and erase operations anywhere within the sequence, with storage management handled automatically. Unlike vectors (23.2.4) and deques (23.2.1), fast random access to list elements is not supported, but many algorithms only need sequential access anyway.</p>\n</blockquote>\n<p>Clearly, the C++ standard stipulates that a vector and a list are two different containers that do things differently.</p>\n<p>You can't \"break\" a vector (at least not intentionally) by simply calling <code>erase()</code> with a valid iterator. That would make <code>std::vector</code>s rather useless since the point of its existence is to manage memory for you!</p>\n</hr>", "OwnerUserId": "308661", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:53:21.420", "Id": "4700073", "Score": "24", "CreationDate": "2011-01-15T14:24:11.607", "LastActivityDate": "2011-01-15T14:51:32.063"}, "4700052": {"CommentCount": "0", "AcceptedAnswerId": "4700073", "CreationDate": "2011-01-15T14:20:39.557", "LastActivityDate": "2011-01-15T14:51:32.063", "PostTypeId": "1", "ViewCount": "7875", "FavoriteCount": "4", "Title": "Are vector a special case of linked lists?", "Id": "4700052", "Score": "10", "Body": "<p>When talking about the STL, I have several schoolmates telling me that \"vectors are linked lists\".</p>\n<p>I have another one arguing that if you call the erase() method with an iterator, it breaks the vector, since it's a linked list.</p>\n<p>They also tend to don't understand why I'm always arguing that vector are contiguous, just like any other array, and don't seem to understand what random access means. Are vector stricly contiguous just like regular arrays, or just at most contiguous ? (for example it will allocate several contiguous segments if the whole array doesn't fit).</p>\n", "Tags": "<c++><stl><vector><linked-list>", "OwnerUserId": "414063", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_4700052_4700073_1": {"section_id": 955, "quality": 0.9411764705882353, "length": 48}, "so_4700052_4700073_3": {"section_id": 902, "quality": 0.918918918918919, "length": 34}}, "n3337": {"so_4700052_4700073_1": {"section_id": 943, "quality": 0.9411764705882353, "length": 48}, "so_4700052_4700073_3": {"section_id": 888, "quality": 0.918918918918919, "length": 34}}, "n4659": {"so_4700052_4700073_3": {"section_id": 962, "quality": 0.918918918918919, "length": 34}}}});