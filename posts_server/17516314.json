post_cb({"bq_ids": {"n4140": {"so_17516314_17516314_1": {"length": 7, "quality": 1.0, "section_id": 201}}, "n3337": {"so_17516314_17516314_1": {"length": 7, "quality": 1.0, "section_id": 195}}, "n4659": {"so_17516314_17516314_1": {"length": 7, "quality": 1.0, "section_id": 207}}}, "17516314": {"ViewCount": "150", "Body": "<p>clang 3.0 and g++ 4.8.1 both reject the following code with the error shown in the comment:</p>\n<pre><code>template&lt;typename T&gt;\nstruct S\n{\n    void f()\n    {\n        this-&gt;dependent(); // no error: type of 'this' is dependent?\n        this-&gt;Dependent::dependent(); // error: 'Dependent' has not been declared\n    }\n};\n</code></pre>\n<p>According to [basic.lookup.classref]</p>\n<blockquote>\n<p id=\"so_17516314_17516314_0\">the class-name-or-namespace-name following the . or -&gt; operator is looked up both in the context of the entire postfix-expression and in the scope of the class of the object expression.</p>\n</blockquote>\n<p>And [temp.dep.expr]</p>\n<blockquote>\n<p id=\"so_17516314_17516314_1\"><code>this</code> is type-dependent if the class type of the enclosing member function is dependent.</p>\n</blockquote>\n<p>If the class-or-namespace-name <code>Dependent</code> is looked up 'in the scope of the class of the object expression* <code>this</code>, and the class of the object expression is dependent, should this lookup not be deferred until the template is instantiated? Does the standard specify the correct behaviour?</p>\n<p>EDIT: clang 3.0 accepts the following code, but g++4.8 gives the same error as above</p>\n<pre><code>template&lt;typename T&gt;\nstruct S\n{\n    T m;\n    void f()\n    {\n        m.dependent();\n        m.Dependent::dependent();\n    }\n};\n</code></pre>\n", "AcceptedAnswerId": "17567059", "Title": "Should name lookup be deferred for a class/namespace-name qualified by this-> in a class template definition?", "CreationDate": "2013-07-07T20:57:49.050", "Id": "17516314", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2013-08-13T20:39:45.983", "LastEditorUserId": "1690864", "LastActivityDate": "2013-08-13T20:39:45.983", "Score": "4", "OwnerUserId": "1690864", "Tags": "<c++><templates><language-lawyer>", "AnswerCount": "1"}, "17567059": {"Id": "17567059", "PostTypeId": "2", "Body": "<p>In your first code, <em>both</em> lines are \"illformed, no diagnostic required\" because \"this\" refers to the current instantiation, but no member was found and the class template has no dependent base classes.</p>\n<p>It is neither a member of the current instantiation, nor of an unknown specialization. See 14.6.2.1p6</p>\n", "LastActivityDate": "2013-07-10T09:28:14.203", "Score": "2", "CreationDate": "2013-07-10T09:28:14.203", "ParentId": "17516314", "CommentCount": "5", "OwnerUserId": "34509"}});