post_cb({"bq_ids": {"n4140": {"so_3093451_3093470_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 955}}, "n3337": {"so_3093451_3093470_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 943}}}, "3093451": {"ViewCount": "7440", "Body": "<p>Say I have a function:</p>\n<pre><code>void someFunc(int *x,int count);\n</code></pre>\n<p>which is out of my control, so I can't write it to accept iterators.</p>\n<p>Is it safe to call it like so (regardless of the specific STL implementation):</p>\n<pre><code>vector&lt;int&gt; v;\n/* ... */\nsomeFunc(&amp;v[0],v.size());\n</code></pre>\n<p>Obviously, one counter example is <code>vector&lt;bool&gt;</code>. How about any other type? (assuming I haven't specialized <code>vector</code> in any way).</p>\n", "AcceptedAnswerId": "3093470", "Title": "Is it safe to pass a vector as an array?", "CreationDate": "2010-06-22T13:19:04.730", "Id": "3093451", "CommentCount": "3", "FavoriteCount": "4", "PostTypeId": "1", "LastActivityDate": "2012-06-29T08:16:41.217", "Score": "15", "OwnerUserId": "366240", "Tags": "<c++><arrays><stl><vector>", "AnswerCount": "3"}, "3093454": {"PostTypeId": "2", "Body": "<p>Yes.  Assuming <code>v.size() &gt; 0</code>, this is safe (If the vector is empty, then <code>v[0]</code> results in undefined behavior).</p>\n<p>The elements of a <code>std::vector</code> container are stored contiguously, just like in an ordinary array.</p>\n", "LastActivityDate": "2010-06-22T13:50:58.540", "LastEditorUserId": "151292", "Id": "3093454", "CommentCount": "6", "CreationDate": "2010-06-22T13:19:46.430", "ParentId": "3093451", "Score": "8", "OwnerUserId": "151292", "LastEditDate": "2010-06-22T13:50:58.540"}, "3093470": {"PostTypeId": "2", "Body": "<p>From section 23.2.4, point 1 of the standard:</p>\n<blockquote>\n<p id=\"so_3093451_3093470_0\">[...] The elements of a vector are stored contiguously,\n  meaning that if v is a vector where T is some type other than bool, then it obeys the identity &amp;v[n] == &amp;v[0] + n for all 0 &lt;= n &lt; v.size().</p>\n</blockquote>\n<p>So yes, it is safe.</p>\n<p><strong>Note</strong>: If <code>v</code> is empty <code>v[0]</code> is undefined behavior so you should only do this if <code>v</code> is <em>not</em> empty.</p>\n", "LastActivityDate": "2010-06-22T14:49:34.343", "LastEditorUserId": "248066", "Id": "3093470", "CommentCount": "6", "CreationDate": "2010-06-22T13:21:26.717", "ParentId": "3093451", "Score": "28", "OwnerUserId": "248066", "LastEditDate": "2010-06-22T14:49:34.343"}, "3093569": {"PostTypeId": "2", "Body": "<p>As others has suggested it is safe. <p>But I would like to have a small reservation.\nIf this function accept an array and stores it for later use you might have a problem. \nThis is because std::vector might freely deallocate its memory if it needs it to change size. So if this function just uses the array (makes a copy or whatever) or you never alter it, it is safe. <p>\nI just want to point that out, just because the vectors elements are stored contiguous it isn't automatically safe to pass around. Ownership is still an issue.</p>\n</p></p>", "LastActivityDate": "2010-06-22T13:34:24.057", "Id": "3093569", "CommentCount": "0", "CreationDate": "2010-06-22T13:34:24.057", "ParentId": "3093451", "Score": "9", "OwnerUserId": "86638"}});