post_cb({"30883069": {"ViewCount": "1391", "Body": "<p>I would like to compare vector with an array. Elements in vector and in array are in different order, unsorted and can duplicated. E.g. </p>\n<p>Below are the same:</p>\n<pre><code>vector&lt;int&gt; lvector = {5,7,3,1,2,7};\nint larray[6] = {3,5,1,7,2,7}\n</code></pre>\n<p>Below, not the same:</p>\n<pre><code>vector&lt;int&gt; lvector = {5,7,3,1,2,7,5};\nint larray[7] = {3,5,1,7,2,7,3}\n</code></pre>\n<p>And something like this is also not the same:</p>\n<pre><code>vector&lt;int&gt; lvector = {1,1,1,1,2,2};\nint larray[6] = {1,1,1,1,1,2}\n</code></pre>\n<p>Now I need to check if vector and array have got the same elements. I can't modify the vector and the array, but I can create a new container and copy the element from vector and array to this new container and then copare them. I am asking about this, because I would like to do this in en efficient way. Thanks.</p>\n", "Title": "How to compare vector with array?", "CreationDate": "2015-06-17T05:40:11.650", "LastActivityDate": "2017-04-14T06:14:57.177", "CommentCount": "11", "LastEditDate": "2015-08-25T10:53:15.187", "PostTypeId": "1", "LastEditorUserId": "1693143", "Id": "30883069", "Score": "8", "OwnerUserId": "4502680", "Tags": "<c++><arrays><vector><compare><containers>", "AnswerCount": "3"}, "30883224": {"Id": "30883224", "PostTypeId": "2", "Body": "<p>There are a lot of different ways of solving this problem, each has proc and cons.</p>\n<h2>Some pre-tests</h2>\n<ol>\n<li>Obviously, two ranges cannot be equal, if they have different size.</li>\n<li>You could calculate an order independent hash function for elements in the ranges (thanks, @Michael Anderson). It could be a sum of elements, or you just could <code>xor</code> them all. Arrays with different hash value cannot be equal.</li>\n</ol>\n<h2><a href=\"http://en.cppreference.com/w/cpp/container/unordered_multiset\" rel=\"nofollow\"><code>std::unordered_multiset</code></a></h2>\n<p>You could create an <code>unordered_multiset</code>, which holds frequency of elements in the range. While it has linear complexity in average, it may be O(n^2) because of hash collisions. Quote from the Standard (N3337, \u00a7 23.5.7.2):</p>\n<blockquote>\n<p id=\"so_30883069_30883224_0\">Complexity: Average case linear, worst case quadratic.</p>\n</blockquote>\n<p>However, you should also remember the complexity of <code>std::unordered_set::operator==</code>:</p>\n<blockquote>\n<p id=\"so_30883069_30883224_1\">For <code>unordered_set</code> and <code>unordered_map</code>, the complexity of\n  <code>operator==</code> (i.e., the number of calls to the <code>==</code> operator of the\n  <code>value_type</code>, to the predicate returned by <code>key_equal()</code>, and to the\n  hasher returned by <code>hash_function()</code>) is proportional to <code>N</code> in the\n  average case and to <code>N^2</code> in the worst case, where <code>N</code> is <code>a.size()</code>.</p>\n<p id=\"so_30883069_30883224_2\">For <code>unordered_multiset</code> and <code>unordered_multimap</code>, the complexity of\n  <code>operator==</code> is proportional to <code>sum of Ei^2</code> in the average case and\n  to <code>N^2</code> in the worst case, where <code>N</code> is <code>a.size()</code>, and <code>Ei</code> is the\n  size of the <code>i</code>th equivalent-key group in <code>a</code>. </p>\n<p id=\"so_30883069_30883224_3\">However, if the\n  respective elements of each corresponding pair of equivalent-key\n  groups <code>Eai</code> and <code>Ebi</code> are arranged in the same order (as is commonly\n  the case, e.g., if <code>a</code> and <code>b</code> are unmodified copies of the same\n  container), then the average-case complexity for <code>unordered_multiset</code>\n  and <code>unordered_multimap</code> becomes proportional to <code>N</code> (but worst-case\n  complexity remains <code>O(N2)</code>, e.g., for a pathologically bad hash\n  function).</p>\n</blockquote>\n<p>Example:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;unordered_set&gt;\n#include &lt;vector&gt;\n\n\nint main()\n{\n    std::vector&lt;int&gt; v{5, 7, 3, 1, 2, 7};\n    int arr[] = {3, 5, 1, 7, 2, 7};\n\n    std::unordered_multiset&lt;int&gt; mv(std::begin(v), std::end(v));\n    std::unordered_multiset&lt;int&gt; ma(std::begin(arr), std::end(arr));\n\n    std::cout &lt;&lt; \"Are equal? \" &lt;&lt; (mv == ma) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<h2><a href=\"http://en.cppreference.com/w/cpp/algorithm/sort\" rel=\"nofollow\"><code>std::sort</code></a></h2>\n<p>You could compare sorted copies of your range. According to the Standard (N3337, \u00a7 25.4.1.1) , it has <code>O(n * log(n))</code> complexity:</p>\n<blockquote>\n<p id=\"so_30883069_30883224_4\">Complexity: O(N log(N)) (where N == last - first) comparisons.</p>\n</blockquote>\n<p>Example:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\n\nint main()\n{\n    std::vector&lt;int&gt; v{5, 7, 3, 1, 2, 7};\n    int arr[] = {3, 5, 1, 7, 2, 7};\n\n    std::vector&lt;int&gt; sv(v);\n    std::vector&lt;int&gt; sa(std::begin(arr), std::end(arr));\n\n    std::sort(std::begin(sv), std::end(sv));\n    std::sort(std::begin(sa), std::end(sa));\n\n    std::cout &lt;&lt; \"Are equal? \" &lt;&lt; (sv == sa) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n", "LastEditorUserId": "1532460", "LastActivityDate": "2015-06-17T06:55:54.157", "Score": "2", "CreationDate": "2015-06-17T05:51:26.990", "ParentId": "30883069", "CommentCount": "6", "LastEditDate": "2015-06-17T06:55:54.157", "OwnerUserId": "1532460"}, "43406215": {"Id": "43406215", "PostTypeId": "2", "Body": "<p>At first convert the array into v1 vector.</p>\n<p>v={1,1,2,3,4};    vector and</p>\n<p>v1={1,1,2,3,4}; converted from array</p>\n<pre><code>bool f=0;\nif(equal(v.begin(),v.end(),v1.begin()))  //compare two vector, if equal return true\n{\n    f=1;\n}\n\n}\nif(f==1)\n    cout&lt;&lt;\"Yes\"&lt;&lt;endl;\nelse cout&lt;&lt;\"No\"&lt;&lt;endl;\n</code></pre>\n", "LastActivityDate": "2017-04-14T06:14:57.177", "Score": "0", "CreationDate": "2017-04-14T06:14:57.177", "ParentId": "30883069", "CommentCount": "1", "OwnerUserId": "5468257"}, "bq_ids": {"n4140": {"so_30883069_30883224_3": {"length": 32, "quality": 0.9142857142857143, "section_id": 764}, "so_30883069_30883224_2": {"length": 15, "quality": 0.8333333333333334, "section_id": 764}, "so_30883069_30883224_4": {"length": 4, "quality": 0.6666666666666666, "section_id": 1402}, "so_30883069_30883224_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 763}, "so_30883069_30883224_1": {"length": 21, "quality": 0.9545454545454546, "section_id": 764}}, "n3337": {"so_30883069_30883224_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 750}, "so_30883069_30883224_2": {"length": 15, "quality": 0.8333333333333334, "section_id": 751}, "so_30883069_30883224_1": {"length": 21, "quality": 0.9545454545454546, "section_id": 751}, "so_30883069_30883224_3": {"length": 32, "quality": 0.9142857142857143, "section_id": 751}, "so_30883069_30883224_4": {"length": 4, "quality": 0.6666666666666666, "section_id": 1396}}, "n4659": {"so_30883069_30883224_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 823}, "so_30883069_30883224_2": {"length": 14, "quality": 0.7777777777777778, "section_id": 824}, "so_30883069_30883224_1": {"length": 20, "quality": 0.9090909090909091, "section_id": 824}, "so_30883069_30883224_3": {"length": 32, "quality": 0.9142857142857143, "section_id": 824}, "so_30883069_30883224_4": {"length": 4, "quality": 0.6666666666666666, "section_id": 1523}}}, "30883373": {"Id": "30883373", "PostTypeId": "2", "Body": "<p>That's a variant of what proposed by soon:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;unordered_set&gt;\n#include &lt;vector&gt;\n\n\nint main()\n{\n    std::vector&lt;int&gt; v{5, 7, 3, 1, 2, 7};\n    int arr[] = {3, 5, 1, 7, 2, 7};\n\n    std::vector&lt;int&gt; mv(std::begin(v), std::end(v));\n    std::vector&lt;int&gt; ma(std::begin(arr), std::end(arr));\n    std::sort(mv.begin(), mv.end()) ;\n    std::sort(ma.begin(), ma.end()) ;\n\n    std::cout &lt;&lt; \"Are equal? \" &lt;&lt; (mv == ma) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2015-06-17T06:02:01.720", "Score": "2", "CreationDate": "2015-06-17T06:02:01.720", "ParentId": "30883069", "CommentCount": "3", "OwnerUserId": "4877767"}});