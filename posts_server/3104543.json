post_cb({"3104591": {"ParentId": "3104543", "CommentCount": "1", "Body": "<p>You'll need to add your own check.</p>\n<p>According to \u00a720.4.\u200b1.1/8, <code>deallocate</code> requires:</p>\n<blockquote>\n<p id=\"so_3104543_3104591_0\">p shall be a pointer value obtained from allocate(). n shall equal the value passed as the\n  first argument to the invocation of allocate which returned p.</p>\n</blockquote>\n<p><code>allocate</code> throws an exception when storage can't be given (\u00a720.4.\u200b1.1/7). In other words, <code>allocate</code> never returns 0, and therefore <code>deallocate</code> should never get a 0. Passing a 0 would lead to undefined behavior.</p>\n", "OwnerUserId": "87234", "PostTypeId": "2", "Id": "3104591", "Score": "9", "CreationDate": "2010-06-23T18:50:30.917", "LastActivityDate": "2010-06-23T18:50:30.917"}, "3104543": {"CommentCount": "0", "ViewCount": "266", "PostTypeId": "1", "LastEditorUserId": "64046", "CreationDate": "2010-06-23T18:45:09.123", "LastActivityDate": "2014-08-15T22:51:24.590", "Title": "C++ allocator<X>::deallocate(NULL,1) allowed?", "AcceptedAnswerId": "3104591", "LastEditDate": "2014-08-15T22:51:24.590", "Id": "3104543", "Score": "6", "Body": "<p>Both <code>free(NULL)</code> and <code>::operator delete(NULL)</code> are allowed.  Does the allocator concept (e.g. std::allocator also allow <code>deallocate(NULL,1)</code>, or is it required to put your own guard around it?</p>\n", "Tags": "<c++><memory-management><null><free><allocator>", "OwnerUserId": "123862", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_3104543_3104591_0": {"section_id": 4242, "quality": 1.0, "length": 12}}, "n3337": {"so_3104543_3104591_0": {"section_id": 4083, "quality": 1.0, "length": 12}}, "n4659": {"so_3104543_3104591_0": {"section_id": 5501, "quality": 1.0, "length": 12}}}});