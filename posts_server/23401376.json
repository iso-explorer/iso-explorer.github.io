post_cb({"bq_ids": {"n4140": {"so_23401376_23711944_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 123}}, "n3337": {"so_23401376_23711944_0": {"length": 20, "quality": 0.9523809523809523, "section_id": 117}}, "n4659": {"so_23401376_23711944_0": {"length": 18, "quality": 0.8571428571428571, "section_id": 127}}}, "23711944": {"Id": "23711944", "PostTypeId": "2", "Body": "<p>Both code snippets you provided are not making sense, since you can't have a pack expansion without an unexpanded parameter pack:\n\u00a714.5.3/5:</p>\n<blockquote>\n<p id=\"so_23401376_23711944_0\">The pattern of a pack expansion shall name one or more parameter packs that are not expanded by a nested pack expansion; such parameter packs are called <em>unexpanded</em> parameter packs in the pattern.</p>\n</blockquote>\n<p>Back to the actual problem:\nIf you actually used a proper pack expansion and you instantiated that pack expansion with a non-empty parameter pack, the rule in \u00a714.1/7 applies, because obviously a non-type template parameter cannot be declared to have void type.</p>\n<p>As long as that pack expansion is not instantiated with a non-empty parameter pack, no rule is violated, since no <em>parameter-declaration</em> is done. :)</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2014-05-17T13:40:59.270", "Score": "3", "CreationDate": "2014-05-17T13:32:47.133", "ParentId": "23401376", "CommentCount": "0", "OwnerUserId": "3647361", "LastEditDate": "2014-05-17T13:40:59.270"}, "23401376": {"ViewCount": "285", "Body": "<p>gcc-4.8 accepts this code, but isn't it wrong since the non-type parameter pack is equivalent to <code>void...</code> which is illegal?</p>\n<pre><code>template &lt;typename T,\n          typename std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type...&gt;\nvoid test(T) {}\n</code></pre>\n<p>I tried this with clang-3.5 as well which also accepts it. Is this a compiler bug, or am I misunderstanding something?</p>\n<hr>\n<p>Full test code below, which uses non-type empty parameter packs to simplify enable_if.\nThis is almost the same as what's in <a href=\"http://flamingdangerzone.com/cxx11/2012/06/01/almost-static-if.html\" rel=\"nofollow\">Flaming Dangerzone's Remastered enable_if</a> except after substitution the pack becomes <code>void...</code>.</p>\n<pre><code>#include &lt;type_traits&gt;\n\ntemplate &lt; typename C &gt;\nusing enable_if = typename std::enable_if&lt;C::value&gt;::type ;\n\ntemplate &lt; typename T, enable_if&lt;std::is_integral&lt;T&gt;&gt;... &gt;\nvoid test(T){} // #1\n\ntemplate &lt; typename T, enable_if&lt;std::is_floating_point&lt;T&gt;&gt;... &gt;\nvoid test(T){} //#2\n\nint main()\n{\n   test(0);   // calls #1\n   test(0.0); // calls #2\n   return 0;\n}\n</code></pre>\n<p>gcc-4.8 compiles the above code just fine. clang doesn't but that's because it has a different bug <a href=\"http://llvm.org/bugs/show_bug.cgi?id=11723\" rel=\"nofollow\">http://llvm.org/bugs/show_bug.cgi?id=11723</a>.</p>\n</hr>", "Title": "isn't non-type parameter pack that evaluates to \"void...\" illegal?", "CreationDate": "2014-05-01T02:57:31.960", "LastActivityDate": "2014-05-17T13:40:59.270", "CommentCount": "15", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2014-05-02T11:11:27.900", "LastEditorUserId": "476681", "Id": "23401376", "Score": "6", "OwnerUserId": "3185134", "Tags": "<c++><templates><c++11><void><variadic-templates>", "AnswerCount": "1"}});