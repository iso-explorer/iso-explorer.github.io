post_cb({"8844915": {"ViewCount": "5494", "Body": "<p>I know that in C compilers the <code>main()</code> function is called by the <code>_start()</code> function which has code something like this:</p>\n<pre><code>exit(main()); // return value of main is returned\n</code></pre>\n<p>How does <code>_start()</code> work when <code>main()</code> does not return <code>int</code>, for example if its return type is <code>void</code>, <code>float</code>, or something else?</p>\n", "AcceptedAnswerId": "8844963", "Title": "What happens if main() does not return an int value?", "CreationDate": "2012-01-13T01:46:25.863", "Id": "8844915", "CommentCount": "13", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2013-09-24T18:40:31.597", "LastEditorUserId": "827263", "LastActivityDate": "2013-09-24T18:40:31.597", "Score": "21", "OwnerUserId": "1044137", "Tags": "<c++><c>", "AnswerCount": "8"}, "8844957": {"Id": "8844957", "PostTypeId": "2", "Body": "<p>In C++ it would be a compile error to return anything other than <code>int</code> from <code>main()</code>:</p>\n<pre><code>error: \u2018::main\u2019 must return \u2018int\u2019\n</code></pre>\n<p>In C it is a warning, you will get a float reinterpreted as an <code>int</code>: for example, 2.1F would be reinterpreted as 224.</p>\n", "LastActivityDate": "2012-01-13T01:54:42.377", "CommentCount": "3", "CreationDate": "2012-01-13T01:54:42.377", "ParentId": "8844915", "Score": "7", "OwnerUserId": "335858"}, "8845327": {"Id": "8845327", "PostTypeId": "2", "Body": "<p>Standard implementations of C expect <code>main</code> to return <code>int</code> just because it is defined that way in the C standard. Returning something other than <code>int</code> (or a type compatible with <code>int</code>) usually results in undefined behaviour\u2014meaning there is no way to tell what will happen.</p>\n<p>However, there are non-standard implementations of C, for example, the Plan 9 operating system uses <code>void main()</code>, <a href=\"http://plan9.bell-labs.com/sources/plan9/sys/src/cmd/\" rel=\"nofollow\">here</a> is a list their utilities&amp;apos; source code. Plan 9 C code is quite a bit different to K&amp;R, ANSI, C99 or C11. <a href=\"http://doc.cat-v.org/plan_9/programming/c_programming_in_plan_9\" rel=\"nofollow\">Here's</a> a link explaining how Plan 9 uses the C language.</p>\n", "LastActivityDate": "2012-01-13T02:54:30.370", "CommentCount": "0", "CreationDate": "2012-01-13T02:54:30.370", "ParentId": "8844915", "Score": "2", "OwnerUserId": "10320"}, "8844969": {"Id": "8844969", "PostTypeId": "2", "Body": "<p>The C-standard does not allow you to return any other value than int <s> or void</s> -- the c-compiler specifically test for the signature of main to make sure it is compatible.</p>\n", "LastEditorUserId": "668501", "LastActivityDate": "2012-01-13T21:59:16.410", "Score": "0", "CreationDate": "2012-01-13T01:55:54.260", "ParentId": "8844915", "CommentCount": "4", "OwnerUserId": "668501", "LastEditDate": "2012-01-13T21:59:16.410"}, "8844952": {"Id": "8844952", "PostTypeId": "2", "Body": "<p>The function will return an implementation-defined value. For example, in C++, <code>main</code> implicitly returns <code>0</code>. In this case of a <code>void</code> main then this would simply be returned by <code>_start</code>. However, there are virtually no implementations that would allow any arbitrary return type- it's baked into the operating system that a process exits with an integral value.</p>\n", "LastActivityDate": "2012-01-13T01:53:05.730", "CommentCount": "0", "CreationDate": "2012-01-13T01:53:05.730", "ParentId": "8844915", "Score": "8", "OwnerUserId": "298661"}, "bq_ids": {"n4140": {"so_8844915_8845367_0": {"length": 18, "quality": 0.75, "section_id": 7146}}, "n3337": {"so_8844915_8845367_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 6890}}, "n4659": {"so_8844915_8845367_0": {"length": 18, "quality": 0.75, "section_id": 8647}}}, "8845367": {"Id": "8845367", "PostTypeId": "2", "Body": "<p>If the return type of <code>main</code> is not an <code>int</code> then the return value is implementation defined.<br>\nIn short an Implementation is allowed to have different return type than <code>int</code> for <code>main</code> but none of the known implementations support anything other than <code>int</code>.<br>\nIdeally, You will need to refer to the documentation of your platform and the compiler to see what exact behavior it defines because it is allowed to have the flexibility do so by the standard.</br></br></p>\n<p><strong>Reference:</strong> </p>\n<p>C++03 Standard:      </p>\n<p><strong>3.6.1 Main function [basic.start.main]</strong> </p>\n<blockquote>\n<p id=\"so_8844915_8845367_0\">An implementation shall not predefine the main function. This function shall not be overloaded. <strong>It shall have a return type of type int, but otherwise its type is implementation-defined</strong>. All implementations shall allow both of the following definitions of main:</p>\n<p id=\"so_8844915_8845367_1\">int main() { /* ... */ }       </p>\n<p id=\"so_8844915_8845367_2\">and</p>\n<p id=\"so_8844915_8845367_3\">int main(int argc, char* argv[]) { /* ... */ }</p>\n<p id=\"so_8844915_8845367_4\">.....</p>\n</blockquote>\n", "LastActivityDate": "2012-01-13T03:01:04.773", "CommentCount": "1", "CreationDate": "2012-01-13T03:01:04.773", "ParentId": "8844915", "Score": "2", "OwnerUserId": "452307"}, "13783259": {"Id": "13783259", "PostTypeId": "2", "Body": "<p>Assume we're using Visual Studio 2012.</p>\n<p>For C++ programs, Visual Studio allows <code>void</code> to be specified as the return type, even though this is forbidden by the C++ standard.  Under the standard, <code>main()</code> must return an <code>int</code> in hosted implementations.</p>\n<p>For C programs, any return type is allowed for <code>main()</code>, but returning something other than an <code>int</code> results in unspecified behavior.  For example, under Visual Studio 2012, returning <code>0.0</code> from <code>double main()</code> results in a return value of <code>0xcccccccc</code> when the program is run in the debugger (see <a href=\"https://stackoverflow.com/questions/127386/in-visual-studio-c-what-are-the-memory-allocation-representations\">In Visual Studio C++, what are the memory allocation representations?</a>).</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-12-09T00:01:46.543", "Score": "0", "CreationDate": "2012-12-09T00:01:46.543", "ParentId": "8844915", "CommentCount": "0", "OwnerUserId": "681231", "LastEditDate": "2017-05-23T12:16:06.613"}, "8844963": {"Id": "8844963", "PostTypeId": "2", "Body": "<p>If <code>main</code> doesn't return <code>int</code>, then you have an ill-formed program and behavior is undefined. Anything can happen. Your program might crash, or it might run as though nothing were wrong at all.</p>\n<p>Let's suppose <code>main</code> returned something other than <code>int</code>, and your compiler and linker allowed the program to be made. The caller doesn't know that, though. If the caller expects returned <code>int</code> values to be returned in the EAX (Intel) register, then that's what it will read to determine the return value of <code>main</code>. If your faulty <code>main</code> stored a <code>float</code> value there, then it will be interpreted as an <code>int</code> instead. (That doesn't mean it will get truncated. It means the bits making up the layout of a floating-point value will instead make up an <code>int</code> instead.) If your faulty <code>main</code> returned <code>void</code>, then it didn't store anything in the expected register, so the caller will get whatever value was previously stored in that register instead.</p>\n<p>If your <code>main</code> returns some type that it expects to store someplace that the caller didn't' reserve memory for (such as a large struct), then it will end up overwriting something else, perhaps something important to the clean shutdown of the program, causing your program to crash.</p>\n", "LastActivityDate": "2012-01-13T01:55:15.577", "CommentCount": "6", "CreationDate": "2012-01-13T01:55:15.577", "ParentId": "8844915", "Score": "14", "OwnerUserId": "33732"}, "8845207": {"Id": "8845207", "PostTypeId": "2", "Body": "<p>The C standard never mentions this <code>_start</code> function; I don't believe C++ does either.</p>\n<p>In C prior to the 1999 ISO standard, if execution reaches the end of <code>main()</code> without executing a <code>return</code> statement, or executes a <code>return</code> statement that doesn't specify a value, then \"the termination status returned to the host environment is undefined\". In practice, I've seen implementations where such a program returns a status of 1 (failure), or some arbitrary value in memory such as the result of the last function that was called.</p>\n<p>The 1999 ISO C standard changed this: \"reaching the } that terminates the <strong>main</strong> function returns a value of 0\".  This matches the rule that C++ has had at least since the first ISO C++ standard in 1998.</p>\n<p>(As a matter of style, I prefer to have an explicit <code>return 0;</code> at the end of <code>main</code>, even if it's not strictly required.  This is consistent with <code>int</code> functions other than <code>main</code>, and it makes for better portability to pre-C99 C compilers.)</p>\n<p>All this assumes that <code>main</code> is defined with a return type of <code>int</code>.  That's the only type that's specifically supported by the C standard (either <code>int main(void)</code> or <code>int main(int argc, char *argv[])</code> or equivalent), but (hosted) implementations may support other implementation-defined definitions.  The C90 standard doesn't explicitly cover this case, but C99 says, \"If the return type is not compatible with int, the termination status returned to the host environment is unspecified.\"</p>\n<p>The C++ standard is a bit different.  For hosted implementations, <code>main</code> <em>must</em> be defined to return <code>int</code>.  The parameters are implementation-defined, but both the standard forms of C must be supported.</p>\n<p>For a hosted implementation in either C or C++, there is no good reason I know of to define <code>main</code> with a return type other than <code>int</code>.  Just use one of the two standard definitions, and the question won't arise.</p>\n<p>For \"freestanding implementations\", \"the name and type of the function called at program\nstartup are implementation-defined\".  So the entry point might legitimately return <code>void</code> or something else, and it might not even be called <code>main</code>.  Note that a \"freestanding implementation\" is one \"in which C program execution may take place without any\nbenefit of an operating system\", typically an embedded system.</p>\n", "LastEditorUserId": "827263", "LastActivityDate": "2012-01-13T10:04:01.397", "Score": "14", "CreationDate": "2012-01-13T02:36:13.607", "ParentId": "8844915", "CommentCount": "4", "OwnerUserId": "827263", "LastEditDate": "2012-01-13T10:04:01.397"}});