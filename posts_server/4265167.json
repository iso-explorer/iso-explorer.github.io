post_cb({"4265238": {"Id": "4265238", "PostTypeId": "2", "Body": "<p>A particular compiler (unless buggy) will always have the same behaviour (definitely no random code) on encountering such constructs (unless the context of the code is different).</p>\n<p>In practice, \"Undefined behaviour\" means \"different compilers will handle things differently\".</p>\n<p>If you want to know \"will your imaginary compiler still conform to C++ standards?\" - the answer I think is Yes.</p>\n", "LastEditorDisplayName": "JP19", "OwnerDisplayName": "JP19", "LastActivityDate": "2010-11-24T09:42:09.927", "Score": "2", "CreationDate": "2010-11-24T09:30:25.433", "ParentId": "4265167", "CommentCount": "4", "LastEditDate": "2010-11-24T09:42:09.927"}, "bq_ids": {"n4140": {"so_4265167_4272482_0": {"length": 34, "quality": 0.9444444444444444, "section_id": 5768}, "so_4265167_4265192_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 6173}}, "n3337": {"so_4265167_4272482_0": {"length": 34, "quality": 0.9444444444444444, "section_id": 5541}, "so_4265167_4265192_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 5934}}, "n4659": {"so_4265167_4272482_0": {"length": 34, "quality": 0.9444444444444444, "section_id": 7225}, "so_4265167_4265192_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 7675}}}, "4265167": {"ViewCount": "339", "Body": "<blockquote>\n<p id=\"so_4265167_4265167_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/2397984/undefined-unspecified-and-implementation-defined-behavior\">Undefined, unspecified and implementation-defined behavior</a> </br></p>\n</blockquote>\n<p>I'm trying to deepen my understanding of undefined behavior in C++. Suppose a C++ compiler will intentionally detect some cases of undefined behavior - for example, <a href=\"https://stackoverflow.com/questions/4176328/undefined-behavior-and-sequence-points\">modifying the variable twice between two sequence points</a>:</p>\n<pre><code>x++ = 2;\n</code></pre>\n<p>Once that imaginary compiler reliably detects such a situation it will say <em>emit ten totally random machine instructions into the produced machine code</em>.</p>\n<p>According to C++ standard, <a href=\"https://stackoverflow.com/questions/2397984/undefined-unspecified-and-implementation-defined-behavior\">wherever something is classified as UB there're no requirements on what happens</a>. Will the described imaginary compiler be conformant to the C++ standard?</p>\n", "AcceptedAnswerId": "4265192", "Title": "Is a C++ compiler allowed to emit random code once it encounters a construct that is classified as undefined behavior?", "CreationDate": "2010-11-24T09:22:40.520", "Id": "4265167", "CommentCount": "12", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:06:33.847", "LastEditorUserId": "-1", "LastActivityDate": "2010-11-24T23:27:41.867", "ClosedDate": "2010-11-26T07:14:45.293", "Score": "0", "OwnerUserId": "57428", "Tags": "<c++><undefined-behavior>", "AnswerCount": "4"}, "4265192": {"Id": "4265192", "PostTypeId": "2", "Body": "<p>Yes.  The standard imposes <em>no</em> requirements, so it can do whatever it wants:</p>\n<blockquote>\n<p id=\"so_4265167_4265192_0\"><strong>undefined behavior</strong> </p>\n<p id=\"so_4265167_4265192_1\">behavior, such as might arise upon use of an\n  erroneous program construct or\n  erroneous data, for which this\n  International Standard imposes no\n  requirements.</p>\n</blockquote>\n<p>Just as a note, that is undefined behavior, but it's not necessarily a good example.  On g++ 4.4.1, it will refuse to compile with:</p>\n<blockquote>\n<p id=\"so_4265167_4265192_2\">error: lvalue required as left operand\n  of assignment</p>\n</blockquote>\n<p>because the result of a post-increment is not an lvalue.</p>\n", "LastActivityDate": "2010-11-24T09:26:07.043", "CommentCount": "0", "CreationDate": "2010-11-24T09:26:07.043", "ParentId": "4265167", "Score": "9", "OwnerUserId": "47773"}, "4272482": {"Id": "4272482", "PostTypeId": "2", "Body": "<p>From the Draft Standard / <a href=\"http://www.kuzbass.ru:8086/docs/isocpp/intro.html\" rel=\"nofollow\">http://www.kuzbass.ru:8086/docs/isocpp/intro.html</a> / [1.3.12]</p>\n<blockquote>\n<p id=\"so_4265167_4272482_0\">[Note: permissible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message). Many erroneous program constructs do not engender undefined behavior; they are required to be diagnosed. ] </p>\n</blockquote>\n<p>Definitely doesn't list inserting random instructions, and it's hard to argue that the \"ranges from\" aspect would include a decision to insert random instructions as being anywhere on the continuum between the listed behaviours. ;-)</p>\n", "LastActivityDate": "2010-11-24T23:27:41.867", "CommentCount": "2", "CreationDate": "2010-11-24T23:27:41.867", "ParentId": "4265167", "Score": "0", "OwnerUserId": "410767"}, "4265378": {"Id": "4265378", "PostTypeId": "2", "Body": "<p>Essentially, yes, if and only if those 10 instructions are equally reachable. Consider the following code:</p>\n<pre><code>int main () {\n  if (false) {\n    int x = 0; x++ = 2;\n  }\n  std::cout &lt;&lt; \"Hello, world\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>The UB may be detected at compile time, and the code generation for that particular branch may result in meaningless code. However, the not-so-conditional jump must skip all this and go straight past the closing <code>}</code></p>\n<p>(This question is not a duplicate because the compile-time detection of run-time UB was not covered earlier)</p>\n", "LastActivityDate": "2010-11-24T09:46:02.653", "CommentCount": "2", "CreationDate": "2010-11-24T09:46:02.653", "ParentId": "4265167", "Score": "3", "OwnerUserId": "15416"}});