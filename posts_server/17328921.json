post_cb({"bq_ids": {"n4140": {"so_17328921_17328962_1": {"length": 11, "quality": 0.6111111111111112, "section_id": 6983}, "so_17328921_17329506_0": {"length": 11, "quality": 0.7333333333333333, "section_id": 6983}}, "n3337": {"so_17328921_17328962_1": {"length": 11, "quality": 0.6111111111111112, "section_id": 6729}, "so_17328921_17329506_0": {"length": 11, "quality": 0.7333333333333333, "section_id": 6729}}, "n4659": {"so_17328921_17328962_1": {"length": 11, "quality": 0.6111111111111112, "section_id": 8481}, "so_17328921_17329506_0": {"length": 11, "quality": 0.7333333333333333, "section_id": 8481}}}, "17328921": {"ViewCount": "4959", "Body": "<p>I'm trying to understand the affect of inheritance order in C++.. I looked online, but I couldn't find a clear and sufficient answer...</p>\n<p>So, for the sake of the question, assume there are 2 classes: class B and class C.</p>\n<p>Now, define:</p>\n<pre><code>class A1 : public B, public C{ ... };\nclass A2 : public C, public B{ ... };\n</code></pre>\n<p>What is the difference between A1 and A2?</p>\n<p>Thanks a lot!</p>\n", "AcceptedAnswerId": "17328962", "Title": "C++ multiple inheritance order", "CreationDate": "2013-06-26T19:35:26.430", "Id": "17328921", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-01-07T13:21:55.307", "LastEditorUserId": "324827", "LastActivityDate": "2016-01-07T13:21:55.307", "Score": "17", "OwnerUserId": "324827", "Tags": "<c++><oop><multiple-inheritance><language-lawyer>", "AnswerCount": "2"}, "17329506": {"Id": "17329506", "PostTypeId": "2", "Body": "<p>The C++11 Standard says (\u00a710.1):</p>\n<blockquote>\n<p id=\"so_17328921_17329506_0\">The order of derivation is not significant except as specified by the\n  semantics of initialization by constructor (12.6.2), cleanup (12.4),\n  and storage layout (9.2, 11.1).</p>\n</blockquote>\n<p>The three referenced paragraphs reveal that</p>\n<ul>\n<li>Constructors are called in the order you write them down (first base class in the list is constructed first) (\u00a712.6.2.10). Different rules apply to virtual base classes which are always constructed from the most-derived class before any direct base classes.</li>\n<li>Destructors are called in the inverse order of construction (first base class in the list is destructed last)</li>\n<li>Storage layout is unspecified. You must not make any assumptions about the class layout in memory. The only exception are so called <em>standard-layout</em> classes (\u00a79), which is basically a C-style struct. But since those are not allowed to have more than one class with non-static members in the class hierarchy, the question does not really apply here. </li>\n</ul>\n", "LastEditorUserId": "577603", "LastActivityDate": "2013-07-08T07:08:26.030", "Score": "7", "CreationDate": "2013-06-26T20:08:39.150", "ParentId": "17328921", "CommentCount": "4", "OwnerUserId": "577603", "LastEditDate": "2013-07-08T07:08:26.030"}, "17328962": {"Id": "17328962", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_17328921_17328962_0\">The order of derivation is relevant only to determine the order of default initialization by constructors and cleanup by destructors.</p>\n<p id=\"so_17328921_17328962_1\">The order of derivation is not significant except as specified by the semantics of initialization by constructor (12.6.2), cleanup (12.4), and storage layout (9.2, 11.1). \u2014 end note ]\" (\u00a710.1/2) </p>\n</blockquote>\n<p>From IBM's C++ documentation: <a href=\"http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8a.doc%2Flanguage%2Fref%2Fcplr134.htm\" rel=\"noreferrer\">Multiple inheritance</a></p>\n", "LastEditorUserId": "2525255", "LastActivityDate": "2013-06-26T20:15:23.957", "Score": "11", "CreationDate": "2013-06-26T19:37:23.563", "ParentId": "17328921", "CommentCount": "8", "OwnerUserId": "2525255", "LastEditDate": "2013-06-26T20:15:23.957"}});