post_cb({"25278066": {"CommentCount": "1", "ViewCount": "266", "CreationDate": "2014-08-13T04:27:55.433", "LastActivityDate": "2014-08-13T04:48:34.723", "Title": "What is the order of subobject initialization?", "FavoriteCount": "1", "PostTypeId": "1", "Id": "25278066", "Score": "2", "Body": "<p>Let we have an object <code>o</code> of class some type which contains member subobjects <code>so</code> and <code>sso</code> of another class types. Consider the following example:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n    struct SO{ SO(){ cout &lt;&lt; \"SO()\" &lt;&lt; endl; } };\n    struct SSO{ SSO(){ cout &lt;&lt; \"SSO()\" &lt;&lt; endl; } };\n\n        struct O\n        {\n            O(){ cout &lt;&lt; \"O()\" &lt;&lt; endl; }\n            SO so;\n            SSO sso;\n        };\n    int main()\n    {\n        O o = *(new O);\n    }\n</code></pre>\n<p>Output:</p>\n<pre><code>SO()\n\nSSO()\n\nO()\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/84466feee6296c6c\" rel=\"nofollow\">demo</a></p>\n<p>As noted in the <strong>section 5.3.4</strong>:</p>\n<blockquote>\n<p id=\"so_25278066_25278066_0\">A new-expression that creates an object of type T initializes that\n  object as follows: </p>\n<p id=\"so_25278066_25278066_1\">\u2014 If the new-initializer is omitted, the object is\n  default-initialized (8.5); if no initialization is performed,the\n  object has indeterminate value. </p>\n<p id=\"so_25278066_25278066_2\">\u2014 Otherwise, the new-initializer is\n  interpreted according to the initialization rules of 8.5 for\n  direct-initialization.</p>\n</blockquote>\n<p>Default initialization (i.e. constructor call) is performed for object <code>o</code> in that particular case. But what about his subobjects? It seems that default initialization is performed too. But where does it specified in the Standard that default initialization is performed for any subobject if their complete object is default initialized?</p>\n", "Tags": "<c++><initialization>", "OwnerUserId": "2786156", "AnswerCount": "3"}, "25278130": {"ParentId": "25278066", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>It is not correct to say that default initialization is performed for object <code>o</code>. In your example object <code>o</code> is copy-initialized. Default initialization in your example is performed for the unnamed object created by <code>new</code> (which subsequently becomes leaked).</p>\n<p>Now, your unnamed object of type <code>O</code> created by <code>new</code> is indeed default initialized, which in this case means that it is initialized by a call to user-defined default constructor <code>O::O()</code>. The constructor initializer list in <code>O::O()</code> constructor is completely absent, i.e. does not mention any of the subobjects. That means that these subobjects will be default initialized.</p>\n<p>As stated in </p>\n<p><strong>12.6.2 Initializing bases and members</strong></p>\n<blockquote>\n<p id=\"so_25278066_25278130_0\"><strong>8</strong> In a non-delegating constructor, if a given non-static data member or\n  base class is not designated by a <em>mem-initializer-id</em> (including the\n  case where there is no <em>mem-initializer-list</em> because the constructor\n  has no <em>ctor-initializer</em>) and the entity is not a virtual base class of\n  an abstract class (10.4), then </p>\n<p id=\"so_25278066_25278130_1\">\u2014 if the entity is a non-static data\n  member that has a <em>brace-or-equal-initializer</em>, the entity is\n  initialized as specified in 8.5; </p>\n<p id=\"so_25278066_25278130_2\">\u2014 otherwise, if the entity is a\n  variant member (9.5), no initialization is performed; </p>\n<p id=\"so_25278066_25278130_3\">\u2014 otherwise, the\n  entity is default-initialized (8.5).</p>\n</blockquote>\n<p>The last option applies to your case. (The numbering might be off since I'm using a draft version of the document.)</p>\n<p>Note that the title of your question mentions the \"order of subobject initialization\", while the actual question has nothing to do with the order per se. It is about the method of initialization.</p>\n", "OwnerUserId": "187690", "LastEditorUserId": "187690", "LastEditDate": "2014-08-13T04:48:34.723", "Id": "25278130", "Score": "6", "CreationDate": "2014-08-13T04:33:51.780", "LastActivityDate": "2014-08-13T04:48:34.723"}, "25278125": {"ParentId": "25278066", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_25278066_25278125_0\"><strong>8.5/6</strong> To default-initialize an object of type T means:</p>\n<ul>\n<li>if T is a (possibly cv-qualified) class type (Clause 9), the default constructor for T is called...</li>\n</ul>\n</blockquote>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "25278125", "Score": "0", "CreationDate": "2014-08-13T04:33:33.613", "LastActivityDate": "2014-08-13T04:33:33.613"}, "bq_ids": {"n4140": {"so_25278066_25278130_0": {"section_id": 435, "quality": 0.6538461538461539, "length": 17}, "so_25278066_25278130_1": {"section_id": 435, "quality": 1.0, "length": 8}, "so_25278066_25278066_1": {"section_id": 6098, "quality": 0.8888888888888888, "length": 8}, "so_25278066_25278066_0": {"section_id": 6098, "quality": 1.0, "length": 7}, "so_25278066_25278130_2": {"section_id": 435, "quality": 1.0, "length": 6}, "so_25278066_25278125_0": {"section_id": 3286, "quality": 0.8, "length": 4}, "so_25278066_25278066_2": {"section_id": 6098, "quality": 1.0, "length": 7}, "so_25278066_25278189_0": {"section_id": 438, "quality": 1.0, "length": 6}}, "n3337": {"so_25278066_25278130_0": {"section_id": 427, "quality": 0.9615384615384616, "length": 25}, "so_25278066_25278130_1": {"section_id": 427, "quality": 1.0, "length": 8}, "so_25278066_25278066_1": {"section_id": 5864, "quality": 0.8888888888888888, "length": 8}, "so_25278066_25278066_0": {"section_id": 5864, "quality": 1.0, "length": 7}, "so_25278066_25278130_2": {"section_id": 427, "quality": 1.0, "length": 6}, "so_25278066_25278125_0": {"section_id": 3156, "quality": 0.8, "length": 4}, "so_25278066_25278066_2": {"section_id": 5864, "quality": 1.0, "length": 7}, "so_25278066_25278189_0": {"section_id": 429, "quality": 1.0, "length": 6}}, "n4659": {"so_25278066_25278130_0": {"section_id": 454, "quality": 0.6538461538461539, "length": 17}, "so_25278066_25278130_1": {"section_id": 454, "quality": 0.875, "length": 7}, "so_25278066_25278066_1": {"section_id": 7595, "quality": 0.8888888888888888, "length": 8}, "so_25278066_25278066_0": {"section_id": 7595, "quality": 1.0, "length": 7}, "so_25278066_25278130_2": {"section_id": 454, "quality": 1.0, "length": 6}, "so_25278066_25278066_2": {"section_id": 7595, "quality": 1.0, "length": 7}, "so_25278066_25278189_0": {"section_id": 458, "quality": 1.0, "length": 6}}}, "25278189": {"ParentId": "25278066", "CommentCount": "0", "Body": "<p>\u00a712.6.2/10</p>\n<blockquote>\n<p id=\"so_25278066_25278189_0\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<ul>\n<li>First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in\n  the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes,\n  where \"left-to-right\" is the order of appearance of the base classes in the derived class <code>base-specifier-list</code>.</li>\n<li>Then, direct base classes are initialized in declaration order as they appear in the base-specifier-list\n  (regardless of the order of the <em>mem-initializers</em>).</li>\n<li>Then, non-static data members are initialized in the order they were declared in the class definition (again regardless of the order of the <em>mem-initializers</em>).</li>\n<li>Finally, the <em>compound-statement</em> of the constructor body is executed.</li>\n</ul>\n</blockquote>\n<p>Therefore: no matter which constructor is selected for the initialization---default or otherwise, explicitly defaulted or user-provided---first virtual base classes are initialized, then direct base classes are initialized (in the order in which they appear in the <em>base-specifier-list</em>, just as it says---and not in the order in which they appear in the <em>ctor-initializer</em>); and finally non-static data member subobjects are initialized in declaration order.</p>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "25278189", "Score": "4", "CreationDate": "2014-08-13T04:40:31.320", "LastActivityDate": "2014-08-13T04:40:31.320"}});