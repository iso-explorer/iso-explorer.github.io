post_cb({"20085901": {"Id": "20085901", "PostTypeId": "2", "Body": "<p>the call is being made through an object pointer with a 'static' type of <code>Base*</code> - this is the type that access checks are performed against. These access checks occur at compile time. Since <code>Loner</code> is a friend of <code>Base</code>, the compiler is fine with permitting the call to <code>base-&gt;test()</code>.</p>\n<p>However, the dynamic type of the object that the <code>base</code> pointer points to is <code>Derived</code>.  At runtime there are no additional access checks - the call is made to the dynamic type, which is dispatch through the normal virtual call mechanism.</p>\n", "LastActivityDate": "2013-11-20T01:53:44.497", "Score": "1", "CreationDate": "2013-11-20T01:53:44.497", "ParentId": "20085756", "CommentCount": "0", "OwnerUserId": "12711"}, "bq_ids": {"n4140": {"so_20085756_20085894_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 6696}, "so_20085756_20085894_1": {"length": 12, "quality": 1.0, "section_id": 6697}}, "n3337": {"so_20085756_20085894_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 6451}, "so_20085756_20085894_1": {"length": 12, "quality": 1.0, "section_id": 6452}}, "n4659": {"so_20085756_20085894_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 8171}, "so_20085756_20085894_1": {"length": 12, "quality": 1.0, "section_id": 8172}}}, "20085894": {"Id": "20085894", "PostTypeId": "2", "Body": "<p>\u00a7 11.5/1-2 ([class.access.virt]):</p>\n<blockquote>\n<ol>\n<li><p id=\"so_20085756_20085894_0\">The access rules (Clause 11) for a virtual function are determined by its declaration and are not affected by the rules for a function that later overrides it.</p></li>\n<li><p id=\"so_20085756_20085894_1\">Access is checked at the call point using the type of the expression used to denote the object for which the member function is called...</p></li>\n</ol>\n</blockquote>\n<p>So you're good to upgrade. (There's an example in the actual standard, but I left it out of the quote.)</p>\n<p>In effect, what's going on here is that the <code>Base</code> virtual function does the despatch to  its overrides. So even though you can't call a <code>Derived</code> override statically (<code>Derived::member</code>), you can still get <code>Base::member</code> to call it for you, if you have access to <code>Base::member</code>.</p>\n", "LastActivityDate": "2013-11-20T01:53:08.093", "Score": "6", "CreationDate": "2013-11-20T01:53:08.093", "ParentId": "20085756", "CommentCount": "0", "OwnerUserId": "1566221"}, "20085756": {"ViewCount": "464", "Body": "<p>I had a situation where I wanted a friend class to call a private method, then I wanted to make this method virtual so derived a class's method would get called instead - then I of course realised friendship isn't inherited. So we have a situation where the virtual method means the derived class's method should be called, but this method is private so cannot be called. Which has priority?</p>\n<p>I tested this on MSVC++ 2008 as follows</p>\n<pre><code>#include&lt;iostream&gt;\n\nclass Loner;\n\nclass Base\n{\n    friend Loner;\nprivate:\n    virtual void test(){std::cout &lt;&lt; \"Base\" &lt;&lt; std::endl;}\n};\n\nclass Derived : public Base\n{\nprivate:\n    virtual void test(){std::cout &lt;&lt; \"Derived\" &lt;&lt; std::endl;}\n};\n\nclass Loner\n{\npublic:\n    void test(Base *base){base-&gt;test();}\n};\n\nint main()\n{\n    Loner loner;\n    Derived derived;\n    loner.test(&amp;derived);\n}\n</code></pre>\n<p>The output was:</p>\n<pre><code>Derived\n</code></pre>\n<p>So it seems that the virtual function \"wins\" and gives private member access to a non friend - almost friend inheritance!</p>\n<p>My question is, does anyone know if this is correct behaviour? When I finally get round to upgrading my compiler version or if I try on GCC might this behaviour change?</p>\n<p>Cheers</p>\n<p>Phil</p>\n", "Title": "friend calls virtual private method - what should happen", "CreationDate": "2013-11-20T01:38:41.087", "LastActivityDate": "2013-11-20T01:53:44.497", "CommentCount": "1", "PostTypeId": "1", "Id": "20085756", "Score": "2", "OwnerUserId": "1051805", "Tags": "<c++><inheritance><methods><virtual><friend>", "AnswerCount": "2"}});