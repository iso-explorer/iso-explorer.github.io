post_cb({"30956795": {"CommentCount": "0", "ViewCount": "137", "PostTypeId": "1", "LastEditorUserId": "1362568", "CreationDate": "2015-06-20T17:12:19.250", "LastActivityDate": "2015-06-22T08:53:00.800", "Title": "When the main exits where does the console output go?", "AcceptedAnswerId": "30956942", "LastEditDate": "2015-06-22T08:53:00.800", "Id": "30956795", "Score": "4", "Body": "<pre><code>#include&lt;iostream&gt;\n#include&lt;thread&gt;\nusing namespace std;\nvoid func()\n{\n    for (int i = 0; i &lt; 10000; i++)cout &lt;&lt; \"Print\" &lt;&lt; endl;\n}\n\nint main()\n{\n    thread t(func);\n    t.detach();\n    cout &lt;&lt; \"Exit\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>In the above code, when the main exits, where does the <code>\"Print\"</code>text would be gone,since it doesn't have an output stream? Is there any dummy stream for inserting data which has no use?</p>\n", "Tags": "<multithreading><c++11>", "OwnerUserId": "3880254", "AnswerCount": "1"}, "30956942": {"ParentId": "30956795", "PostTypeId": "2", "CommentCount": "10", "CreationDate": "2015-06-20T17:26:53.187", "Score": "5", "LastEditorUserId": "412080", "LastEditDate": "2015-06-22T08:26:05.677", "Id": "30956942", "OwnerUserId": "412080", "Body": "<p>When <code>main</code> exits it calls <code>exit</code> which terminates all threads, regardless detached or not. This is because <code>exit</code> terminates the entire process.</p>\n<p>The C++ runtime runs <code>main</code> as <code>exit(main(argc, argv))</code>, so that returning from <code>main</code> causes <code>exit</code> to be called.</p>\n<p>You can terminate your main thread, if you wish, by calling <code>pthread_exit</code>. In this case the main thread will not return from <code>main</code> and will not call <code>exit</code>. The application will keep running until some other thread calls <code>exit</code> or all threads terminate (or the application crashes). This is how it works on Linux, not sure about Windows.</p>\n<p><code>std::cout</code> object and the other standard streams are available at least until <code>exit</code> is called. These streams are initialized using <a href=\"https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Nifty_Counter\" rel=\"nofollow\">Schwarz Counter idiom</a>, which makes sure they get initialized before its first use and destroyed after the last user is gone. In other words, if you have a global object with a constructor and destructor, which gets initialized before <code>main</code> is entered and destroyed after (when <code>exit</code> is called), that standard stream is still going to be available in that global object destructor. Basically, there is a reference counter associated with each standard stream, each translation unit (object file) increments this reference counter on the startup and decrements on termination.</p>\n<p>ISO/IEC 14882:2011(E) says:</p>\n<blockquote>\n<p id=\"so_30956795_30956942_0\"><strong>27.4 Standard iostream objects</strong></p>\n<p id=\"so_30956795_30956942_1\">27.4.1.2 The objects [the standard streams] are constructed and the associations are established at some time prior to or during the first time an object of class <code>ios_base::Init</code> is constructed, and in any case before the body of <code>main</code> begins execution\u2020. The objects are not destroyed during program execution. The results of including  in a translation unit shall be as if  defined an instance of <code>ios_base::Init</code> with static storage duration. Similarly, the entire program shall behave as if there were at least one instance of <code>ios_base::Init</code> with static storage duration.</p>\n<p id=\"so_30956795_30956942_2\">\u2020 <strong>Constructors and destructors for static objects can access these objects to read input from <code>stdin</code> or write output to <code>stdout</code> or <code>stderr</code>.</strong></p>\n</blockquote>\n", "LastActivityDate": "2015-06-22T08:26:05.677"}, "bq_ids": {"n4140": {"so_30956795_30956942_1": {"section_id": 1920, "quality": 0.9019607843137255, "length": 46}, "so_30956795_30956942_2": {"section_id": 1920, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_30956795_30956942_1": {"section_id": 1909, "quality": 0.9019607843137255, "length": 46}, "so_30956795_30956942_2": {"section_id": 1909, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_30956795_30956942_1": {"section_id": 2191, "quality": 0.6666666666666666, "length": 34}, "so_30956795_30956942_2": {"section_id": 2191, "quality": 0.9285714285714286, "length": 13}}}});