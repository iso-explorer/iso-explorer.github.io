post_cb({"15840058": {"CommentCount": "0", "ViewCount": "409", "PostTypeId": "1", "LastEditorUserId": "759866", "CreationDate": "2013-04-05T17:36:17.387", "LastActivityDate": "2014-01-31T18:52:37.963", "Title": "Xml Parser - string::find", "AcceptedAnswerId": "15840099", "LastEditDate": "2014-01-31T18:52:37.963", "Id": "15840058", "Score": "0", "Body": "<p>I am trying to parse a string which contains a line of my XML file. </p>\n<pre><code>std::string temp = \"&lt;Album&gt;Underclass Hero&lt;/Album&gt;\";\nint f = temp.find(\"&gt;\");\nint l = temp.find(\"&lt;/\");\nstd::string _line = temp.substr(f + 1, l-2);\n</code></pre>\n<p>This is a part of my code of my function which should actually return the parsed string.  What I expected was that it returns <em>Underclass Hero</em>. Instead I got <em>Underclass Hero&lt; /Alb</em><br>\n(here is between the '&lt;' and '/' a space because I couldn't write them together). </br></p>\n<p>I looked std::string::find several times up and it always said it returns, if existing, the position of the first character of the first match. Here it gives me the last character of the string, but only in my variable <em>l</em>.<br>\n<em>f</em> does fine.</br></p>\n<p><a href=\"http://www.cplusplus.com/reference/string/string/find/\" rel=\"nofollow\">link to std::string::find</a></p>\n<p>So can anyone tell me what I'm doing wrong?</p>\n", "Tags": "<c++><string>", "OwnerUserId": "2151893", "AnswerCount": "3"}, "15840099": {"ParentId": "15840058", "CommentCount": "2", "Body": "<p>The second argument takes the length of the substring you want to extract. You can fix your code this way:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    std::string temp = \"&lt;Album&gt;Underclass Hero&lt;/Album&gt;\";\n    int f = temp.find(\"&gt;\");\n    int l = temp.find(\"&lt;/\");\n    std::string line = temp.substr(f + 1, l - f - 1);   \n    //                                    ^^^^^^^^^\n}\n</code></pre>\n<p>Here is a <a href=\"http://liveworkspace.org/code/3SRz1U$78\" rel=\"noreferrer\">live example</a>.</p>\n<p>Also, be careful with names such as <code>_line</code>. Per Paragraph 17.6.4.3.2/1 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_15840058_15840099_0\">[...] Each name that begins with an underscore is reserved to the implementation for use as a name in the\n  global namespace.</p>\n</blockquote>\n", "OwnerUserId": "1932150", "PostTypeId": "2", "Id": "15840099", "Score": "5", "CreationDate": "2013-04-05T17:38:35.790", "LastActivityDate": "2013-04-05T17:38:35.790"}, "15840079": {"ParentId": "15840058", "PostTypeId": "2", "CommentCount": "1", "Body": "<p><a href=\"http://en.cppreference.com/w/cpp/string/basic_string/substr\" rel=\"nofollow noreferrer\"><code>substr</code></a> takes the length as the second parameter, not the end position. Try:</p>\n<pre><code>temp.substr(f + 1, l-f-1);\n</code></pre>\n<p>Also, please consider using a real XML parser, don't try it yourself or by <a href=\"https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags\">other inappropriate means</a>.</p>\n", "OwnerUserId": "2073257", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:32:49.320", "Id": "15840079", "Score": "5", "CreationDate": "2013-04-05T17:37:39.877", "LastActivityDate": "2013-04-05T17:44:11.037"}, "15842014": {"ParentId": "15840058", "CommentCount": "2", "Body": "<p>Don't do it this way!</p>\n<p>'<em>Parsing</em>' '<em>lines</em>' of XML files sooner or later will fail with your attempt. Example: The following is valid XML but your code will fail:</p>\n<pre><code>&lt;Album&gt;Underclass Hero&lt;!-- What about &lt;/ this --&gt;&lt;/Album&gt;\n</code></pre>\n<p>P.S.: <strong>Please</strong> use <code>const</code> where possible:</p>\n<pre><code>std::string const temp = ...\n// ...\nstd::string const line = ...\n</code></pre>\n", "OwnerUserId": "1247301", "PostTypeId": "2", "Id": "15842014", "Score": "3", "CreationDate": "2013-04-05T19:29:58.767", "LastActivityDate": "2013-04-05T19:29:58.767"}, "bq_ids": {"n4140": {"so_15840058_15840099_0": {"section_id": 6307, "quality": 1.0, "length": 10}}, "n3337": {"so_15840058_15840099_0": {"section_id": 6064, "quality": 1.0, "length": 10}}, "n4659": {"so_15840058_15840099_0": {"section_id": 6756, "quality": 0.9, "length": 9}}}});