post_cb({"bq_ids": {"n4140": {"so_26923320_26923320_0": {"length": 14, "quality": 0.875, "section_id": 460}, "so_26923320_26923549_5": {"length": 5, "quality": 0.5555555555555556, "section_id": 369}, "so_26923320_26923549_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 568}, "so_26923320_26923320_2": {"length": 10, "quality": 0.7692307692307693, "section_id": 369}}, "n3337": {"so_26923320_26923549_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 559}, "so_26923320_26923549_7": {"length": 6, "quality": 0.6, "section_id": 5686}, "so_26923320_26923549_6": {"length": 7, "quality": 0.875, "section_id": 359}, "so_26923320_26923320_0": {"length": 14, "quality": 0.875, "section_id": 451}, "so_26923320_26923549_5": {"length": 8, "quality": 0.8888888888888888, "section_id": 359}, "so_26923320_26923320_2": {"length": 13, "quality": 1.0, "section_id": 359}}, "n4659": {"so_26923320_26923549_2": {"length": 4, "quality": 0.5714285714285714, "section_id": 591}, "so_26923320_26923549_7": {"length": 6, "quality": 0.6, "section_id": 382}, "so_26923320_26923320_0": {"length": 14, "quality": 0.875, "section_id": 483}, "so_26923320_26923549_5": {"length": 5, "quality": 0.5555555555555556, "section_id": 382}, "so_26923320_26923549_4": {"length": 9, "quality": 0.6428571428571429, "section_id": 382}, "so_26923320_26923320_2": {"length": 10, "quality": 0.7692307692307693, "section_id": 382}}}, "26923549": {"Id": "26923549", "PostTypeId": "2", "Body": "<p>Look at 5th point: it is clearly saying that you have deleted your base class dtor so you are having this problem.</p>\n<p>link: <a href=\"http://en.cppreference.com/w/cpp/language/default_constructor\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/default_constructor</a></p>\n<blockquote>\n<p id=\"so_26923320_26923549_0\"><strong>Deleted implicitly-declared default constructor</strong></p>\n<p id=\"so_26923320_26923549_1\">The implicitly-declared or defaulted default constructor for class T is undefined (until C++11)defined as deleted (since C++11) if any of the following is true: </p>\n<ol>\n<li><p id=\"so_26923320_26923549_2\">T has a member of reference type without a brace-or-equal\n  initializer. (since C++11)</p></li>\n<li><p id=\"so_26923320_26923549_3\">T has a const member without user-defined default constructor or a\n  brace-or-equal initializer (since C++11).</p></li>\n<li><p id=\"so_26923320_26923549_4\">T has a member (without a brace-or-equal initializer) (since C++11),\n  which has a deleted default constructor, or its default constructor\n  is ambiguous or inaccessible from this constructor.</p></li>\n<li><p id=\"so_26923320_26923549_5\">T has a direct or virtual base which has a deleted default\n  constructor, or it is ambiguous or inaccessible from this\n  constructor.</p></li>\n<li><p id=\"so_26923320_26923549_6\"><strong>T has a direct or virtual base which has a deleted destructor, or a\n  destructor that is inaccessible from this constructor.</strong></p></li>\n<li><p id=\"so_26923320_26923549_7\">T is a union with at least one variant member with non-trivial\n  default constructor.\n      (since C++11)</p></li>\n<li>T is a union and all of its variant members are const.</li>\n</ol>\n</blockquote>\n", "LastEditorUserId": "2219912", "LastActivityDate": "2014-11-15T05:35:09.023", "Score": "0", "CreationDate": "2014-11-14T05:32:25.500", "ParentId": "26923320", "CommentCount": "4", "OwnerUserId": "2219912", "LastEditDate": "2014-11-15T05:35:09.023"}, "26923502": {"Id": "26923502", "PostTypeId": "2", "Body": "<p>Based only on the excerpt you've provided, the following is an example:</p>\n<pre><code>struct inner\n{\n    ~inner() = delete;\n};\n\nstruct outer\n{\n    inner inst;\n\n    // Can't destroy \"inst\"; outer now has an implicitly\n    // deleted destructor and copy/move constructor.\n};\n</code></pre>\n", "LastEditorUserId": "368519", "LastActivityDate": "2014-11-14T05:33:19.863", "Score": "0", "CreationDate": "2014-11-14T05:27:49.237", "ParentId": "26923320", "CommentCount": "0", "OwnerUserId": "368519", "LastEditDate": "2014-11-14T05:33:19.863"}, "26923320": {"ViewCount": "486", "Body": "<p>There is a rule about cases when the copy/move constructor is implicitly deleted:</p>\n<blockquote>\n<p id=\"so_26923320_26923320_0\">An implicitly-declared copy/move constructor is an inline public\n  member of its class. A defaulted copy/ move constructor for a class X\n  is defined as deleted (8.4.3) if X has:</p>\n<p id=\"so_26923320_26923320_1\">[...]</p>\n<p id=\"so_26923320_26923320_2\">\u2014 any direct or virtual base class or non-static data member of a type\n  with a destructor that is deleted or inaccessible from the defaulted\n  constructor, or</p>\n<p id=\"so_26923320_26923320_3\">[...]</p>\n</blockquote>\n<p>Because I can't find an example reflecting the rule, it's not clear to me. Consider the following code:</p>\n<pre><code>struct A\n{\n    ~A() = delete;\n};\n\nstruct B : A\n{\n    A a;\n    B(){ }; //error error: attempt to use a deleted function B(){ };\n    B(const B&amp;&amp;)  = delete;\n};\n\nB *b = new B;\n\nint main() { }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/c3f024c510315f46\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>Because of deleted move constructor doesn't take a part in overload resolution, I expected the error would be something like \"Copy constructor is implicitly deleted\". But instead I got the error about deleted <code>B()</code>, which I defined explicitly. Couldn't you provide an example reflecting that rule?</p>\n", "Title": "Deleted destructor in the class appeared as a virtual/direct base class or as a type of non-static data member", "CreationDate": "2014-11-14T05:11:16.997", "LastActivityDate": "2014-11-15T05:35:09.023", "CommentCount": "1", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "Id": "26923320", "Score": "1", "Tags": "<c++>", "AnswerCount": "2"}});