post_cb({"bq_ids": {"n4140": {"so_17501942_17503313_5": {"length": 17, "quality": 0.9444444444444444, "section_id": 0}, "so_17501942_17503313_6": {"length": 17, "quality": 0.85, "section_id": 0}, "so_17501942_17503313_3": {"length": 15, "quality": 0.6818181818181818, "section_id": 39}, "so_17501942_17503313_1": {"length": 20, "quality": 0.8695652173913043, "section_id": 7215}}, "n3337": {"so_17501942_17503313_5": {"length": 17, "quality": 0.9444444444444444, "section_id": 0}, "so_17501942_17503313_6": {"length": 17, "quality": 0.85, "section_id": 0}, "so_17501942_17503313_3": {"length": 21, "quality": 0.9545454545454546, "section_id": 36}, "so_17501942_17503313_1": {"length": 20, "quality": 0.8695652173913043, "section_id": 6959}}, "n4659": {"so_17501942_17503313_5": {"length": 17, "quality": 0.9444444444444444, "section_id": 0}, "so_17501942_17503313_6": {"length": 17, "quality": 0.85, "section_id": 0}, "so_17501942_17503313_3": {"length": 15, "quality": 0.6818181818181818, "section_id": 39}, "so_17501942_17503313_1": {"length": 20, "quality": 0.8695652173913043, "section_id": 8724}}}, "17503313": {"Id": "17503313", "PostTypeId": "2", "Body": "<p>I'd say clang with C++11 is right:</p>\n<blockquote>\n<p id=\"so_17501942_17503313_0\"><strong>3.9.1 Fundamental types [basic.fundamental]</strong></p>\n<p id=\"so_17501942_17503313_1\">6 Values of type bool are <strong>either <code>true</code> or <code>false</code></strong>. [ Note: There are no signed, unsigned, short, or long bool types or values. \u2014 end\n  note ] Values of type bool participate in integral promotions (4.5).</p>\n</blockquote>\n<p><code>bool</code> does not have value zero, so can not be converted to null pointer:</p>\n<blockquote>\n<p id=\"so_17501942_17503313_2\"><strong>4.10 Pointer conversions [conv.ptr]</strong></p>\n<p id=\"so_17501942_17503313_3\">1 A null pointer constant is an integral constant expression (5.19) prvalue of integer type <strong>that evaluates to zero</strong> or a prvalue of\n  type std::nullptr_t. A null pointer constant can be converted to a\n  pointer type;</p>\n</blockquote>\n<p>One might suggest conversion sequence consisting of integral promotion (<code>bool</code> to <code>int</code>) and null pointer conversion, but it would not be valid:</p>\n<blockquote>\n<p id=\"so_17501942_17503313_4\"><strong>4 Standard conversions [conv]</strong></p>\n<p id=\"so_17501942_17503313_5\">1 Standard conversions are implicit conversions with built-in meaning.\n  Clause 4 enumerates the full set of such conversions. A standard\n  conversion sequence is a sequence of standard conversions in the\n  following order:</p>\n<ul>\n<li>Zero or one conversion from the following set: lvalue-to-rvalue conversion, array-to-pointer conversion, and function-to-pointer\n  conversion.</li>\n<li><strong>Zero or one conversion</strong> from the following set: <strong>integral promotions</strong>, floating point promotion, integral conversions, floating\n  point conversions, floating-integral conversions, <strong>pointer\n  conversions</strong>, pointer to member conversions, and boolean conversions.</li>\n<li>Zero or one qualification conversion.</li>\n</ul>\n<p id=\"so_17501942_17503313_6\">[ Note: A standard conversion sequence can be empty, i.e., it can\n  consist of no conversions. \u2014 end note ] A standard conversion sequence\n  will be applied to an expression if necessary to convert it to a\n  required destination type.</p>\n</blockquote>\n", "LastActivityDate": "2013-07-06T13:12:25.030", "CommentCount": "2", "CreationDate": "2013-07-06T13:12:25.030", "ParentId": "17501942", "Score": "6", "OwnerUserId": "1126943"}, "17501942": {"ViewCount": "2866", "Body": "<p>Whether <code>false</code> is allowed to be implicitly converted to pointer is different between clang++ and g++:</p>\n<p>g++-4.8: always a warning with or without -std=c++11</p>\n<p>clang++ (trunk): a warning if without -std=c++11, and an error if with -std=c++11</p>\n<p>So anyone knows why g++ and clang++ behaves differently, and who is correct?  What paragraphs in C++ standard (both C++03 and C++11) talks about the situation.  </p>\n<p>Thanks.</p>\n<pre><code>[hidden ~]$ cat b.cpp\nconst char* f() { return false; }\n\n[hidden ~]$ g++ -c b.cpp\nb.cpp: In function \u2018const char* f()\u2019:\nb.cpp:1:26: warning: converting \u2018false\u2019 to pointer type \u2018const char*\u2019 [-Wconversion-null]\n const char* f() { return false; }\n                          ^\n[hidden ~]$ g++ -std=c++11 -c b.cpp\nb.cpp: In function \u2018const char* f()\u2019:\nb.cpp:1:26: warning: converting \u2018false\u2019 to pointer type \u2018const char*\u2019 [-Wconversion-null]\n const char* f() { return false; }\n                          ^\n[hidden ~]$ clang++ -c b.cpp\nb.cpp:1:26: warning: initialization of pointer of type 'const char *' to null from a constant boolean expression [-Wbool-conversion]\nconst char* f() { return false; }\n                         ^~~~~\n1 warning generated.\n[hidden ~]$ clang++ -std=c++11 -c b.cpp\nb.cpp:1:26: error: cannot initialize return object of type 'const char *' with an rvalue of type 'bool'\nconst char* f() { return false; }\n                         ^~~~~\n1 error generated.\n</code></pre>\n", "AcceptedAnswerId": "17503313", "Title": "false implicitly convert to null pointer", "CreationDate": "2013-07-06T10:17:26.400", "Id": "17501942", "CommentCount": "3", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2013-07-06T13:12:25.030", "Score": "9", "OwnerUserId": "875044", "Tags": "<c++><c++11>", "AnswerCount": "1"}});