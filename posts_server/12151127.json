post_cb({"bq_ids": {"n4140": {"so_12151127_12151232_2": {"length": 13, "quality": 1.0, "section_id": 5899}, "so_12151127_12151232_3": {"length": 28, "quality": 0.9333333333333333, "section_id": 5900}, "so_12151127_12151232_4": {"length": 28, "quality": 0.9655172413793104, "section_id": 5901}}, "n3337": {"so_12151127_12151232_2": {"length": 13, "quality": 1.0, "section_id": 5671}, "so_12151127_12151232_3": {"length": 28, "quality": 0.9333333333333333, "section_id": 5672}, "so_12151127_12151232_4": {"length": 28, "quality": 0.9655172413793104, "section_id": 5673}}, "n4659": {"so_12151127_12151232_2": {"length": 9, "quality": 0.6923076923076923, "section_id": 7389}, "so_12151127_12151232_3": {"length": 28, "quality": 0.9333333333333333, "section_id": 7382}, "so_12151127_12151232_4": {"length": 28, "quality": 0.9655172413793104, "section_id": 7383}}}, "12151211": {"Id": "12151211", "PostTypeId": "2", "Body": "<p>Right.</p>\n<p>The keyword <code>static</code> is heavily overloaded with too many different meanings:</p>\n<ul>\n<li>On a variable or function at namespace scope it gives the name internal linkage.</li>\n<li>On a class member it makes it a static member, which doesn't affect linkage.</li>\n<li>On a variable at function scope it gives the variable \"static storage duration\" as opposed to \"automatic\" or \"dynamic\" storage duration (i.e. the variable's lifetime extends to the end of the program, like global variables.)</li>\n</ul>\n", "LastActivityDate": "2012-08-28T00:09:21.083", "Score": "10", "CreationDate": "2012-08-28T00:09:21.083", "ParentId": "12151127", "CommentCount": "1", "OwnerUserId": "981959"}, "12151153": {"Id": "12151153", "PostTypeId": "2", "Body": "<p>You could say that static members are members of the class and not any specific object instance. That is, they have the same value for all object instances.</p>\n<p>Static member functions, while not having a value, are otherwise the same. Instead of being unique for each object instance, they can be seen as part of the class. This means that they have no <code>this</code> pointer and can not access non-static member variables.</p>\n", "LastEditorUserId": "440558", "LastActivityDate": "2012-08-28T00:31:36.713", "Score": "1", "CreationDate": "2012-08-28T00:02:35.187", "ParentId": "12151127", "CommentCount": "1", "LastEditDate": "2012-08-28T00:31:36.713", "OwnerUserId": "440558"}, "12151127": {"ViewCount": "550", "Body": "<p>The static keyword is related to internal linkage generally, but the static keyword used inside a class has external linkage right? The variables m, n below are accessible outside the class file. </p>\n<pre><code>class c {\n    int i;\n    int j;\n    static int m;\n    static int n;\n\n    public:\n    void zap();\n    static void clear();\n};\n</code></pre>\n", "AcceptedAnswerId": "12151211", "Title": "static keyword inside a class and outside it", "CreationDate": "2012-08-27T23:57:48.270", "Id": "12151127", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-08-28T00:04:41.310", "LastEditorUserId": "1628609", "LastActivityDate": "2012-08-28T00:31:36.713", "Score": "6", "OwnerUserId": "1576804", "Tags": "<c++><static>", "AnswerCount": "3"}, "12151232": {"Id": "12151232", "PostTypeId": "2", "Body": "<p>As I stated in <a href=\"https://stackoverflow.com/questions/12151127/static-keyword-inside-a-class-and-outside-it/12151153#comment16258104_12151127\">my comment</a>, <code>static</code> members are those associated only with the <em>class</em> rather than individual objects.</p>\n<blockquote>\n<p id=\"so_12151127_12151232_0\"><code>static</code> members belong to the <em>class</em>; for variables, they're accessible without an object and shared amongst instances e.g.</p>\n<pre><code>struct Foo {\n  static void *bar;\n  static void *fu();\n}\n</code></pre>\n<p id=\"so_12151127_12151232_1\">so <code>Foo::bar</code> and <code>Foo::fu</code> are legal. </p>\n</blockquote>\n<p>They are introduced in \u00a79.4 of the C++03 standard;</p>\n<blockquote>\n<ol>\n<li><p id=\"so_12151127_12151232_2\">A data or function member of a class may be declared <code>static</code> in a class definition, in which case it is a <em>static member</em> of the class.</p></li>\n<li><p id=\"so_12151127_12151232_3\">A <code>static</code> member <code>s</code> of class <code>X</code> may be referred to using the <em>qualified-id</em> expression <code>X::s</code>; it is not necessary to use the class member access syntax (5.2.5) to refer to a <code>static</code> member. A <code>static</code> member may be referred to using the class member access syntax, in which case the <em>object-expression</em> is evaluated</p>\n<pre><code>class process {\npublic:\n    static void reschedule();\n};\nprocess&amp; g();\n\nvoid f()\n{\n    process::reschedule(); // OK: no object necessary\n    g().reschedule(); // g() is called\n}\n</code></pre>\n<p id=\"so_12151127_12151232_4\">A <code>static</code> member may be referred to directly in the scope of its class or in the scope of a class derived (clause 10) from its class; in this case, the <code>static</code> member is referred to as if a <em>qualified-id</em> expression was used, with the <em>nested-name-specifier</em> of the <em>qualified-id</em> naming the class scope from which the <code>static</code> member is referenced.</p>\n<pre><code>int g();\nstruct X {\n    static int g();\n};\nstruct Y : X {\n    static int i;\n};\nint Y::i = g(); // equivalent to Y::g();\n</code></pre>\n<p id=\"so_12151127_12151232_5\">...</p></li>\n</ol>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-08-28T00:25:07.057", "Score": "2", "CreationDate": "2012-08-28T00:14:23.003", "ParentId": "12151127", "CommentCount": "0", "LastEditDate": "2017-05-23T12:22:22.627", "OwnerUserId": "591495"}});