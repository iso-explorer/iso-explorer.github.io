post_cb({"24677362": {"ParentId": "24676824", "CommentCount": "6", "Body": "<p>I only found one instance of the phrase in the standard, and\nthat was in a non-normative note.  Lacking any other definition,\none must assume that the expression is interpreted as it would\nbe normally in English; that the qualifier is at the highest\nlevel of the type declaration.  Of course, we generally write\nthe declarations (in plain text, not in C++) from left to right,\nnot from up to down, but the usual rules apply: left comes\nbefore right, and up comes before down.  So for something like\n<code>char\u00a0*const\u00a0p</code>, we would write it (in English): \"p is a const\npointer to char\".  (In this case, English is the exact opposite\nof the order we would use in C++.  This isn't always the case,\nhowever.)  Since the <code>const</code> modifies pointer, which is the left\nmost (top) element, it is a top level qualifier. </p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "24677362", "Score": "3", "CreationDate": "2014-07-10T13:06:24.360", "LastActivityDate": "2014-07-10T13:06:24.360"}, "24676976": {"ParentId": "24676824", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>This question gave me the chance of learning something new so I'm sharing it here, <em>I didn't write the passage below!</em></p>\n<hr>\n<p>In C++, a cv-qualifier that applies to the first level of a type is called a <strong>toplevel</strong> cv-qualifier. For example, in:</p>\n<pre><code>T *const p;\n</code></pre>\n<p>the top-level cv-qualifier is <code>const</code>, and in:</p>\n<pre><code>T const *volatile q;\n</code></pre>\n<p>the top-level cv-qualifier is <code>volatile</code>. On the other hand:</p>\n<pre><code>T const volatile *q;\n</code></pre>\n<p>has no top-level cv-qualifiers. In this case, the cv-qualifiers <code>const</code> and <code>volatile</code> appear at the second level.</p>\n<p>The signature of a function includes all cv-qualifiers appearing in that function\u2019s parameter types, except for those qualifiers appearing at the top-level of a parameter type.</p>\n<p>For example, in:</p>\n<pre><code>int f(char const *p);\n</code></pre>\n<p>the <code>const</code> qualifier is not at the top level in the parameter declaration, so it is part of the function\u2019s signature.</p>\n<p>On the other hand, in:</p>\n<pre><code>int f(char *const p);\n</code></pre>\n<p>the <code>const</code> qualifier is at the top level, so it is not part of the function\u2019s signature.\nThis function has the same signature as:</p>\n<pre><code>int f(char *p);\n</code></pre>\n<p>Source: <a href=\"https://www.google.de/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CCAQFjAA&amp;url=http%3A%2F%2Fwww.dansaks.com%2Farticles%2F2000-02%2520Top-Level%2520cv-Qualifiers%2520in%2520Function%2520Parameters.pdf&amp;ei=5Ym-U5DXJKq8ygO-44H4CQ&amp;usg=AFQjCNFl_i63VN4r3yMozEA-bWhOkhYqjw&amp;sig2=uCbuSWhJwtJ2CdyyceHQSw&amp;bvm=bv.70138588,d.bGQ&amp;cad=rja\" rel=\"nofollow noreferrer\">Top-Level cv-Qualifiers in Function Parameters</a></p>\n<p>I couldn't find a definition in the standard either but what I posted above is explicitly stated in N3337 \u00a78.3.5-5</p>\n<blockquote>\n<p id=\"so_24676824_24676976_0\">After producing the list of parameter types, any top-level\n  cv-qualifiers modifying a parameter type are deleted when forming the\n  function type.</p>\n</blockquote>\n<hr>\n<p>Edit:\nAt the time of writing the above post a definition in the standard could not be found but now there's one <a href=\"https://stackoverflow.com/a/29631969/1938163\">as pointed out by Shafik</a>:</p>\n<p>n4296 excerpt:</p>\n<blockquote>\n<p id=\"so_24676824_24676976_1\">In this International Standard, the notation cv (or cv1 , cv2 , etc.),\n  used in the description of types, represents an arbitrary set of\n  cv-qualifiers, i.e., one of {const}, {volatile}, {const, volatile}, or\n  the empty set. For a type cv T, the top-level cv-qualifiers of that\n  type are those denoted by cv. [Example: The type corresponding to the\n  type-id const int&amp; has no top-level cv-qualifiers. The type\n  corresponding to the typeid volatile int * const has the top-level\n  cv-qualifier const. For a class type C, the type corresponding to the\n  type-id void (C::* volatile)(int) const has the top-level cv-qualifier\n  volatile. \u2014 end example ]</p>\n</blockquote>\n</hr></hr>", "OwnerUserId": "1938163", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:09:05.443", "Id": "24676976", "Score": "15", "CreationDate": "2014-07-10T12:47:36.833", "LastActivityDate": "2015-04-14T17:44:20.557"}, "24676824": {"CommentCount": "2", "AcceptedAnswerId": "24676976", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2014-07-10T12:40:06.363", "LastActivityDate": "2015-06-16T14:11:59.663", "LastEditDate": "2015-04-14T16:29:45.090", "ViewCount": "933", "FavoriteCount": "3", "Title": "Where is the definition of `top-level cv-qualifiers` in the C++11 Standard?", "Id": "24676824", "Score": "9", "Body": "<p>In <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">the draft C++11 standard: N3337</a> I found several references to <code>top-level cv-qualifiers</code>, but no definition.</p>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "3694387", "AnswerCount": "3"}, "29631969": {"ParentId": "24676824", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This question is the subject of <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4458.html#609\" rel=\"nofollow\">defect report 609: What is a \u201ctop-level\u201d cv-qualifier? </a> which says:</p>\n<blockquote>\n<p id=\"so_24676824_29631969_0\">The phrase \u201ctop-level cv-qualifier\u201d is used numerous times in the Standard, but it is not defined. The phrase could be misunderstood to indicate that the const in something like const T&amp; is at the \u201ctop level,\u201d because where it appears is the highest level at which it is permitted: T&amp; const is ill-formed.</p>\n</blockquote>\n<p>and the proposed resolution suggests adding the following wording and note:</p>\n<blockquote>\n<p id=\"so_24676824_29631969_1\">For a type cv T, the top-level cv-qualifiers of that type are those denoted by cv. [Example: The type corresponding to the type-id \u201cconst int&amp;\u201d has no top-level cv-qualifiers. The type corresponding to the type-id \u201cvolatile int * const\u201d has the top-level cv-qualifier const. For a class type C, the type corresponding to the type-id \u201cvoid (C::* volatile)(int) const\u201d has the top-level cv-qualifier volatile. \u2014end example]</p>\n</blockquote>\n<p><b>Update</b></p>\n<p>The defect has changed status to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#609\" rel=\"nofollow\">DRWP</a> which means it is now part of the latest draft standard and we can find the new wording in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4527.pdf\" rel=\"nofollow\">N4527</a>.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-06-16T14:11:59.663", "Id": "29631969", "Score": "6", "CreationDate": "2015-04-14T15:55:16.810", "LastActivityDate": "2015-06-16T14:11:59.663"}, "bq_ids": {"n4140": {"so_24676824_24676976_0": {"section_id": 3241, "quality": 1.0, "length": 15}}, "n3337": {"so_24676824_24676976_0": {"section_id": 3114, "quality": 1.0, "length": 15}}, "n4659": {"so_24676824_29631969_1": {"section_id": 8739, "quality": 0.775, "length": 31}, "so_24676824_24676976_1": {"section_id": 8739, "quality": 0.7457627118644068, "length": 44}, "so_24676824_24676976_0": {"section_id": 3997, "quality": 1.0, "length": 15}}}});