post_cb({"13158437": {"ParentId": "13158354", "CommentCount": "1", "Body": "<p>This syntax (so called <em>trailing-return-type</em>) is a workaround for using expression as return type, as the following:</p>\n<pre><code>template &lt;class T, class U&gt;\n   decltype(t + u) add(T t, U u) { ... }\n</code></pre>\n<p>... would not be correct in C++.</p>\n<p>Have to say this issue is explained well enough (I suppose) in <a href=\"http://en.wikipedia.org/wiki/C++11#Alternative_function_syntax\" rel=\"nofollow\">Wiki</a>.</p>\n", "OwnerUserId": "1229023", "PostTypeId": "2", "Id": "13158437", "Score": "2", "CreationDate": "2012-10-31T12:54:14.447", "LastActivityDate": "2012-10-31T12:54:14.447"}, "13158354": {"CommentCount": "0", "AcceptedAnswerId": "13158447", "PostTypeId": "1", "ClosedDate": "2012-11-05T06:44:56.313", "LastEditorUserId": "-1", "CreationDate": "2012-10-31T12:49:39.357", "LastActivityDate": "2012-10-31T17:59:57.683", "LastEditDate": "2017-05-23T12:14:37.370", "ViewCount": "236", "FavoriteCount": "1", "Title": "Use of -> in function declaration", "Id": "13158354", "Score": "6", "Body": "<blockquote>\n<p id=\"so_13158354_13158354_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/12417197/what-is-after-function-declaration\">What is \u201c-&gt;\u201d after function declaration?</a> </br></p>\n</blockquote>\n<p>I've just come across the following examples of C++ functions using the new <code>auto</code> keyword, and I was hoping someone could help me understand what the syntax means.</p>\n<pre><code>template &lt;class T, class U&gt;\nauto add(T t, U u) -&gt; decltype(t + u);\n\nauto f = [](int a, int b) -&gt; int {\n   return a*b;\n};\n</code></pre>\n<p>Specifically, I'm confused about the user of <code>-&gt;</code> in the function signature and I would expect these to be written in the as</p>\n<pre><code>template &lt;class T, class U&gt;\nauto add(T t, U u)\n{\n    decltype(t + u);\n}\n\nauto f = [](int a, int b){\n    return a*b;\n};\n</code></pre>\n<p>What's the <code>-&gt;</code> operator doing in there, and where can I learn more about this syntax?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "360907", "AnswerCount": "6"}, "13158549": {"ParentId": "13158354", "CommentCount": "0", "Body": "<p><code>-&gt;</code> is a <em>trailing return type</em>. </p>\n<p>C++11 proposed an alternative function declaration syntax. \n<code>auto</code> keyword takes a place of the usual function return type, and the actual return type goes after <code>-&gt;</code>.</p>\n<p>For example, </p>\n<pre><code>auto f (int a, int b) -&gt; int;\n</code></pre>\n<p>is equivalent to</p>\n<pre><code>int f(int a, int b);\n</code></pre>\n<p>This feature is most useful for template functions where the return type has to be deduced from the template parameters.</p>\n<p>For example, </p>\n<pre><code>template &lt;class T, class U&gt;\nauto add(T t, U u) -&gt; decltype(t + u);\n</code></pre>\n<p>the return type would be the type of the expression <code>(t+u)</code>.</p>\n", "OwnerUserId": "1345960", "PostTypeId": "2", "Id": "13158549", "Score": "1", "CreationDate": "2012-10-31T13:00:02.390", "LastActivityDate": "2012-10-31T13:00:02.390"}, "13158487": {"ParentId": "13158354", "CommentCount": "0", "Body": "<p>[dcl.spec.auto]/2 explains how to write function declaration with auto return type :</p>\n<blockquote>\n<p id=\"so_13158354_13158487_0\">The auto type-specifier may appear with a function declarator with a trailing-return-type (8.3.5) in any context where such a declarator is valid.</p>\n</blockquote>\n<p>And then later, in [dcl.fct]/12, there is a note :</p>\n<p>Typedefs and trailing-return-types are sometimes convenient when the return type of a function is complex. For example, the function fpif above could have been declared</p>\n<pre><code>typedef int IFUNC(int);\nIFUNC* fpif(int);\n</code></pre>\n<p>or</p>\n<pre><code>auto fpif(int)-&gt;int(*)(int)\n</code></pre>\n<p>A trailing-return-type is most useful for a type that would be more complicated to specify before the declarator-id:</p>\n<pre><code>template &lt;class T, class U&gt; auto add(T t, U u) -&gt; decltype(t + u);\n</code></pre>\n<p>rather than</p>\n<pre><code>template &lt;class T, class U&gt; decltype((*(T*)0) + (*(U*)0)) add(T t, U u);\n</code></pre>\n", "OwnerUserId": "476681", "PostTypeId": "2", "Id": "13158487", "Score": "3", "CreationDate": "2012-10-31T12:57:16.350", "LastActivityDate": "2012-10-31T12:57:16.350"}, "13158748": {"ParentId": "13158354", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_13158354_13158748_0\">What's the -&gt; operator doing in there, and where can I learn more \n  about this syntax?</p>\n</blockquote>\n<p>There's a very nice explaination about this on <a href=\"http://www.cprogramming.com/c++11/c++11-auto-decltype-return-value-after-function.html\" rel=\"nofollow\">cprogramming</a>.</p>\n<p>The essence of using -&gt; (in your case) or auto, decltype is convenience and letting you focus more on the programming logic.</p>\n<p>The <em>trailing return type</em> (-&gt;) helps you include the return type information in the function declaration itself.</p>\n<p>In case of your alternate example:</p>\n<pre><code>auto add(T t, U u)\n{\n    decltype(t + u);\n}\n</code></pre>\n<p>If the function is fairly complex, then it would be pretty difficult (not obviously obvious) for a reader of your program to figure out what the expected return type is.</p>\n", "OwnerUserId": "425280", "LastEditorUserId": "212555", "LastEditDate": "2012-10-31T17:59:57.683", "Id": "13158748", "Score": "1", "CreationDate": "2012-10-31T13:09:52.993", "LastActivityDate": "2012-10-31T17:59:57.683"}, "13158447": {"ParentId": "13158354", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_13158354_13158447_0\">What's the <code>-&gt;</code> operator doing in there?</p>\n</blockquote>\n<p>That's a <em>trailing return type</em>. Instead of:</p>\n<pre><code>int f();\n</code></pre>\n<p>you can equivalently write:</p>\n<pre><code>auto f() -&gt; int;\n</code></pre>\n<p>If the return type depends on the function parameter types, then you need to use this form; the parameters aren't available until after they've been declared:</p>\n<pre><code>decltype(t+u) add(T t, U u); // Error: uses `t` and `u` before they're declared\nauto add(T t, U u) -&gt; decltype(t + u); // OK\n</code></pre>\n<p>Also, if you want to specify the return type of a lambda, then you must use this form; although, as you point out, in many cases (including this one) you don't need to specify that at all.</p>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2012-10-31T13:44:37.980", "Id": "13158447", "Score": "13", "CreationDate": "2012-10-31T12:55:03.553", "LastActivityDate": "2012-10-31T13:44:37.980"}, "13158479": {"ParentId": "13158354", "CommentCount": "0", "Body": "<p>The -&gt; operator in function declarations specifies the return type for functions returning \"auto\". It's defined in chapter 8 of the C++11 standard.</p>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "13158479", "Score": "0", "CreationDate": "2012-10-31T12:56:58.783", "LastActivityDate": "2012-10-31T12:56:58.783"}, "bq_ids": {"n4140": {"so_13158354_13158487_0": {"section_id": 5446, "quality": 0.6428571428571429, "length": 9}}, "n3337": {"so_13158354_13158487_0": {"section_id": 5241, "quality": 0.8571428571428571, "length": 12}}, "n4659": {"so_13158354_13158487_0": {"section_id": 6873, "quality": 0.6428571428571429, "length": 9}}}});