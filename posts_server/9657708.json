post_cb({"9657797": {"ParentId": "9657708", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The reasoning is not correct because <code>boo</code> returns a temporary object by value. Binding this temporary object to a reference implies that the lifetime of the temporary is extended. Standard quote (\u00a7 12.2/5):</p>\n<blockquote>\n<p id=\"so_9657708_9657797_0\">[\u2026] The temporary to which the reference is bound or the temporary that is the complete object of a subobject to which the reference is bound persists for the lifetime of the reference [\u2026]</p>\n</blockquote>\n<p>The reasoning would be correct if <code>boo</code> returned a reference. An example for an expression returning a reference to a temporary is <code>string(\"a\") += string(\"b\")</code>; using this value in a range-based <code>for</code> loop gives rise to undefined behavior.</p>\n", "OwnerUserId": "178761", "LastEditorUserId": "178761", "LastEditDate": "2012-03-11T18:47:21.347", "Id": "9657797", "Score": "6", "CreationDate": "2012-03-11T18:42:16.840", "LastActivityDate": "2012-03-11T18:47:21.347"}, "9657748": {"ParentId": "9657708", "PostTypeId": "2", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_9657708_9657748_0\">Is this reasoning correct? If not, why not?</p>\n</blockquote>\n<p>It is correct up until this point:</p>\n<blockquote>\n<p id=\"so_9657708_9657748_1\">And so the temporary return value of boo() is destroyed at the end of the statement \"auto&amp;&amp;r=boo()\" [...]</p>\n</blockquote>\n<p>Binding a temporary to a reference extends its lifetime to be that of the reference. So the temporary lasts for the whole loop (that's also why there is an extra set of <code>{}</code> around the whole construct: to correctly limit the lifetime of that temporary).</p>\n<p>This is according to paragraph 5 of \u00a712.2 of the C++ standard:</p>\n<blockquote>\n<p id=\"so_9657708_9657748_2\">The second context is when a reference is bound to a temporary. The\n  temporary to which the reference is bound or the temporary that is the\n  complete object of a subobject to which the reference is bound\n  persists for the lifetime of the reference except:</p>\n<p id=\"so_9657708_9657748_3\">[various exceptions that don't apply here]</p>\n</blockquote>\n<p>This is an interesting property that allows abusing the ranged-for loop for non-rangey things: <a href=\"http://ideone.com/QAXNf\" rel=\"noreferrer\">http://ideone.com/QAXNf</a></p>\n", "OwnerUserId": "46642", "LastEditorUserId": "46642", "LastEditDate": "2012-03-11T18:49:12.387", "Id": "9657748", "Score": "15", "CreationDate": "2012-03-11T18:36:49.340", "LastActivityDate": "2012-03-11T18:49:12.387"}, "9657708": {"CommentCount": "2", "AcceptedAnswerId": "9657748", "CreationDate": "2012-03-11T18:33:26.190", "LastActivityDate": "2012-03-11T18:49:12.387", "PostTypeId": "1", "ViewCount": "1347", "FavoriteCount": "1", "Title": "C++11: The range-based for statement: \"range-init\" lifetime?", "Id": "9657708", "Score": "16", "Body": "<p>In the latest C++ standard it implies that:</p>\n<pre><code>for (foo : bar)\n    baz;\n</code></pre>\n<p>is equivilant to:</p>\n<pre><code>{\n    auto &amp;&amp; r = bar;\n    for ( auto it = r.begin(), end = r.end(); it != end; ++it )\n    {\n        foo = *it;\n        baz;\n    }\n}\n</code></pre>\n<p>When bar in the above is a function call that returns a collection, eg:</p>\n<pre><code>vector&lt;string&gt; boo();\n</code></pre>\n<p>ie</p>\n<pre><code>for (auto bo : boo())\n    ...\n</code></pre>\n<p>Doesn't the line become:</p>\n<pre><code>auto&amp;&amp; r = boo();\n...\n</code></pre>\n<p>And so the temporary return value of boo() is destroyed at the end of the statement \"auto&amp;&amp;r=boo()\", and then r is a hanging reference at the entry of the loop. ??  Is this reasoning correct?  If not, why not?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1131467", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_9657708_9657797_0": {"section_id": 382, "quality": 0.9230769230769231, "length": 12}, "so_9657708_9657748_2": {"section_id": 382, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_9657708_9657797_0": {"section_id": 373, "quality": 0.9230769230769231, "length": 12}, "so_9657708_9657748_2": {"section_id": 373, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_9657708_9657797_0": {"section_id": 397, "quality": 0.9230769230769231, "length": 12}, "so_9657708_9657748_2": {"section_id": 397, "quality": 0.8571428571428571, "length": 18}}}});