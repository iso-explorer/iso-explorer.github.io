post_cb({"46590431": {"ParentId": "46589317", "CommentCount": "0", "Body": "<p>Internally, the elements in a <code>priority_queue</code> are stored as a heap. Jerry Coffin\u2019s answer provides the exact wording in the spec that guarantees this.</p>\n<p>However, whenever you remove an element from the queue, it removes the largest element from the heap and returns it to you, so the order you see is different than the order in which the elements were originally ordered.</p>\n<p>In that sense, the <em>internal</em> heap ordering is there so that the queue can efficiently produce an <em>external</em> ordering of the elements in sorted order. The heap is just an implementation detail that in principle you shouldn\u2019t ever see.</p>\n", "OwnerUserId": "501557", "PostTypeId": "2", "Id": "46590431", "Score": "0", "CreationDate": "2017-10-05T16:20:34.957", "LastActivityDate": "2017-10-05T16:20:34.957"}, "46589523": {"ParentId": "46589317", "CommentCount": "0", "Body": "<p>Let's see what the standard requires:</p>\n<p>[priqueue.cons.alloc]/4:</p>\n<blockquote>\n<p id=\"so_46589317_46589523_0\"><code>template &lt;class Alloc&gt;\n  priority_queue(const Compare&amp; compare, const Container&amp; cont, const Alloc&amp; a);</code></p>\n<p id=\"so_46589317_46589523_1\"><em>Effects</em>: Initializes <code>c</code> with <code>cont</code> as the first argument and <code>a</code> as the second argument, and initializes <code>comp</code> with <code>compare</code>; <strong>calls <code>make_heap(c.begin(), c.end(), comp)</code></strong>.</p>\n</blockquote>\n<p>[emphasis added]</p>\n<p>Likewise, at [priqueue.members]/1:</p>\n<blockquote>\n<p id=\"so_46589317_46589523_2\"><code>void push(const value_type&amp; x);</code></p>\n<p id=\"so_46589317_46589523_3\"><em>Effects</em>: As if by:<br>\n<code>c.push_back(x);</code><br>\n<strong><code>push_heap(c.begin(), c.end(), comp);</code></strong></br></br></p>\n</blockquote>\n<p>[emphasis added]</p>\n<p>...and so on. </p>\n<h3>Summary</h3>\n<p><code>priority_queue</code> is defined in terms of applying heap operations to a collection.</p>\n", "OwnerUserId": "179910", "PostTypeId": "2", "Id": "46589523", "Score": "3", "CreationDate": "2017-10-05T15:32:48.213", "LastActivityDate": "2017-10-05T15:32:48.213"}, "46589317": {"CommentCount": "11", "ViewCount": "59", "ClosedDate": "2017-10-06T17:53:03.987", "CreationDate": "2017-10-05T15:22:36.370", "LastActivityDate": "2017-10-05T16:20:34.957", "Title": "Does priority_queue really produce a Heap?", "PostTypeId": "1", "Id": "46589317", "Score": "-3", "Body": "<p>I am bit confused between Heap and priority_queue in C++ STL. Does priority_queue really produce a Heap?</p>\n<pre>\nIf we insert elements in order - 5, 1, 10, 30, 20\nOutput for maxHeap will be: 30, 20, 5, 1, 10\nWhile output for priority_queue will be: 30, 20, 10, 5, 1\n</pre>\n<p>What is the reason behind this? </p>\n<p>Is priority_queue always sorted?</p>\n", "Tags": "<c++><stl><heap><priority-queue>", "OwnerUserId": "5222645", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_46589317_46589523_1": {"section_id": 1121, "quality": 0.6428571428571429, "length": 9}, "so_46589317_46589523_0": {"section_id": 1120, "quality": 1.0, "length": 11}}, "n3337": {"so_46589317_46589523_1": {"section_id": 1118, "quality": 0.6428571428571429, "length": 9}, "so_46589317_46589523_0": {"section_id": 1117, "quality": 1.0, "length": 11}}, "n4659": {"so_46589317_46589523_1": {"section_id": 1212, "quality": 0.9285714285714286, "length": 13}, "so_46589317_46589523_0": {"section_id": 1211, "quality": 1.0, "length": 11}}}});