post_cb({"45772026": {"ParentId": "45698374", "CommentCount": "3", "Body": "<p>The C++14 standard[1] says in 12.2 regarding Temporary objects ([class.temporary]): </p>\n<blockquote>\n<p id=\"so_45698374_45772026_0\">Temporaries of class type are created in various contexts: binding a reference to a prvalue ([...]), returning\n  a prvalue ([...]), a conversion that creates a prvalue ([...], 5.4), throwing an exception ([...]),\n  and in some initializations ([...]).</p>\n</blockquote>\n<p>In <code>MyClass obj = MyClass();</code>, <code>MyClass()</code> is a Explicit type conversion in functional notation, so it is a temporary object because it falls under \"conversion that creates a prvalue\".</p>\n<p>This does not apply for the <code>4</code> in <code>int x = 4;</code> because the rule refers to \"class types\" but <code>int</code> is a \"fundamental type\".</p>\n<p>Additionally 8.5 Initializers ([dcl.init]) defines the semantics of non-class type initializers in clause (17.8) as</p>\n<blockquote>\n<p id=\"so_45698374_45772026_1\">Otherwise, the initial value of the object being initialized is the (possibly converted) value of the initializer\n  expression. [...]</p>\n</blockquote>\n<p>while for class types, (copy) constructors are invoked. So you need a (temporary) object to copy from for class types, but not for \"other\" types.</p>\n<p>[1]: actually <a href=\"https://wg21.link/n4296\" rel=\"nofollow noreferrer\">N4296</a>, but that shouldn't make a difference</p>\n", "OwnerUserId": "3001468", "PostTypeId": "2", "Id": "45772026", "Score": "1", "CreationDate": "2017-08-19T13:21:00.870", "LastActivityDate": "2017-08-19T13:21:00.870"}, "bq_ids": {"n4140": {"so_45698374_45772026_1": {"section_id": 3296, "quality": 1.0, "length": 11}, "so_45698374_45772026_0": {"section_id": 378, "quality": 1.0, "length": 18}}, "n3337": {"so_45698374_45772026_1": {"section_id": 3166, "quality": 1.0, "length": 11}, "so_45698374_45772026_0": {"section_id": 369, "quality": 1.0, "length": 18}}, "n4659": {"so_45698374_45772026_1": {"section_id": 4058, "quality": 1.0, "length": 11}}}, "45698374": {"CommentCount": "4", "AcceptedAnswerId": "45772026", "PostTypeId": "1", "LastEditorUserId": "4751585", "CreationDate": "2017-08-15T17:38:01.567", "LastActivityDate": "2017-08-19T13:21:00.870", "LastEditDate": "2017-08-15T22:46:12.240", "ViewCount": "255", "FavoriteCount": "1", "Title": "MyClass obj = MyClass(); Does 'MyClass()' refer to a temporary object here?", "Id": "45698374", "Score": "7", "Body": "<p>Considering the case where no copy-elision is involved (pre C++17).</p>\n<p>From cppreference (again, suppose C++14):</p>\n<blockquote>\n<p id=\"so_45698374_45698374_0\">Temporary objects are created in the following situations:</p>\n<ul>\n<li>binding a reference to a prvalue</li>\n<li>returning a prvalue from a function</li>\n<li>conversion that creates a prvalue</li>\n<li>lambda expression</li>\n<li>copy-initialization that requires conversion of the initializer</li>\n<li>list-initialization that constructs an std::initializer_list</li>\n<li>reference-initialization to a different but convertible type or to a bitfield.</li>\n</ul>\n</blockquote>\n<p>All the cases except the first one seem irrelevant, the first one seems to mean C++-style reference binding (<code>int &amp;&amp;x = 5;</code> BTW I don't understand in such circumstance the statement that temporaries are destroyed at the end of the full-expression..., the object 5 is referring to doesn't seem to be destroyed at the end of the statement).</p>\n<p>So, as I understood, the notion of a temporary object only includes those who are guaranteed to be stored (which is not the case in my situation due to possible elision). Am I correct? Or else what do I misunderstand here?</p>\n<p>BTW is there any difference between <code>MyClass()</code> and <code>4</code> in <code>int x = 4;</code> (or <code>2 + 2</code> in <code>int x = 2 + 2;</code>)? Like maybe I'm incorrect and the first one DOES refer to a temporary object while the other two do not...</p>\n", "Tags": "<c++><c++14><temporary>", "OwnerUserId": "4751585", "AnswerCount": "1"}});