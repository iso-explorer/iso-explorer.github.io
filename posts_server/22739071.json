post_cb({"22739113": {"ParentId": "22739071", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This code snippet is wrong</p>\n<pre><code>nir=0;     //**is this line for assigning the address nir=0? 0 is also part of memory right? Why didn't we put NULL?\n*nir=8;    //**can i do like this and change the value, so that the output can be 8 now?\ncout&lt;&lt;*nir&lt;&lt;endl;\ndelete nir;\nnir=0;\n</code></pre>\n<p>You did not allocate memory and are trying to write to address 0.</p>\n<pre><code>*nir=8;    //**can i do like this and change the value, so that the output can be 8 now?\n</code></pre>\n<p>Usually the program will crash.</p>\n<p>As for the line</p>\n<pre><code>nir = 0;\n</code></pre>\n<p>then it is equivalent to</p>\n<pre><code>nir = NULL;\n</code></pre>\n<p>In C++ NULL usualy defined as 0 or ( long )0 and so on.</p>\n<p>According to the C++ Standard</p>\n<blockquote>\n<p id=\"so_22739071_22739113_0\">1 A null pointer constant is an integer literal (2.14.2) with value\n  zero or a prvalue of type std::nullptr_t. A null pointer constant can\n  be converted to a pointer type; the result is the null pointer value\n  of that type and is distinguishable from every other value of object\n  pointer or function pointer type.</p>\n</blockquote>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2014-03-30T01:20:40.880", "Id": "22739113", "Score": "0", "CreationDate": "2014-03-30T01:13:42.617", "LastActivityDate": "2014-03-30T01:20:40.880"}, "bq_ids": {"n4140": {"so_22739071_22739113_0": {"section_id": 39, "quality": 0.90625, "length": 29}}, "n3337": {"so_22739071_22739113_0": {"section_id": 36, "quality": 0.84375, "length": 27}}, "n4659": {"so_22739071_22739113_0": {"section_id": 39, "quality": 0.90625, "length": 29}}}, "22739099": {"ParentId": "22739071", "CommentCount": "2", "Body": "<p><code>nir=0;</code></p>\n<p>This sets the pointer to NULL. 0 and NULL are the same in this context.</p>\n<p><code>*nir=8</code></p>\n<p>This is wrong as nir in not a valid pointer. It's no suprise that it crashes!</p>\n<p><code>cout&lt;&lt;*nir&lt;&lt;endl;</code></p>\n<p>This is also wrong as nir is invalid pointer. You cannot read or write.</p>\n<p><code>delete nir;</code></p>\n<p>This is harmless, as deleting a NULL pointer is safe (it does nothing).</p>\n", "OwnerUserId": "2068573", "PostTypeId": "2", "Id": "22739099", "Score": "0", "CreationDate": "2014-03-30T01:12:23.170", "LastActivityDate": "2014-03-30T01:12:23.170"}, "22739071": {"CommentCount": "4", "ViewCount": "101", "PostTypeId": "1", "LastEditorUserId": "701092", "CreationDate": "2014-03-30T01:09:15.853", "LastActivityDate": "2014-06-12T16:28:48.343", "Title": "is it right to use the new operator like this?", "LastEditDate": "2014-03-30T01:12:09.827", "Id": "22739071", "Score": "0", "Body": "<pre><code>int main()\n{\n    int* nir = new int; // creating dynamic memory\n    *nir = 7; // assigning value\n    cout &lt;&lt; *nir &lt;&lt; endl;\n    delete nir; // deleting \n    nir = 0; // **is this line for assigning the address nir=0? 0 is also part of memory right? Why didn't we put NULL?\n    *nir = 8; // **can i do like this and change the value, so that the output can be 8 now?\n    cout &lt;&lt; *nir &lt;&lt; endl;\n    delete nir;\n    nir = 0;\n    return 0;\n}\n</code></pre>\n<p>This is the code that I created to understand <code>new</code>. But, even though it was compiled fine by Code::Blocks, during the runtime, it crashes. I have two questions, which I have already mentioned in comment part.</p>\n<pre><code>nir = 0;\n</code></pre>\n<p>is this line for assigning the address <code>nir = 0</code>? 0 is also part of memory right? Why didn't we put <code>nir = NULL</code>?</p>\n<pre><code>*nir = 8;\n</code></pre>\n<p>can I do like this and change the value, so that the output can be <code>8</code> now? After all, I have already deleted the <code>*nir</code> value.</p>\n", "Tags": "<c++><new-operator>", "OwnerUserId": "3425404", "AnswerCount": "4"}, "22739164": {"ParentId": "22739071", "CommentCount": "0", "Body": "<p>You tagged c++ so I recommend using nullptr instead of 0/NULL</p>\n<p><code>nir = nullptr;</code></p>\n<p>The problem</p>\n<p><code>The literal 0 (which is essentially of type int) also serves as a null pointer literal in C++. This kludge results in ambiguity and bugs.</code></p>\n<p>Solution</p>\n<p><code>Use the nullptr keyword instead of 0 to indicate a null pointer value</code></p>\n<p><a href=\"http://www.devx.com/cplus/10MinuteSolution/35167\" rel=\"nofollow\">source</a></p>\n", "Id": "22739164", "PostTypeId": "2", "OwnerDisplayName": "user2709465", "Score": "0", "CreationDate": "2014-03-30T01:21:55.950", "LastActivityDate": "2014-03-30T01:21:55.950"}, "22739181": {"ParentId": "22739071", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>A short breakdown of errors you purposely committed:</p>\n<pre><code>int main()\n{\n    int* nir = new int; // allocating dynamic memory\n    *nir = 7; // assigning value\n    cout &lt;&lt; *nir &lt;&lt; endl;\n    delete nir; // deleting \n    nir = 0; // **is this line for assigning the address nir=0?\n      // 0 is also part of memory right? Why didn't we put NULL?\n</code></pre>\n<p>The previous comment is wrong. For historical reasons, assigning a literal 0 to a pointer variable means setting it to a null pointer constant. This is not guaranteed to be 0 [!!!]. NULL and nullptr_t are more modern...</p>\n<pre><code>    *nir = 8; // **can i do like this and change the value,\n      // so that the output can be 8 now?\n    cout &lt;&lt; *nir &lt;&lt; endl;\n</code></pre>\n<p>On some systems you can do that. But your computing platform is now irretrievably corrupted. Modern systems catch the culprit and raise General Protection Fault, which only kills your program.</p>\n<pre><code>    delete nir;\n</code></pre>\n<p>Because programmers are keen to avoid useless work, the above (delete NULL) is defined as a no-op</p>\n<pre><code>    nir = 0;\n    return 0;\n</code></pre>\n<p>The previous two lines are useless, as <code>nir</code> is never used again and <code>main</code> per standard returns 0 unless it explicitly doesn't, quite in contrast to any other function.</p>\n<pre><code>}\n</code></pre>\n", "OwnerUserId": "3204551", "LastEditorUserId": "3204551", "LastEditDate": "2014-06-12T16:28:48.343", "Id": "22739181", "Score": "0", "CreationDate": "2014-03-30T01:25:14.063", "LastActivityDate": "2014-06-12T16:28:48.343"}});