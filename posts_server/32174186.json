post_cb({"bq_ids": {"n4140": {"so_32174186_32174466_0": {"length": 22, "quality": 0.88, "section_id": 5417}}, "n3337": {"so_32174186_32174466_0": {"length": 22, "quality": 0.88, "section_id": 5212}}, "n4659": {"so_32174186_32174466_0": {"length": 22, "quality": 0.88, "section_id": 6839}}}, "32174186": {"ViewCount": "291", "Body": "<p>I have a templated class <code>A</code> and a templated function <code>f</code> which returns <code>A</code> objects. I want <code>f&lt;T&gt;</code> to be a friend of <code>A&lt;T&gt;</code> and still be <code>constexpr</code></p>\n<pre><code>template &lt;typename T&gt;\nclass A;\n\ntemplate &lt;typename T&gt;\nconstexpr A&lt;T&gt; f();\n\n//f&lt;T&gt; is a friend of A&lt;T&gt;\n\ntemplate &lt;typename T&gt;\nclass A {\n  friend /* constexpr? */ A f&lt;T&gt;();\n  constexpr A() {}\n};\n\ntemplate &lt;typename T&gt;\nconstexpr A&lt;T&gt; f() { return {}; }\n\nint main() {\n  constexpr auto a  = f&lt;void&gt;();\n}\n</code></pre>\n<p>I can't get clang and gcc to agree on what's right here.  If I don't put <code>constexpr</code> in the friend declaration, gcc works fine but clang won't compile it, erroring with:</p>\n<pre><code>main.cpp:18:18: error: constexpr variable 'a' must be initialized by a constant expression\n  constexpr auto a  = f&lt;void&gt;();\n                 ^    ~~~~~~~~~\nmain.cpp:18:23: note: non-constexpr function 'f&lt;void&gt;' cannot be used in a constant expression\n  constexpr auto a  = f&lt;void&gt;();\n                      ^\nmain.cpp:9:12: note: declared here\n  friend A f&lt;T&gt;(); \n</code></pre>\n<p>If I mark it as <code>constexpr</code> in the friend declaration, clang compiles fine but gcc gives me the error:</p>\n<pre><code>main.cpp:9:27: error: 'constexpr' is not allowed in declaration of friend template specialization 'A&lt;T&gt; f&lt;T&gt;()'\n   friend constexpr A f&lt;T&gt;();\n</code></pre>\n<p>How can I make everyone happy? </p>\n", "AcceptedAnswerId": "32174466", "Title": "Declaring a constexpr specialization as friend", "CreationDate": "2015-08-24T03:47:16.747", "Id": "32174186", "CommentCount": "1", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2015-08-24T06:53:26.117", "LastEditorUserId": "1013719", "LastActivityDate": "2015-08-24T06:53:26.117", "Score": "16", "OwnerUserId": "1013719", "Tags": "<c++><c++11><gcc><clang><constexpr>", "AnswerCount": "1"}, "32174466": {"Id": "32174466", "PostTypeId": "2", "Body": "<pre><code>int main() { constexpr auto a  = f&lt;void&gt;(); }\n</code></pre>\n<p>This specializes the function template <code>f</code> as the function <code>f&lt;void&gt;()</code>; during the specialization of <code>f</code>, the compiler also attempts to instantiate <code>A&lt;void&gt;</code>, which in turn declares the specialization <code>friend f&lt;void&gt;()</code>.</p>\n<p>These two declarations <strong>must</strong> match for <code>constexpr</code>:</p>\n<p>[dcl.constexpr] / 1</p>\n<blockquote>\n<p id=\"so_32174186_32174466_0\">[...] If any declaration of a function or function template has a <code>constexpr</code> specifier, then all its declarations shall contain the <code>constexpr</code> specifier. [<em>Note:</em> An explicit specialization can differ from the template declaration with respect to the <code>constexpr</code> specifier. \u2014<em>end note</em>]</p>\n</blockquote>\n<p>Clang should probably be erroring out earlier when you omit <code>constexpr</code> in the <code>friend</code> declaration rather than stamping out what appears to be a non-<code>constexpr</code> function, but at least it accepts the correct syntax. </p>\n<p>Gcc shouldn't allow the version missing <code>constexpr</code>, and gives an error when you do provide <code>constexpr</code> due to a <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65977\">bug</a>. This has since been fixed in the trunk and I can confirm it works now, although it still does not provide an error when <code>constexpr</code> is missing.</p>\n", "LastEditorUserId": "657267", "LastActivityDate": "2015-08-24T05:51:44.220", "Score": "6", "CreationDate": "2015-08-24T04:31:06.480", "ParentId": "32174186", "CommentCount": "0", "OwnerUserId": "657267", "LastEditDate": "2015-08-24T05:51:44.220"}});