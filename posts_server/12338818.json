post_cb({"bq_ids": {"n4140": {"so_12338818_48381530_0": {"length": 15, "quality": 0.5172413793103449, "section_id": 5314}}, "n3337": {"so_12338818_48381530_0": {"length": 15, "quality": 0.5172413793103449, "section_id": 5111}}}, "12338818": {"ViewCount": "64041", "Body": "<p>I have the following output created using a <code>printf()</code> statement:</p>\n<pre><code>printf(\"She said time flies like an arrow, but fruit flies like a banana.\");\n</code></pre>\n<p>but I want to put the actual quotation in double-quotes, so the output is</p>\n<blockquote>\n<p id=\"so_12338818_12338818_0\">She said \"time flies like an arrow, but fruit flies like a banana\".</p>\n</blockquote>\n<p>without interfering with the double-quotes used to wrap the string literal in the <code>printf()</code> statement.</p>\n<p>How can I do this?</p>\n", "AcceptedAnswerId": "12338826", "Title": "How to get double quotes into a string literal?", "CreationDate": "2012-09-09T11:50:12.807", "Id": "12338818", "CommentCount": "0", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2017-09-06T17:16:48.090", "LastEditorUserId": "366904", "LastActivityDate": "2018-01-22T12:22:56.520", "Score": "12", "OwnerUserId": "3469960", "Tags": "<c++><c><string><escaping><string-literals>", "AnswerCount": "2"}, "48381530": {"PostTypeId": "2", "Body": "<p>Thankfully, with C++11 there is also the more pleasing approach of using raw string literals.</p>\n<pre><code>printf(\"She said \\\"time flies like an arrow, but fruit flies like a banana\\\".\");\n</code></pre>\n<p>Becomes:</p>\n<pre><code>printf(R\"(She said \"time flies like an arrow, but fruit flies like a banana\".)\");\n</code></pre>\n<p>With respect to the addition of brackets after the opening quote, and before the closing quote, note that they can be almost any combination of up to 16 characters, helping avoid the situation where the combination is present in the string itself. Specifically:</p>\n<blockquote>\n<p id=\"so_12338818_48381530_0\">any member of the basic source character set except: space, the left\n  parenthesis (, the right parenthesis ), the backslash \\, and the\n  control characters representing horizontal tab, vertical tab, form\n  feed, and newline\" (N3936 \u00a72.14.5 [lex.string] grammar) and \"at most\n  16 characters\" (\u00a72.14.5/2)</p>\n</blockquote>\n<p>How much clearer it makes this trivial sentence might be debatable, but when used on formatted strings like HTML or JSON, it's unquestionably far clearer.</p>\n", "LastActivityDate": "2018-01-22T12:22:56.520", "Id": "48381530", "CommentCount": "0", "CreationDate": "2018-01-22T12:22:56.520", "ParentId": "12338818", "Score": "0", "OwnerUserId": "1334118"}, "12338826": {"Id": "12338826", "PostTypeId": "2", "Body": "<p>Escape the quotes with backslashes:</p>\n<pre><code>printf(\"She said \\\"time flies like an arrow, but fruit flies like a banana\\\".\"); \n</code></pre>\n<p>There are special <a href=\"http://gillius.org/ctut/app_a.htm\" rel=\"nofollow noreferrer\">escape characters</a> that you can use in string literals, and these are denoted with a leading backslash.</p>\n", "LastEditorUserId": "366904", "LastActivityDate": "2017-09-06T17:17:23.077", "Score": "41", "CreationDate": "2012-09-09T11:51:48.283", "ParentId": "12338818", "CommentCount": "0", "OwnerUserId": "61974", "LastEditDate": "2017-09-06T17:17:23.077"}});