post_cb({"bq_ids": {"n4140": {"so_16642294_16642294_0": {"length": 8, "quality": 1.0, "section_id": 3196}, "so_16642294_16642294_1": {"length": 11, "quality": 0.7333333333333333, "section_id": 5452}, "so_16642294_16642539_0": {"length": 16, "quality": 0.7272727272727273, "section_id": 5452}, "so_16642294_16642462_0": {"length": 16, "quality": 0.6956521739130435, "section_id": 5452}}, "n3337": {"so_16642294_16642294_0": {"length": 8, "quality": 1.0, "section_id": 3070}, "so_16642294_16642294_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 5246}, "so_16642294_16642539_0": {"length": 22, "quality": 1.0, "section_id": 5246}, "so_16642294_16642462_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 5246}}, "n4659": {"so_16642294_16642294_0": {"length": 8, "quality": 1.0, "section_id": 3958}, "so_16642294_16642294_1": {"length": 9, "quality": 0.6, "section_id": 6878}, "so_16642294_16642539_0": {"length": 14, "quality": 0.6363636363636364, "section_id": 6878}, "so_16642294_16642462_0": {"length": 14, "quality": 0.6086956521739131, "section_id": 6878}}}, "16642539": {"Id": "16642539", "PostTypeId": "2", "Body": "<p>Type deduction is performed for every object in the list, but the final result must be a single type <code>[dcl.spec.auto]/7</code> (emphasis mine):</p>\n<blockquote>\n<p id=\"so_16642294_16642539_0\">If the list of declarators contains more than one declarator, the type of each declared variable is determined as described above. <strong>If the type deduced for the template parameter U is not the same in each deduction, the program is ill-formed.</strong></p>\n</blockquote>\n", "LastActivityDate": "2013-05-20T04:19:00.237", "Score": "9", "CreationDate": "2013-05-20T04:19:00.237", "ParentId": "16642294", "CommentCount": "2", "OwnerUserId": "485561"}, "16642294": {"ViewCount": "435", "Body": "<p>It appears that it is not allowed to declare multiple variables of distinct types using the <code>auto</code> keyword. I can't figure out the wording in the standard that would prevent it however.</p>\n<pre><code>auto i = 1, j = 1.0; //deduction failure (several compilers)\n</code></pre>\n<p>Historically I understand since you have only one <em>decl-specifier-spec</em>. However, the rules in the standard don't seem to preclude, in fact they encourage, that <code>auto</code> can be a distinct type for each. Consider these paragraphs:</p>\n<blockquote>\n<p id=\"so_16642294_16642294_0\">8-3 Each <em>init-declarator</em> in a declaration is analyzed separately as if it was in a declaration by itself.</p>\n<p id=\"so_16642294_16642294_1\">7.1.6.4-7 If the list of declarators contains more than one declarator, the type of each declared variable is determined\n  as described above. [...]</p>\n</blockquote>\n<p>Even without <code>auto</code> not all variables needed to have the same type, as certain modifiers like <code>*</code> could be applied to each declarator individually. To me it appears now that the wording allows each <code>auto</code> declarator to be a completely distinct type.</p>\n<p>Which paragraph would prohibit this?</p>\n", "AcceptedAnswerId": "16642539", "Title": "Why must 'auto' declarations all be of the same type?", "CreationDate": "2013-05-20T03:48:34.507", "Id": "16642294", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-05-20T04:16:30.973", "LastEditorUserId": "229686", "LastActivityDate": "2013-05-20T04:19:00.237", "Score": "14", "OwnerUserId": "229686", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "2"}, "16642462": {"Id": "16642462", "PostTypeId": "2", "Body": "<p>I found the corrected wording (it is one of those which actually differs between <strike>the final</strike> <em>a late</em> draft and the official standard).</p>\n<blockquote>\n<p id=\"so_16642294_16642462_0\">7.1.6.4-7 If the list of declarators contains more than one declarator, the type of each declared variable is determined\n  as described above. If the type deduced for the template parameter U is not the same in each deduction, the\n  program is ill-formed.</p>\n</blockquote>\n<p>Where 'U' is described in the previous paragraph to be an invented type used for the deduction of each parameter. It's an unfortunate change to the draft since it would have been a very nice feature. (I may also be misunderstanding the previous paragraph in the standard though, as it also deals with std::initializer_list)</p>\n", "LastActivityDate": "2013-05-20T04:10:00.190", "Score": "2", "CreationDate": "2013-05-20T04:10:00.190", "ParentId": "16642294", "CommentCount": "2", "OwnerUserId": "229686"}});