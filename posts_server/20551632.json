post_cb({"20551660": {"ParentId": "20551632", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>From n1256:</p>\n<p>6.7.3/4</p>\n<blockquote>\n<p id=\"so_20551632_20551660_0\">If the same quali\ufb01er appears more than once in the same\n  speci\ufb01er-quali\ufb01er-list,either directly or via one or more typedefs,\n  the behavior is the same as if it appeared only once.</p>\n</blockquote>\n<p>In C++, this should give an error. </p>\n<p>From C++03 standard:</p>\n<p>7.1.5/1 [dcl.type]</p>\n<blockquote>\n<p id=\"so_20551632_20551660_1\">As a general rule, at most one type-specifier is allowed in the\n  complete decl-specifier-seq of a declaration. The only exceptions to\n  this rule are the following: </p>\n<p id=\"so_20551632_20551660_2\">\u2014 const or volatile can be combined with any other type-specifier.  However, redundant cv- qualifiers are prohibited except when introduced through the use of typedefs (7.1.3) or template type arguments (14.3), in which case the redundant cv-qualifiers are ignored.</p>\n</blockquote>\n<p>From N3797 (C++11):</p>\n<p>7.1.6/2 [dcl.type]</p>\n<blockquote>\n<p id=\"so_20551632_20551660_3\">As a general rule, at most one type-speci\ufb01er is allowed in the\n  complete decl-speci\ufb01er-seq of a declaration or in a type-speci\ufb01er-seq\n  or trailing-type-speci\ufb01er-seq. The only exceptions to this rule are\n  the following: </p>\n<pre><code>\u2014 const can be combined with any type specifier except itself.\n</code></pre>\n</blockquote>\n", "Id": "20551660", "LastEditDate": "2013-12-12T19:56:27.170", "OwnerDisplayName": "user1508519", "Score": "28", "CreationDate": "2013-12-12T18:44:59.160", "LastActivityDate": "2013-12-12T19:56:27.170", "LastEditorDisplayName": "user1508519"}, "bq_ids": {"n4140": {"so_20551632_20551660_1": {"section_id": 5427, "quality": 0.9230769230769231, "length": 12}, "so_20551632_20551660_3": {"section_id": 5427, "quality": 0.6666666666666666, "length": 10}}, "n3337": {"so_20551632_20551660_1": {"section_id": 5222, "quality": 0.9230769230769231, "length": 12}, "so_20551632_20551660_3": {"section_id": 5222, "quality": 0.6666666666666666, "length": 10}}, "n4659": {"so_20551632_20551660_1": {"section_id": 6855, "quality": 0.8461538461538461, "length": 11}, "so_20551632_20551660_3": {"section_id": 6855, "quality": 0.6666666666666666, "length": 10}}}, "20551632": {"CommentCount": "9", "AcceptedAnswerId": "20551660", "PostTypeId": "1", "LastEditorUserId": "447156", "CreationDate": "2013-12-12T18:43:08.490", "LastActivityDate": "2013-12-13T08:58:37.133", "LastEditDate": "2013-12-13T08:58:37.133", "ViewCount": "1230", "FavoriteCount": "6", "Title": "Why is this const const const declaration valid", "Id": "20551632", "Score": "19", "Body": "<p>A friend asked me to explain why </p>\n<pre><code>const const const const const int const i = 0;\n</code></pre>\n<p>is valid syntax. I declined to have any thoughts on the subject. Though I'm curious if it is just a grammar thing?</p>\n<p>Edit. Tag is C++, my friend was referencing gcc, so I should probably add the C tag. \n</p>\n", "Tags": "<c++><c>", "OwnerUserId": "451600", "AnswerCount": "1"}});