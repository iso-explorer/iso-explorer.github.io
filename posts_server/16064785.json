post_cb({"16065305": {"ParentId": "16064785", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2013-04-17T16:25:22.353", "Score": "7", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:28:07.373", "Id": "16065305", "OwnerUserId": "341970", "Body": "<p><strong>UPDATE:</strong> Jonathan Wakely kindly looked at the issue an <a href=\"https://stackoverflow.com/questions/16064785/should-not-stdthreadid-default-constructor-create-a-null-id/16065305#comment23167697_16065305\">he says (below in comments)</a> that <code>-pthread</code> has to be passed to both the compiler and the linker. If I do that the code does not fail with gcc 4.7.2 either. So the answer has apparently nothing to do with the quoted e-mail. Thanks Jonathan!</p>\n<hr>\n<p><del>Here are some quotes straight form the gcc developer <a href=\"http://gcc.gnu.org/ml/libstdc++/2011-03/msg00068.html\" rel=\"nofollow noreferrer\">Jonathan Wakely's mail</a>, written in 2011: \n</del>\n</p>\n<blockquote>\n<p id=\"so_16064785_16065305_0\">All the comparison operators on our std::thread::id rely on undefined\n  behaviour because our thread::id is just a pthread_t.  </p>\n<p id=\"so_16064785_16065305_1\">[...]  </p>\n<p id=\"so_16064785_16065305_2\">2) operator== uses pthread_equal, which is undefined for invalid\n  thread IDs, POSIX says:</p>\n<pre><code>   If either t1 or t2 are not valid thread IDs, the behavior is undefined.\n</code></pre>\n</blockquote>\n<del>\nAlthough it was written two years ago, it probably still applies.\n\nAt the moment I cannot check the gcc codebase to say more.\n</del>\n<hr>\n<p></p>\n<p><strong>Weird.</strong> The following code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n\nint main() {\n\n    std::cout &lt;&lt; \"Started\" &lt;&lt; std::endl;\n\n    std::thread::id nobody;\n\n    if ( nobody != std::this_thread::get_id() )  {\n\n      std::cout &lt;&lt; \"OK\" &lt;&lt; std::endl;\n    }\n\n    std::cout &lt;&lt; \"Finished\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>produces:</p>\n<p></p>\n<pre><code>Started \nOK \nFinished\n</code></pre>\n<p>Check <a href=\"http://coliru.stacked-crooked.com/view?id=8c7d29212213300d87e7326c3f8a4769-50d9cfc8a1d350e7409e81e87c2653ba\" rel=\"nofollow noreferrer\">here</a>. However your code does fail with 4.7.2.</p>\n</hr></hr>", "LastActivityDate": "2013-07-06T11:03:18.747"}, "16065129": {"ParentId": "16064785", "CommentCount": "0", "CreationDate": "2013-04-17T16:15:32.327", "OwnerUserId": "2235800", "PostTypeId": "2", "Id": "16065129", "Score": "6", "Body": "<p>I don't have access to the C++11 standard but from the latest standard draft <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2012/n3485.pdf\" rel=\"noreferrer\">n3485</a> [thread.thread.id] </p>\n<blockquote>\n<p id=\"so_16064785_16065129_0\">An object of type thread::id provides a unique identi\ufb01er for each thread of execution and a single distinct value for all thread objects that do not represent a thread of execution (30.3.1)</p>\n</blockquote>\n<p>followed by </p>\n<blockquote>\n<p id=\"so_16064785_16065129_1\">id() noexcept;\n   E\ufb00ects: Constructs an object of type id.\n   Postconditions: The constructed object does not represent a thread of execution.</p>\n</blockquote>\n<p>This seems to imply that what you are observing is a bug in gcc</p>\n", "LastActivityDate": "2013-04-17T16:15:32.327"}, "bq_ids": {"n4140": {"so_16064785_16065129_0": {"section_id": 2692, "quality": 0.8947368421052632, "length": 17}}, "n3337": {"so_16064785_16065129_0": {"section_id": 2654, "quality": 0.8947368421052632, "length": 17}}, "n4659": {"so_16064785_16065129_0": {"section_id": 3432, "quality": 0.8947368421052632, "length": 17}}}, "16064785": {"CommentCount": "1", "AcceptedAnswerId": "16065305", "PostTypeId": "1", "LastEditorUserId": "1774667", "CreationDate": "2013-04-17T15:57:17.650", "LastActivityDate": "2013-07-06T11:03:18.747", "LastEditDate": "2013-04-17T20:12:32.817", "ViewCount": "1732", "FavoriteCount": "0", "Title": "Should not std::thread::id default constructor create a \"NULL\" id?", "Id": "16064785", "Score": "7", "Body": "<p>The following code failed in my gcc version 4.8.0:</p>\n<pre><code>#include &lt;thread&gt;\n#include &lt;cassert&gt;\n\nint main() {\n    std::thread::id nobody;\n\n    assert( nobody != std::this_thread::get_id() );\n};\n</code></pre>\n<p>Is this behavior correct?</p>\n", "Tags": "<c++><linux><gcc><c++11>", "OwnerUserId": "809384", "AnswerCount": "2"}});