post_cb({"33433519": {"Id": "33433519", "PostTypeId": "2", "Body": "<p>(\u00a74/6) mentions that</p>\n<blockquote>\n<p id=\"so_33433337_33433519_0\">The effect of any implicit conversion is the same as performing the corresponding declaration and initialization and then using the temporary variable as the result of the conversion.</p>\n</blockquote>\n<p>So yes, unless optimized, a temporary should be created, but I'm sure all modern compilers will perform a copy elision in your case. This particular optimization is called <a href=\"https://en.wikipedia.org/wiki/Return_value_optimization\">return value optimization (RVO)</a>. You can easilly test it by having constructors with side effects:</p>\n<pre><code>struct A {\n    A(int){\n        std::cout &lt;&lt; \"ctor\";\n    }\n    A(const A &amp; other)\n    {\n        std::cout &lt;&lt; \"copy ctor\";\n    }\n    A(A&amp;&amp;other)\n    {\n        std::cout &lt;&lt; \"move ctor\";\n    }\n};\n</code></pre>\n", "LastEditorUserId": "1490355", "LastActivityDate": "2015-10-30T10:20:27.727", "Score": "7", "CreationDate": "2015-10-30T10:13:53.633", "ParentId": "33433337", "CommentCount": "6", "OwnerUserId": "1490355", "LastEditDate": "2015-10-30T10:20:27.727"}, "33433580": {"Id": "33433580", "PostTypeId": "2", "Body": "<p>Short answer: No there will be only one creation of <code>A</code> in your code.</p>\n<p>To achieve this, the compiler uses the <a href=\"https://en.wikipedia.org/wiki/Return_value_optimization\" rel=\"nofollow\">(Named) Return value optimization</a> that eliminates unnecessary object creation/copy upon returns. The more general case, <a href=\"https://en.wikipedia.org/wiki/Copy_elision\" rel=\"nofollow\">Copy elision</a>, that eliminates unnecessary copying of objects, will be use in plenty of related case.</p>\n<p>You can play with <code>GCC</code> option <code>-fno-elide-constructors</code> to see the differences.</p>\n", "LastEditorUserId": "1677912", "LastActivityDate": "2015-11-07T02:46:47.933", "Score": "4", "CreationDate": "2015-10-30T10:16:24.653", "ParentId": "33433337", "CommentCount": "0", "OwnerUserId": "2439734", "LastEditDate": "2015-11-07T02:46:47.933"}, "33433337": {"ViewCount": "789", "Body": "<p>Consider the following code in C++:</p>\n<pre><code>struct A {A(int);};\nA foo() {return static_cast&lt;A&gt;(0);}\nA x = foo();\n</code></pre>\n<p>Here <code>static_cast&lt;A&gt;(0)</code> creates a temporary object by the standard [5.2.9-4], which is a prvalue. The standard [12.2-1] says</p>\n<blockquote>\n<p id=\"so_33433337_33433337_0\">Temporaries of class type are created in various contexts: binding a reference to a prvalue (8.5.3), <strong>returning a prvalue</strong> (6.6.3), a conversion that creates a prvalue (4.1, 5.2.9, 5.2.11, 5.4), throwing an exception (15.1), entering a handler (15.3), and in some initializations (8.5).</p>\n</blockquote>\n<p>So does the return statement will creates a temporary object again? </p>\n<p>By the way, can anyone please tell me whether the standard guarantees an implicit type conversion will create an temporary object?</p>\n", "AcceptedAnswerId": "33433519", "Title": "Does returning a temporary object create a temporary object in C++?", "CreationDate": "2015-10-30T10:04:22.253", "Id": "33433337", "CommentCount": "3", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2015-10-30T10:19:21.560", "LastEditorUserId": "898348", "LastActivityDate": "2015-11-07T02:46:47.933", "Score": "10", "OwnerUserId": "5376789", "Tags": "<c++><return><type-conversion><temporary-objects>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_33433337_33433519_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 5}, "so_33433337_33433337_0": {"length": 18, "quality": 0.6923076923076923, "section_id": 378}}, "n3337": {"so_33433337_33433519_0": {"length": 13, "quality": 0.8666666666666667, "section_id": 2}, "so_33433337_33433337_0": {"length": 20, "quality": 0.7692307692307693, "section_id": 369}}, "n4659": {"so_33433337_33433519_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 5}}}, "33433473": {"Id": "33433473", "PostTypeId": "2", "Body": "<p>The actual result in this particular case will depend on a particular compiler and optimization levels. In fact, a decent modern compiler with a good optimization level can completely remove any temporary object. Consider this:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct A {\n    A(int) { cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; endl; }\n    ~A() { cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; endl; }\n};\n\ninline\nA foo() {\n    return static_cast&lt;A&gt;(0);\n};\n\n\nint main(void) {\n    A a = foo();\n    cout &lt;&lt; \"hello world!\" &lt;&lt; endl;\n}\n</code></pre>\n<p>gcc-5.1.1 with -O4 builds an executable which outputs literally this:</p>\n<pre><code>A::A(int)\nhello world!\nA::~A()\n</code></pre>\n", "LastActivityDate": "2015-10-30T10:11:16.437", "CommentCount": "2", "CreationDate": "2015-10-30T10:11:16.437", "ParentId": "33433337", "Score": "2", "OwnerUserId": "3159253"}, "33433512": {"Id": "33433512", "PostTypeId": "2", "Body": "<p>The temporary object will (most likely) be optimized away through <a href=\"https://en.wikipedia.org/wiki/Return_value_optimization\" rel=\"noreferrer\">Return-Value-Optimization</a> (RVO) .</p>\n<p>Example:</p>\n<pre><code>#include &lt;iostream&gt;\nstruct A\n{\n    A(int)\n    {\n        std::cout&lt;&lt; \"A\" &lt;&lt; std::endl;\n    }\n    A(const A&amp;)\n    {\n        std::cout &lt;&lt; \"A&amp;\" &lt;&lt; std::endl;\n    }\n    A(A&amp;&amp;)\n    {\n        std::cout &lt;&lt; \"A&amp;&amp;\" &lt;&lt; std::endl;\n    }\n};\nA foo() {return static_cast&lt;A&gt;(0);}\n\nint main()\n{\n    A x = foo();\n    return 0;\n}\n</code></pre>\n<p>output: <a href=\"http://coliru.stacked-crooked.com/a/e412448bc2b5711c\" rel=\"noreferrer\">live example</a></p>\n<pre><code>A\n</code></pre>\n<p>output with RVO disabled: <a href=\"http://coliru.stacked-crooked.com/a/582bb4de24f7c524\" rel=\"noreferrer\">live example</a></p>\n<pre><code>A\nA&amp;&amp;\nA&amp;&amp;\n</code></pre>\n", "LastEditorUserId": "369009", "LastActivityDate": "2015-10-30T10:22:29.487", "Score": "5", "CreationDate": "2015-10-30T10:13:26.433", "ParentId": "33433337", "CommentCount": "0", "OwnerUserId": "678093", "LastEditDate": "2015-10-30T10:22:29.487"}});