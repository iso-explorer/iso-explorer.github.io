post_cb({"3213458": {"Id": "3213458", "PostTypeId": "2", "Body": "<p><code>1/9</code> is <em>zero</em>, because 1 and 9 are integers and divided by <em>integer</em> division. The same applies to <code>4/9</code>. </p>\n<p>If you want to express floating-point division through arithmetic literals, you have to either use floating-point literals <code>1.0/9 + 1.0/9 + 4.0/9</code> (or <code>1/9. + 1/9. + 4/9.</code> or <code>1.f/9 + 1.f/9 + 4.f/9</code>) or explicitly cast one operand to the desired floating-point type <code>(double) 1/9 + (double) 1/9 + (double) 4/9</code>.</p>\n<p>P.S. Finally <em>my</em> chance to answer <em>this</em> question :)</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2010-07-10T17:12:27.373", "Score": "31", "CreationDate": "2010-07-09T14:17:05.047", "ParentId": "3213445", "CommentCount": "6", "OwnerUserId": "187690", "LastEditDate": "2010-07-10T17:12:27.373"}, "3213486": {"Id": "3213486", "PostTypeId": "2", "Body": "<p>Unless you specifically specify the decimal, the numbers C++ uses are integers, so <code>1/9 = 4/9 = 0</code> and <code>0 + 0 + 0 = 0</code>.</p>\n<p>You should simply add the decimal <code>1.0</code> etc...</p>\n", "LastActivityDate": "2010-07-09T14:18:37.287", "CommentCount": "0", "CreationDate": "2010-07-09T14:18:37.287", "ParentId": "3213445", "Score": "2", "OwnerUserId": "369503"}, "3213601": {"Id": "3213601", "PostTypeId": "2", "Body": "<p>You might make it a habit to use more parentheses. They cost little time, make clear what you intend, and ensure you get what you wanted. Well mostly... ;)</p>\n", "LastActivityDate": "2010-07-09T14:32:02.577", "CommentCount": "2", "CreationDate": "2010-07-09T14:32:02.577", "ParentId": "3213445", "Score": "-2", "OwnerUserId": "79737"}, "3213508": {"Id": "3213508", "PostTypeId": "2", "Body": "<p>By the C rules of types, you're doing all integer math there. 1/9 and 4/9 are both truncated to 0 (as integers). If you wrote 1.0/9.0 etc, it would use double precision math and do what you want.</p>\n", "LastActivityDate": "2010-07-09T14:20:55.663", "CommentCount": "0", "CreationDate": "2010-07-09T14:20:55.663", "ParentId": "3213445", "Score": "2", "OwnerUserId": "251738"}, "bq_ids": {"n4140": {"so_3213445_3213479_0": {"length": 105, "quality": 0.9459459459459459, "section_id": 5348}}, "n3337": {"so_3213445_3213479_0": {"length": 105, "quality": 0.9459459459459459, "section_id": 5145}}, "n4659": {"so_3213445_3213479_0": {"length": 97, "quality": 0.8738738738738738, "section_id": 6773}}}, "3213475": {"Id": "3213475", "PostTypeId": "2", "Body": "<p>They are all integers. So 1/9 is 0. 4/9 is also 0. And 0 + 0 + 0 = 0. So the result is 0. If you want fractions, cast your fractions to floats.</p>\n", "LastActivityDate": "2010-07-09T14:17:50.177", "CommentCount": "0", "CreationDate": "2010-07-09T14:17:50.177", "ParentId": "3213445", "Score": "5", "OwnerUserId": "341671"}, "3213479": {"Id": "3213479", "PostTypeId": "2", "Body": "<p>Use a decimal point in your calculations to force floating point math optionally along with one of these suffixes: <code>f l F L</code> on your numbers.  A number alone without a decimal point and without one of those suffixes is not considered a floating point literal.</p>\n<p>C++03 2.13.3-1 on Floating literals:</p>\n<blockquote>\n<p id=\"so_3213445_3213479_0\">A floating literal consists of an\n  integer part, a decimal point, a\n  fraction part, an e or E, an\n  optionally signed integer exponent,\n  and an optional type suffix. The\n  integer and fraction parts both\n  consist of a sequence of decimal (base\n  ten) digits. Either the integer part\n  or the fraction part (not both) can be\n  omitted; either the decimal point or\n  the letter e (or E) and the exponent\n  (not both) can be omitted. The integer\n  part, the optional decimal point and\n  the optional fraction part form the\n  significant part of the floating\n  literal. The exponent, if present,\n  indicates the power of 10 by which the\n  significant part is to be scaled. If\n  the scaled value is in the range of\n  representable values for its type, the\n  result is the scaled value if\n  representable, else the larger or\n  smaller representable value nearest\n  the scaled value, chosen in an\n  implementation-defined manner. The\n  type of a floating literal is double\n  unless explicitly specified by a\n  suffix. The suffixes f and F specify\n  float, the suffixes l and L specify\n  long double. If the scaled value is\n  not in the range of representable\n  values for its type, the program is\n  ill-formed. 18</p>\n</blockquote>\n", "LastEditorUserId": "3153", "LastActivityDate": "2010-07-09T14:24:15.287", "Score": "6", "CreationDate": "2010-07-09T14:18:05.767", "ParentId": "3213445", "CommentCount": "1", "OwnerUserId": "3153", "LastEditDate": "2010-07-09T14:24:15.287"}, "3213476": {"Id": "3213476", "PostTypeId": "2", "Body": "<p>well, in C++ (and many other languages), <code>1/9+1/9+4/9</code> is zero, because it is integer arithmetic.</p>\n<p>You probably want to write <code>1/9.0+1/9.0+4/9.0</code></p>\n", "LastActivityDate": "2010-07-09T14:17:57.120", "CommentCount": "0", "CreationDate": "2010-07-09T14:17:57.120", "ParentId": "3213445", "Score": "3", "OwnerUserId": "206247"}, "3213445": {"ViewCount": "970", "Body": "<blockquote>\n<p id=\"so_3213445_3213445_0\"><strong>Possible Duplicates:</strong><br>\n<a href=\"https://stackoverflow.com/questions/1236550/incorrect-floating-point-math\">Incorrect floating point math?</a><br>\n<a href=\"https://stackoverflow.com/questions/2986324/float-compile-time-calculation-not-happening\">Float compile-time calculation not happening?</a> </br></br></p>\n</blockquote>\n<p>Strange stuff going on today, I'm about to lose it...</p>\n<pre><code>#include &lt;iomanip&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    cout &lt;&lt; setprecision(14);\n    cout &lt;&lt; (1/9+1/9+4/9) &lt;&lt; endl;\n}\n</code></pre>\n<p>This code outputs 0 on MSVC 9.0 x64 and x86 and on GCC 4.4 x64 and x86 (default options and strict math...). And as far as I remember, <code>1/9+1/9+4/9 = 6/9 = 2/3 != 0</code></p>\n", "AcceptedAnswerId": "3213458", "Title": "C++ double operator+", "CreationDate": "2010-07-09T14:15:25.360", "LastActivityDate": "2012-05-10T19:52:29.720", "CommentCount": "3", "LastEditDate": "2017-05-23T12:11:31.050", "PostTypeId": "1", "Tags": "<c++><math><floating-point><double>", "Id": "3213445", "AnswerCount": "8", "Score": "4", "OwnerUserId": "256138", "ClosedDate": "2010-07-10T13:59:05.853", "LastEditorUserId": "-1"}, "3213473": {"Id": "3213473", "PostTypeId": "2", "Body": "<pre><code>1/9(=0)+1/9(=0)+4/9(=0) = 0\n</code></pre>\n", "LastActivityDate": "2010-07-09T14:17:48.103", "CommentCount": "0", "CreationDate": "2010-07-09T14:17:48.103", "ParentId": "3213445", "Score": "4", "OwnerUserId": "64960"}});