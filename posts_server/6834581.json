post_cb({"6834688": {"ParentId": "6834581", "CommentCount": "0", "CreationDate": "2011-07-26T18:25:31.300", "OwnerUserId": "123111", "PostTypeId": "2", "Id": "6834688", "Score": "8", "Body": "<p>C++ Standard (\u00a77.2/5) guarantees that the underlying type of an enumeration is an integral type that can represent all the enumerator values defined in the enumeration. So pass it by value and don't make your code more sophisticated that it can be.</p>\n", "LastActivityDate": "2011-07-26T18:25:31.300"}, "6834604": {"ParentId": "6834581", "CommentCount": "0", "CreationDate": "2011-07-26T18:17:38.540", "OwnerUserId": "650405", "PostTypeId": "2", "Id": "6834604", "Score": "0", "Body": "<p>pass built-in simple types (char, short, int, enum, float, pointers) by value</p>\n<p>enums are implemented as integers, you can even explicitly specifiy values for them.</p>\n", "LastActivityDate": "2011-07-26T18:17:38.540"}, "6834608": {"ParentId": "6834581", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2011-07-26T18:18:05.250", "Score": "9", "LastEditorUserId": "10897", "LastEditDate": "2011-07-26T20:13:39.700", "Id": "6834608", "OwnerUserId": "10897", "Body": "<p>Speed wise it almost certainly doesn't matter - any decent C++ compiler is just going to pass a single int.</p>\n<p>The important point is readability - which will make your code more obvious to the reader?  </p>\n<p>If it's obvious that these enums are really just ints then I would pass them by value, as if they were ints. Using the const ref might cause a programmer to think twice (never a good idea!)</p>\n<p>However - if you are later going to replace them with a class then keeping the API the same and enforcing the const-ness might make sense.</p>\n", "LastActivityDate": "2011-07-26T20:13:39.700"}, "6834581": {"CommentCount": "0", "AcceptedAnswerId": "6834608", "CreationDate": "2011-07-26T18:15:49.773", "LastActivityDate": "2011-07-26T20:13:39.700", "PostTypeId": "1", "ViewCount": "6424", "FavoriteCount": "3", "Title": "C++: Is it better to pass an enum as a value or as a const reference?", "Id": "6834581", "Score": "11", "Body": "<p>There are sort of two related questions here:</p>\n<p>A) How is enum implemented?  For example, if I have the code:</p>\n<pre><code>enum myType\n{ \n   TYPE_1,\n   TYPE_2\n};\n</code></pre>\n<p>What is actually happening?  I know that you can treat TYPE_1 and TYPE_2 as ints, but are they actually just ints?</p>\n<p>B) Based on that information, assuming that the enum passed in didn't need to be changed, would it make more sense to pass myType into a function as a value or as a const reference?</p>\n<p>For example, which is the better choice:</p>\n<pre><code>void myFunction(myType x){ // some stuff }\n</code></pre>\n<p>or </p>\n<pre><code>void myFunction(const myType&amp; x) { // some stuff }\n</code></pre>\n", "Tags": "<c++><enums><performance><const-reference>", "OwnerUserId": "681523", "AnswerCount": "5"}, "6834614": {"ParentId": "6834581", "CommentCount": "0", "CreationDate": "2011-07-26T18:19:01.410", "OwnerUserId": "391531", "PostTypeId": "2", "Id": "6834614", "Score": "0", "Body": "<pre><code>typedef enum\n{\n    FIRST_THING,\n    SECOND_THING\n} myType;\n</code></pre>\n<p>Then use it just like an int. Pass it by value.</p>\n", "LastActivityDate": "2011-07-26T18:19:01.410"}, "bq_ids": {"n4140": {"so_6834581_6834680_1": {"section_id": 5466, "quality": 0.6428571428571429, "length": 36}}, "n3337": {"so_6834581_6834680_1": {"section_id": 5252, "quality": 0.6607142857142857, "length": 37}}, "n4659": {"so_6834581_6834680_1": {"section_id": 6900, "quality": 0.6428571428571429, "length": 36}}}, "6834680": {"ParentId": "6834581", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2011-07-26T18:25:05.853", "Score": "1", "LastEditorUserId": "415784", "LastEditDate": "2011-07-26T18:30:28.700", "Id": "6834680", "OwnerUserId": "415784", "Body": "<blockquote>\n<p id=\"so_6834581_6834680_0\">I know that you can treat TYPE_1 and TYPE_2 as ints, but are they actually just ints?</p>\n</blockquote>\n<p>Yes. They're integral type, and most likely their type is just <code>int</code> because that is most natural type. So you can pass by value; passing by reference wouldn't give you any significant advantage.</p>\n<p>By the way, for your reference, the section \u00a77.2/5 says,</p>\n<blockquote>\n<p id=\"so_6834581_6834680_1\">The underlying type of an enumeration is an integral type that can\n  represent all the enumerator values defined in the enumeration. It is\n  <em>implementation-defined</em> which integral type is used as the underlying\n  type for an enumeration except that the underlying type shall not be\n  larger than int unless the value of an enumerator cannot fit in an int\n  or unsigned int. If the enumerator-list is empty, the underlying type\n  is as if the enumeration had a single enumerator with value 0. The\n  value of sizeof() applied to an enumeration type, an object of\n  enumeration type, or an enumerator, is the value of sizeof() applied\n  to the underlying type.</p>\n</blockquote>\n", "LastActivityDate": "2011-07-26T18:30:28.700"}});