post_cb({"31504163": {"CommentCount": "3", "AcceptedAnswerId": "31504813", "PostTypeId": "1", "LastEditorUserId": "544057", "CreationDate": "2015-07-19T17:52:01.537", "LastActivityDate": "2015-07-20T00:13:39.593", "LastEditDate": "2015-07-20T00:13:39.593", "ViewCount": "213", "FavoriteCount": "1", "Title": "I believe clang erroneously allows inline friend function access to data in an enclosing scope. Both gcc and vs2013 reject this code", "Id": "31504163", "Score": "14", "Body": "<p>The friend function <code>f</code> doesn't have access to a private member of the enclosing class <code>A</code>.</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass A{\n    const static int p = 1;\n    class B {\n        friend void f() {\n            std::cout &lt;&lt; p &lt;&lt; '\\n';\n            std::cout &lt;&lt; q &lt;&lt; '\\n';\n        }\n    };\npublic:\n    const static int q = 2;\n};\nvoid f();\n\nint main()\n{\n    f();\n}\n</code></pre>\n<p>At least, this is what I think [class.nest]/4 in N4140 is saying (see below).</p>\n<p>\u00a79.7/4</p>\n<blockquote>\n<p id=\"so_31504163_31504163_0\">Like a member function, a friend function (11.3) defined within a\n  nested class is in the lexical scope of that class; it obeys the same\n  rules for name binding as a static member function of that class\n  (9.4), but it has no special access rights to members of an enclosing\n  class.</p>\n</blockquote>\n<p><a href=\"http://coliru.stacked-crooked.com/a/4f3f160e93a8e103\" rel=\"noreferrer\">live example</a></p>\n", "Tags": "<c++><clang><c++14><friend><clang++>", "OwnerUserId": "1042389", "AnswerCount": "1"}, "31504813": {"ParentId": "31504163", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>I believe that you are correct, in that both Visual Studio and GCC correctly reject the code based on the spec you cited.  Clang appears to be in error by allowing access to <code>A</code>'s private member variable <code>p</code> from the friend function <code>f()</code>, because <code>f()</code> is a friend of <code>B</code>, not <code>A</code>.</p>\n<p>For a good discussion of the scope of friend functions, see the top-voted answer in the following SO post: <a href=\"https://stackoverflow.com/questions/8207633/whats-the-scope-of-inline-friend-functions\">What's the scope of inline friend functions</a></p>\n", "OwnerUserId": "544057", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:53:23.413", "Id": "31504813", "Score": "4", "CreationDate": "2015-07-19T18:59:29.310", "LastActivityDate": "2015-07-19T21:51:29.670"}, "bq_ids": {"n4140": {"so_31504163_31504163_0": {"section_id": 5928, "quality": 0.9655172413793104, "length": 28}}, "n3337": {"so_31504163_31504163_0": {"section_id": 5700, "quality": 0.9655172413793104, "length": 28}}, "n4659": {"so_31504163_31504163_0": {"section_id": 7402, "quality": 0.9655172413793104, "length": 28}}}});