post_cb({"10720377": {"ViewCount": "1922", "Body": "<p>Consider the following (simplified) situation:</p>\n<pre><code>class Foo\n{\nprivate:\n    int evenA;\n    int evenB;\n    int evenSum;\npublic:\n    Foo(int a, int b) : evenA(a-(a%2)), evenB(b-(b%2)), evenSum(evenA+evenB)\n    {\n    }\n};\n</code></pre>\n<p>When i instanciate Foo like this:</p>\n<pre><code>Foo foo(1,3);\n</code></pre>\n<p>then evenA is 0, evenB is 2, but will evenSum be initialized to 2?</p>\n<p>I tried this on my current platform (iOS) and it seems to work, but I'm not sure whether this code is portable.</p>\n<p>Thanks for your help!</p>\n", "AcceptedAnswerId": "10720417", "Title": "Can member variables be used to initialize other members in an initialization list?", "CreationDate": "2012-05-23T12:55:14.270", "Id": "10720377", "CommentCount": "4", "FavoriteCount": "5", "PostTypeId": "1", "LastEditDate": "2012-05-23T19:27:09.427", "LastEditorUserId": "1412605", "LastActivityDate": "2012-05-23T19:27:09.427", "Score": "21", "OwnerUserId": "1412605", "Tags": "<c++><initialization-list><member-variables>", "AnswerCount": "4"}, "10720461": {"Id": "10720461", "PostTypeId": "2", "Body": "<p>Yes, provide they've already been constructed.  Just don't forget\nthat the order of construction is the order of the declarations in the\nclass definition, <em>not</em> the order of the initializers in the\nconstructor.  And that the compiler typically won't tell you if you use\na variable before it has been constructed.  In your case, for example,\nif you move <code>evenSum</code> to the top of the class, you have undefined\nbehavior (because its initializer uses uninitialized members), even\nthough in your constructor, you initialize <code>evenA</code> and <code>evenB</code> lexically\nbefore <code>evenSum</code>. </p>\n", "LastActivityDate": "2012-05-23T13:00:11.977", "CommentCount": "0", "CreationDate": "2012-05-23T13:00:11.977", "ParentId": "10720377", "Score": "8", "OwnerUserId": "649665"}, "10720417": {"Id": "10720417", "PostTypeId": "2", "Body": "<p>This <em>is</em> well-defined and portable,<sup>1</sup> but it's potentially error-prone.</p>\n<p>Members are initialized in the order they're declared in the class body, not the order they're listed in the initialization list.  So if you change the class body, this code may silently fail (although many compilers will spot this and emit a warning).</p>\n<p><hr>\n<sub>1. From [class.base.init] in the C++ standard(s):</sub></hr></p>\n<blockquote>\n<p id=\"so_10720377_10720417_0\">In a non-delegating constructor, initialization proceeds in the following order:</p>\n<ul>\n<li>First, and only for the constructor of the most derived class (1.8), virtual base classes are initialized in\n  the order they appear on a depth-first left-to-right traversal of the directed acyclic graph of base classes,\n  where \u201cleft-to-right\u201d is the order of appearance of the base classes in the derived class base-specifier-list.</li>\n<li>Then, direct base classes are initialized in declaration order as they appear in the base-specifier-list\n  (regardless of the order of the mem-initializers).</li>\n<li><strong>Then, non-static data members are initialized in the order they were declared in the class definition</strong>\n  (again regardless of the order of the mem-initializers).</li>\n<li>Finally, the compound-statement of the constructor body is executed.</li>\n</ul>\n</blockquote>\n<p>(Highlighting is mine.)</p>\n<p>This section of the standard then goes on to give an example of using member variables to initialize other member variables.\n</p>\n", "LastEditorUserId": "129570", "LastActivityDate": "2012-05-23T13:35:19.783", "Score": "26", "CreationDate": "2012-05-23T12:57:48.443", "ParentId": "10720377", "CommentCount": "3", "OwnerUserId": "129570", "LastEditDate": "2012-05-23T13:35:19.783"}, "10720439": {"Id": "10720439", "PostTypeId": "2", "Body": "<p>This also compiled without error on g++ 4.0.3 (6 years old now).</p>\n<p>I feel confident this will compile fine on any reasonably recent compiler.</p>\n", "LastActivityDate": "2012-05-23T12:59:09.387", "CommentCount": "0", "CreationDate": "2012-05-23T12:59:09.387", "ParentId": "10720377", "Score": "0", "OwnerUserId": "1306033"}, "bq_ids": {"n4140": {"so_10720377_10720417_0": {"length": 6, "quality": 1.0, "section_id": 438}}, "n3337": {"so_10720377_10720417_0": {"length": 6, "quality": 1.0, "section_id": 429}}, "n4659": {"so_10720377_10720417_0": {"length": 6, "quality": 1.0, "section_id": 458}}}, "10720403": {"Id": "10720403", "PostTypeId": "2", "Body": "<p>Members are initialized in the order they're declared in the class definition. As long as your initializer list follows this order, it should be ok.</p>\n", "LastEditorUserId": "243053", "LastActivityDate": "2012-05-23T18:28:31.943", "Score": "6", "CreationDate": "2012-05-23T12:57:22.517", "ParentId": "10720377", "CommentCount": "0", "OwnerUserId": "243053", "LastEditDate": "2012-05-23T18:28:31.943"}});