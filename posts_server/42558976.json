post_cb({"42558976": {"CommentCount": "7", "AcceptedAnswerId": "42559381", "CreationDate": "2017-03-02T15:07:50.903", "LastActivityDate": "2017-03-02T15:25:45.763", "PostTypeId": "1", "ViewCount": "193", "FavoriteCount": "1", "Title": "Can a template parameter be both an int and an unsigned long?", "Id": "42558976", "Score": "6", "Body": "<p>I have the following code:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;size_t N&gt;\nclass A\n{\n};\n\ntemplate&lt;int N, typename T&gt; class B;\n\ntemplate&lt;int N&gt;\nclass B&lt;N, A&lt;N&gt;&gt;\n{\n};\n\nint main()\n{\n    B&lt;3, A&lt;3&gt;&gt; b;\n    return 0;\n}\n</code></pre>\n<p>Here, <code>B</code> is templated on an <code>int</code> while <code>A</code> is templated on <code>size_t</code>, which is an <code>unsigned long</code> with both compilers I am using. </p>\n<p>When I use compiler 1 (current compiler), everything compiles and works the way I expect it to. When using compiler 2 (one we're moving to), I get a compiler error stating that there is no template specialization for <code>B</code> that takes an <code>unsigned long</code> - it has interpreted the <code>3</code> as an <code>unsigned long</code> as it needs to be one for <code>A</code>, but then can't find anything for <code>B</code>. The fix is obvious, - just change <code>B</code> to take a <code>size_t</code> as well (or change <code>A</code> to take an <code>int</code>) - but I was wondering which is strictly correct by the standard. My gut feel is that it's compiler 2 (the one that's throwing the error).</p>\n", "Tags": "<c++><templates>", "OwnerUserId": "5195699", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_42558976_42559381_0": {"section_id": 341, "quality": 0.6428571428571429, "length": 9}}, "n3337": {"so_42558976_42559381_0": {"section_id": 331, "quality": 0.6428571428571429, "length": 9}}, "n4659": {"so_42558976_42559381_0": {"section_id": 358, "quality": 1.0, "length": 14}}}, "42559381": {"ParentId": "42558976", "CommentCount": "3", "CreationDate": "2017-03-02T15:25:45.763", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "42559381", "Score": "4", "Body": "<p>From [temp.deduct.type]:</p>\n<blockquote>\n<p id=\"so_42558976_42559381_0\">If <code>P</code> has a form that contains <code>&lt;i&gt;</code>, and if the type of <code>i</code> differs from the type of the corresponding template parameter of the template named by the enclosing <em>simple-template-id</em>, deduction fails.</p>\n</blockquote>\n<p><code>A&lt;N&gt;</code> for <code>N</code> is an <code>int</code> should fail deduction because the corresponding template parameter of <code>A</code> is actually <code>size_t</code>. This is a compiler #1 bug. </p>\n", "LastActivityDate": "2017-03-02T15:25:45.763"}});