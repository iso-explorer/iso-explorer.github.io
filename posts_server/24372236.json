post_cb({"bq_ids": {"n4140": {"so_24372236_24372309_0": {"length": 17, "quality": 0.7391304347826086, "section_id": 3298}}, "n3337": {"so_24372236_24372309_0": {"length": 21, "quality": 0.9130434782608695, "section_id": 3168}}, "n4659": {"so_24372236_24372309_0": {"length": 12, "quality": 0.5217391304347826, "section_id": 4063}}}, "24372309": {"Id": "24372309", "PostTypeId": "2", "Body": "<p>Section \u00a7 8.5.1 of the standard defines an aggregate :</p>\n<blockquote>\n<p id=\"so_24372236_24372309_0\">An aggregate is an array or a class (Clause 9) with no user-provided\n  constructors (12.1), no brace-or-equal-initializers for non-static\n  data members (9.2), no private or protected non-static data members\n  (Clause 11), <strong>no base classes</strong> (Clause 10), and no virtual functions\n  (10.3).</p>\n</blockquote>\n<p>Since <code>B</code> has a base class, is not an aggregate : you cannot use aggregate brace-initialization here.</p>\n<p><strong>EDIT :</strong></p>\n<p>You could however provide a constructor to make brace-initialization work (but it is still <strong>not</strong> an aggregate initialization) :</p>\n<pre><code>struct A\n{\n    int i;\n};\n\nstruct B : public A\n{\n    B(int i, double d) : A {i}, d(d) {}\n    double d;\n};\n\n\nint main()\n{\n    B b { 10, 3.6 };\n    return 0;\n}\n</code></pre>\n", "LastEditorUserId": "3510483", "LastActivityDate": "2014-06-23T18:12:20.070", "Score": "4", "CreationDate": "2014-06-23T17:56:03.260", "ParentId": "24372236", "CommentCount": "0", "OwnerUserId": "3510483", "LastEditDate": "2014-06-23T18:12:20.070"}, "24372296": {"Id": "24372296", "PostTypeId": "2", "Body": "<p>Structure B is not an aggregate type. So you may not use a braced-init list such a way. </p>\n<p>However if you would define a constructor in class B then you could write for example</p>\n<pre><code>struct A\n{\n    int i;\n};\n\nstruct B : public A\n{\n    B( int x, double d ) : A { x }, d( d ) {}\n    double d;\n};\n\nB b { 1, 2.0 };\n</code></pre>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2014-06-23T18:01:29.100", "Score": "2", "CreationDate": "2014-06-23T17:55:02.457", "ParentId": "24372236", "CommentCount": "0", "OwnerUserId": "2877241", "LastEditDate": "2014-06-23T18:01:29.100"}, "24372236": {"ViewCount": "93", "Body": "<p>Does initialization list work for base classes? If so, how? For example</p>\n<pre><code>struct A\n{\n    int i;\n};\n\nstruct B : public A\n{\n    double d;\n};\n\n\nint main()\n{\n    B b{ A(10), 3.4 };\n    return 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "24372309", "Title": "Does initialization list work for base classes?", "CreationDate": "2014-06-23T17:51:43.350", "Id": "24372236", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-06-23T18:12:20.070", "Score": "5", "OwnerUserId": "1899020", "Tags": "<c++><initializer-list>", "AnswerCount": "2"}});