post_cb({"18202901": {"Id": "18202901", "PostTypeId": "2", "Body": "<p>There might be some misunderstanding about the meaning of <code>inline</code> specifier. Yes, it does give a hint to the compiler that it would be preferred to inline the code instead of making a call, but compiler is not forced to obey this hint. The main use of <code>inline</code> specifier is to avoid violations of <a href=\"https://stackoverflow.com/questions/4192170/what-exactly-is-one-definition-rule-in-c\">One Definition Rule</a>.</p>\n<p>Once you declare a function <code>inline</code>, it needs to be defined in every translation unit it used and the definition must be exactly the same every time. It is the other way around than as your title suggests - the choice of where you define the function mandates whether it needs to be marked <code>inline</code> or not.</p>\n<p>1) and 2) are okay. In the first case it is implicitly <code>inline</code> and in the second you explicitly declared it so. The definition is the same wherever you include the header.</p>\n<p>Case 3) will only work if you compile and link <code>X_impl.h</code> as a source file. In that case there will be only one definition and <code>inline</code> would be redundant. This way the compiler doesn't see the definition in other translation units, though, and that makes it impossible for it to inline the function, regardless whether it is <code>inline</code> or not.</p>\n<p>If the intent of <code>X_impl.h</code> was to reduce the visual size of a header, then you should do it the other way around, include it at the end of <code>X.h</code>. <code>inline</code> must stay in that case.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-08-13T07:17:38.737", "Score": "5", "CreationDate": "2013-08-13T07:17:38.737", "ParentId": "18202324", "CommentCount": "3", "OwnerUserId": "947836", "LastEditDate": "2017-05-23T12:05:18.880"}, "18202324": {"ViewCount": "225", "Body": "<p>Say I have a class X (X.h):</p>\n<pre><code>class X {\n  private:\n    unsigned unitsSold = 0;\n    double revenue = 0.0;\n\n  public:\n    double avgPrice();\n}\n</code></pre>\n<p>Which way should <code>avgPrice()</code> be defined?</p>\n<p><a href=\"https://stackoverflow.com/a/4769571/1805439\">Option 1</a> (in-class):</p>\n<p>X.h</p>\n<pre><code>class X {\n  private:\n    unsigned unitsSold = 0;\n    double revenue = 0.0;\n\n  public:\n    double avgPrice() {\n      return unitsSold ? revenue / unitsSold : 0;\n    }\n}\n</code></pre>\n<p><a href=\"http://www.parashift.com/c++-faq-lite/inline-member-fns.html\" rel=\"nofollow noreferrer\">Option 2</a> (in same file as the class, but outside of the class definition):</p>\n<p>X.h</p>\n<pre><code>class X {\n  private:\n    unsigned unitsSold = 0;\n    double revenue = 0.0;\n\n  public:\n    double avgPrice();\n}\n\ninline double X::avgPrice() {\n  return unitsSold ? revenue / unitsSold : 0;\n}\n</code></pre>\n<p>or <a href=\"http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#The_-inl.h_Files\" rel=\"nofollow noreferrer\">Option 3</a> (in a seperate header file):</p>\n<p>X.h:</p>\n<pre><code>class X {\n  private:\n    unsigned unitsSold = 0;\n    double revenue = 0.0;\n\n  public:\n    double avgPrice();\n}\n</code></pre>\n<p>X-inl.h:</p>\n<pre><code>#include \"X.h\"\n\ninline double X::avgPrice() {\n  return unitsSold ? revenue / unitsSold : 0;\n}\n</code></pre>\n", "AcceptedAnswerId": "18202901", "Title": "What is the correct way to define inline functions?", "CreationDate": "2013-08-13T06:43:15.687", "Id": "18202324", "CommentCount": "6", "LastEditDate": "2017-05-23T11:56:38.037", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2013-08-13T08:00:32.167", "Score": "4", "OwnerUserId": "1805439", "Tags": "<c++><inline>", "AnswerCount": "6"}, "18202756": {"Id": "18202756", "PostTypeId": "2", "Body": "<p>I would select each method favouring the readability and this depends on the size of the function:</p>\n<ul>\n<li>one line functions --&gt; option 1,</li>\n<li>small size functions --&gt; option 2,</li>\n<li>middle size functions --&gt; option 3,</li>\n<li>big size function --&gt; are you sure you want inlining?</li>\n</ul>\n<p>If you have a great number of small size functions go for option 3 and never mix option 2 and 3 together.</p>\n<p>Moreover, as you presented your third option, you will have to remember to include <code>X-inl.h</code> instead of <code>X.h</code>. If you modify as follows:</p>\n<p>X.h:</p>\n<pre><code>#ifndef _CLASS_X_H_\n#define _CLASS_X_H_\nclass X {\n  private:\n    unsigned unitsSold = 0;\n    double revenue = 0.0;\n\n  public:\n    double avgPrice();\n};\n#include \"X-inl.h\"\n#endif\n</code></pre>\n<p>X-inl.h:</p>\n<pre><code>inline double X::avgPrice() {\n  return unitsSold ? revenue / unitsSold : 0;\n}\n</code></pre>\n<p>Then you can include <code>X.h</code> as you would normally do.</p>\n", "LastEditorUserId": "2140449", "LastActivityDate": "2013-08-13T07:18:39.913", "Score": "1", "CreationDate": "2013-08-13T07:08:49.737", "ParentId": "18202324", "CommentCount": "2", "OwnerUserId": "2140449", "LastEditDate": "2013-08-13T07:18:39.913"}, "18202615": {"Id": "18202615", "PostTypeId": "2", "Body": "<p>Those three options are all corrects.</p>\n<p>After it depends on such thing :</p>\n<ul>\n<li><p>If your function is quite short (like getters/setters), it is more common to see the function directly defined in the class definition.</p></li>\n<li><p>If your function is bigger, it can be good to define it in another header and include only this header in the source where the function is used. This will only speed up your compilation. But It is rare to <code>inline</code> big function.</p></li>\n</ul>\n<p>But don't forget that, it is not because you used the <code>inline</code> keyword that your compile will inline your function. It is up to the compiler to decide if it will the function in every place it use or not.</p>\n<p>This is stated explicitly in the standard :</p>\n<blockquote>\n<p id=\"so_18202324_18202615_0\"><strong>7.1.2/2 Function specifiers [dcl.fct.spec]</strong></p>\n<p id=\"so_18202324_18202615_1\">A function declaration with an <code>inline</code> specifier declares an inline function. The inline specifier indicates to the implementation that inline substitution of the function body at the point of call is to be preferred to the usual function call mechanism. <strong>An implementation is not required to perform this inline substitution at the point of call</strong>; however, even if this inline substitution is omitted, the other rules for inline functions defined by 7.1.2 shall still be respected.</p>\n</blockquote>\n<p>Last thing :</p>\n<blockquote>\n<p id=\"so_18202324_18202615_2\">Most compilers already optimize code to generate inline functions when it is more convenient. This specifier only indicates the compiler that inline is preferred for this function.</p>\n</blockquote>\n<hr>\n<p>As jrok stated, <code>inline</code> is mainly used to avoid violation of the <strong>One Definition Rule</strong>. Here we can also quote a little part of the standard :</p>\n<blockquote>\n<p id=\"so_18202324_18202615_3\"><em>(\u00a7 7.1.2/4)</em> An inline function shall be defined in every translation unit in which it is <strong>odr-used</strong> and shall have exactly the same definition in every case (3.2).</p>\n<p id=\"so_18202324_18202615_4\"><strong>3.2 One definition rule [basic.def.odr]</strong></p>\n<p id=\"so_18202324_18202615_5\">No translation unit shall contain more than one definition of any variable, function, class type, enumeration type, or template.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "1394283", "LastActivityDate": "2013-08-13T08:00:32.167", "Score": "1", "CreationDate": "2013-08-13T07:00:58.610", "ParentId": "18202324", "CommentCount": "0", "OwnerUserId": "1394283", "LastEditDate": "2013-08-13T08:00:32.167"}, "bq_ids": {"n4140": {"so_18202324_18202615_1": {"length": 41, "quality": 0.9534883720930233, "section_id": 5402}, "so_18202324_18202615_5": {"length": 14, "quality": 1.0, "section_id": 7038}, "so_18202324_18202615_3": {"length": 13, "quality": 0.9285714285714286, "section_id": 5404}}, "n3337": {"so_18202324_18202615_1": {"length": 41, "quality": 0.9534883720930233, "section_id": 5197}, "so_18202324_18202615_5": {"length": 14, "quality": 1.0, "section_id": 6784}, "so_18202324_18202615_3": {"length": 13, "quality": 0.9285714285714286, "section_id": 5199}}, "n4659": {"so_18202324_18202615_1": {"length": 40, "quality": 0.9302325581395349, "section_id": 6849}, "so_18202324_18202615_5": {"length": 14, "quality": 1.0, "section_id": 8535}, "so_18202324_18202615_3": {"length": 13, "quality": 0.9285714285714286, "section_id": 6853}}}, "18202507": {"Id": "18202507", "PostTypeId": "2", "Body": "<p>This depends on where you use your inline function, and how frequently you use it. IF the code of the inline function is short (like for most getters/setters) and if it is (likely) used in many places, putting it straight into the class definition is the straightforward way to go.</p>\n<p>If your inline function is \"massive\" and used only by a few users of your class, putting it into a seperate header is best. That speeds up the compile in those cases, that the inline is not required, but requires you to communicate that extra header file to the users of your lib.</p>\n", "LastActivityDate": "2013-08-13T06:53:43.000", "CommentCount": "0", "CreationDate": "2013-08-13T06:53:43.000", "ParentId": "18202324", "Score": "0", "OwnerUserId": "2528436"}, "18202586": {"Id": "18202586", "PostTypeId": "2", "Body": "<p>I assume there may be a little confusion over the <code>inline</code> keyword and an inline function/method.</p>\n<p>The keyword <code>inline</code> tells the compiler that it should copy the function/method code to the place where the function/method is called. Example:</p>\n<pre><code>/* [...] */\ninline void sayHello() {\n    std::cout &lt;&lt; \"Hello\" &lt;&lt; std::endl;\n}\n\nint main(int argc, char **argv) {\n    sayHello();\n    return 0;\n}\n</code></pre>\n<p>shall become</p>\n<pre><code>/* [...] */\nint main(int argc, char **argv) {\n    std::cout &lt;&lt; \"Hello\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>when compiled. But the compiler is not forced to inline the function/method.</p>\n<p>On the other hand, an inline method is implemented at the place you declare it. Example:</p>\n<pre><code>/* [...] */\nclass X {\nprivate:\n    unsigned int unitsSold;\n    double revenue;\n\npublic:\n    /* [...] */\n    double avgPrice() {\n        if (unitsSold == 0) {\n            return 0.0;\n        }\n        return revenue/unitsSold;\n    }\n};\n</code></pre>\n", "LastActivityDate": "2013-08-13T06:59:15.713", "CommentCount": "0", "CreationDate": "2013-08-13T06:59:15.713", "ParentId": "18202324", "Score": "0", "OwnerUserId": "1175061"}, "18202417": {"Id": "18202417", "PostTypeId": "2", "Body": "<p>As long as you add the <code>inline</code> suggestion to the compiler, the three options you provide will (must) lead to the same compiled code.</p>\n<p>That is always considering an standard compiler doing the standard compilation task...</p>\n", "LastActivityDate": "2013-08-13T06:48:49.587", "CommentCount": "4", "CreationDate": "2013-08-13T06:48:49.587", "ParentId": "18202324", "Score": "-1", "OwnerUserId": "1056693"}});