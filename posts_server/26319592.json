post_cb({"26319665": {"ParentId": "26319592", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>2<sup>31</sup> isn't representable in a <code>int32_t</code>, which goes from -2<sup>31</sup> to (2<sup>31</sup>-1). This is undefined behavior in C11 and C++11, and implementation-defined in C++14.</p>\n<p>C11 \u00a76.5.7/p4 (quoting N1570):</p>\n<blockquote>\n<p id=\"so_26319592_26319665_0\">The result of <code>E1 &lt;&lt; E2</code> is <code>E1</code> left-shifted <code>E2</code> bit positions;\n  vacated bits are filled with zeros. [...] If <code>E1</code> has a signed type\n  and nonnegative value, and <code>E1 \u00d7 2</code><sup><code>E2</code></sup> is representable in\n  the result type, then that is the resulting value; otherwise, the\n  behavior is undefined.</p>\n</blockquote>\n<p>The C++11 rule in N3337 \u00a75.8 [expr.shift]/p2  is pretty much identical. Since 2<sup>31</sup> isn't representable, the behavior is undefined.</p>\n<p>C++14  \u00a75.8 [expr.shift]/p2 (quoting N3936; see also <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1457\" rel=\"nofollow\">CWG issue 1457</a>):</p>\n<blockquote>\n<p id=\"so_26319592_26319665_1\">The value of <code>E1 &lt;&lt; E2</code> is <code>E1</code> left-shifted <code>E2</code> bit positions;\n  vacated bits are zero-filled. [...] Otherwise, if <code>E1</code> has a signed\n  type and non-negative value, and <code>E1\u00d72</code><sup><code>E2</code></sup>is representable\n  in the corresponding unsigned type of the result type, then that\n  value, converted to the result type, is the resulting value;\n  otherwise, the behavior is undefined.</p>\n</blockquote>\n<p>As 2<sup>31</sup> is representable in an unsigned 32-bit int, the behavior is defined and the result is 2<sup>31</sup> converted to <code>int32_t</code>; this conversion is implementation-defined per \u00a74.7 [conv.integral]/p3. In a typical system using two's complement you'd get -2<sup>31</sup>.</p>\n", "OwnerUserId": "2756719", "LastEditorUserId": "2756719", "LastEditDate": "2014-10-12T23:06:47.820", "Id": "26319665", "Score": "10", "CreationDate": "2014-10-11T21:55:09.180", "LastActivityDate": "2014-10-12T23:06:47.820"}, "bq_ids": {"n4140": {"so_26319592_26319665_1": {"section_id": 6147, "quality": 0.9333333333333333, "length": 28}, "so_26319592_26319665_0": {"section_id": 6147, "quality": 0.782608695652174, "length": 18}}, "n3337": {"so_26319592_26319665_1": {"section_id": 5910, "quality": 0.7, "length": 21}, "so_26319592_26319665_0": {"section_id": 5910, "quality": 0.782608695652174, "length": 18}}, "n4659": {"so_26319592_26319665_1": {"section_id": 7643, "quality": 0.9333333333333333, "length": 28}, "so_26319592_26319665_0": {"section_id": 7643, "quality": 0.782608695652174, "length": 18}}}, "26319592": {"CommentCount": "12", "ViewCount": "578", "CreationDate": "2014-10-11T21:47:26.397", "LastActivityDate": "2014-10-12T23:06:47.820", "Title": "1 << 31 produces the error, \"The result of the '<<' expression is undefined\"", "AcceptedAnswerId": "26319665", "PostTypeId": "1", "Id": "26319592", "Score": "2", "Body": "<p>If I have value declared as of type int on a 32 bit platform and perform the following:</p>\n<pre><code>int32_t mask;\nmask = 1 &lt;&lt; 31: // produces 2147483648 (or 0x80000000)\n</code></pre>\n<p>Can someone help me understand why the above line would produce the warning:</p>\n<pre><code>The result of the '&lt;&lt;' expression is undefined\n</code></pre>\n", "Tags": "<c++><c>", "OwnerUserId": "2466865", "AnswerCount": "1"}});