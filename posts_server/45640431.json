post_cb({"bq_ids": {"n4140": {"so_45640431_45640555_0": {"length": 44, "quality": 0.9565217391304348, "section_id": 6167}}, "n3337": {"so_45640431_45640555_0": {"length": 44, "quality": 0.9565217391304348, "section_id": 5928}}, "n4659": {"so_45640431_45640555_0": {"length": 44, "quality": 0.9565217391304348, "section_id": 7664}}}, "45640431": {"ViewCount": "63", "Body": "<p><strong>INTENTION</strong> -&gt; A program that adds even numbers only within a range</p>\n<p><strong>Strange behavior</strong> -&gt; the logical statement is incorrect for adding even numbers, instead the logical statement is correct for adding odd numbers, but the sum of even numbers is the result. As we all know, <code>num &amp; 1</code> returns true if num is odd, and false if num is even. </p>\n<p><strong>Question</strong> -&gt; Check my logical statement in the code. Why is the increment of n inline with the logical operator inverting the return value and summing even numbers (which is intended, but unexpected for this logical statement)?</p>\n<pre><code>//program to print sum of even numbers\n#include &lt;iostream&gt;\nint main(){\n    int n = {0}, result = {0};\n    while(n &lt; 99) result += n++ &amp; 1 ? n : 0;\n    std::cout &lt;&lt; result &lt;&lt; '\\n';\n}\n</code></pre>\n<p>I was experiencing some random behavior when attempting a simple coding implementation of a bitwise odd number detection.  <code>num &amp; 1</code> \nThis is returning the desired and appropriate value of even nums between 0 and 100, when I'm not using any negation. such as <code>~num &amp; 1</code> . Can someone explain to me why the negation isn't necessary, and why its returning even values? Is there some extra behavior to the n++ happening?</p>\n<p><strong>NOTE:</strong> I understand the syntax is obtuse, that was sort of my intention, to be as obtuse as possible for the sake of experimenting with the language a bit. I'm not asking for a style critique.</p>\n<p><strong>Examples</strong></p>\n<p><a href=\"https://repl.it/KG8Z/1\" rel=\"nofollow noreferrer\">https://repl.it/KG8Z/1</a> &lt; this should print odd, but <em>what is the unintended side-effect of the <code>++</code> operator that is making it print even numbers?</em></p>\n<p><a href=\"https://repl.it/KG8Z/0\" rel=\"nofollow noreferrer\">https://repl.it/KG8Z/0</a>  &lt; c++ </p>\n<p><a href=\"https://repl.it/KGId/3\" rel=\"nofollow noreferrer\">https://repl.it/KGId/3</a> &lt; python</p>\n<p>I was expecting to need to use the bitwise not operator in c++ to get the desired result, but the results are the same despite the absence of a logical not. How to explain this <em>odd</em> behavior? </p>\n", "AcceptedAnswerId": "45640566", "Title": "C++ random bitwise behavior", "CreationDate": "2017-08-11T17:08:32.107", "Id": "45640431", "CommentCount": "17", "LastEditDate": "2017-08-12T07:43:59.480", "PostTypeId": "1", "LastEditorUserId": "4468992", "LastActivityDate": "2017-08-12T07:43:59.480", "Score": "-6", "OwnerUserId": "4468992", "Tags": "<c++><bit-manipulation><bitwise-operators>", "AnswerCount": "2"}, "45640555": {"Id": "45640555", "PostTypeId": "2", "Body": "<p><a href=\"http://eel.is/c++draft/expr.cond#1\" rel=\"nofollow noreferrer\"><code>[expr.cond]/1</code></a>:</p>\n<blockquote>\n<p id=\"so_45640431_45640555_0\">Conditional expressions group right-to-left. The first expression is\n  contextually converted to bool. It is evaluated and if it is true, the\n  result of the conditional expression is the value of the second\n  expression, otherwise that of the third expression. Only one of the\n  second and third expressions is evaluated. <strong>Every value computation and\n  side effect associated with the first expression is sequenced before\n  every value computation and side effect associated with the second or\n  third expression.</strong></p>\n</blockquote>\n<p>Thus, <code>n</code> is \"selected\" on odd <code>n</code>s in the condition, but at that point, it's already incremented (even).</p>\n<hr>\n<p><code>n &amp; ~1</code> is not the same as <code>!(n &amp; 1)</code>.</p>\n</hr>", "LastEditorUserId": "3552770", "LastActivityDate": "2017-08-11T17:24:02.800", "Score": "0", "CreationDate": "2017-08-11T17:16:17.570", "ParentId": "45640431", "CommentCount": "2", "LastEditDate": "2017-08-11T17:24:02.800", "OwnerUserId": "3552770"}, "45640566": {"Id": "45640566", "PostTypeId": "2", "Body": "<p>When</p>\n<pre><code>n++ &amp; 1\n</code></pre>\n<p>executes, lets expect <code>n</code> is odd number at the moment, condition is true.</p>\n<p>Post incrementation is applied and <code>n</code> is even when</p>\n<pre><code>result += n\n</code></pre>\n<p>executes. Thats why its counting even numbers instead of odd. Modify code to</p>\n<pre><code>while(n &lt; 99) result += !(n++ &amp; 1) ? n : 0;\n</code></pre>\n<p>and it will count odd one's.</p>\n", "LastEditorUserId": "8254699", "LastActivityDate": "2017-08-11T17:23:00.010", "Score": "1", "CreationDate": "2017-08-11T17:17:05.020", "ParentId": "45640431", "CommentCount": "2", "LastEditDate": "2017-08-11T17:23:00.010", "OwnerUserId": "8254699"}});