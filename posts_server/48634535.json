post_cb({"bq_ids": {"n4140": {"so_48634535_48635668_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 7215}, "so_48634535_48635668_1": {"length": 40, "quality": 0.8695652173913043, "section_id": 44}}, "n3337": {"so_48634535_48635668_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 6959}, "so_48634535_48635668_1": {"length": 39, "quality": 0.8478260869565217, "section_id": 41}}, "n4659": {"so_48634535_48635668_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 8724}, "so_48634535_48635668_1": {"length": 40, "quality": 0.8695652173913043, "section_id": 45}}}, "48634535": {"ViewCount": "43", "Body": "<p>Considering the following code for a C++ struct <code>type_no</code>:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;int i&gt;\nstruct type_no {\n  static const int value = 0;\n};\n\ntemplate&lt;&gt;\nstruct type_no&lt;1&gt; {\n  static const bool value = 10;\n};\n\ntemplate&lt;&gt;\nstruct type_no&lt;2&gt; {\n  static const bool value = 20;\n};\n\nint main() {\n  std::cout &lt;&lt; type_no&lt;0&gt;::value &lt;&lt; std::endl;\n  std::cout &lt;&lt; type_no&lt;1&gt;::value &lt;&lt; std::endl;\n  std::cout &lt;&lt; type_no&lt;2&gt;::value &lt;&lt; std::endl;\n}\n</code></pre>\n<p>I think that runing the above code should produces:</p>\n<pre><code>0\n10\n20\n</code></pre>\n<p>But after compiling the above code with <code>g++ -std=c++14 code.cc -o code</code>, running <code>./code</code> produces:</p>\n<pre><code>0\n1\n1\n</code></pre>\n<p>The OS is <code>Ubuntu 16.04.2 LTS (GNU/Linux 4.14.12-x86_64-linode92 x86_64)</code>. The result of <code>g++ --version</code> is <code>g++ (Ubuntu/Linaro 6.3.0-18ubuntu2~16.04) 6.3.0 20170519</code>.</p>\n", "Title": "How do static fields in C++ struct are set during template specialization?", "CreationDate": "2018-02-06T02:26:37.077", "LastActivityDate": "2018-02-06T04:47:43.983", "CommentCount": "1", "PostTypeId": "1", "Id": "48634535", "Score": "0", "OwnerUserId": "431698", "Tags": "<c++><g++>", "AnswerCount": "1"}, "48635668": {"Id": "48635668", "PostTypeId": "2", "Body": "<p>There are two relevant parts of the Standard:</p>\n<blockquote>\n<p id=\"so_48634535_48635668_0\"><strong>6.9.1</strong>\n  Values of type bool are either <code>true</code> or <code>false</code>.</p>\n<p id=\"so_48634535_48635668_1\"><strong>7.14 Boolean conversions <a href=\"http://www.eel.is/c++draft/conv.bool\" rel=\"nofollow noreferrer\">[conv.bool]</a></strong><br>\n  1 A prvalue of arithmetic, unscoped enumeration, pointer, or pointer to member type can be converted to a\n  prvalue of type <code>bool</code>. A zero value, null pointer value, or null member pointer value is converted to <code>false</code>;\n  any other value is converted to <code>true</code>. For direct-initialization (11.6), a prvalue of type <code>std::nullptr_t</code> can\n  be converted to a prvalue of type <code>bool</code>; the resulting value is <code>false</code>.</br></p>\n</blockquote>\n", "LastActivityDate": "2018-02-06T04:47:43.983", "Score": "0", "CreationDate": "2018-02-06T04:47:43.983", "ParentId": "48634535", "CommentCount": "0", "OwnerUserId": "312896"}});