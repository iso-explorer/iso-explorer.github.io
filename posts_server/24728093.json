post_cb({"bq_ids": {"n4140": {"so_24728093_24728123_0": {"length": 37, "quality": 0.9487179487179487, "section_id": 7003}}, "n3337": {"so_24728093_24728123_0": {"length": 37, "quality": 0.9487179487179487, "section_id": 6749}}, "n4659": {"so_24728093_24728123_0": {"length": 37, "quality": 0.9487179487179487, "section_id": 8500}}}, "24728093": {"ViewCount": "308", "Body": "<p>Consider the following classes in C++11:</p>\n<pre><code>class Base\n{\npublic:\n  virtual void foo() = 0;\n}\n\nclass Sub1 : public Base\n{\npublic:\n  virtual void foo() override {};\n}\n\nclass Sub2 : public Base\n{\npublic:\n  void foo() override {};\n}\n</code></pre>\n<p>What are the consequences of making the overridden function non-virtual as in <code>Sub2</code>?</p>\n", "AcceptedAnswerId": "24728123", "Title": "Purpose of making overridden virtual function non-virtual", "CreationDate": "2014-07-14T00:18:11.647", "Id": "24728093", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-07-14T01:41:00.343", "Score": "2", "OwnerUserId": "24874", "Tags": "<c++><inheritance><c++11><override><virtual-functions>", "AnswerCount": "2"}, "24728123": {"Id": "24728123", "PostTypeId": "2", "Body": "<p>An override of a virtual function is always virtual regardless of whether it's declared as such. Thus, having or not having the <code>virtual</code> keyword in the declaration of <code>Sub2::foo()</code> has no effect whatsoever as far as the language is concerned, since the <code>override</code> keyword means that the function must override a member function of a base class. From \u00a710.3 [class.virtual]/p2 of the standard, emphasis added:</p>\n<blockquote>\n<p id=\"so_24728093_24728123_0\">If a virtual member function <code>vf</code> is declared in a class <code>Base</code> and in\n  a class <code>Derived</code>, derived directly or indirectly from <code>Base</code>, a\n  member function <code>vf</code> with the same name, parameter-type-list (8.3.5),\n  cv-qualification, and ref-qualifier (or absence of same) as <code>Base::vf</code>\n  is declared, then <code>Derived::vf</code> is also virtual (<strong>whether or not it\n  is so declared</strong>) and it <em>overrides</em> <code>Base::vf</code>. For convenience we say\n  that any virtual function overrides itself.</p>\n</blockquote>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2014-07-14T00:29:10.350", "Score": "11", "CreationDate": "2014-07-14T00:24:05.010", "ParentId": "24728093", "CommentCount": "0", "OwnerUserId": "2756719", "LastEditDate": "2014-07-14T00:29:10.350"}, "24728125": {"Id": "24728125", "PostTypeId": "2", "Body": "<p>Omitting the word <code>virtual</code> does not make the function non-virtual. It does reduce the verbosity, the amount of visual noise, or in short, the way that the source code text can make an impression of just being too long-winded without any specific part of it introducing anything really new that can capture the reader's attention so that it all appears more or less like a gray mass of text, which of course can lead to some important details being overlooked, which is to say, inadvertently ignored. The <code>override</code> keyword is preferable.</p>\n", "LastActivityDate": "2014-07-14T00:24:36.360", "CommentCount": "3", "CreationDate": "2014-07-14T00:24:36.360", "ParentId": "24728093", "Score": "9", "OwnerUserId": "464581"}});