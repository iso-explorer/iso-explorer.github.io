post_cb({"37501982": {"ViewCount": "69", "Body": "<p>We know that to create a \"common\" pointer to a function we can do for example:</p>\n<pre><code>void fun();\nvoid (*ptr)() = fun;\n</code></pre>\n<p>The name of a function is also the address where the function start. So I do not need to use the address operator &amp; like this:</p>\n<pre><code>void (*ptr)() = &amp;fun;\n</code></pre>\n<p>Now for a pointer to a member function on the contrary I must use the address operator. For example for a class A with a pointer to member function ptr and a function fun() I must write:</p>\n<pre><code>void(A::*ptr)() = &amp;A::fun;\n</code></pre>\n<p>Why this difference? </p>\n", "AcceptedAnswerId": "37502124", "Title": "Address operator with pointer to member function", "CreationDate": "2016-05-28T17:37:25.623", "Id": "37501982", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2016-05-28T17:49:35.623", "Score": "1", "OwnerUserId": "4681099", "Tags": "<c++><class><pointers>", "AnswerCount": "3"}, "37502124": {"Id": "37502124", "PostTypeId": "2", "Body": "<p>It is because now that function is defined inside the class. Pointer to member function  holds the \"relative address\" of where the function is in the class layout and so you have to access it that way. </p>\n<p>In case of static, it has no this pointer and it behaves like a global function and so, you can access it like normal function pointer.</p>\n", "LastActivityDate": "2016-05-28T17:49:35.623", "CommentCount": "5", "CreationDate": "2016-05-28T17:49:35.623", "ParentId": "37501982", "Score": "0", "OwnerUserId": "4183255"}, "37502106": {"Id": "37502106", "PostTypeId": "2", "Body": "<p>According to the C++ standard: </p>\n<blockquote>\n<p id=\"so_37501982_37502106_0\"><strong>4.3 Function-to-pointer conversion</strong> [conv.func]</p>\n<p id=\"so_37501982_37502106_1\">An lvalue of function type <code>T</code> can be converted to a prvalue of type\n  \u201cpointer to <code>T</code>\u201d. The result is a pointer to the function.</p>\n<p id=\"so_37501982_37502106_2\">This conversion never applies to non-static member functions because\n  an lvalue that refers to a non-static member function cannot be\n  obtained.</p>\n</blockquote>\n", "LastActivityDate": "2016-05-28T17:47:34.270", "CommentCount": "0", "CreationDate": "2016-05-28T17:47:34.270", "ParentId": "37501982", "Score": "2", "OwnerUserId": "4698882"}, "bq_ids": {"n4140": {"so_37501982_37502106_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 12}, "so_37501982_37502106_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 12}}, "n3337": {"so_37501982_37502106_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 9}, "so_37501982_37502106_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 9}}, "n4659": {"so_37501982_37502106_2": {"length": 14, "quality": 0.9333333333333333, "section_id": 13}, "so_37501982_37502106_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 13}}}, "37502068": {"Id": "37502068", "PostTypeId": "2", "Body": "<p>I think difference is because <code>A::fun</code> is non-static member of class <code>A</code>. I mean, if your <code>fun()</code> is static member of <code>A</code> it will be like for ordinary function. Try it.</p>\n", "LastActivityDate": "2016-05-28T17:44:35.367", "CommentCount": "0", "CreationDate": "2016-05-28T17:44:35.367", "ParentId": "37501982", "Score": "0", "OwnerUserId": "4460500"}});