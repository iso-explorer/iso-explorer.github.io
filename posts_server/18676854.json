post_cb({"18676854": {"ViewCount": "450", "Body": "<p>I'm trying to compile a C++ file that is some 5.7 MB big. I'm building a 64-bit Linux executable on a 64-bit Linux system. g++ 4.7.2 is unfortunately not cooperative:</p>\n<pre><code>g++: internal compiler error: Killed (program cc1plus)\n</code></pre>\n<p>Observing with <code>top</code> indicates that the process reaches about 2.2 gigs of memory before that happens. I tried setting <code>--param gcc-min-expand=0</code> and also played with <code>--param gcc-min-heapsize</code> but that did not resolve the problem. Disabling optimization with <code>-O0</code> did not help either.</p>\n<p>I also tried compiling with clang, but the results were similar. It segfaulted after also exceeding 2 gigs of memory. I didn't try any extra options with clang because I'm not so familiar with it.</p>\n<p>The source file in question consists of C++11-style initialization of a few maps.</p>\n<pre><code>typedef std::map&lt;std::string, int&gt; StringToIntMap;\nStringToIntMap someData = {{\"SOMESTRING\", 1}, ..};\n</code></pre>\n<p>What I want is preferrably to compile the file with gcc, although if clang can work instead, I can also live with it. It would also be helpful to find out, from someone who knows the internals, just what is happening behind the scenes. If I have a map of 300 000 elements where strings are about 5 bytes long, and an <code>int</code> corresponds to each, that's a few megabytes of data, and I can't readily imagine how the initializer blows it up to the point of requiring gigabytes to compile.</p>\n<p>And to preempt comments that I should not have such a large source file. I know I can read the data from a data file at runtime, and that's what the program does now, but my use case is such that the program's execution time is the most important factor.</p>\n", "AcceptedAnswerId": "18676986", "Title": "Compiling larger (~6MB) map initializing C++ file with gcc", "CreationDate": "2013-09-07T19:07:25.777", "Id": "18676854", "CommentCount": "6", "PostTypeId": "1", "LastActivityDate": "2013-09-07T19:26:55.640", "Score": "5", "OwnerUserId": "1264727", "Tags": "<c++><gcc><g++><clang>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_18676854_18676986_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 47}}, "n4659": {"so_18676854_18676986_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 48}}}, "18676986": {"Id": "18676986", "PostTypeId": "2", "LastEditDate": "2013-09-07T19:26:55.640", "CommentCount": "3", "LastEditorUserId": "85371", "LastActivityDate": "2013-09-07T19:26:55.640", "CreationDate": "2013-09-07T19:20:48.740", "ParentId": "18676854", "Score": "4", "Body": "<p>The compiler is allowed to put implementation defined limits on the amount of supported levels/quantities in many language constructs.</p>\n<p>Appendix B lists the <em>minimum quantities</em> required for a <em>conforming compiler</em>.</p>\n<p>From Appendix B, bolding the most relevant ones:</p>\n<blockquote>\n<p id=\"so_18676854_18676986_0\">The limits may constrain quantities that include those described below or\n  others. The bracketed number following each quantity is recommended as the\n  minimum for that quantity. However, these quantities are only guidelines and do\n  not determine compliance.</p>\n<ul>\n<li>Nesting levels of compound statements, iteration control structures, and selection control structures\n  [256].</li>\n<li>Nesting levels of conditional inclusion [256].</li>\n<li>Pointer, array, and function declarators (in any combination) modifying a class, arithmetic, or incom-\n  plete type in a declaration [256].</li>\n<li>Nesting levels of parenthesized expressions within a full-expression [256].</li>\n<li>Number of characters in an internal identifier or macro name [1 024].</li>\n<li>Number of characters in an external identifier [1 024].</li>\n<li>External identifiers in one translation unit [65 536].</li>\n<li>Identifiers with block scope declared in one block [1 024].</li>\n<li>Macro identifiers simultaneously defined in one translation unit [65 536].</li>\n<li>Parameters in one function definition [256].</li>\n<li><strong>Arguments in one function call [256].</strong></li>\n<li>Parameters in one macro definition [256].</li>\n<li>Arguments in one macro invocation [256].</li>\n<li>Characters in one logical source line [65 536].</li>\n<li>Characters in a string literal (after concatenation) [65 536].</li>\n<li>Size of an object [262 144].</li>\n<li>Nesting levels for #include files [256].</li>\n<li>Case labels for a switch statement (excluding those for any nested switch statements) [16 384].</li>\n<li>Data members in a single class [16 384].</li>\n<li>Enumeration constants in a single enumeration [4 096].</li>\n<li>Levels of nested class definitions in a single member-specification [256]</li>\n<li>Functions registered by atexit() [32].</li>\n<li>Functions registered by at_quick_exit() [32].</li>\n<li>Direct and indirect base classes [16 384].</li>\n<li>Direct base classes for a single class [1 024].</li>\n<li>Members declared in a single class [4 096].</li>\n<li>Final overriding virtual functions in a class, accessible or not [16 384].</li>\n<li>Direct and indirect virtual bases of a class [1 024].</li>\n<li>Static members of a class [1 024].</li>\n<li>Friend declarations in a class [4 096].</li>\n<li>Access control declarations in a class [4 096].</li>\n<li><em>Member initializers in a constructor definition [6 144].</em></li>\n<li>Scope qualifications of one identifier [256].</li>\n<li>Nested external specifications [1 024].</li>\n<li>Recursive constexpr function invocations [512].</li>\n<li>Template arguments in a template declaration [1 024].</li>\n<li>Recursively nested template instantiations, including substitution during template argument deduction (14.8.2) [1 024].</li>\n<li>Handlers per try block [256].</li>\n<li>Throw specifications on a single function declaration [256].</li>\n<li>Number of placeholders (20.8.9.1.4) [10]</li>\n</ul>\n</blockquote>\n<p>Now, initializer lists are actually just 'constructed' from a number of arguments and apparently GCC doesn't quite support the quantity/volume you provided. </p>\n<p>There might be options in the man page to alleviate this:</p>\n<ul>\n<li><code>-mlarge-data</code> (which is the default)</li>\n<li><code>-mlarge-text</code> (also the default)</li>\n</ul>\n", "OwnerUserId": "85371"}});