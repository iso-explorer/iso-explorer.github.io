post_cb({"bq_ids": {"n4140": {"so_33845965_33845965_0": {"length": 12, "quality": 0.5714285714285714, "section_id": 7239}}, "n3337": {"so_33845965_33845965_0": {"length": 12, "quality": 0.5714285714285714, "section_id": 6983}}, "n4659": {"so_33845965_33845965_0": {"length": 12, "quality": 0.5714285714285714, "section_id": 8748}}}, "33845965": {"ViewCount": "56", "Body": "<p>Concerning the safety of accessing an object through a pointer of type <code>AliasedType*</code>, the C++11 standard states that the following is safe (\u00a73.10.10):</p>\n<blockquote>\n<p id=\"so_33845965_33845965_0\">AliasedType is an aggregate type or a union type which holds one of the aforementioned types as an element or non-static member (including, recursively, elements of subaggregates and non-static data members of the contained unions).</p>\n</blockquote>\n<p>I totally get the union part, but what exactly does that tell me about aggregate types? I (think I) know that I can convert freely between pointers to an aggregate type and pointers to its first member, but this rule seems to allow more casting.</p>\n<p>I tried the following:</p>\n<pre><code>struct bar {\n  int a;\n  float b;\n  int c;\n};\n\nint main() {\n  bar s {1,2,3};\n  cout &lt;&lt; hex &lt;&lt; ((bar*)&amp;s.b)-&gt;a &lt;&lt; endl;\n}\n</code></pre>\n<p>The result was 40000000, which means I got the representation of <code>b</code> as int, but somehow I doubt that this should be defined behaviour?</p>\n", "Title": "reinterpret_cast to aggregate type in C++", "CreationDate": "2015-11-21T16:49:39.807", "LastActivityDate": "2015-11-21T17:53:48.110", "CommentCount": "2", "LastEditDate": "2015-11-21T17:53:48.110", "PostTypeId": "1", "LastEditorUserId": "1531083", "Id": "33845965", "Score": "1", "OwnerUserId": "1531083", "Tags": "<c++>", "AnswerCount": "1"}, "33846058": {"Id": "33846058", "PostTypeId": "2", "Body": "<p>It's not defined behavior.  C-style casts can be anything and in this case it's a reinterpret_cast.  This cast tells the compiler, \"I know what I'm doing even though you might think otherwise and want to tell me about it.\"  But in this case the compiler is right and you are wrong...but the compiler listens and lets you shoot yourself in the temple.</p>\n", "LastActivityDate": "2015-11-21T16:57:32.960", "CommentCount": "1", "CreationDate": "2015-11-21T16:57:32.960", "ParentId": "33845965", "Score": "0", "OwnerUserId": "301883"}});