post_cb({"43481206": {"CommentCount": "10", "AcceptedAnswerId": "43481308", "PostTypeId": "1", "LastEditorUserId": "1773011", "CreationDate": "2017-04-18T20:03:25.340", "LastActivityDate": "2017-04-18T20:47:07.843", "LastEditDate": "2017-04-18T20:14:23.670", "ViewCount": "83", "FavoriteCount": "2", "Title": "Can move constructor take arguments other than the class itself?", "Id": "43481206", "Score": "1", "Body": "<p>Basically, the argument of the move constructor is the class itself.</p>\n<p>However, if I want to construct an object of the class from a lvalue without copy operation can I do like this?</p>\n<pre><code>class A{\n   A(const LargeDataType&amp; inData):data(inData) {} // constructor 1\n   A(LargeDataType&amp;&amp; inData):data(std::move(inData)) {} // constructor 2\n   private:\n        LargeDataType data;\n};\n</code></pre>\n<p>To use it:</p>\n<p>Method 1:</p>\n<pre><code>LargeDataType outData = 100;\nA objA(std::move(outData)); // call constructor 2\n</code></pre>\n<p>Method 2 (If constructor 2 was not implemented):</p>\n<pre><code>LargeDataType outData = 100;\nA objA(std::move(outData)); // call constructor 1\n</code></pre>\n<p>In this way, there is no copy operation when constructing the objA. My questions are:</p>\n<ol>\n<li><p>Is this legal to create a move constructor like this? </p></li>\n<li><p>This is more efficient than traditional constructor because no copy needed during objA creation?</p></li>\n<li><p>Whether method 2 could be better and has the same efficiency as the method 1?</p></li>\n</ol>\n<p>Thanks a lot!</p>\n", "Tags": "<c++><visual-studio><c++11><move-semantics><move-constructor>", "OwnerUserId": "1773011", "AnswerCount": "1"}, "43481308": {"ParentId": "43481206", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>What you have is not a move constructor. It is just a constructor that takes rvalue references as arguments. The are perfectly fine constructors but they are not move constructors.</p>\n<p>From the C++11 Standard (12.8/3):</p>\n<blockquote>\n<p id=\"so_43481206_43481308_0\">A non-template constructor for class <code>X</code> is a move constructor if its first parameter is of type <code>X&amp;&amp;</code>, <code>const X&amp;&amp;</code>, <code>volatile X&amp;&amp;</code>, or <code>const volatile X&amp;&amp;</code>, and either there are no other parameters or else all other parameters have default arguments (8.3.6).</p>\n</blockquote>\n<p>Only</p>\n<pre><code>A(A&amp;&amp; a) { ... }\nA(const A&amp;&amp; a) { ... }\nA(volatile A&amp;&amp; a) { ... }\nA(volatile const A&amp;&amp; a) { ... }\n</code></pre>\n<p>maybe called move constructors.</p>\n<p>If you have parameters with default values in addition to the above, they also qualify as move constructors. E.g.</p>\n<pre><code>A(A&amp;&amp; a, T arg = {}) { ... }\n</code></pre>\n", "OwnerUserId": "434551", "LastEditorUserId": "434551", "LastEditDate": "2017-04-18T20:47:07.843", "Id": "43481308", "Score": "1", "CreationDate": "2017-04-18T20:09:20.847", "LastActivityDate": "2017-04-18T20:47:07.843"}, "bq_ids": {"n4140": {"so_43481206_43481308_0": {"section_id": 452, "quality": 0.96, "length": 24}}, "n3337": {"so_43481206_43481308_0": {"section_id": 443, "quality": 0.96, "length": 24}}, "n4659": {"so_43481206_43481308_0": {"section_id": 475, "quality": 0.96, "length": 24}}}});