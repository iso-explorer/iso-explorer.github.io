post_cb({"49044571": {"Id": "49044571", "PostTypeId": "2", "Body": "<p>Instead of checking if the difference is 0, just check if they are equal. It will give you the same result, <strong>BUT</strong> it is not going to tell you if you strings are different but only if your strings are stored in the same place (two identical strings can be stored in different places and will look different with your test).</p>\n", "LastActivityDate": "2018-03-01T07:23:50.197", "Score": "2", "CreationDate": "2018-03-01T07:23:50.197", "ParentId": "49043732", "CommentCount": "4", "OwnerUserId": "9077457"}, "49043732": {"ViewCount": "174", "Body": "<p>I just created this function to check the equality between two strings by subtracting their Integer values</p>\n<pre><code>int EQ(const char* CString1, const char* CString2)\n{\n    return CString1 - CString2 == 0;\n}\n</code></pre>\n<p>However, I'm not sure if this is a safe way to check for <code>char*</code> Strings</p>\n<p>It won't work with arrays cause they've different integers so I created other function for that purpose</p>\n<pre><code>int EQA(const char* CString1, const char* CString2){\n    if(CString1 == NULL || CString2 == NULL)\n        return 0;\n    int i = strlen(CString1);\n    if(i != strlen(CString2))\n        return 0;\n    while(i&gt;=0){\n        if(CString1[i] != CString2[i])\n            return 0;\n        --i;\n    }\n    return 1;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_49043732_49043732_0\"><em><strike>I didn't try to optimize my second function too much</strike></em></p>\n</blockquote>\n<p>But when checking on <code>char*</code>, why would I use <code>EQA()</code> or <code>strcmp()</code> over <code>EQ()</code>?</p>\n<p>the first one <strong>EQ()</strong> is much <strong>faster</strong> than any other standard function I used before<br>So I really <strong>liked</strong> using it</br></p>\n<p>I tested it on other machines and it <strong>worked</strong> but the Integers values of <code>char*</code> <em>differ</em>, also<br>\nnoticed that these integers depend on which variable is <em>declared first</em> in the code but it's the <strong>same</strong> integer if they have the <strong>same</strong> string which makes this function works perfectly, So does it <strong><em>depends</em></strong> on the <strong>compiler</strong>?</br></p>\n<p>and why <strong>different</strong> integers?, Is it still <strong>safe</strong>?</p>\n<p><strong>EDIT</strong>: Some answers focused on debugging my <strong>2nd</strong> example rather than answer my <strong>question</strong>, So I edited it.</p>\n", "AcceptedAnswerId": "49043772", "Title": "Is it safe using return String1 - String2 == 0 for equality checking?", "CreationDate": "2018-03-01T06:22:28.157", "LastActivityDate": "2018-03-02T14:40:15.633", "CommentCount": "8", "LastEditDate": "2018-03-02T14:40:15.633", "PostTypeId": "1", "LastEditorUserId": "8524922", "Id": "49043732", "Tags": "<c++><c>", "Score": "0", "OwnerUserId": "8524922", "ClosedDate": "2018-03-01T09:56:38.190", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_49043732_49043771_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 6143}}, "n3337": {"so_49043732_49043771_1": {"length": 11, "quality": 0.9166666666666666, "section_id": 5907}}, "n4659": {"so_49043732_49043771_1": {"length": 12, "quality": 1.0, "section_id": 7639}}}, "49043771": {"Id": "49043771", "PostTypeId": "2", "Body": "<p>From <a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.5.6p9\" rel=\"nofollow noreferrer\">6.5.6p9</a> (From C standard - N1570 <a class=\"post-tag\" href=\"/questions/tagged/c11\" rel=\"tag\" title=\"show questions tagged 'c11'\">c11</a>) </p>\n<blockquote>\n<p id=\"so_49043732_49043771_0\">When two pointers are subtracted,<strong>both shall point to elements of the same array object, or one past the last element of the array object;</strong> the result is the difference of the subscripts of the two array elements. The size of the result is implementation-defined, and its type (a signed integer type) is ptrdiff_t defined in the  header.</p>\n</blockquote>\n<p>And also in <a class=\"post-tag\" href=\"/questions/tagged/c%2b%2b\" rel=\"tag\" title=\"show questions tagged 'c++'\">c++</a> from <a href=\"http://eel.is/c++draft/expr.add#5\" rel=\"nofollow noreferrer\">standard</a> :-</p>\n<blockquote>\n<p id=\"so_49043732_49043771_1\">...If the expressions <code>P</code> and <code>Q</code> point to, respectively, elements <code>x[i]</code> and <code>x[j]</code> of the same array object <code>x</code>, the expression <code>P - Q</code> has the value \n  <code>i\u2212j</code>; otherwise, the behavior is undefined.</p>\n</blockquote>\n<p>This is not right given this section of the standard.(You can not ensure they are pointing to same location or different positions of same array as mentioned above) You have <a href=\"https://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow noreferrer\">undefined behavior</a> on your code when it doesn't follow the criteria mentioned above.</p>\n<p>Also you can't check equality of two strings (nul terminated <code>char</code> arrays in <a class=\"post-tag\" href=\"/questions/tagged/c\" rel=\"tag\" title=\"show questions tagged 'c'\">c</a>) subtracting their addresses - how can it check the equality of the content that is there in the address? It can't. Standard didn't provide <code>strcmp</code> for nothing - it is in cases like these you can use it to compare the content of the string. </p>\n", "LastEditorUserId": "3796113", "LastActivityDate": "2018-03-01T06:56:28.743", "Score": "5", "CreationDate": "2018-03-01T06:25:47.597", "ParentId": "49043732", "CommentCount": "3", "OwnerUserId": "3796113", "LastEditDate": "2018-03-01T06:56:28.743"}, "49043772": {"Id": "49043772", "PostTypeId": "2", "Body": "<p>Two strings lexicographically equal doesn't mean that they are stored at the same memory location. Subtracting their addresses to compare them may give some erroneous results. Pointer subtraction is meaningless if two pointers doesn't point to elements of the same array or one past the last element of the array.<br>\nI would suggest to use standard function <code>strcmp</code> for lexicographic string comparison.  </br></p>\n", "LastEditorUserId": "2455888", "LastActivityDate": "2018-03-01T09:04:00.610", "Score": "8", "CreationDate": "2018-03-01T06:25:57.317", "ParentId": "49043732", "CommentCount": "1", "OwnerUserId": "2455888", "LastEditDate": "2018-03-01T09:04:00.610"}, "49043761": {"Id": "49043761", "PostTypeId": "2", "Body": "<p>No.</p>\n<p>You can have two copies of the same string at two different locations in memory but your method would say they are different.</p>\n<pre><code>char *s1 = \"Hello\";\nchar *s2 = strdup(s1);\nprintf(\"%d\\n\", strcmp(s1, s2)); /* prints 0 */\nprintf(\"%d\\n\", s1-s2); /* does not print 0 */\n</code></pre>\n<p>In addition, your <code>EQA</code> function is horribly buggy: <code>EQA(\"Hello\", \"h\")</code> is going to access memory before the CString2 pointer. Also consider what if CString2 is NULL?</p>\n<p>Are you sure this <code>while(i&gt;0 &amp;&amp; --i)</code> checks position 0? I think it will say \"Hello\" and \"Jello\" are the same... (confirmed. position 0 not checked)</p>\n", "LastEditorUserId": "857132", "LastActivityDate": "2018-03-01T06:57:47.373", "Score": "5", "CreationDate": "2018-03-01T06:24:36.630", "ParentId": "49043732", "CommentCount": "1", "OwnerUserId": "857132", "LastEditDate": "2018-03-01T06:57:47.373"}});