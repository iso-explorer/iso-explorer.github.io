post_cb({"8697019": {"Id": "8697019", "PostTypeId": "2", "Body": "<p><strong>Details on return values and their meaning</strong></p>\n<p>Per 3.6.1 (<code>[basic.start.main]</code>):</p>\n<blockquote>\n<p id=\"so_4207134_8697019_0\">A return statement in <code>main</code> has the effect of leaving the <code>main</code> function (destroying any objects with automatic storage duration) and calling <code>std::exit</code> with the return value as the argument. If control reaches the end of <code>main</code> without encountering a <code>return</code> statement, the effect is that of executing</p>\n<pre><code>return 0;\n</code></pre>\n</blockquote>\n<p>The behavior of <code>std::exit</code> is detailed in section 18.5 (<code>[support.start.term]</code>), and describes the status code:</p>\n<blockquote>\n<p id=\"so_4207134_8697019_1\">Finally,  control is returned to the host environment.   If  status is zero or <code>EXIT_SUCCESS</code>, an implementation-defined form of the status successful termination is returned. If status is <code>EXIT_FAILURE</code>, an implementation-defined  form of the status unsuccessful termination is returned.  Otherwise the status returned is implementation-defined.</p>\n</blockquote>\n", "LastActivityDate": "2012-01-02T02:46:11.963", "CommentCount": "0", "CreationDate": "2012-01-02T02:46:11.963", "ParentId": "4207134", "Score": "2", "OwnerUserId": "103167"}, "44859345": {"Id": "44859345", "PostTypeId": "2", "Body": "<p>The exact wording of the latest published standard (C++14) is:</p>\n<blockquote>\n<p id=\"so_4207134_44859345_0\">An implementation  shall allow both</p>\n<ul>\n<li><p id=\"so_4207134_44859345_1\">a function of <code>()</code> returning <code>int</code> and</p></li>\n<li><p id=\"so_4207134_44859345_2\">a function of <code>(int</code>, pointer to pointer to <code>char)</code> returning <code>int</code></p></li>\n</ul>\n<p id=\"so_4207134_44859345_3\">as the type of <code>main</code>.</p>\n</blockquote>\n<p>This makes it clear that alternative spellings are permitted so long as the type of <code>main</code> is the type <code>int()</code> or <code>int(int, char**)</code>. So the following are also permitted:</p>\n<ul>\n<li><code>int main(void)</code></li>\n<li><code>auto main() -&gt; int</code></li>\n<li><code>int   main (    )</code></li>\n<li><code>signed int main()</code></li>\n<li><code>typedef char **a; typedef int b, e; e main(b d, a c)</code></li>\n</ul>\n", "LastActivityDate": "2017-07-01T09:22:40.490", "CommentCount": "2", "CreationDate": "2017-07-01T09:22:40.490", "ParentId": "4207134", "Score": "3", "OwnerUserId": "1505939"}, "4207467": {"Id": "4207467", "PostTypeId": "2", "Body": "<p>The two valid mains are int main() and int main(int, char*[])  Any thing else may or may not compile.  If main doesn't explicitly return a value 0 is implicitly returned.</p>\n", "LastActivityDate": "2010-11-17T17:49:03.543", "CommentCount": "3", "CreationDate": "2010-11-17T17:49:03.543", "ParentId": "4207134", "Score": "3", "OwnerUserId": "92601"}, "bq_ids": {"n4140": {"so_4207134_4211927_0": {"length": 12, "quality": 0.7058823529411765, "section_id": 7146}, "so_4207134_44859345_2": {"length": 7, "quality": 1.0, "section_id": 7146}, "so_4207134_4211927_1": {"length": 20, "quality": 0.9523809523809523, "section_id": 7146}, "so_4207134_8697019_0": {"length": 26, "quality": 1.0, "section_id": 7149}, "so_4207134_8697019_1": {"length": 23, "quality": 0.8846153846153846, "section_id": 6805}}, "n3337": {"so_4207134_4211927_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 6890}, "so_4207134_44859345_2": {"length": 6, "quality": 0.8571428571428571, "section_id": 3073}, "so_4207134_8697019_1": {"length": 23, "quality": 0.8846153846153846, "section_id": 6560}, "so_4207134_8697019_0": {"length": 26, "quality": 1.0, "section_id": 6893}, "so_4207134_4211927_1": {"length": 20, "quality": 0.9523809523809523, "section_id": 6890}}, "n4659": {"so_4207134_4211927_0": {"length": 12, "quality": 0.7058823529411765, "section_id": 8647}, "so_4207134_44859345_2": {"length": 7, "quality": 1.0, "section_id": 8647}, "so_4207134_4211927_1": {"length": 20, "quality": 0.9523809523809523, "section_id": 8647}, "so_4207134_8697019_0": {"length": 21, "quality": 0.8076923076923077, "section_id": 8650}, "so_4207134_8697019_1": {"length": 23, "quality": 0.8846153846153846, "section_id": 8296}}}, "4211927": {"Id": "4211927", "PostTypeId": "2", "Body": "<p>From Standard docs., <em>3.6.1.2 Main Function</em>,</p>\n<blockquote>\n<p id=\"so_4207134_4211927_0\"><strong>It shall have a return\n  type of type int, but otherwise its type is implementation-defined.</strong> All implementations shall allow both of the following\n  definitions of main:</p>\n</blockquote>\n<p><code>int main() { / ... / }</code> and\n<code>int main(int argc, char* argv[]) { / ... / }</code></p>\n<blockquote>\n<p id=\"so_4207134_4211927_1\">In the latter form <code>argc</code> shall be the <strong>number of arguments passed to the program</strong> from the environment in which the\n  program is run.If argc is nonzero <strong>these arguments shall be supplied in argv[0] through argv[argc-1] as pointers to\n  the initial characters of null-terminated multibyte strings</strong>.....</p>\n</blockquote>\n<p>Hope that helps..</p>\n", "LastActivityDate": "2010-11-18T05:21:18.127", "CommentCount": "2", "CreationDate": "2010-11-18T05:21:18.127", "ParentId": "4207134", "Score": "11", "OwnerUserId": "249490"}, "4207223": {"Id": "4207223", "PostTypeId": "2", "Body": "<p>The <code>main</code> function must be declared as a non-member function in the global namespace.  This means that it cannot be a static or non-static member function of a class, nor can it be placed in a namespace (even the unnamed namespace).  </p>\n<p>The name <code>main</code> is not reserved in C++ except as a function in the global namespace.  You are free to declare other entities named <code>main</code>, including among other things, classes, variables, enumerations, member functions, and non-member functions not in the global namespace.</p>\n<p>You can declare a function named <code>main</code> as a member function or in a namespace, but such a function would not be the <code>main</code> function that designates where the program starts.</p>\n<p>The <code>main</code> function cannot be declared as <code>static</code> or <code>inline</code>.  It also cannot be overloaded; there can be only one function named <code>main</code> in the global namespace.</p>\n<p>The <code>main</code> function cannot be used in your program: you are not allowed to call the <code>main</code> function from anywhere in your code, nor are you allowed to take its address.</p>\n<p><strong>The return type of <code>main</code> must be <code>int</code></strong>.  No other return type is allowed (this rule is in bold because it is very common to see incorrect programs that declare <code>main</code> with a return type of <code>void</code>; this is probably the most frequently violated rule concerning the <code>main</code> function).</p>\n<p>There are two declarations of <code>main</code> that must be allowed:</p>\n<pre><code>int main()               // (1)\nint main(int, char*[])   // (2)\n</code></pre>\n<p>In <strong>(1)</strong>, there are no parameters.  </p>\n<p>In <strong>(2)</strong>, there are two parameters and they are conventionally named <code>argc</code> and <code>argv</code>, respectively.  <code>argv</code> is a pointer to an array of C strings representing the arguments to the program. <code>argc</code> is the number of arguments in the <code>argv</code> array.  </p>\n<p>Usually, <code>argv[0]</code> contains the name of the program, but this is not always the case.  <code>argv[argc]</code> is guaranteed to be a null pointer.</p>\n<p>Note that since an array type argument (like <code>char*[]</code>) is really just a pointer type argument in disguise, the following two are both valid ways to write <strong>(2)</strong> and they both mean exactly the same thing:</p>\n<pre><code>int main(int argc, char* argv[])\nint main(int argc, char** argv)\n</code></pre>\n<p>Some implementations may allow other types and numbers of parameters; you'd have to check the documentation of your implementation to see what it supports.</p>\n<p><code>main()</code> is expected to return zero to indicate success and non-zero to indicate failure.  You are not required to explicitly write a <code>return</code> statement in <code>main()</code>:  if you let <code>main()</code> return without an explicit <code>return</code> statement, it's the same as if you had written <code>return 0;</code>.  The following two <code>main()</code> functions have the same behavior:</p>\n<pre><code>int main() { }\nint main() { return 0; }\n</code></pre>\n<p>There are two macros, <code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code>, defined in <code>&lt;cstdlib&gt;</code> that can also be returned from <code>main()</code> to indicate success and failure, respectively.</p>\n<p>The value returned by <code>main()</code> is passed to the <code>exit()</code> function, which terminates the program.</p>\n<p>Note that all of this applies only when compiling for a hosted environment (informally, an environment where you have a full standard library and there's an OS running your program).  It is also possible to compile a C++ program for a freestanding environment (for example, some types of embedded systems), in which case startup and termination are wholly implementation-defined and a <code>main()</code> function may not even be required.  If you're writing C++ for a modern desktop OS, though, you're compiling for a hosted environment.</p>\n", "LastEditorUserId": "151292", "LastActivityDate": "2016-11-23T18:24:18.407", "Score": "145", "CreationDate": "2010-11-17T17:19:25.380", "ParentId": "4207134", "CommentCount": "13", "OwnerUserId": "151292", "LastEditDate": "2016-11-23T18:24:18.407"}, "4207134": {"ViewCount": "65469", "Body": "<p>What is the proper signature of the <code>main</code> function in C++? What is the correct return type, and what does it mean to return a value from <code>main</code>? What are the allowed parameter types, and what are their meanings? </p>\n<p>Is this system-specific? Have those rules changed over time? What happens if I violate them?</p>\n", "AcceptedAnswerId": "4207223", "Title": "What is the proper declaration of main?", "CreationDate": "2010-11-17T17:12:00.033", "Id": "4207134", "CommentCount": "2", "FavoriteCount": "35", "PostTypeId": "1", "LastEditDate": "2010-11-18T17:15:33.413", "LastEditorUserId": "151292", "LastActivityDate": "2017-07-01T09:22:40.490", "Score": "116", "OwnerUserId": "252000", "Tags": "<c++><main><c++-faq>", "AnswerCount": "5"}});