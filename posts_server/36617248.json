post_cb({"36617331": {"ParentId": "36617248", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is the expected behavior of <a href=\"http://en.cppreference.com/w/cpp/container/map/operator_at\" rel=\"nofollow\"><code>std::map::operator[]</code></a>:</p>\n<blockquote>\n<p id=\"so_36617248_36617331_0\">Returns a reference to the value that is mapped to a key equivalent to\n  key, performing an insertion if such key does not already exist. </p>\n<p id=\"so_36617248_36617331_1\">If an insertion is performed, the mapped value is value-initialized\n  (default-constructed for class types, zero-initialized otherwise) and\n  a reference to it is returned.</p>\n</blockquote>\n<p>For <code>double*</code>, the zero-initialized value is a null pointer.</p>\n<p>You could modify the value inserted by <code>std::map::operator[]</code>:</p>\n<pre><code>testMap[sym] = ...something...;\n</code></pre>\n<p>or specify the key and value by <code>std::map::insert</code>:</p>\n<pre><code>testMap.insert({sym, ...something...});\n</code></pre>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2016-04-14T08:24:12.977", "Id": "36617331", "Score": "4", "CreationDate": "2016-04-14T08:16:40.783", "LastActivityDate": "2016-04-14T08:24:12.977"}, "36617605": {"ParentId": "36617248", "CommentCount": "0", "Body": "<p>That is the way maps works.\nThe map must be check if the key is all raedy containt.\nUse find(key) for that. In your excample testMap[sym]; creates a new entry.</p>\n<pre><code>std::map&lt;std::string,double*&gt;::iterator it;\nit = testMap.find(\"A\");\nif ( it == testMap.end() )\n{ // create a new entry\n   testMap[\"A\"] = new double(1.0);\n}\n</code></pre>\n<p>Match fun\nHilko</p>\n", "OwnerUserId": "5324323", "PostTypeId": "2", "Id": "36617605", "Score": "0", "CreationDate": "2016-04-14T08:28:25.527", "LastActivityDate": "2016-04-14T08:28:25.527"}, "36617248": {"CommentCount": "4", "ViewCount": "64", "PostTypeId": "1", "LastEditorUserId": "3309790", "CreationDate": "2016-04-14T08:11:55.977", "LastActivityDate": "2016-04-14T08:45:57.810", "Title": "Why does map create new entries with operator[]", "AcceptedAnswerId": "36617331", "LastEditDate": "2016-04-14T08:29:52.333", "Id": "36617248", "Score": "-3", "Body": "<p>I'm new to c++ and have a simple program as below</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nint main()\n{\n std::map&lt;std::string, double*&gt; testMap;\n std::vector&lt;std::string&gt; v = {\"A\", \"B\", \"C\"};\n for(size_t i=0;i&lt;v.size();++i)\n {\n   std::string sym = v[i];\n   double* d = testMap[sym];\n   if(!d) continue;\n   cout &lt;&lt; \"this\";\n }\n for(std::map&lt;std::string, double*&gt;::iterator  itr=testMap.begin();itr!=testMap.end();++itr)\n {\n    cout &lt;&lt; itr-&gt;first &lt;&lt; \" \" &lt;&lt; itr-&gt;second &lt;&lt; std::endl;\n }\n\n return 0;\n}\n</code></pre>\n<p>and its O/P is </p>\n<pre><code>sh-4.3$ main                                                                                                                                                  \nA 0                                                                                                                                                           \nB 0                                                                                                                                                           \nC 0  \n</code></pre>\n<p>My question is why map is creating new elements with null double pointers</p>\n", "Tags": "<c++><pointers>", "OwnerUserId": "1599840", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_36617248_36617331_0": {"section_id": 763, "quality": 0.5714285714285714, "length": 8}, "so_36617248_36617442_4": {"section_id": 1011, "quality": 0.8888888888888888, "length": 8}, "so_36617248_36617442_2": {"section_id": 1007, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_36617248_36617331_0": {"section_id": 750, "quality": 0.5714285714285714, "length": 8}, "so_36617248_36617442_4": {"section_id": 996, "quality": 0.8888888888888888, "length": 8}, "so_36617248_36617442_2": {"section_id": 992, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_36617248_36617331_0": {"section_id": 823, "quality": 0.5714285714285714, "length": 8}, "so_36617248_36617442_4": {"section_id": 802, "quality": 0.5555555555555556, "length": 5}, "so_36617248_36617442_2": {"section_id": 802, "quality": 0.5555555555555556, "length": 5}}}, "36617442": {"ParentId": "36617248", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>When you write <code>testMap[sym]</code> a check is done whether <code>sym</code> exists in map, and if it does then reference to it is returned. If it does not then new entry value initialized is inserted into map with key <code>sym</code>, in your case it is a null pointer.</p>\n<p>So if you dont want to have null vaules, then check if key exists with <a href=\"http://en.cppreference.com/w/cpp/container/map/find\" rel=\"nofollow\">std::map::find</a>, and compare to <code>std::map::end()</code>, instead of using <code>std::map::operator[]</code></p>\n<blockquote>\n<p id=\"so_36617248_36617442_0\">My question is why map is creating new elements with null double pointers</p>\n</blockquote>\n<p>this is how standard defines behaviour of <a href=\"http://en.cppreference.com/w/cpp/container/map/operator_at\" rel=\"nofollow\">std::map::operator[]</a></p>\n<p>n4140 23.4.4.3 map.access</p>\n<blockquote>\n<p id=\"so_36617248_36617442_1\">T&amp; operator[](const key_type&amp; x);</p>\n<p id=\"so_36617248_36617442_2\">Effects: If there is no key equivalent to x in the map, inserts\n  value_type(x, T()) into the map.</p>\n</blockquote>\n<p>and:</p>\n<blockquote>\n<p id=\"so_36617248_36617442_3\">T&amp; operator[](key_type&amp;&amp; x);</p>\n<p id=\"so_36617248_36617442_4\">Effects: If there is no key equivalent to x in the map, inserts value_type(std::move(x), T()) into\n  the map.</p>\n</blockquote>\n", "OwnerUserId": "471160", "LastEditorUserId": "471160", "LastEditDate": "2016-04-14T08:45:57.810", "Id": "36617442", "Score": "1", "CreationDate": "2016-04-14T08:21:28.593", "LastActivityDate": "2016-04-14T08:45:57.810"}});