post_cb({"44698195": {"CommentCount": "0", "AcceptedAnswerId": "44701336", "PostTypeId": "1", "LastEditorUserId": "1472253", "CreationDate": "2017-06-22T11:31:43.947", "LastActivityDate": "2017-11-16T19:55:50.917", "LastEditDate": "2017-11-16T19:55:50.917", "ViewCount": "528", "FavoriteCount": "2", "Title": "Is decltype(auto) for a structured binding supposed to be a reference?", "Id": "44698195", "Score": "26", "Body": "<p>Consider an example:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n#include &lt;tuple&gt;\n\nint main() {\n    auto tup = std::make_tuple(1, 2);\n    auto [ a, b ] = tup;\n    decltype(auto) e = a;\n    std::cout &lt;&lt; std::boolalpha &lt;&lt; std::is_reference_v&lt;decltype(e)&gt; &lt;&lt; std::endl;\n}\n</code></pre>\n<p><a href=\"https://wandbox.org/permlink/1dKQfkLgiXHNkBno\" rel=\"noreferrer\">clang</a> (output: <code>false</code>) and <a href=\"https://wandbox.org/permlink/1dKQfkLgiXHNkBno\" rel=\"noreferrer\">gcc</a> (output: <code>true</code>) are disagreeing in this simple case. Having in mind e.g. <a href=\"https://stackoverflow.com/q/44695684/4324224\">this Q&amp;As</a> should the <code>e</code> be a reference or is it a gcc bug? Or maybe the code is ill-formed?</p>\n", "Tags": "<c++><language-lawyer><c++1z><structured-bindings>", "OwnerUserId": "4324224", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_44698195_44701336_1": {"section_id": 5451, "quality": 0.8125, "length": 13}, "so_44698195_44701336_0": {"section_id": 3321, "quality": 0.5454545454545454, "length": 12}}, "n3337": {"so_44698195_44701336_0": {"section_id": 3191, "quality": 0.5454545454545454, "length": 12}}, "n4659": {"so_44698195_44701336_1": {"section_id": 6890, "quality": 0.875, "length": 14}, "so_44698195_44701336_2": {"section_id": 6867, "quality": 0.9285714285714286, "length": 13}, "so_44698195_44701336_0": {"section_id": 4040, "quality": 1.0, "length": 22}}}, "44701336": {"ParentId": "44698195", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The identifers <em>themselves</em> are references. From <a href=\"http://eel.is/c++draft/dcl.struct.bind#3\" rel=\"noreferrer\">[dcl.struct.bind]/3</a>:</p>\n<blockquote>\n<p id=\"so_44698195_44701336_0\">Given the type T<sub>i</sub> designated by <code>std\u200b::\u200btuple_\u00adelement&lt;i, E&gt;\u200b::\u200btype</code>, each v<sub>i</sub> is a variable of type \u201creference to T<sub>i</sub>\u201d initialized with the initializer, where the reference is an lvalue reference if the initializer is an lvalue and an rvalue reference otherwise; the referenced type is T<sub>i</sub>.</p>\n</blockquote>\n<p>That is, <code>a</code> and <code>b</code> are both <code>int&amp;&amp;</code>.</p>\n<p>But the way <code>decltype(auto)</code> actually behaves comes from <a href=\"http://eel.is/c++draft/dcl.spec.auto#dcl.type.auto.deduct-5\" rel=\"noreferrer\">[dcl.type.auto.deduct]</a>:</p>\n<blockquote>\n<p id=\"so_44698195_44701336_1\">If the placeholder is the <code>decltype(auto)</code> type-specifier, <code>T</code> shall be the placeholder alone. The type deduced for <code>T</code> is determined as described in [dcl.type.simple], as though <code>e</code> had been the operand of the <code>decltype</code>.</p>\n</blockquote>\n<p>This wording is really awkward, but ultimately:</p>\n<pre><code>decltype(auto) e = a;\n~~~~~~~~~~~~~~\n</code></pre>\n<p>means:</p>\n<pre><code>decltype( a  ) e = a;\n         ~~~~\n</code></pre>\n<p>and <code>decltype(a)</code> means, from <a href=\"http://eel.is/c++draft/dcl.type.simple#4.1\" rel=\"noreferrer\">[dcl.type.simple]/4.1</a>:</p>\n<blockquote>\n<p id=\"so_44698195_44701336_2\">if <code>e</code> is an unparenthesized <em>id-expression</em> naming a structured binding ([dcl.struct.bind]), <code>decltype(e)</code> is <strong>the referenced type</strong> as given in the specification of the structured binding declaration;</p>\n</blockquote>\n<p>The <em>referenced type</em> of <code>a</code> is <code>int</code>, so <code>e</code> must be an <code>int</code>. Which means it's not a reference, and clang is correct. Filed <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81176\" rel=\"noreferrer\">81176</a>.</p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2017-06-22T14:02:55.223", "Id": "44701336", "Score": "17", "CreationDate": "2017-06-22T13:49:12.297", "LastActivityDate": "2017-06-22T14:02:55.223"}});