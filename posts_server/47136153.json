post_cb({"47136624": {"Id": "47136624", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_47136153_47136624_0\">Is argument-dependent lookup the only way val() can be found?</p>\n</blockquote>\n<p>Yes, it is the only way. To quote the holy standard at <a href=\"https://timsong-cpp.github.io/cppwp/n4659/namespace.memdef#3\" rel=\"noreferrer\">[namespace.memdef]/3</a>:</p>\n<blockquote>\n<p id=\"so_47136153_47136624_1\">If a friend declaration in a non-local class first declares a class,\n  function, class template or function template the friend is a member\n  of the innermost enclosing namespace. The friend declaration does not\n  by itself make the name visible to unqualified lookup or qualified lookup.</p>\n</blockquote>\n<p>So while <code>val</code> is a member of <code>foo</code>, it's not visible to lookup from the friend declaration alone. An out of class definition (which is also a declaration) is required to make it visible. For an inline definition (and no out-of-class declaration) it means ADL is the only way to call the function.</p>\n<hr>\n<p>As an added bonus, C++ did once have a concept of \"friend name injection\". That however has been removed, and the rules for ADL adjusted as a replacement. A more detailed overview can be found in WG21 paper <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1995/N0777.pdf\" rel=\"noreferrer\">N0777</a> (pdf).</p>\n</hr>", "LastEditorUserId": "817643", "LastActivityDate": "2017-11-06T16:15:02.730", "Score": "36", "CreationDate": "2017-11-06T12:02:58.230", "ParentId": "47136153", "CommentCount": "9", "OwnerUserId": "817643", "LastEditDate": "2017-11-06T16:15:02.730"}, "47136153": {"ViewCount": "1970", "Body": "<p>What is the fully qualified name of a friend function defined inside of a class?</p>\n<p>I recently saw an example analogous to the following. What is the fully qualified name of <code>val()</code> below?</p>\n<pre><code>#include &lt;iostream&gt;\n\nnamespace foo {\n    class A {\n        int x;\n    public:\n        A(int x = 0) : x(x) { }\n\n        friend int val(const A &amp;a) { return a.x; }\n    };\n}\n\nint main() {\n    foo::A a(42);\n\n    // val() found using ADL:\n    std::cout &lt;&lt; val(a) &lt;&lt; std::endl;\n\n    // foo::val(a); // error: 'val' is not a member of 'foo'\n    // foo::A::val(a); // error: 'val' is not a member of 'foo::A'\n\n    return 0;   \n}\n</code></pre>\n<p>Is argument-dependent lookup the only way <code>val()</code> can be found?</p>\n<p>Admittedly, this does not stem from a practical problem. I am simply looking to gain a better understanding.</p>\n", "AcceptedAnswerId": "47136624", "Title": "What is the fully qualified name of a friend function defined inside of a class?", "CreationDate": "2017-11-06T11:40:13.750", "Id": "47136153", "CommentCount": "0", "FavoriteCount": "7", "PostTypeId": "1", "LastActivityDate": "2017-11-06T16:15:02.730", "Score": "44", "OwnerUserId": "695132", "Tags": "<c++><name-lookup><fully-qualified-naming>", "AnswerCount": "2"}, "47136287": {"Id": "47136287", "PostTypeId": "2", "Body": "<p><strong>C++ Standard [7.3.1.2/3 (of ISO/IEC 14882:2011)]:</strong></p>\n<blockquote>\n<p id=\"so_47136153_47136287_0\">Every name first declared in a namespace is a member of that\n  namespace. <strong>If a friend declaration in a non-local class first declares\n  a class or function the friend class or function is a member of the\n  innermost enclosing namespace.</strong> <strong>The name of the friend is not found by\n  unqualified lookup (3.4.1) or by qualified lookup (3.4.3) until a\n  matching declaration is provided in that namespace scope (either\n  before or after the class definition granting friendship)</strong>. If a friend\n  function is called, its name may be found by the name lookup that\n  considers functions from namespaces and classes associated with the\n  types of the function arguments (3.4.2). If the name in a friend\n  declaration is neither qualified nor a template-id and the declaration\n  is a function or an elaborated-type-specifier, the lookup to determine\n  whether the entity has been previously declared <strong>shall not consider any\n  scopes outside the innermost enclosing namespace</strong>.</p>\n</blockquote>\n", "LastEditorUserId": "6935629", "LastActivityDate": "2017-11-06T12:26:56.587", "Score": "7", "CreationDate": "2017-11-06T11:46:28.943", "ParentId": "47136153", "CommentCount": "0", "OwnerUserId": "6935629", "LastEditDate": "2017-11-06T12:26:56.587"}, "bq_ids": {"n4140": {"so_47136153_47136287_0": {"length": 77, "quality": 0.9058823529411765, "section_id": 5485}, "so_47136153_47136624_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 176}, "so_47136153_47136624_1": {"length": 28, "quality": 0.9655172413793104, "section_id": 5485}}, "n3337": {"so_47136153_47136287_0": {"length": 81, "quality": 0.9529411764705882, "section_id": 5271}, "so_47136153_47136624_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 170}, "so_47136153_47136624_1": {"length": 20, "quality": 0.6896551724137931, "section_id": 5271}}, "n4659": {"so_47136153_47136287_0": {"length": 70, "quality": 0.8235294117647058, "section_id": 6920}, "so_47136153_47136624_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 181}, "so_47136153_47136624_1": {"length": 28, "quality": 0.9655172413793104, "section_id": 6920}}}});