post_cb({"bq_ids": {"n4140": {"so_15440833_15440852_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 3260}}, "n3337": {"so_15440833_15440852_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 3132}}}, "20020665": {"CommentCount": "0", "Body": "<p>I have a slightly simpler example to illustrate the same problem.</p>\n<pre><code>bash$ cat test.cpp\n#include &lt;iostream&gt;\nusing namespace std;\nint x = 0;\nint foo() \n{\n    cout &lt;&lt; \"foo\" &lt;&lt; endl;\n    return x++;\n}\nint bar()\n{\n    cout &lt;&lt; \"bar\" &lt;&lt; endl;\n    return x++;\n}\nvoid test_it(int a, int b)\n{\n    cout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; endl\n        &lt;&lt; \"b = \" &lt;&lt; b &lt;&lt; endl;\n\n}\nint main(int argc, const char *argv[])\n{\n    test_it(foo(),bar()); \n    return 0;\n}\n\nbash$ clang++ test.cpp &amp;&amp; ./a.out\nfoo\nbar\na = 0\nb = 1\nbash$ g++ test.cpp &amp;&amp; ./a.out\nbar\nfoo\na = 1\nb = 0\n</code></pre>\n", "CreationDate": "2013-11-16T16:15:11.563", "ParentId": "15440833", "Id": "20020665", "LastActivityDate": "2013-11-16T16:15:11.563", "PostTypeId": "2", "Score": "0", "OwnerUserId": "203329"}, "15440852": {"CommentCount": "4", "Body": "<blockquote>\n<p id=\"so_15440833_15440852_0\">Which one is true according to the C++11 standard ?</p>\n</blockquote>\n<p>Both are permissible. To quote the standard (\u00a78.3.6):</p>\n<blockquote>\n<p id=\"so_15440833_15440852_1\">The order of evaluation of function arguments is unspeci\ufb01ed.</p>\n</blockquote>\n", "CreationDate": "2013-03-15T19:41:49.840", "ParentId": "15440833", "Id": "15440852", "LastActivityDate": "2013-03-15T19:41:49.840", "PostTypeId": "2", "Score": "14", "OwnerUserId": "367273"}, "15440833": {"CreationDate": "2013-03-15T19:41:00.273", "ViewCount": "648", "Id": "15440833", "AcceptedAnswerId": "15440852", "Score": "7", "Title": "g++ vs intel/clang argument passing order?", "LastEditorUserId": "636019", "CommentCount": "1", "Body": "<p>Consider the following code (<a href=\"http://liveworkspace.org/code/JOaST%247\" rel=\"nofollow\">LWS</a>):</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;chrono&gt;\n\ninline void test(\n   const std::chrono::high_resolution_clock::time_point&amp; first, \n   const std::chrono::high_resolution_clock::time_point&amp; second)\n{\n   std::cout &lt;&lt; first.time_since_epoch().count() &lt;&lt; std::endl;\n   std::cout &lt;&lt; second.time_since_epoch().count() &lt;&lt; std::endl;\n}\n\nint main(int argc, char* argv[])\n{\n   test(std::chrono::high_resolution_clock::now(), \n        std::chrono::high_resolution_clock::now());\n   return 0;\n}\n</code></pre>\n<p>You have to run it several times because sometimes, there is no visible difference. But when there is a visible difference between the time of evaluation of <code>first</code> and <code>second</code>, the result is the following under g++ :</p>\n<pre><code>1363376239363175\n1363376239363174\n</code></pre>\n<p>and the following under intel and clang :</p>\n<pre><code>1363376267971435\n1363376267971436\n</code></pre>\n<p>It means that under g++, the <code>second</code> argument is evaluated first, and under intel and clang the <code>first</code> argument is evaluated first. </p>\n<p>Which one is true according to the C++11 standard?</p>\n", "Tags": "<c++><c++11><arguments><standards-compliance><chrono>", "LastEditDate": "2013-03-16T21:52:21.567", "LastActivityDate": "2013-11-16T16:15:11.563", "PostTypeId": "1", "AnswerCount": "2", "OwnerUserId": "882932"}});