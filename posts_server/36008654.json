post_cb({"36008882": {"ParentId": "36008654", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Counter question: Why would you want to allow it?</p>\n<p>If you need an outer class have access to an inner class' private internals, you can befriend:</p>\n<pre><code>    class Foo {\n    public:\n            class Frob {\n                    friend class Foo;\n                    int privateDataMember;\n            };\n\n            Foo () {\n                    Frob frob;\n                    frob.privateDataMember = 3735928559;\n            }\n    };\n</code></pre>\n<p>C++ has no device to unfriend, so allowing default private access to an outer class would steal you a class design tool and yield reduced default encapsulation.</p>\n", "OwnerUserId": "76722", "LastEditorUserId": "76722", "LastEditDate": "2016-03-15T11:07:36.447", "Id": "36008882", "Score": "5", "CreationDate": "2016-03-15T10:39:22.757", "LastActivityDate": "2016-03-15T11:07:36.447"}, "36008654": {"CommentCount": "0", "AcceptedAnswerId": "36008758", "CreationDate": "2016-03-15T10:29:58.780", "LastActivityDate": "2016-03-15T11:07:36.447", "PostTypeId": "1", "ViewCount": "3601", "FavoriteCount": "2", "Title": "C++ Outer class access Inner class's private - why forbidden", "Id": "36008654", "Score": "9", "Body": "<p>Hello I am wondering why C++ standard allows us in nested classes to access outer class's private fields, while it forbids to access inner class's private fields from the outer class. I understand, that this example:</p>\n<pre><code>class OuterClass{\npublic:\n    class InnerClass{\n    public:\n        void printOuterClass(OuterClass&amp; outer) {cout &lt;&lt; outer.m_dataToDisplay;};\n    };\nprivate:\n    int m_dataToDisplay;\n};\n</code></pre>\n<p>is fine, because thing, that Inner class sometimes can be complicated. But I think following scenario is also fine:</p>\n<pre><code>class Algorithm{\npublic:\n    class AlgorithmResults{\n    public:\n        void readAlgorithmResult();\n    private:\n        void writeAlgorithmResult();\n    };\n\n    void calculate(AlgorithmResults&amp; results, Arguments...){\n       //calculate stuff\n       results.writeAlgorithmResult(results);\n    }\n};\n</code></pre>\n<p>For me this structure makes perfect sense, although it is not allowed in C++. I also noticed, that for some time both were allowed in Java, but now second example is also forbidden.\nWhat is the reason, that first example is allowed and another is denied?</p>\n", "Tags": "<c++>", "OwnerUserId": "4764736", "AnswerCount": "3"}, "36008758": {"ParentId": "36008654", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Essentially, code <em>within</em> a scope has access to the things declared earlier in that scope (unless they're shadowed). Code <em>outside</em> a scope doesn't have access to things inside the scope. E.g. code after a curly braces block, does not have access to variables declared inside that block.</p>\n<hr>\n<p>For the second example, just make <code>Algorithm</code> a <code>friend</code> of <code>AlgorithmResults</code>:</p>\n<pre><code>class AlgorithmResults\n{\n    friend class Algorithm;\n</code></pre>\n</hr>", "OwnerUserId": "464581", "LastEditorUserId": "464581", "LastEditDate": "2016-03-15T10:40:06.153", "Id": "36008758", "Score": "15", "CreationDate": "2016-03-15T10:34:11.110", "LastActivityDate": "2016-03-15T10:40:06.153"}, "36008806": {"ParentId": "36008654", "CommentCount": "3", "Body": "<p>The nested classes could access outer class's private fields, because it's a member of the outer class, just same as the other members.</p>\n<p>From 11.7/1 Nested classes [class.access.nest]</p>\n<blockquote>\n<p id=\"so_36008654_36008806_0\">A nested class is a member and as such has the same access rights as any other member.</p>\n</blockquote>\n<p>On the other hand, the outer class doesn't have special access rights on the nested class, they're just normal relationship.</p>\n<blockquote>\n<p id=\"so_36008654_36008806_1\">The members of\n  an enclosing class have no special access to members of a nested class; the usual access rules (Clause 11)\n  shall be obeyed.</p>\n</blockquote>\n", "OwnerUserId": "3309790", "PostTypeId": "2", "Id": "36008806", "Score": "2", "CreationDate": "2016-03-15T10:36:41.143", "LastActivityDate": "2016-03-15T10:36:41.143"}, "bq_ids": {"n4140": {"so_36008654_36008806_0": {"section_id": 6700, "quality": 1.0, "length": 9}, "so_36008654_36008806_1": {"section_id": 6700, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_36008654_36008806_0": {"section_id": 6455, "quality": 1.0, "length": 9}, "so_36008654_36008806_1": {"section_id": 6455, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_36008654_36008806_0": {"section_id": 8174, "quality": 1.0, "length": 9}, "so_36008654_36008806_1": {"section_id": 8174, "quality": 0.9333333333333333, "length": 14}}}});