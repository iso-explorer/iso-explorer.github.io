post_cb({"24233822": {"ParentId": "24233796", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>C++11 has a special rule for <code>auto</code> and braced initialization which is inferred to <code>std::initializer_list</code>. In your case your choices are one of the following:</p>\n<pre><code>auto iter(t.begin());\nauto iter = t.begin();\n</code></pre>\n<p>The behavior is described at:</p>\n<blockquote>\n<h3>\u00a77.1.6.4/7 <code>auto</code> specifier [dcl.spec.auto]</h3>\n<p id=\"so_24233796_24233822_0\"><strong>Let T be the declared type of the variable</strong> or return type of the function. If the placeholder is the auto type-specifier, the deduced type is determined using the rules for template argument deduction. If the deduction is for a return statement and the initializer is a braced-init-list (8.5.4), the program is ill-formed. <strong>Otherwise, obtain P from T by replacing the occurrences of auto with</strong> either a new invented type template parameter U or, <strong>if the initializer is a braced-init-list, with std::initializer_- list</strong>. Deduce a value for U using the rules of template argument deduction from a function call (14.8.2.1), where P is a function template parameter type and the initializer is the corresponding argument. If the deduction fails, the declaration is ill-formed. Otherwise, the type deduced for the variable or return type is\n  obtained by substituting the deduced U into P.</p>\n</blockquote>\n<p>(emphasis mine).</p>\n<p>Scott Meyer has recently presented <a href=\"http://vimeo.com/channels/ndc2014/97318797\" rel=\"nofollow\">a talk</a> about this very problem. I'd recommend watching the video.</p>\n", "OwnerUserId": "493122", "LastEditorUserId": "493122", "LastEditDate": "2014-06-15T20:35:14.000", "Id": "24233822", "Score": "3", "CreationDate": "2014-06-15T20:27:58.563", "LastActivityDate": "2014-06-15T20:35:14.000"}, "24233827": {"ParentId": "24233796", "CommentCount": "1", "Body": "<p>When you use an initializer-list as the initializer with <code>auto</code>, the variable declared is deduced as an initializer list. In other words, <code>iter</code> is declared as <code>std::initializer_list&lt;vector&lt;int&gt;::iterator&gt;</code>, and not <code>vector&lt;int&gt;::iterator</code> as you might expect.</p>\n<p>Changing it to <code>auto iter = t.begin()</code> is the best way to proceed.</p>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "24233827", "Score": "4", "CreationDate": "2014-06-15T20:28:07.630", "LastActivityDate": "2014-06-15T20:28:07.630"}, "bq_ids": {"n4140": {"so_24233796_24233822_0": {"section_id": 5451, "quality": 0.9444444444444444, "length": 68}}, "n3337": {"so_24233796_24233822_0": {"section_id": 5245, "quality": 0.5277777777777778, "length": 38}}, "n4659": {"so_24233796_24233822_0": {"section_id": 6889, "quality": 0.625, "length": 45}}}, "24233796": {"CommentCount": "1", "AcceptedAnswerId": "24233827", "CreationDate": "2014-06-15T20:25:38.390", "LastActivityDate": "2014-06-15T20:35:14.000", "PostTypeId": "1", "ViewCount": "147", "FavoriteCount": "1", "Title": "Uniform initialization of iterators", "Id": "24233796", "Score": "4", "Body": "<p>I am very new to C++11 and there is a problem with iterators and uniform initialization, which I do not understand.</p>\n<p>Consider the following example, which does not compile:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main() {\n\n    std::vector&lt;int&gt; t{1, 2, 3, 4, 5};\n    auto iter{t.begin()};                   \n\n    for (; iter != t.end(); ++iter) {\n        std::cout &lt;&lt; *iter;\n    }\n\n    return 0;\n}\n</code></pre>\n<p>In line 6 a vector is initialized using uniform initialization. In line 7 I try to do the same with an iterator. It does not work. Changing line 7 to <code>auto iter = t.begin()</code> is ok. I know I could simply use \"range based for\" for this, but the question is: Why does uniform initialization not work with iterators but is fine with basic types, like <code>int i{0};</code> ?</p>\n", "Tags": "<c++><c++11><iterator><uniform-initialization>", "OwnerUserId": "1448641", "AnswerCount": "2"}});