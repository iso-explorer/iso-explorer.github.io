post_cb({"29176179": {"CommentCount": "15", "AcceptedAnswerId": "29176486", "CreationDate": "2015-03-20T21:35:41.477", "LastActivityDate": "2015-03-20T22:02:57.323", "PostTypeId": "1", "ViewCount": "180", "FavoriteCount": "1", "Title": "\u00a77.1.6.3/1 (C++14) doesn't accept the construction in the second snippet below. Why is this?", "Id": "29176179", "Score": "5", "Body": "<p><strong>First part</strong>:  </p>\n<p>I'm studying in some detail <em>opaque-enum-declaration</em>s and <em>elaborated-type-specifier</em>s for a few days already, and I really would like somebody to confirm this. GCC and VS2013 don't compile this code (clang does) and I believe clang is in accordance with \u00a77.1.6.3/1, as <code>enum E</code> is an <em>elaborated-type-specifier</em> that is not the sole constituent of the declaration <code>enum E e = E::b;</code>. Is my analysis correct?</p>\n<pre><code>#include &lt;iostream&gt;\nenum class E : char {a = 'a', b};\nint E;\nenum E e = E::b;        // Doesn't compile in GCC and VS2013\nint main()\n{\n    std::cout &lt;&lt; (char)(e) &lt;&lt; '\\n';\n}\n</code></pre>\n<p><strong>Second part:</strong></p>\n<p>The snippet below, which is very similar to the one above, doesn't compile. I understand why it doesn't (the <em>elaborated-type-specifier</em> <code>enum E</code> is the sole constituent of the declaration <code>enum E;</code> and \u00a77.1.6.3/1 doesn't allow this). What I'd like to know is why can't the compiler accept this construction? </p>\n<pre><code>#include &lt;iostream&gt;\nenum class E : char {a = 'a', b};\nint E;\nenum E;                 // This doesn't compile.\nE e = E::b;        \nint main()\n{\n    std::cout &lt;&lt; (char)(e) &lt;&lt; '\\n';\n}\n</code></pre>\n", "Tags": "<c++><enums><language-lawyer><c++14>", "OwnerUserId": "1042389", "AnswerCount": "1"}, "29176486": {"ParentId": "29176179", "CommentCount": "7", "Body": "<p>N4140 [basic.scope.hiding]/2:</p>\n<blockquote>\n<p id=\"so_29176179_29176486_0\">A class name (9.1) or enumeration name (7.2) can be hidden by the name of a variable, data member,\n  function, or enumerator declared in the same scope. If a class or enumeration name and a variable, data\n  member, function, or enumerator are declared in the same scope (in any order) with the same name, the\n  class or enumeration name is hidden wherever the variable, data member, function, or enumerator name is\n  visible.</p>\n</blockquote>\n<p>It would appear the the declaration of <code>int E</code> hides the name of the enumeration <code>E</code> in the global scope after the <code>int</code>'s point of declaration. However, the name <code>E::b</code> is a <em>qualified-id</em> with <em>nested-name-specifier</em> of <code>E::</code>, so the rules for qualified name lookup apply. In particular, [basic.lookup.qual]/1:</p>\n<blockquote>\n<p id=\"so_29176179_29176486_1\">The name of a class or namespace member or enumerator can be referred to after the <code>::</code> scope resolution\n  operator (5.1) applied to a <em>nested-name-specifier</em> that denotes its class, namespace, or enumeration. If a <code>::</code>\n  scope resolution operator in a <em>nested-name-specifier</em> is not preceded by a <em>decltype-specifier</em>, <strong>lookup of the\n  name preceding that <code>::</code> considers only namespaces, types, and templates whose specializations are types.</strong> [<em>emphasis added.</em>]\n  If the name found does not designate a namespace or a class, enumeration, or dependent type, the program\n  is ill-formed.</p>\n</blockquote>\n<p>So clang is conforming, GCC and MSVC are not.</p>\n", "OwnerUserId": "923854", "PostTypeId": "2", "Id": "29176486", "Score": "7", "CreationDate": "2015-03-20T22:02:57.323", "LastActivityDate": "2015-03-20T22:02:57.323"}, "bq_ids": {"n4140": {"so_29176179_29176486_1": {"section_id": 7107, "quality": 0.9361702127659575, "length": 44}, "so_29176179_29176486_0": {"section_id": 7079, "quality": 1.0, "length": 41}}, "n3337": {"so_29176179_29176486_1": {"section_id": 6851, "quality": 0.9361702127659575, "length": 44}, "so_29176179_29176486_0": {"section_id": 6823, "quality": 1.0, "length": 41}}, "n4659": {"so_29176179_29176486_1": {"section_id": 8608, "quality": 0.9361702127659575, "length": 44}, "so_29176179_29176486_0": {"section_id": 8580, "quality": 1.0, "length": 41}}}});