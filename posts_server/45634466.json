post_cb({"45634556": {"ParentId": "45634466", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Because the type of the result in C is <code>int</code> (and 4 bytes is a typical size) and in C++ it's <code>bool</code> (and 1 is the typical size for that).</p>\n<p>These values are implementation dependent.</p>\n<p>Here's a C11 program that demonstrates that using <code>_Generic</code> (typical output <code>int 4</code>):</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nvoid what_int(){\n    printf(\"int %lu\",sizeof(int));\n}\n\nvoid what_other(){\n    printf(\"other ?\");\n}\n\n#define what(x) _Generic((x), \\\n    int : what_int(),\\\n    default: what_other()\\\n)\n\nint main(void) {\n\n    what(1==1);\n\n    return 0;\n}\n</code></pre>\n<p>Here's a C++ program that demonstrates that using template specializaton (typical output <code>bool 1</code>):</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;typename T&gt;\nvoid what(T x){\n   std::cout&lt;&lt;\"other \"&lt;&lt;sizeof(T);\n}\n\ntemplate&lt;&gt;\nvoid what(bool x){\n   std::cout&lt;&lt;\"bool \"&lt;&lt;sizeof(bool);\n}\n\n\nint main(){\n    what(1==1);\n    return 0;\n}\n</code></pre>\n<p>I can't readily think of any code that is both C and C++ that would have a different outcome. Please accept that as a challenge.</p>\n", "OwnerUserId": "4213662", "LastEditorUserId": "4213662", "LastEditDate": "2017-08-11T13:18:31.790", "Id": "45634556", "Score": "6", "CreationDate": "2017-08-11T11:52:03.453", "LastActivityDate": "2017-08-11T13:18:31.790"}, "45634479": {"ParentId": "45634466", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>In <code>C</code> result of <code>==</code> and <code>!=</code> operators is <code>int</code></p>\n<p>According to <a href=\"http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1570.pdf\" rel=\"nofollow noreferrer\">N1570</a> draft - <strong>6.5.9 Equality operators</strong></p>\n<p><code>4</code> means <code>sizeof(int)</code>, but it depends on architecture.</p>\n<hr>\n<p>In <code>C++</code> result of <code>==</code> and <code>!=</code> operators is <code>bool</code></p>\n<p>According to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow noreferrer\">N4296</a> draft - <strong>5.10 Equality operators</strong></p>\n<p><code>1</code> means <code>sizeof(bool)</code> the size cannot be smaller than one byte. But it would be legal to be larger than one byte.</p>\n</hr>", "OwnerUserId": "8254699", "LastEditorUserId": "8254699", "LastEditDate": "2017-08-11T15:39:11.203", "Id": "45634479", "Score": "14", "CreationDate": "2017-08-11T11:47:23.377", "LastActivityDate": "2017-08-11T15:39:11.203"}, "45634466": {"CommentCount": "10", "AcceptedAnswerId": "45634768", "PostTypeId": "1", "LastEditorUserId": "3002139", "CreationDate": "2017-08-11T11:46:47.293", "LastActivityDate": "2017-08-12T16:47:36.350", "LastEditDate": "2017-08-12T14:49:51.067", "ViewCount": "401", "FavoriteCount": "1", "Title": "Different outputs of sizeof operator in C and C++", "Id": "45634466", "Score": "4", "Body": "<p>Different outputs of <code>sizeof()</code> operator in C and C++.</p>\n<p><strong>In C:</strong></p>\n<pre><code>int main() \n{\n    printf(\"%zu\\n\", sizeof(1 == 1));\n    return 0;\n}\n</code></pre>\n<p><strong>output:</strong></p>\n<pre><code>4\n</code></pre>\n<p><strong>In C++:</strong></p>\n<pre><code>int main() \n{\n    std::cout &lt;&lt; sizeof(1 == 1) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p><strong>output:</strong></p>\n<pre><code>1\n</code></pre>\n<p>Questions:</p>\n<ul>\n<li>Why are the outputs different?</li>\n<li>Is <code>sizeof</code> independent of the OS or compiler?</li>\n<li>Is it dependent on language?</li>\n</ul>\n", "Tags": "<c++><c><value><sizeof>", "OwnerUserId": "6935629", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_45634466_45634768_1": {"section_id": 6154, "quality": 0.8846153846153846, "length": 23}}, "n3337": {"so_45634466_45634768_1": {"section_id": 5912, "quality": 0.5769230769230769, "length": 15}}, "n4659": {"so_45634466_45634768_1": {"section_id": 7651, "quality": 0.8846153846153846, "length": 23}}}, "45634768": {"ParentId": "45634466", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>According to <a href=\"http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1570.pdf\" rel=\"nofollow noreferrer\">N1570</a> draft (<a class=\"post-tag\" href=\"/questions/tagged/c11\" rel=\"tag\" title=\"show questions tagged 'c11'\">c11</a>):</p>\n<p><strong>6.5.9 Equality operators</strong></p>\n<blockquote>\n<p id=\"so_45634466_45634768_0\">The <code>==</code> (equal to) and <code>!=</code> (not equal to) operators are analogous to the relational operators except for their lower precedence. Each of the operators yields <code>1</code> if the specified relation is true and <code>0</code> if it is false. <strong>The result has type</strong> <code>int</code>.</p>\n</blockquote>\n<p>Therefore, the <code>sizeof(1\u00a0==\u00a01)</code> will return equal value to <code>sizeof(int)</code> which is <em>implementation defined</em> and in your case it is <code>4</code>.</p>\n<hr>\n<p>According to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow noreferrer\">N4296</a> draft (<a class=\"post-tag\" href=\"/questions/tagged/c%2b%2b14\" rel=\"tag\" title=\"show questions tagged 'c++14'\">c++14</a>):</p>\n<p><strong>5.10 Equality operators</strong></p>\n<blockquote>\n<p id=\"so_45634466_45634768_1\">The <code>==</code> (equal to) and the <code>!=</code> (not equal to) operators group left-to-right. The operands shall have arithmetic, enumeration, pointer, or pointer to member type, or type <code>std::nullptr_t</code>. The operators <code>==</code> and <code>!=</code> both yield <code>true</code> or <code>false</code>, i.e., <strong>a result of type</strong> <code>bool</code>.</p>\n</blockquote>\n<p>Therefore, the <code>sizeof(1\u00a0==\u00a01)</code> will return equal value to <code>sizeof(bool)</code> which is <em>implementation defined</em> and in your case it is <code>1</code>.</p>\n</hr>", "OwnerUserId": "7893951", "LastEditorUserId": "7893951", "LastEditDate": "2017-08-12T16:47:36.350", "Id": "45634768", "Score": "14", "CreationDate": "2017-08-11T12:01:59.197", "LastActivityDate": "2017-08-12T16:47:36.350"}});