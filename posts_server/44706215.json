post_cb({"44706412": {"Id": "44706412", "PostTypeId": "2", "Body": "<p>I think this is an experimental question, since actually you should rethink what you are doing when you require to \"override a final function\" (sounds contradicting, doesn't it?).</p>\n<p>But you could introduce a \"dummy\"-parameter, i.e. <code>void NonFinal::print(int test=0)const</code>, which let's the compiler treat the member function as a different one. Not sure if that solves your \"problem\"; but at least it introduces a function with the same name, which can still be called without passing an argument, and which is separated from the ones of <code>Derived</code> and <code>Base</code>.</p>\n<pre><code>class NonFinal : public Derived{\npublic:\n    void print(int test=0)const{ cout &lt;&lt; \"apparently im not the last...\" &lt;&lt; endl; }\n};\n\nint main() {\n\n    Base b (10,10);\n    Derived d (20,20);\n    NonFinal nf;\n    Base *bPtr = &amp;d;\n    bPtr-&gt;print();  // gives 200\n    bPtr = &amp;nf; // gives 0\n    bPtr-&gt;print();\n    nf.print(); // gives \"apparantly...\"\n}\n</code></pre>\n", "LastActivityDate": "2017-06-22T17:58:31.247", "CommentCount": "0", "CreationDate": "2017-06-22T17:58:31.247", "ParentId": "44706215", "Score": "2", "OwnerUserId": "2630032"}, "44706215": {"ViewCount": "83", "Body": "<p>I have a problem with a <code>final</code> function. I want to \"stop\" the polymorphism in a class but I still want to generate the same function in a derived class.</p>\n<p>Something like this:</p>\n<pre><code>class Base{\n    protected:\n        int _x, _y;\n    public:\n        Base(int x = 0, int y = 0) : _x(x), _y(y){};\n        int x() const { return _x; }\n        int y() const { return _y; }\n        virtual void print()const{ cout &lt;&lt; _x*_y &lt;&lt; endl; }\n};\n\nclass Derived : public Base{\n    public:\n        Derived(int x = 0, int y = 0) : Base(x, y){}\n        void print()const final { cout &lt;&lt; _x*_y / 2.0 &lt;&lt; endl; } // final inheritance\n};\n\nclass NonFinal : public Derived{\n        void print()const{ cout &lt;&lt; \"apparently im not the last...\" &lt;&lt; endl } \n    // here i want a new function. not overriding the final function from Derived class\n};\n</code></pre>\n", "Title": "Is it possible to have a derived class that inherits a final function but creates the same function (not override)?", "CreationDate": "2017-06-22T17:47:12.100", "LastActivityDate": "2017-06-22T18:01:49.690", "CommentCount": "1", "LastEditDate": "2017-06-22T18:01:49.690", "PostTypeId": "1", "LastEditorUserId": "27678", "Id": "44706215", "Score": "5", "OwnerUserId": "7311330", "Tags": "<c++><inheritance><override><final><virtual-functions>", "AnswerCount": "2"}, "44706352": {"Id": "44706352", "PostTypeId": "2", "Body": "<p>Sorry, but it's not possible to create a function in a derived class when a function with the same name exists as <code>final</code> in the base class. You'll need to rethink your design.</p>\n<p>The problem stems from the fact that a function declaration in a derived class with the same name as a function in a base class is treated as an attempt to override whether the <code>override</code> keyword is present or not (for historical reasons, I presume). So you can't \"turn off\" overriding.</p>\n<p>Here's a relevant standard quote:</p>\n<p>\u00a7 10.3/4 [class.virtual]</p>\n<blockquote>\n<p id=\"so_44706215_44706352_0\">If a virtual function <code>f</code> in some class <code>B</code> is marked with the <em>virt-specifier</em> <code>final</code> and in a class <code>D</code> derived from <code>B</code> a function <code>D::f</code> overrides <code>B::f</code>, the program is ill-formed. [ Example:</p>\n</blockquote>\n<pre><code>struct B {\n   virtual void f() const final;\n};\nstruct D : B {\n   void f() const; // error: D::f attempts to override final B::f\n};\n</code></pre>\n<blockquote>\n<p id=\"so_44706215_44706352_1\">\u2014end</p>\n</blockquote>\n", "LastActivityDate": "2017-06-22T17:55:12.687", "CommentCount": "0", "CreationDate": "2017-06-22T17:55:12.687", "ParentId": "44706215", "Score": "2", "OwnerUserId": "27678"}, "bq_ids": {"n4140": {"so_44706215_44706352_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 7005}}, "n3337": {"so_44706215_44706352_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 6751}}, "n4659": {"so_44706215_44706352_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 8502}}}});