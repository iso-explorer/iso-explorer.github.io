post_cb({"30618783": {"CommentCount": "7", "ViewCount": "3839", "PostTypeId": "1", "LastEditorUserId": "416274", "CreationDate": "2015-06-03T11:26:52.317", "LastActivityDate": "2015-06-03T11:54:45.287", "Title": "Why is returning address of local variable or temporary only a warning and not an error?", "AcceptedAnswerId": "30619210", "LastEditDate": "2015-06-03T11:41:06.370", "Id": "30618783", "Score": "22", "Body": "<p>Having just received a warning from the compiler for this function:</p>\n<pre><code>template&lt;class T&gt;\nMatrix3x3&lt;T&gt; &amp; operator - (Matrix3x3&lt;T&gt; const &amp; p)\n{\n    auto m = Matrix3x3&lt;T&gt;(p);\n\n    m.m11 = -m.m11; m.m12 = -m.m12; m.m13 = -m.m13;\n    m.m21 = -m.m21; m.m22 = -m.m22; m.m23 = -m.m23;\n    m.m31 = -m.m31; m.m32 = -m.m32; m.m33 = -m.m33;\n\n    return m;\n}\n</code></pre>\n<p>, I am wondering why returning an address of local variable or temporary doesn't merit an error.  Are there circumstances where you have to do it?  What's the rationale for this only being \"undefined behaviour\" and not a language constraint?</p>\n<p>I can't think of any.  </p>\n", "Tags": "<c++><compiler-warnings>", "OwnerUserId": "416274", "AnswerCount": "2"}, "30619267": {"ParentId": "30618783", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>Reason: <strong>Lack of consistency in generating compiler error</strong>.</p>\n<p>In your <em>straight forward</em> case, compiler is actually helpful to generate a warning. Treat it just as a <em>bonus</em>.<br>\nBut look for below case where compiler doesn't recognize this problem:</br></p>\n<pre><code>int&amp; foo ()\n{\n  int i = 1;\n  static int j;\n  return i? i : j;  // No warning in g++-5!\n}\n</code></pre>\n<p>Now from the compiler perspective it's not justified if it gives error for one case and in other case it chickens out due to complexity of the code.</p>\n<p>One of the use cases of such compiler limitation can be \"Random Number generation\" as nicely suggested by @tsuki.</p>\n", "OwnerUserId": "514235", "LastEditorUserId": "514235", "LastEditDate": "2015-06-03T11:54:45.287", "Id": "30619267", "Score": "7", "CreationDate": "2015-06-03T11:49:37.940", "LastActivityDate": "2015-06-03T11:54:45.287"}, "bq_ids": {"n4140": {"so_30618783_30619210_2": {"section_id": 382, "quality": 0.7857142857142857, "length": 11}, "so_30618783_30619210_0": {"section_id": 382, "quality": 0.8333333333333334, "length": 15}}, "n3337": {"so_30618783_30619210_2": {"section_id": 373, "quality": 0.7857142857142857, "length": 11}, "so_30618783_30619210_0": {"section_id": 373, "quality": 0.8333333333333334, "length": 15}}, "n4659": {"so_30618783_30619210_2": {"section_id": 397, "quality": 0.7142857142857143, "length": 10}, "so_30618783_30619210_0": {"section_id": 397, "quality": 0.8333333333333334, "length": 15}}}, "30619210": {"ParentId": "30618783", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>There is no good reason why it shouldn't be an error, just the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"noreferrer\">C++ standard</a> does not treat this case as such and conforming compilers adhere to the standard.</p>\n<p>However, emitting a warning is encouraged:</p>\n<blockquote>\n<p id=\"so_30618783_30619210_0\"><strong>\u00a712.2.5.2</strong> The lifetime of a temporary bound to the returned value in a function return statement (6.6.3) is not extended; <em>the temporary is destroyed at the end of the full-expression in the return statement</em>.</p>\n<p id=\"so_30618783_30619210_1\">[...]</p>\n<p id=\"so_30618783_30619210_2\">[Note: This may introduce a dangling reference, and <em>implementations are encouraged\n  to issue a warning in such a case</em>. \u2014 end note ]</p>\n</blockquote>\n<p>Emphasis is mine.</p>\n", "OwnerUserId": "2344584", "LastEditorUserId": "2344584", "LastEditDate": "2015-06-03T11:52:52.637", "Id": "30619210", "Score": "18", "CreationDate": "2015-06-03T11:46:52.787", "LastActivityDate": "2015-06-03T11:52:52.637"}});