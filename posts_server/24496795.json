post_cb({"bq_ids": {"n4140": {"so_24496795_24496820_2": {"length": 51, "quality": 0.9272727272727272, "section_id": 7194}, "so_24496795_24496820_1": {"length": 48, "quality": 0.8421052631578947, "section_id": 7191}, "so_24496795_24496820_0": {"length": 33, "quality": 0.8461538461538461, "section_id": 7189}, "so_24496795_24496795_0": {"length": 8, "quality": 1.0, "section_id": 7151}}, "n3337": {"so_24496795_24496820_2": {"length": 51, "quality": 0.9272727272727272, "section_id": 6938}, "so_24496795_24496820_1": {"length": 48, "quality": 0.8421052631578947, "section_id": 6935}, "so_24496795_24496820_0": {"length": 33, "quality": 0.8461538461538461, "section_id": 6933}, "so_24496795_24496795_0": {"length": 8, "quality": 1.0, "section_id": 6895}}, "n4659": {"so_24496795_24496820_2": {"length": 51, "quality": 0.9272727272727272, "section_id": 8703}, "so_24496795_24496820_1": {"length": 48, "quality": 0.8421052631578947, "section_id": 8700}, "so_24496795_24496820_0": {"length": 29, "quality": 0.7435897435897436, "section_id": 8697}, "so_24496795_24496795_0": {"length": 5, "quality": 0.625, "section_id": 8652}}}, "24496820": {"Id": "24496820", "PostTypeId": "2", "Body": "<p>Sure: static initialization, which fills all objects with zero, takes place before any user code runs.</p>\n<p>Those zeros might be visible during the execution of other initializers.  Read about the <a href=\"https://stackoverflow.com/q/3035422/103167\">\"Static Initialization Order Fiasco\"</a></p>\n<p>Note that objects are not deemed constructed until after dynamic initialization completes, and you have to follow the lifetime rules.  <code>[basic.life]</code> in the Standard says:</p>\n<blockquote>\n<p id=\"so_24496795_24496820_0\">The <em>lifetime</em> of an object is a runtime property of the object. An object is said to have non-trivial initialization if it is of a class or aggregate type and it or one of its members is initialized by a constructor other than a trivial default constructor.  [ Note:  initialization by a trivial copy/move constructor is non-trivial initialization.  \u2014 end note ] The lifetime of an object of type <code>T</code> begins when:</p>\n<ul>\n<li>storage with the proper alignment and size for type <code>T</code> is obtained, and</li>\n<li>if the object has non-trivial initialization, its initialization is complete.</li>\n</ul>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_24496795_24496820_1\">The  properties  ascribed  to  objects  throughout  this  International  Standard  apply  for  a  given  object  only during its lifetime.  [ Note:  In particular, <strong>before the lifetime of an object starts and after its lifetime ends there are significant restrictions on the use of the object</strong>, as described below, in 12.6.2 and in 12.7.  Also, the behavior of an object under construction and destruction might not be the same as the behavior of an object whose lifetime has started and not ended.  12.6.2 and 12.7 describe the behavior of objects during the construction and destruction phases.  \u2014 end note ]</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_24496795_24496820_2\">Similarly,  before  the  lifetime  of  an  object  has  started  but  after  the  storage  which  the  object  will  occupy has  been  allocated  or,  after  the  lifetime  of  an  object  has  ended  and  before  the  storage  which  the  object occupied is reused or released, any glvalue that refers to the original object may be used but only in limited ways.  For an object under construction or destruction, see 12.7.  Otherwise, such a glvalue refers to allocated storage (3.7.4.2), and using the properties of the glvalue that do not depend on its value is well-defined.  The program has undefined behavior if:</p>\n<ul>\n<li>an lvalue-to-rvalue conversion (4.1) is applied to such a glvalue,</li>\n<li>the glvalue is used to access a non-static data member or call a non-static member function of the object, or</li>\n<li>the glvalue is bound to a reference to a virtual base class (8.5.3), or</li>\n<li>the glvalue is used as the operand of a <code>dynamic_cast</code> (5.2.7) or as the operand of <code>typeid</code>.</li>\n</ul>\n</blockquote>\n<p>So, accessing the (zeroed) content of objects of non-primitive type can easily lead to undefined behavior.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2014-06-30T19:02:09.333", "Score": "4", "CreationDate": "2014-06-30T18:43:35.147", "ParentId": "24496795", "CommentCount": "2", "LastEditDate": "2017-05-23T10:30:46.610", "OwnerUserId": "103167"}, "24496795": {"ViewCount": "743", "Body": "<p>Is there an example in which variable is initialized both in static and dynamic way. I.e. as said the spec.</p>\n<blockquote>\n<p id=\"so_24496795_24496795_0\">Static initialization shall be performed before any dynamic\n  initialization takes place.</p>\n</blockquote>\n<p>I assume that it is possible that variable can be initialized in static and dynamic way in the same program. Although, I think, that initialization is definition of an initial value. I.e. variable, initialized once, cannot be initialized anymore.</p>\n", "AcceptedAnswerId": "24496820", "Title": "Example Static and Dynamic Initialization", "CreationDate": "2014-06-30T18:41:48.533", "Id": "24496795", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2014-06-30T19:02:09.333", "Score": "2", "OwnerUserId": "2786156", "Tags": "<c++><initialization>", "AnswerCount": "1"}});