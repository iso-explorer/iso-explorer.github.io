post_cb({"bq_ids": {"n4140": {"so_3610936_3610966_0": {"length": 20, "quality": 0.5714285714285714, "section_id": 6697}}, "n3337": {"so_3610936_3610966_0": {"length": 20, "quality": 0.5714285714285714, "section_id": 6452}}, "n4659": {"so_3610936_3610966_0": {"length": 20, "quality": 0.5714285714285714, "section_id": 8172}}}, "5961950": {"Id": "5961950", "PostTypeId": "2", "Body": "<p>Access modifiers, such as <code>public</code>, <code>private</code> and <code>protected</code> are only enforced during compilation. When you call the function through a pointer to the base class, the compiler doesn't know that the pointer points to an instance of the derived class. According to the rules the compiler can infer from this expression, this call is valid.</p>\n<p>It is usually a semantic error to reduce the visibility of a member in a derived class. Modern programming languages such as Java and C# refuse to compile such code, because a member that is visible in the base class is always accessible in the derived class through a base pointer.</p>\n", "LastActivityDate": "2011-05-11T09:21:13.980", "CommentCount": "1", "CreationDate": "2011-05-11T09:21:13.980", "ParentId": "3610936", "Score": "10", "OwnerUserId": "41283"}, "3610966": {"Id": "3610966", "PostTypeId": "2", "Body": "<p><code>add()</code> is only private in <code>derived</code>, but the <em>static type</em> you have is <code>base*</code> - thus the access restrictions of <code>base</code> apply.<br>\nIn general you can't even know at compile time what the dynamic type of a pointer to <code>base</code> will be, it could e.g. change based on user input.</br></p>\n<p>This is per <em>C++03 \u00a711.6</em>:</p>\n<blockquote>\n<p id=\"so_3610936_3610966_0\">The access rules (clause 11) for a virtual function are determined by its declaration and are not affected by the rules for a function that later overrides it.<br>\n  [...] Access is checked at the call point using the type of the expression used to denote the object for which the member function is called [...]. The access of the member function in the class in which it was defined [...] is in general not known.</br></p>\n</blockquote>\n", "LastEditorUserId": "168225", "LastActivityDate": "2011-05-11T09:31:16.070", "Score": "32", "CreationDate": "2010-08-31T16:11:29.933", "ParentId": "3610936", "CommentCount": "3", "OwnerUserId": "168225", "LastEditDate": "2011-05-11T09:31:16.070"}, "3610936": {"ViewCount": "2077", "Body": "<pre><code>#include&lt;iostream&gt;\n\nusing namespace std;\nclass base\n{\npublic:\n    virtual void add() {\n        cout &lt;&lt; \"hi\";\n    }\n};\n\nclass derived : public base\n{\nprivate:\n    void add() {\n        cout &lt;&lt; \"bye\";\n    }\n};\n\nint main()\n{\n    base *ptr;\n    ptr = new derived;\n    ptr-&gt;add();\n    return 0;\n}\n</code></pre>\n<p>Output is <code>bye</code></p>\n<p>I dont have a problem with how this is implemented. I understand you use vtables and the vtable of derived contains the address of the new add() function. But add() is private shouldn't compiler generate an error when I try to access it outside the class? Somehow it doesn't seem right.</p>\n", "AcceptedAnswerId": "3610966", "Title": "Why can I access a derived private member function via a base class pointer to a derived object?", "CreationDate": "2010-08-31T16:08:48.587", "Id": "3610936", "CommentCount": "2", "FavoriteCount": "11", "PostTypeId": "1", "LastEditDate": "2012-01-14T10:59:57.453", "LastEditorUserId": "204623", "LastActivityDate": "2012-01-14T10:59:57.453", "Score": "29", "OwnerUserId": "204623", "Tags": "<c++><inheritance><polymorphism><access-modifiers>", "AnswerCount": "3"}, "3611101": {"Id": "3611101", "PostTypeId": "2", "Body": "<p>To add a little to Georg's answer:</p>\n<p>Remember that the compiler has no control over and cannot guarantee anything about derived classes. For example, I could ship my type in a library and derive from it in an entirely new program. How is the library compiler supposed to know that derived might have a different access specifier? The derived type didn't exist when the library was compiled.</p>\n<p>In order to support this, the compiler would have to know access specifiers at runtime and throw an exception if you attempted to access a private member.</p>\n", "LastActivityDate": "2010-08-31T16:28:12.443", "CommentCount": "0", "CreationDate": "2010-08-31T16:28:12.443", "ParentId": "3610936", "Score": "5", "OwnerUserId": "298661"}});