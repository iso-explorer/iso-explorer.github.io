post_cb({"12515637": {"ParentId": "12515616", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>The <code>...</code> has to go inside the function call parentheses:</p>\n<pre><code>print_one&lt;Args&gt;::run(std::forward&lt;Args&gt;(args)...);\n</code></pre>\n<p>Obviously, that won't work for your function that takes only a single argument, so you need to  find a way to expand the calls into a function call or other allowed construct:</p>\n<pre><code>// constructing a dummy array via uniform initialization\n// the extra 0 at the start is to make it work when the pack is empty\nint dummy[]{0, (print_one&lt;Args&gt;::run(std::forward&lt;Args&gt;(args)), 0)...};\n\n// or, if your compiler doesn't support uniform initialization\nint dummy[] = {0, (print_one&lt;Args&gt;::run(std::forward&lt;Args&gt;(args)), 0)...};\n\n// or, calling a dummy function\ntemplate&lt;typename... Args&gt; void dummy(Args...) {}\ndummy((print_one&lt;Args&gt;::run(std::forward&lt;Args&gt;(args)), 0)...);\n\n// or, constructing a temporary dummy object\nstruct dummy { dummy(std::initializer_list&lt;int&gt;) {} };\ndummy{(print_one&lt;Args&gt;::run(std::forward&lt;Args&gt;(args)), 0)...};\n\n// or, constructing a temporary initializer list\nstd::initializer_list&lt;int&gt;{(print_one&lt;Args&gt;::run(std::forward&lt;Args&gt;(args)), 0)...};\n</code></pre>\n<p>Note the use of the comma operator to turn the <code>void</code> return of <code>print_one</code> into a value suitable to place in an argument list or initializer expression.</p>\n<p>The initializer-list forms are preferred to the function call forms, as they are (supposed to be) ordered LTR which function call arguments are not.</p>\n<p>The forms where a parameter pack expansion can occur are covered by 14.5.3 [temp.variadic]:</p>\n<blockquote>\n<p id=\"so_12515616_12515637_0\">4 - [...] Pack expansions can occur in the following contexts:</p>\n<ul>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>Your original code is illegal because although textually it might appear that it should produce a statement consisting of a number of comma-operator expressions, that is not a context allowed by 14.5.3:4.</p>\n", "OwnerUserId": "567292", "LastEditorUserId": "567292", "LastEditDate": "2012-09-21T09:05:33.420", "Id": "12515637", "Score": "20", "CreationDate": "2012-09-20T15:14:00.180", "LastActivityDate": "2012-09-21T09:05:33.420"}, "12515975": {"ParentId": "12515616", "CommentCount": "1", "Body": "<p>The standard dictates where pack expansion is allowed:</p>\n<p><code>\u00a714.5.3 [temp.variadic] p4</code></p>\n<blockquote>\n<p id=\"so_12515616_12515975_0\">[...] Pack expansions can occur in the following contexts:</p>\n<ul>\n<li>In a function parameter pack (8.3.5); the pattern is the <em>parameter-declaration</em> without the ellipsis.</li>\n<li>In a template parameter pack that is a pack expansion (14.1):\n  <ul>\n<li>if the template parameter pack is a <em>parameter-declaration</em>; the pattern is the <em>parameter-declaration</em> without the ellipsis;</li>\n<li>if the template parameter pack is a <em>type-parameter</em> with a <em>template-parameter-list</em>; the pattern is the corresponding <em>type-parameter</em> without the ellipsis.</li>\n</ul></li>\n<li>In an <em>initializer-list</em> (8.5); the pattern is an <em>initializer-clause</em>.</li>\n<li>In a <em>base-specifier-list</em> (Clause 10); the pattern is a <em>base-specifier</em>.</li>\n<li>In a <em>mem-initializer-list</em> (12.6.2); the pattern is a <em>mem-initializer</em>.</li>\n<li>In a <em>template-argument-list</em> (14.3); the pattern is a <em>template-argument</em>.</li>\n<li>In a <em>dynamic-exception-specification</em> (15.4); the pattern is a <em>type-id</em>.</li>\n<li>In an <em>attribute-list</em> (7.6.1); the pattern is an <em>attribute</em>.</li>\n<li>In an <em>alignment-specifier</em> (7.6.2); the pattern is the <em>alignment-specifier</em> without the ellipsis.</li>\n<li>In a <em>capture-list</em> (5.1.2); the pattern is a <em>capture</em>.</li>\n<li>In a <code>sizeof...</code> expression (5.3.3); the pattern is an identifier.</li>\n</ul>\n</blockquote>\n<p>So basically, as a top-level statement, expansion is not allowed. The rationale behind this? No idea. Most likely they only picked contexts where a seperating comma (<code>,</code>) is part of the grammar; anywhere else you might pick overloaded <code>operator,</code> if user-defined types are involved and get in trouble.</p>\n", "OwnerUserId": "500104", "PostTypeId": "2", "Id": "12515975", "Score": "4", "CreationDate": "2012-09-20T15:31:32.510", "LastActivityDate": "2012-09-20T15:31:32.510"}, "bq_ids": {"n4140": {"so_12515616_12515637_0": {"section_id": 121, "quality": 1.0, "length": 6}, "so_12515616_12515975_0": {"section_id": 121, "quality": 1.0, "length": 6}}, "n3337": {"so_12515616_12515637_0": {"section_id": 116, "quality": 1.0, "length": 6}, "so_12515616_12515975_0": {"section_id": 116, "quality": 1.0, "length": 6}}, "n4659": {"so_12515616_12515637_0": {"section_id": 125, "quality": 1.0, "length": 6}, "so_12515616_12515975_0": {"section_id": 125, "quality": 1.0, "length": 6}}}, "12515616": {"CommentCount": "7", "AcceptedAnswerId": "12515637", "PostTypeId": "1", "LastEditorUserId": "500104", "CreationDate": "2012-09-20T15:12:42.837", "LastActivityDate": "2012-09-21T09:05:33.420", "LastEditDate": "2012-09-20T15:32:03.977", "ViewCount": "6183", "FavoriteCount": "4", "Title": "Expression contains unexpanded parameter packs", "Id": "12515616", "Score": "11", "Body": "<p>Somehow I don't get how variadic template parameter packs are expanded. What's wrong with thie following code?</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename T&gt;\nstruct print_one\n{\n    static void run(const T&amp; t)\n    {\n        std::cout &lt;&lt; t &lt;&lt; ' ';\n    }\n};\n\ntemplate&lt;typename... Args&gt;\nvoid print_all(Args&amp;&amp;... args)\n{\n    // the next line doesn't compile:\n    print_one&lt;Args&gt;::run(std::forward&lt;Args&gt;(args))...;\n}\n\nint main()\n{\n    print_all(1.23, \"foo\");\n}\n</code></pre>\n<p>Clang says, <code>Expression contains unexpanded parameter packs 'Args' and 'args'</code>. Why?</p>\n", "Tags": "<c++><templates><c++11><variadic-templates>", "OwnerUserId": "728847", "AnswerCount": "2"}});