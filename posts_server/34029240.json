post_cb({"34030349": {"ParentId": "34029240", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_34029240_34030349_0\">Q2. What other (correct, more readable, less hackish/weird) ways to use enable_if/enable_if_t are there?</p>\n</blockquote>\n<p>arguably, this is more readable and less hackish?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n\n\ntemplate&lt; bool b &gt;\nauto fn() -&gt; std::enable_if_t&lt;b&gt;\n{\n    std::cout &lt;&lt; 1 &lt;&lt; std::endl;\n}\n\ntemplate&lt; bool b&gt;\nauto fn() -&gt; std::enable_if_t&lt;!b&gt;\n{\n    std::cout &lt;&lt; 2 &lt;&lt; std::endl;\n}\n// ...\n\n\nauto main() -&gt; int\n{\n    fn&lt; true &gt;();\n    fn&lt; false &gt;();\n    return 0;\n}\n</code></pre>\n<p>and here's another way which could be thought of as more expressive:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n\ntemplate &lt;bool b&gt; using When = std::enable_if_t&lt;b, bool&gt;;\ntemplate &lt;bool b&gt; using Unless = std::enable_if_t&lt;!b, bool&gt;;\n\ntemplate&lt; bool b, When&lt;b&gt; = true&gt;\nvoid fn2()\n{\n    std::cout &lt;&lt; 1 &lt;&lt; std::endl;\n}\n\ntemplate&lt; bool b, Unless&lt;b&gt; = true&gt;\nvoid fn2()\n{\n    std::cout &lt;&lt; 2 &lt;&lt; std::endl;\n}\n\nauto main() -&gt; int\n{\n    fn2&lt; true &gt;();\n    fn2&lt; false &gt;();\n    return 0;\n}\n</code></pre>\n<p>... or perhaps something like this is more expressive?</p>\n<pre><code>template &lt;bool b&gt; using Eval = std::integral_constant&lt;bool, b&gt;;\n\ntemplate&lt;bool b&gt;\nvoid fn3()\n{\n    struct fn3_impl\n    {\n        static void when(std::true_type)\n        {\n            std::cout &lt;&lt; 1 &lt;&lt; std::endl;\n        }\n\n        static void when(std::false_type)\n        {\n            std::cout &lt;&lt; 2 &lt;&lt; std::endl;\n        }\n    };\n\n    fn3_impl::when(Eval&lt;b&gt;());\n}\n</code></pre>\n", "OwnerUserId": "2015579", "LastEditorUserId": "2015579", "LastEditDate": "2015-12-01T23:24:12.243", "Id": "34030349", "Score": "1", "CreationDate": "2015-12-01T21:18:01.893", "LastActivityDate": "2015-12-01T23:24:12.243"}, "34031566": {"ParentId": "34029240", "CommentCount": "2", "Body": "<p>I'm not sure I'd use <code>enable_if</code> at all here. You're not trying to constrain an overload set, so I'd call that counter-idomatic.</p>\n<p>Simple specialization seems to work just fine:</p>\n<pre><code>template &lt;bool&gt; void fn();\ntemplate &lt;&gt; void fn&lt;true&gt;() { std::cout &lt;&lt; \"true fn\\n\"; }\ntemplate &lt;&gt; void fn&lt;false&gt;() { std::cout &lt;&lt; \"false fn\\n\"; }\n</code></pre>\n", "OwnerUserId": "596781", "PostTypeId": "2", "Id": "34031566", "Score": "3", "CreationDate": "2015-12-01T22:39:21.413", "LastActivityDate": "2015-12-01T22:39:21.413"}, "34029240": {"CommentCount": "9", "ViewCount": "127", "PostTypeId": "1", "LastEditorUserId": "4987285", "CreationDate": "2015-12-01T20:11:07.403", "LastActivityDate": "2015-12-01T23:24:12.243", "Title": "enable_if's syntactical patterns", "AcceptedAnswerId": "34029742", "LastEditDate": "2015-12-01T20:34:27.900", "Id": "34029240", "Score": "4", "Body": "<p>I've been using <code>enable_if</code> in this approximate manner with various versions of GCC (up to 5.2):</p>\n<pre><code>template&lt; bool b, std::enable_if_t&lt; b &gt;... &gt;\nvoid fn() { std::cout &lt;&lt; 1 &lt;&lt; std::endl; }\ntemplate&lt; bool b, std::enable_if_t&lt; !b &gt;... &gt;\nvoid fn() { std::cout &lt;&lt; 2 &lt;&lt; std::endl; }\n// ...\nfn&lt; true &gt;();\nfn&lt; false &gt;();\n</code></pre>\n<p>But, as it turns out, Clang 3.7 does not accept this (\"call to 'fn' is ambiguous\").</p>\n<p><strong>Q1. Who's right, and why?</strong></p>\n<p>There are, of course, other ways to do it, but I kind of don't like</p>\n<pre><code>template&lt; bool b &gt;\nstd::enable_if_t&lt; b, void &gt; fa() { std::cout &lt;&lt; 1 &lt;&lt; std::endl; }\n// ...\n</code></pre>\n<p>and its ilk for making normal parts of the function signature less readable, and</p>\n<pre><code>template&lt; bool b, std::enable_if_t&lt; b, int &gt; = 0 &gt;\nvoid fd() { std::cout &lt;&lt; 1 &lt;&lt; std::endl; }\n// ...\n</code></pre>\n<p>for involving irrelevant elements (types and values).</p>\n<p><strong>Q2. What other (correct, more readable, less hackish/weird) ways to use <code>enable_if</code>/<code>enable_if_t</code> are there?</strong></p>\n", "Tags": "<c++><gcc><clang><language-lawyer><enable-if>", "OwnerUserId": "1558356", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_34029240_34029742_0": {"section_id": 60, "quality": 1.0, "length": 9}}, "n3337": {"so_34029240_34029742_0": {"section_id": 55, "quality": 1.0, "length": 9}}, "n4659": {"so_34029240_34029742_0": {"section_id": 62, "quality": 0.7777777777777778, "length": 7}}}, "34029742": {"ParentId": "34029240", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>According to the standard <em>14.1/p7 Template parameters [temp.param]</em> (<strong>Emphasis Mine</strong>):</p>\n<blockquote>\n<p id=\"so_34029240_34029742_0\"><strong>A non-type template-parameter shall not be declared to have</strong> floating point, class, or <strong>void type</strong>.</p>\n</blockquote>\n<p>Consequently, your code snippet is ill-formed. Thus, GCC is wrong on this.</p>\n<p>However if you change to:</p>\n<pre><code>template&lt; bool b, std::enable_if_t&lt; b, int&gt;... &gt;\nvoid fn() { std::cout &lt;&lt; 1 &lt;&lt; std::endl; }\ntemplate&lt; bool b, std::enable_if_t&lt; !b, int&gt;... &gt;\nvoid fn() { std::cout &lt;&lt; 2 &lt;&lt; std::endl; }\n</code></pre>\n<p>Restriction is lifted, and this code is legitimate and should be accepted. Apparently, it seems that Clang rejects this code as well. IMHO, this is a Clang bug. </p>\n<p>As I found out a similar bug has been reported <a href=\"https://llvm.org/bugs/show_bug.cgi?id=23840\" rel=\"nofollow\">23840</a>.</p>\n<p>Now for the practical part, I don't know if this is practical/less hackish/less weird but you could do the following:</p>\n<pre><code>template&lt; bool b, std::enable_if_t&lt; b, int&gt; = 0 &gt;\nvoid fn() { std::cout &lt;&lt; 1 &lt;&lt; std::endl; }\ntemplate&lt; bool b, std::enable_if_t&lt; !b, int&gt; = 0 &gt;\nvoid fn() { std::cout &lt;&lt; 2 &lt;&lt; std::endl; }\n</code></pre>\n", "OwnerUserId": "2352671", "LastEditorUserId": "2352671", "LastEditDate": "2015-12-01T21:27:19.260", "Id": "34029742", "Score": "3", "CreationDate": "2015-12-01T20:43:15.870", "LastActivityDate": "2015-12-01T21:27:19.260"}});