post_cb({"bq_ids": {"n4140": {"so_27271941_27272134_0": {"length": 35, "quality": 0.875, "section_id": 179}}, "n3337": {"so_27271941_27272134_0": {"length": 35, "quality": 0.875, "section_id": 173}}, "n4659": {"so_27271941_27272134_0": {"length": 35, "quality": 0.875, "section_id": 184}}}, "27272030": {"Id": "27272030", "PostTypeId": "2", "Body": "<p>This is defined inside the definition of <code>enable_shared_from_this</code>. Within the definition of a class template, the template name is also the injected class name, and can be used without qualification to refer to whichever specialisation is being instantiated.</p>\n", "LastActivityDate": "2014-12-03T12:41:40.043", "CommentCount": "0", "CreationDate": "2014-12-03T12:41:40.043", "ParentId": "27271941", "Score": "3", "OwnerUserId": "204847"}, "27271941": {"ViewCount": "110", "Body": "<p>i am reading the stl code for enable_shared_from_this, it is in the gcc-4.9.2\\libstdc++-v3\\include\\bits\\shared_ptr.h. Then i saw this:</p>\n<pre><code>template&lt;typename _Tp1&gt;\nfriend void\n__enable_shared_from_this_helper(const __shared_count&lt;&gt;&amp; __pn,\n                 const enable_shared_from_this* __pe,\n                 const _Tp1* __px) noexcept\n{\n  if (__pe != 0)\n    __pe-&gt;_M_weak_assign(const_cast&lt;_Tp1*&gt;(__px), __pn);\n}\n</code></pre>\n<p>My question is, why there is no template argument for <strong>const enable_shared_from_this* __pe</strong>? How does it work when shared_ptr constructor calls __enable_shared_from_this_helper with a pointer to class A, where A derived from enable_shared_from_this?</p>\n", "Title": "why there is no template argument in __enable_shared_from_this_helper in gcc/libstdc++", "CreationDate": "2014-12-03T12:36:20.243", "LastActivityDate": "2014-12-03T12:54:18.127", "CommentCount": "0", "LastEditDate": "2014-12-03T12:54:18.127", "PostTypeId": "1", "LastEditorUserId": "981959", "Id": "27271941", "Score": "2", "OwnerUserId": "1101397", "Tags": "<c++><shared-ptr><libstdc++>", "AnswerCount": "2"}, "27272134": {"Id": "27272134", "PostTypeId": "2", "Body": "<p>This is known as an <strong>injected class name</strong>. The <em>C++ standard</em> allows this for example in 14.6.1:</p>\n<blockquote>\n<p id=\"so_27271941_27272134_0\">Like normal (non-template) classes, class templates have an\n  injected-class-name (Clause 9). The injected- class-name can be used\n  as a template-name or a type-name. When it is used with a\n  template-argument-list, as a template-argument for a template\n  template-parameter, or as the final identifier in the elaborated-type-\n  specifier of a friend class template declaration, it refers to the\n  class template itself. <strong>Otherwise, it is equivalent to the\n  template-name followed by the template-parameters of the class\n  template enclosed in &lt;&gt;.</strong></p>\n</blockquote>\n<p>If you look at the source code of <em>shared_ptr_base.h</em>, you can see that the template arguments are required because it is a <strong>outside the class</strong>:</p>\n<pre><code>00730   // Friend of __enable_shared_from_this.\n00731   template&lt;_Lock_policy _Lp, typename _Tp1, typename _Tp2&gt;\n00732     void\n00733     __enable_shared_from_this_helper(const __shared_count&lt;_Lp&gt;&amp;,\n00734                      const __enable_shared_from_this&lt;_Tp1,\n00735                      _Lp&gt;*, const _Tp2*);\n</code></pre>\n<p>But in <em>shared_ptr.h</em>, the definition is <strong>inside the class</strong>:</p>\n<pre><code>00473   template&lt;typename _Tp&gt;\n00474     class enable_shared_from_this\n00475     {\n\n...\n\n00502       template&lt;typename _Tp1&gt;\n00503     friend void\n00504     __enable_shared_from_this_helper(const __shared_count&lt;&gt;&amp; __pn,\n00505                      const enable_shared_from_this* __pe,\n00506                      const _Tp1* __px)\n00507     {\n00508       if (__pe != 0)\n00509         __pe-&gt;_M_weak_assign(const_cast&lt;_Tp1*&gt;(__px), __pn);\n00510     }\n</code></pre>\n", "LastEditorUserId": "4320030", "LastActivityDate": "2014-12-03T12:52:31.857", "Score": "3", "CreationDate": "2014-12-03T12:46:31.160", "ParentId": "27271941", "CommentCount": "0", "LastEditDate": "2014-12-03T12:52:31.857", "OwnerUserId": "4320030"}});