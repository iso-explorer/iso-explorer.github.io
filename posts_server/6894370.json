post_cb({"6894392": {"Id": "6894392", "PostTypeId": "2", "Body": "<p>-&gt; means MyClass is a pointer to the class and said pointer needs to be dereferenced in order to get to member m_Integer</p>\n<p>:: is the scope or namespace operator.  It means that m_Integer is either static or needs you need to identify specifically which scope or namespace m_Integer is within.</p>\n<p>. means that m_Integer is being access directly (not through a pointer) from MyClass.  It pretty much how you would access memebers from within Java as well and should be the one you are most familiar with.</p>\n", "LastActivityDate": "2011-08-01T05:06:54.480", "CommentCount": "0", "CreationDate": "2011-08-01T05:06:54.480", "ParentId": "6894370", "Score": "6", "OwnerUserId": "527574"}, "6894370": {"ViewCount": "241", "Body": "<p>In c++ is there any difference between these 3 blocks of code:</p>\n<pre><code>MyClass-&gt;m_Integer // 1\nMyClass::m_Integer // 2\nMyClass.m_Integer  // 3\n</code></pre>\n", "AcceptedAnswerId": "6894391", "Title": "Difference between \".\", \"::\" and, \"->\"", "CreationDate": "2011-08-01T05:01:35.493", "Id": "6894370", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-06-19T15:44:45.057", "LastEditorUserId": "1015495", "LastActivityDate": "2015-06-19T15:44:45.057", "Score": "4", "OwnerUserId": "870923", "Tags": "<c++>", "AnswerCount": "4"}, "6894391": {"Id": "6894391", "PostTypeId": "2", "Body": "<p>The <code>-&gt;</code> and <code>.</code> operators are way to access members of an instance of a class, and <code>::</code> allows you to access static members of a class.</p>\n<p>The difference between <code>-&gt;</code> and <code>.</code> is that the arrow is for access through pointers to instances, where the dot is for access to values (non-pointers).</p>\n<p>For example, let's say you have a class <code>MyClass</code> defined as:</p>\n<pre><code>class MyClass\n{\npublic:\n    static int someValue();\n    int someOtherValue();\n};\n</code></pre>\n<p>You would use those operators in the following situations:</p>\n<pre><code>MyClass *ptr = new MyClass;\nMyClass value;\n\nint arrowValue = ptr-&gt;someOtherValue();\nint dotValue = value.someOtherValue();\nint doubleColonValue = MyClass::someValue();\n</code></pre>\n<p>In Java, this would look like:</p>\n<pre><code>MyClass ref = new MyClass;\n\nint dotValue = ref.someOtherValue();\nint doubleColonValue = MyClass.someValue();\n</code></pre>\n", "LastEditorUserId": "557958", "LastActivityDate": "2011-08-01T05:14:47.097", "Score": "11", "CreationDate": "2011-08-01T05:06:18.610", "ParentId": "6894370", "CommentCount": "1", "OwnerUserId": "557958", "LastEditDate": "2011-08-01T05:14:47.097"}, "6901949": {"Id": "6901949", "PostTypeId": "2", "Body": "<p>Along with the other answers you've gotten, it's worth noting that <code>operator-&gt;</code> can be overloaded. You've already gotten some reasonable explanations of how the built-in version work, but an overloaded <code>operator-&gt;</code> is somewhat unusual, so perhaps it's worth adding a bit about how it works.</p>\n<p>The standard describes how <code>operator-&gt;</code> is unusual fairly succinctly (\u00a713.5.6):</p>\n<blockquote>\n<p id=\"so_6894370_6901949_0\">An expression x-&gt;m is interpreted as (x.operator-&gt;())-&gt;m for a class object x of type T if T::operator-&gt;() exists and if the operator is selected as the best match function by the overload resolution mechanism (13.3).</p>\n</blockquote>\n<p>This has a couple of implications: </p>\n<ol>\n<li>Even though <code>-&gt;</code> looks like a binary operator, from a viewpoint of overloading, it's essentially a unary operator -- your overload will be a member function that takes no argument.</li>\n<li>Your overload has to return one of two types: either a (reference to) an instance of another class that also overloads <code>operator-&gt;</code>, or else a pointer to some object (of class or struct type).</li>\n</ol>\n<p>Since you can return an object that itself overloads <code>operator-&gt;</code>, an expression of the form <code>x-&gt;m</code> can hide an arbitrary amount of complexity (an arbitrary number of functions being called). What you write as <code>x-&gt;m</code> could really expand out to <code>x-&gt;y-&gt;z-&gt;a-&gt;b-&gt;...m</code>.</p>\n", "LastActivityDate": "2011-08-01T17:11:44.680", "CommentCount": "0", "CreationDate": "2011-08-01T17:11:44.680", "ParentId": "6894370", "Score": "0", "OwnerUserId": "179910"}, "bq_ids": {"n4140": {"so_6894370_6901949_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 664}}, "n3337": {"so_6894370_6901949_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 654}}, "n4659": {"so_6894370_6901949_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 692}}}, "6894400": {"Id": "6894400", "PostTypeId": "2", "Body": "<ul>\n<li><code>a::b</code> -- <code>a</code> is a namespace or a class (not an instance), and consequently <code>b</code> needs to be some static entity</li>\n<li><code>a.b</code> -- <code>a</code> is an instance of a class and <code>b</code> is its member</li>\n<li><code>a-&gt;b</code> -- same as <code>(*a).b</code> (<code>a</code> is a pointer to an instance of a class)</li>\n</ul>\n", "LastActivityDate": "2011-08-01T05:08:24.993", "CommentCount": "0", "CreationDate": "2011-08-01T05:08:24.993", "ParentId": "6894370", "Score": "6", "OwnerUserId": "771837"}});