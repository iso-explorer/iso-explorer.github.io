post_cb({"bq_ids": {"n4140": {"so_15539935_15539957_2": {"length": 6, "quality": 0.5454545454545454, "section_id": 5313}}, "n3337": {"so_15539935_15539957_2": {"length": 6, "quality": 0.5454545454545454, "section_id": 5110}}, "n4659": {"so_15539935_15539957_2": {"length": 6, "quality": 0.5454545454545454, "section_id": 6737}}}, "15539953": {"Id": "15539953", "PostTypeId": "2", "Body": "<p>No strange behavior here. Your strings are not nul-terminated, so there's no way for the <code>strlen()</code> function to identify where they end.</p>\n<p>When you initialize your string like this:</p>\n<pre><code>char consonant[] = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n</code></pre>\n<p>There's no nul char added. You can either make it a string (the double-quotes cause the compiler to automatically append the nul terminator):</p>\n<pre><code>char consonant[] = \"bcd...z\";\n</code></pre>\n<p>or you can include it yourself explicitly at the end of the array:</p>\n<pre><code>char consonant[] = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', '\\0'};\n</code></pre>\n<p>Otherwise, <code>strlen()</code> will happily read off the end of your array until it happens to find a byte somewhere in memory with a value of 0.</p>\n", "LastEditorUserId": "366904", "LastActivityDate": "2013-03-21T05:13:00.327", "Score": "12", "CreationDate": "2013-03-21T05:07:50.307", "ParentId": "15539935", "CommentCount": "2", "OwnerUserId": "1172428", "LastEditDate": "2013-03-21T05:13:00.327"}, "15539935": {"ViewCount": "338", "Body": "<p>I made a program in C++ in which I used two char arrays which i initialize at time of declaration and when I used <code>strlen()</code> function for calculating their lengths I got strange outputs. The code is shown below</p>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n#include&lt;string&gt;\n\nusing namespace std;\n\nchar consonant[] = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\nchar vowel[] = {'a', 'e', 'i', 'o', 'u'};\n\n\n\nint main()\n{\n    int lenv, lenc;\n    lenc = strlen(consonant);\n    lenv = strlen(vowel);\n    printf(\"lenv = %d and lenc = %d\\n\", lenv, lenc);\n    return 0;\n}\n</code></pre>\n<p>the output for above program when run on ideone is </p>\n<pre><code>lenv = 26 and lenc = 21\n</code></pre>\n<p>and when runs on windows using codeblocks is</p>\n<pre><code>lenv = 5 and lenc = 26\n</code></pre>\n<p>Please tell me the reason for such strange behaviour...</p>\n", "Title": "Strange behaviour of strlen", "CreationDate": "2013-03-21T05:06:02.123", "LastActivityDate": "2013-07-29T17:28:46.717", "CommentCount": "12", "LastEditDate": "2013-07-29T14:51:24.717", "PostTypeId": "1", "LastEditorUserId": "1009479", "Id": "15539935", "Score": "2", "OwnerUserId": "1627263", "Tags": "<c++>", "AnswerCount": "3"}, "17927522": {"Id": "17927522", "PostTypeId": "2", "Body": "<p>Other answers have already noted that you should close your c-style string with '\\0' and your <code>lenc=21</code> is most probably for some overflow phenomenon (it can be n*SIZE_MAX+21 with any n...).</p>\n<p>To focus on <em>how you can solve your problem properly</em> in c:</p>\n<pre><code>#include&lt;string.h&gt;\n#include&lt;stdio.h&gt;\n\nchar consonant[] = \"abcdefghijklmnopqrstuvxyz\"; /* this is automatically '\\0' terminated */\nchar vowel[] = \"aeiou\";\n\nint main()\n{\n    int lenv, lenc;\n    lenc = strlen(consonant);\n    lenv = strlen(vowel);\n    printf(\"lenv = %d and lenc = %d\\n\", lenv, lenc);\n    return 0;\n}\n</code></pre>\n<p>Note that <code>using namespace std</code> is c++ only.</p>\n<p>On the other hand <em>a proper c++ solution</em> looks like this:</p>\n<pre><code>#include&lt;string&gt;\n#include&lt;iostream&gt;\n\nstd::string consonant(\"abcdefghijklmnopqrstuvxyz\"); \nstd::string vowel(\"aeiou\");\n\nint main()\n{\n    using namespace std; // if you wish using it, put it into a function\n\n    int lenc = consonant.size();\n    int lenv = vowel.size();\n    cout &lt;&lt; \"lenv = \" &lt;&lt; lenc &lt;&lt; \" and \" &lt;&lt; \"lenc = \" &lt;&lt; lenc &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n", "LastEditorUserId": "1031191", "LastActivityDate": "2013-07-29T17:28:46.717", "Score": "1", "CreationDate": "2013-07-29T15:04:38.690", "ParentId": "15539935", "CommentCount": "0", "OwnerUserId": "1031191", "LastEditDate": "2013-07-29T17:28:46.717"}, "15539957": {"Id": "15539957", "PostTypeId": "2", "Body": "<p><code>strlen</code> can only be used on a string and not an arbitrary array of characters.</p>\n<blockquote>\n<p id=\"so_15539935_15539957_0\">The strlen() function shall compute the number of bytes in the <strong>string</strong> to which s points, not including the terminating null byte. -- IEEE1003</p>\n</blockquote>\n<p>The C++ standard says that <code>strlen</code> is C++ is identical to <code>strlen</code> in C. The C standard says:</p>\n<blockquote>\n<p id=\"so_15539935_15539957_1\">The <code>strlen</code> function computes the length of the <strong>string</strong> pointed to by <em>s</em>. -- C99 7.21.6.3</p>\n</blockquote>\n<p>And:</p>\n<blockquote>\n<p id=\"so_15539935_15539957_2\">A <em>string</em> is a contiguous sequence of characters terminated by and including the first null\n  character. -- C99 7.1.1</p>\n</blockquote>\n<p>So you must ensure that whatever you pass to <code>strlen</code> is in fact a <em>string</em>, not just an array of characters.</p>\n", "LastEditorUserId": "701092", "LastActivityDate": "2013-07-29T15:14:29.873", "Score": "8", "CreationDate": "2013-03-21T05:08:16.283", "ParentId": "15539935", "CommentCount": "8", "OwnerUserId": "721269", "LastEditDate": "2013-07-29T15:14:29.873"}});