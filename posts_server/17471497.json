post_cb({"17471497": {"CommentCount": "0", "AcceptedAnswerId": "17471602", "CreationDate": "2013-07-04T13:25:32.550", "LastActivityDate": "2013-07-04T14:03:36.183", "PostTypeId": "1", "ViewCount": "339", "FavoriteCount": "1", "Title": "Where in the C++11 Standard does it say that char* p = \"abc\"; is ill-formed?", "Id": "17471497", "Score": "4", "Body": "<p>Where in the C++11 Standard does it say that <code>char* p = \"abc\";</code> is ill-formed? </p>\n", "Tags": "<c++><c++11><standards>", "OwnerUserId": "2548699", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_17471497_17471602_5": {"section_id": 5356, "quality": 1.0, "length": 26}, "so_17471497_17471602_6": {"section_id": 14, "quality": 0.7333333333333333, "length": 11}}, "n3337": {"so_17471497_17471602_5": {"section_id": 5153, "quality": 1.0, "length": 26}, "so_17471497_17471602_6": {"section_id": 11, "quality": 0.7333333333333333, "length": 11}}, "n4659": {"so_17471497_17471602_5": {"section_id": 6781, "quality": 1.0, "length": 26}, "so_17471497_17471602_6": {"section_id": 19, "quality": 0.7333333333333333, "length": 11}}}, "17471602": {"ParentId": "17471497", "PostTypeId": "2", "CommentCount": "22", "Body": "<p>This was still valid in C++03 (although deprecated), but things have changed in C++11. Annex C of the C++11 Standard mentions (see C1.1) that:</p>\n<blockquote>\n<p id=\"so_17471497_17471602_0\"><strong>Change</strong>: String literals made <code>const</code></p>\n<p id=\"so_17471497_17471602_1\">The type of a string literal is changed from \u201carray of <code>char</code>\u201d to \u201carray of <code>const char</code>.\u201d The type of a\n  <code>char16_t</code> string literal is changed from \u201carray of some-integer-type\u201d to \u201carray of <code>const char16_t</code>.\u201d The\n  type of a <code>char32_t</code> string literal is changed from \u201carray of some-integer-type\u201d to \u201carray of <code>const char32_t</code>.\u201d\n  The type of a wide string literal is changed from \u201carray of <code>wchar_t</code>\u201d to \u201carray of <code>const wchar_t</code>.\u201d</p>\n<p id=\"so_17471497_17471602_2\"><strong>Rationale</strong>: This avoids calling an inappropriate overloaded function, which might expect to be able to\n  modify its argument.</p>\n<p id=\"so_17471497_17471602_3\"><strong>Effect on original feature</strong>: Change to semantics of well-defined feature.</p>\n<p id=\"so_17471497_17471602_4\"><strong>Difficulty of converting</strong>: Syntactic transformation. The fix is to add a cast:</p>\n<pre><code>char* p = \"abc\"; // valid in C, invalid in C++\nvoid f(char*) {\n    char* p = (char*)\"abc\"; // OK: cast added\n    f(p);\n    f((char*)\"def\"); // OK: cast added\n}\n</code></pre>\n</blockquote>\n<p>In C++03, this was an exception to the implicit conversion rules. In C++11, this exception is gone, which is perhaps why you couldn't find the point in the Standard where this case is mentioned. </p>\n<p>The paragraph quoted above has been added to Annex C (which is only informative, not normative) so that you could find evidence of the breaking change.</p>\n<p>Anyway, the relevant paragraphs are 2.14.5/8:</p>\n<blockquote>\n<p id=\"so_17471497_17471602_5\">Ordinary string literals and UTF-8 string literals are also referred to as narrow string literals. A narrow\n  string literal has type \u201c<strong>array of <code>n const char</code></strong>\u201d, where <code>n</code> is the size of the string as defined below, and has\n  static storage duration (3.7).</p>\n</blockquote>\n<p>And 4.4/1 (see also 4.2 for array-to-pointer conversions):</p>\n<blockquote>\n<p id=\"so_17471497_17471602_6\">A prvalue of type \u201cpointer to <code>cv1 T</code>\u201d can be converted to a prvalue of type \u201cpointer to <code>cv2 T</code>\u201d if \u201c<code>cv2 T</code>\u201d is\n  <strong>more <code>cv</code>-qualified</strong> than \u201c<code>cv1 T</code>\u201d.</p>\n</blockquote>\n", "OwnerUserId": "1932150", "LastEditorUserId": "1932150", "LastEditDate": "2013-07-04T14:03:36.183", "Id": "17471602", "Score": "8", "CreationDate": "2013-07-04T13:29:27.307", "LastActivityDate": "2013-07-04T14:03:36.183"}});