post_cb({"bq_ids": {"n4140": {"so_247738_247764_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 955}, "so_247738_247902_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 955}}, "n3337": {"so_247738_247902_0": {"length": 18, "quality": 0.9473684210526315, "section_id": 943}, "so_247738_247764_0": {"length": 16, "quality": 0.8888888888888888, "section_id": 943}}}, "247744": {"PostTypeId": "2", "Body": "<p>yes.   </p>\n<p>it should alway be contiguous</p>\n", "OwnerDisplayName": "Keith Nicholas", "LastActivityDate": "2008-10-29T17:46:03.870", "Id": "247744", "CommentCount": "0", "CreationDate": "2008-10-29T17:46:03.870", "ParentId": "247738", "Score": "2", "OwnerUserId": "10431"}, "247762": {"Body": "<p><code>std::vector</code> guarantees that the items are stored in a contiguous array, and is therefore the preferred replacement of arrays and can also be used to interface with platform-dependent low-level code (like Win32 API calls). To get a pointer to the array use:</p>\n<pre><code>&amp;myVector.front();\n</code></pre>\n", "CreationDate": "2008-10-29T17:50:37.620", "ParentId": "247738", "CommentCount": "0", "LastEditDate": "2011-06-29T15:15:14.303", "PostTypeId": "2", "OwnerDisplayName": "Frederik Slijkerman", "LastEditorUserId": "125389", "LastActivityDate": "2011-06-29T15:15:14.303", "Id": "247762", "Score": "4", "OwnerUserId": "12416"}, "247902": {"PostTypeId": "2", "Body": "<p>The C++03 standard added wording to make it clear that vector elements must be contiguous.</p>\n<p>C++03 23.2.4 Paragraph 1 contains the following language which is <em>not</em> in the C++98 standard document:</p>\n<blockquote>\n<p id=\"so_247738_247902_0\">The elements of a <code>vector</code> are stored\n  contiguously, meaning that if <code>v</code> is a\n  <code>vector&lt;T, Allocator&gt;</code> where <code>T</code> is\n  some type other than <code>bool</code>, then it\n  obeys the identity <code>&amp;v[n] == &amp;v[0] +\n  n</code> for all <code>0 &lt;= n &lt; v.size()</code>.</p>\n</blockquote>\n<p>Herb Sutter talks about this change in one of his blog entries, <a href=\"http://herbsutter.wordpress.com/2008/04/07/cringe-not-vectors-are-guaranteed-to-be-contiguous/\" rel=\"noreferrer\">Cringe not: Vectors are guaranteed to be contiguous</a>:</p>\n<blockquote>\n<p id=\"so_247738_247902_1\">... contiguity is in fact part of the\n  vector abstraction. It\u2019s so important,\n  in fact, that when it was discovered\n  that the C++98 standard didn\u2019t\n  completely guarantee contiguity, the\n  C++03 standard was amended to\n  explicitly add the guarantee.</p>\n</blockquote>\n", "OwnerDisplayName": "Mike B", "LastActivityDate": "2008-10-29T18:34:33.460", "Id": "247902", "CommentCount": "2", "CreationDate": "2008-10-29T18:34:33.460", "ParentId": "247738", "Score": "27", "OwnerUserId": "12711"}, "247759": {"PostTypeId": "2", "Body": "<p>Storage is always contiguous, but it may move as the vector's capacity is changed. </p>\n<p>If you had a pointer, reference, or iterator on element zero (or any element) before a capacity-changing operation, it is invalidated and must be reassigned.</p>\n", "OwnerDisplayName": "Adam", "LastActivityDate": "2008-10-29T17:49:44.453", "Id": "247759", "CommentCount": "0", "CreationDate": "2008-10-29T17:49:44.453", "ParentId": "247738", "Score": "13", "OwnerUserId": "20688"}, "247746": {"PostTypeId": "2", "Body": "<p><a href=\"http://www.parashift.com/c++-faq-lite/containers.html#faq-34.3\" rel=\"noreferrer\">Yes it's contiguous</a></p>\n", "OwnerDisplayName": "Jasper Bekkers", "LastActivityDate": "2008-10-29T17:47:51.493", "Id": "247746", "CommentCount": "2", "CreationDate": "2008-10-29T17:47:51.493", "ParentId": "247738", "Score": "10", "OwnerUserId": "31486"}, "247764": {"Body": "<p><strong>Yes, that is a valid assumption (*).</strong></p>\n<p>From the C++03 standard (23.2.4.1):</p>\n<blockquote>\n<p id=\"so_247738_247764_0\">The elements of a vector are stored\n  contiguously, meaning that if v is a\n  vector where T is some\n  type other than bool, then it obeys\n  the identity &amp;v[n] == &amp;v[0] + n for\n  all 0 &lt;= n &lt; v.size().</p>\n</blockquote>\n<p>(*) ... but watch out for the array being reallocated (invalidating any pointers and iterators) after adding elements to it.</p>\n", "CreationDate": "2008-10-29T17:50:55.967", "ParentId": "247738", "CommentCount": "3", "LastEditDate": "2016-11-27T16:31:30.043", "PostTypeId": "2", "LastEditorDisplayName": "Josh", "LastActivityDate": "2016-11-27T16:31:30.043", "LastEditorUserId": "1593077", "Id": "247764", "OwnerDisplayName": "Josh", "Score": "71", "OwnerUserId": "8701"}, "247738": {"ViewCount": "10433", "Body": "<p>If you have an STL vector which has been resized, is it safe to take the address of element 0 and assume the rest of the vector will follow in memory?</p>\n<p>e.g.</p>\n<pre><code>vector&lt;char&gt; vc(100);\n// do some stuff with vc\nvc.resize(200);\nchar* p = &amp;vc[0];\n// do stuff with *p\n</code></pre>\n", "AcceptedAnswerId": "247764", "Title": "Is it safe to assume that STL vector storage is always contiguous?", "CreationDate": "2008-10-29T17:44:13.063", "Id": "247738", "CommentCount": "0", "FavoriteCount": "13", "PostTypeId": "1", "OwnerDisplayName": "Ferruccio Barletta", "LastActivityDate": "2016-11-27T16:31:30.043", "Score": "54", "OwnerUserId": "4086", "Tags": "<c++><stl><vector>", "AnswerCount": "6"}});