post_cb({"bq_ids": {"n4140": {"so_34939724_34939831_0": {"length": 8, "quality": 0.5714285714285714, "section_id": 4706}, "so_34939724_34939831_3": {"length": 19, "quality": 0.7307692307692307, "section_id": 6875}, "so_34939724_34939831_4": {"length": 7, "quality": 0.5384615384615384, "section_id": 6872}}, "n3337": {"so_34939724_34939831_3": {"length": 19, "quality": 0.7307692307692307, "section_id": 6621}, "so_34939724_34939831_4": {"length": 7, "quality": 0.5384615384615384, "section_id": 6618}}, "n4659": {"so_34939724_34939831_0": {"length": 8, "quality": 0.5714285714285714, "section_id": 6103}, "so_34939724_34939831_3": {"length": 18, "quality": 0.6923076923076923, "section_id": 8367}}}, "34939831": {"Id": "34939831", "PostTypeId": "2", "Body": "<p>Variable-length arrays are a C99 feature but allowed as an extension in GCC for C++. In C99, it's illegal to initialize a variable-length array:</p>\n<blockquote>\n<p id=\"so_34939724_34939831_0\">6.7.8/3 The type of the entity to be initialized shall be an array of unknown size or an object type that is not a variable length array\n  type.</p>\n</blockquote>\n<p>Whether or not it's illegal to initialize a VLA in GCC is not stated in the <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html#Variable-Length\" rel=\"nofollow\">manual</a>, so you can assume it is <strong>undefined behavior</strong>. However, you also have another source of undefined behavior: <code>f()</code> has no return statement, therefore anything in your program can happen (a segmentation fault and exception were two different results I got in GCC 4.9.0)</p>\n<p>The reason it compiles successfully in GCC 4.9.0 is only something the developers can answer. File a bug report.</p>\n<p><strong>Speculation</strong>: \"Runtime-sized arrays\" were <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3639.html\" rel=\"nofollow\">proposed</a> to be added to C++14 but did not make the cut. GCC implements the original proposal in 4.9. The exception I mentioned earlier was a feature in the proposal:</p>\n<blockquote>\n<p id=\"so_34939724_34939831_1\">Add a new section just before 18.6.2.2 new.badlength: </p>\n<p id=\"so_34939724_34939831_2\"><strong>Class <code>bad_array_length</code></strong></p>\n<pre><code>  namespace std {\n     class bad_array_length : public bad_alloc {\n     public:\n        bad_array_length() noexcept;\n     };\n  }\n</code></pre>\n<p id=\"so_34939724_34939831_3\">The class <code>bad_array_length</code> defines the type of objects thrown as\n  exceptions by the implementation to report an attempt to allocate an\n  array of runtime bound with a size less than or equal to zero or\n  greater than an implementation-defined limit (8.3.4 dcl.array).</p>\n<pre><code>bad_array_length() noexcept;\n</code></pre>\n<p id=\"so_34939724_34939831_4\"><em>Effects</em>: constructs an object of class <code>bad_array_length</code>.\n  <em>Remarks</em>: the result of calling <code>what()</code> on the newly constructed object is implementation-defined.</p>\n</blockquote>\n<p>The docs state that in GCC 5 and beyond, <a href=\"https://gcc.gnu.org/gcc-5/changes.html#cxx\" rel=\"nofollow\">just regular VLAs</a> are supported now. If that's the case, the code should be rejected.</p>\n", "LastEditorUserId": "5824694", "LastActivityDate": "2016-01-22T05:56:37.610", "Score": "5", "CreationDate": "2016-01-22T05:47:11.107", "ParentId": "34939724", "CommentCount": "1", "OwnerUserId": "5824694", "LastEditDate": "2016-01-22T05:56:37.610"}, "34939724": {"ViewCount": "236", "Body": "<p>On Gcc 4.8.2 version and before , below code fails to compile because array size is not compile time constant .</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint f(){return 10;}\nint main()\n{\n    int i=10;  \n    int arr[f()]={}; //error \n}\n</code></pre>\n<p>When I tried to run similar code on 4.9 and onward ,same code got successfully compiled .</p>\n<p><strong>Is it the compiler which allowed such code or it is the part of standard now ?</strong></p>\n<p>Note : Above code fails to compile till <strong>clang 3.7.1</strong></p>\n", "Title": "Difference in the behavior of gcc 4.8.2 and gcc 4.9.0 in case of array size", "CreationDate": "2016-01-22T05:38:13.343", "LastActivityDate": "2016-01-22T05:56:37.610", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-01-22T05:47:58.857", "LastEditorUserId": "5170218", "Id": "34939724", "Score": "0", "OwnerUserId": "5170218", "Tags": "<c++><arrays><g++>", "AnswerCount": "1"}});