post_cb({"23687824": {"ParentId": "23687741", "CommentCount": "0", "Body": "<p>To access the private members of <code>Register</code>, make <code>operator&lt;&lt;</code> a <code>friend function</code>:</p>\n<pre><code>class Register{                                             \n    private:\n    int elementNum;\n    Film* pData;\n    friend ostream &amp;operator&lt;&lt;(ostream &amp; os,const Register &amp;v);\n};\n</code></pre>\n", "OwnerUserId": "1783614", "PostTypeId": "2", "Id": "23687824", "Score": "1", "CreationDate": "2014-05-15T20:17:42.217", "LastActivityDate": "2014-05-15T20:17:42.217"}, "23689718": {"ParentId": "23687741", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>or if you wish to avoid polluting your class with unwanted friends, defer the formatting to a public member of Register. </p>\n<pre><code>class Register{                                             \npublic:\n    void writeTo(std::ostream&amp; os) const {\n        for( int i=0; i&lt;elementNum; i++){\n            os &lt;&lt; pData[i].print() &lt;&lt; std::endl;\n        }\n    }\nprivate:\n    //...\n};\n\nstd::ostream &amp;operator&lt;&lt;( std::ostream &amp; os,const Register &amp;v) {\n    v.writeTo(os);\n    return os;\n}\n</code></pre>\n<p>If you make the writeTo function defer to a protected virtual function, then operator&lt;&lt; will work on anything derived from Register, even in a multi-threaded environment.</p>\n<pre><code>class Register{                                             \npublic:\n    // public non-polymorphic interface...\n    void writeTo(std::ostream&amp; os) const {\n        os &lt;&lt; \"any header information\\n\" &lt;&lt; endl;\n        std::lock_guard&lt;std::mutex&gt; myLock(_myInternalMutex);  // in MT environment\n        handleWriteTo(os);  // defer to protected polymorphic implementation\n    }\n\nprotected:\n    virtual void handleWriteTo(std::ostream&amp; os) const {\n        for( int i=0; i&lt;elementNum; i++){\n            os &lt;&lt; pData[i].print() &lt;&lt; std::endl;\n        }\n    }\nprivate:\n    //...\n};\n\nstd::ostream &amp;operator&lt;&lt;( std::ostream &amp; os,const Register &amp;v) {\n    v.writeTo(os);\n    return os;\n}\n</code></pre>\n", "OwnerUserId": "2015579", "LastEditorUserId": "2015579", "LastEditDate": "2014-05-15T22:33:41.607", "Id": "23689718", "Score": "0", "CreationDate": "2014-05-15T22:25:38.023", "LastActivityDate": "2014-05-15T22:33:41.607"}, "23687841": {"ParentId": "23687741", "CommentCount": "0", "Body": "<p>I implemented the OS-Operator in a project like this:</p>\n<p><strong>XYZ.h file</strong></p>\n<blockquote>\n<p id=\"so_23687741_23687841_0\">friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Liwanze&amp; arg);</p>\n</blockquote>\n<p><strong>XYZ.cpp file</strong></p>\n<pre><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Liwanze&amp; arg) {\nstring area = \"\";\nif (arg.loc == 1)\n    area = \"Buxtehude\";\nif (arg.loc == 2)\n    area = \"Bangladesch\";\nif (arg.loc == 3)\n    area = \"Zimbabwe\";\nif (arg.loc == 4)\n    area = \"Bronx\";\nos &lt;&lt; arg.name &lt;&lt; \" [\" &lt;&lt; area &lt;&lt; \"] \";\nreturn os;\n</code></pre>\n<p>}</p>\n", "OwnerUserId": "2533290", "PostTypeId": "2", "Id": "23687841", "Score": "1", "CreationDate": "2014-05-15T20:18:46.743", "LastActivityDate": "2014-05-15T20:18:46.743"}, "23687847": {"ParentId": "23687741", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>You have to declare <code>operator&lt;&lt;</code> as a friend if access to <code>Register</code> implementation (private data) has to be granted:</p>\n<pre><code>class Register{                                             \n    private:\n    //...\n    friend std::ostream &amp;operator&lt;&lt;( std::ostream &amp; os,const Register &amp;v);\n};\n\nstd::ostream &amp;operator&lt;&lt;( std::ostream &amp; os,const Register &amp;v) {\n    for( int i=0; i&lt;v.elementNum; i++){\n        os &lt;&lt; v.pData[i].print() &lt;&lt; std::endl;\n    }\n    return os;\n}\n</code></pre>\n<p>Friend function has access to all private ( as well as protected and public) data of a class that declared a friend.</p>\n<p>C++ Standard n3337 <strong>\u00a7</strong> 11.3/1 says</p>\n<p>Friends</p>\n<blockquote>\n<p id=\"so_23687741_23687847_0\">A friend of a class is a function or class that is given permission to\n  use the private and protected member names from the class. A class\n  specifies its friends, if any, by way of friend declarations. Such\n  declarations give special access rights to the friends, but they do\n  not make the nominated friends members of the befriending class.</p>\n</blockquote>\n<p><strong>\u00a7</strong> 11.3/2</p>\n<blockquote>\n<p id=\"so_23687741_23687847_1\">Declaring a class to be a friend implies that the names of private and\n  protected members from the class granting friendship can be accessed\n  in the base-specifiers and member declarations of the befriended\n  class.</p>\n</blockquote>\n", "OwnerUserId": "1141471", "LastEditorUserId": "1141471", "LastEditDate": "2014-05-15T20:30:58.413", "Id": "23687847", "Score": "2", "CreationDate": "2014-05-15T20:19:08.413", "LastActivityDate": "2014-05-15T20:30:58.413"}, "23687811": {"ParentId": "23687741", "CommentCount": "7", "Body": "<p>Make your <code>operator&lt;&lt;</code> a friend of the class. You can read it up <a href=\"http://www.parashift.com/c++-faq/output-operator.html\" rel=\"nofollow\">here</a>.</p>\n", "OwnerUserId": "2412846", "PostTypeId": "2", "Id": "23687811", "Score": "1", "CreationDate": "2014-05-15T20:17:05.297", "LastActivityDate": "2014-05-15T20:17:05.297"}, "23687822": {"ParentId": "23687741", "CommentCount": "0", "Body": "<p>You could make <code>operator&lt;&lt;</code> a <code>friend</code> of class <code>Register</code> see code below:</p>\n<pre><code>class Register{                                             \n    private:\n    friend ostream &amp;operator&lt;&lt;(ostream &amp; os,const Register &amp;v);\n    int elementNum;\n    Film* pData;\n};\n</code></pre>\n<p>Thus, <code>operator&lt;&lt;</code> will have access to class <code>Register</code> private members.</p>\n", "OwnerUserId": "2352671", "PostTypeId": "2", "Id": "23687822", "Score": "1", "CreationDate": "2014-05-15T20:17:36.323", "LastActivityDate": "2014-05-15T20:17:36.323"}, "23687741": {"CommentCount": "2", "ViewCount": "224", "CreationDate": "2014-05-15T20:12:36.980", "LastActivityDate": "2014-05-15T22:33:41.607", "Title": "Operator << and inheritance/composition", "AcceptedAnswerId": "23687847", "PostTypeId": "1", "Id": "23687741", "Score": "0", "Body": "<p>I've found myself in a bit of trouble trying to overload operator&lt;&lt; correctly. I've searched around other questions about it, but none of the answers seemed to fit this one, so here it is:\nI have a class (Register) that stores specimens of another class(subclasses of Film, which is abstract). The overloaded operator &lt;&lt; for Register should put all the data stored in each Film type element on screen through the ostream class.Here's the code: </p>\n<pre><code>class Register{                                             \n    private:\n    int elementNum;\n    Film* pData;\n    };\n    ostream &amp;operator&lt;&lt;(ostream &amp; os,const Register &amp;v);\n</code></pre>\n<p>These are in the header, operator &lt;&lt; in the cpp:    </p>\n<pre><code>ostream &amp;operator&lt;&lt;(ostream &amp; os,const Register &amp;v){\n    for(int i=0;i&lt;v.elementNum;i++){\nos&lt;&lt;v.pData[i].print()&lt;&lt;endl;\n}\nreturn os;\n    }\n</code></pre>\n<p>Problem is, this way i cannot access the private variables of Register. So I tried putting the overaloaded operator&lt;&lt; as a member of Register, but then the compiler tells me the function must take only one argument. Last, if I remove ostream&amp; os from the parameters, it tells me the function needs two arguments. So i would be interested in a solution where the information stored in pData can be put on screen efficiently with operator &lt;&lt;. Thanks in advance!</p>\n", "Tags": "<c++><overloading><operator-keyword>", "OwnerUserId": "3642313", "AnswerCount": "6"}, "bq_ids": {"n4140": {"so_23687741_23687847_1": {"section_id": 6685, "quality": 1.0, "length": 18}, "so_23687741_23687847_0": {"section_id": 6684, "quality": 1.0, "length": 34}}, "n3337": {"so_23687741_23687847_1": {"section_id": 6440, "quality": 1.0, "length": 18}, "so_23687741_23687847_0": {"section_id": 6439, "quality": 1.0, "length": 34}}, "n4659": {"so_23687741_23687847_1": {"section_id": 8160, "quality": 1.0, "length": 18}, "so_23687741_23687847_0": {"section_id": 8159, "quality": 1.0, "length": 34}}}});