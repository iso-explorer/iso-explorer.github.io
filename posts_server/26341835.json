post_cb({"26341835": {"CommentCount": "3", "AcceptedAnswerId": "26342042", "CreationDate": "2014-10-13T14:00:04.873", "LastActivityDate": "2014-10-13T14:47:36.370", "PostTypeId": "1", "ViewCount": "108", "FavoriteCount": "1", "Title": "Implicit construction of std::string does not happen during copy-initialization", "Id": "26341835", "Score": "4", "Body": "<p>I'm attempting to copy-initialize my <code>CObj</code> class as follows in the <code>main()</code> function:</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nclass CObj\n{\npublic:\n   CObj(std::string const&amp; str) : m_str(str) { std::cout &lt;&lt; \"constructor\" &lt;&lt; std::endl; }\n\n   ~CObj() { std::cout &lt;&lt; \"destructor\" &lt;&lt; std::endl; }\n\nprivate:\n   std::string m_str;\n};\n\nint main()\n{\n    CObj obj = \"hello\";\n\n    std::cout &lt;&lt; \"done\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>However, the line <code>CObj obj = \"hello\"</code> fails to compile even though <code>std::string</code> is implicitly constructible from a <code>char const*</code>. According to my understanding here, this should work. Any reason why it doesn't? If I do this it works:</p>\n<pre><code>CObj obj = std::string(\"hello\");\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "157971", "AnswerCount": "2"}, "26342042": {"ParentId": "26341835", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>The literal <code>\"Hello\"</code> has type <code>const char[6]</code> : in order to call your constructor, two conversions are required : one to <code>std::string</code> and a second one to <code>CObj</code> . </p>\n<p>But C++ only allows one user-defined conversion when doing an implicit conversion :</p>\n<p>C++ Standard section \u00a7 12.3/4 [class.conv]</p>\n<blockquote>\n<p id=\"so_26341835_26342042_0\">Type conversions of class objects can be specified by constructors and by conversion functions. These conversions are called user-defined conversions and are used for implicit type conversions</p>\n<p id=\"so_26341835_26342042_1\">[...]</p>\n<p id=\"so_26341835_26342042_2\">At most one user-defined conversion (constructor or conversion function) is implicitly applied to a single value.</p>\n</blockquote>\n<hr>\n<p>This is why this works :</p>\n<pre><code>CObj obj = std::string(\"hello\");\n</code></pre>\n<p>Or this:</p>\n<pre><code>CObj obj(\"hello\");\n</code></pre>\n<p>Or you could provide a constructor that accepts a <code>const char*</code> :</p>\n<pre><code>CObj(const char* cstr) : m_str(cstr) { ... }\n</code></pre>\n<p>I would always advise to make such constructors <code>explicit</code> to avoid unwanted implicit conversions, unless it really brings something to the user of the class.</p>\n</hr>", "OwnerUserId": "3510483", "LastEditorUserId": "3510483", "LastEditDate": "2014-10-13T14:47:36.370", "Id": "26342042", "Score": "4", "CreationDate": "2014-10-13T14:10:08.707", "LastActivityDate": "2014-10-13T14:47:36.370"}, "bq_ids": {"n4140": {"so_26341835_26342042_2": {"section_id": 386, "quality": 1.0, "length": 11}, "so_26341835_26342042_0": {"section_id": 383, "quality": 0.8823529411764706, "length": 15}}, "n3337": {"so_26341835_26342042_2": {"section_id": 377, "quality": 1.0, "length": 11}, "so_26341835_26342042_0": {"section_id": 374, "quality": 0.8823529411764706, "length": 15}}, "n4659": {"so_26341835_26342042_2": {"section_id": 403, "quality": 1.0, "length": 11}, "so_26341835_26342042_0": {"section_id": 400, "quality": 0.8823529411764706, "length": 15}}}, "26342322": {"ParentId": "26341835", "CommentCount": "0", "Body": "<p>You are limited to at most one user-defined conversion when instantiating an object (i.e. <code>char[6]</code> -&gt; <code>std::string</code> and <code>std::string</code> -&gt; <code>CObj</code> is one conversion too many).</p>\n<p>To fix:</p>\n<pre><code>int main()\n{\n    using namespace std::literals::string_literals; // this is necessary\n                                                    // for the literal conversion\n\n    CObj obj = \"hello\"s; // note the extra \"s\", (which constructs a std::string)\n\n    std::cout &lt;&lt; \"done\" &lt;&lt; std::endl;\n}\n</code></pre>\n", "OwnerUserId": "186997", "PostTypeId": "2", "Id": "26342322", "Score": "2", "CreationDate": "2014-10-13T14:24:51.897", "LastActivityDate": "2014-10-13T14:24:51.897"}});