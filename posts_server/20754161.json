post_cb({"20754198": {"ParentId": "20754161", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_20754161_20754198_0\">If the values 11, 22 is in fact converted to string, then why is 0 not converted to a string.</p>\n</blockquote>\n<p>They're not.  Your 11 and 12 assignments are matching <code>basic_string&amp; operator=( CharT ch );</code> - so it's treating the numbers 11 and 12 as character constants - presumably not what you wanted.  Say you sent them to a terminal or printer ala <code>std::cout &lt;&lt; testmap[\"one\"];</code> - 11 corresponds to a \"Vertical Tab\" control code which might leave some blank lines, and 12 to \"Form Feed\" which might leave the rest of a printed page blank or clear the screen (see <a href=\"http://en.wikipedia.org/wiki/ASCII\" rel=\"noreferrer\">http://en.wikipedia.org/wiki/ASCII</a>).</p>\n<p><code>0</code> is special in the sense that it's allowed to be implicitly converted to a pointer (in C++03 <code>NULL</code> would be defined as <code>0</code>), and for that reason the conversion is ambiguous (i.e. <code>char</code> or <code>const char*</code>?) - see <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/operator%3D\" rel=\"noreferrer\">http://en.cppreference.com/w/cpp/string/basic_string/operator%3D</a> for a list of the <code>std::string operator=</code>s.</p>\n<blockquote>\n<p id=\"so_20754161_20754198_1\">4.10 Pointer conversions [conv.ptr]\n  1 A null pointer constant is an integer literal (2.14.2) with value zero or a prvalue of type std::nullptr_t.\n  A null pointer constant can be converted to a pointer type; ...</p>\n</blockquote>\n<p>Other integers don't have this pointer conversion dispensation - that's why you're not getting compiler errors for them.</p>\n<p>You <em>must</em> either:</p>\n<ul>\n<li>properly convert your numbers to string representation, e.g. using <code>std::to_string()</code>, <code>boost::lexical_cast</code>, a <code>std::ostringstream</code> etc.., or</li>\n<li>use a <code>std::map&lt;string, int&gt;</code> or similar instead.</li>\n</ul>\n", "OwnerUserId": "410767", "LastEditorUserId": "410767", "LastEditDate": "2013-12-24T04:37:37.753", "Id": "20754198", "Score": "13", "CreationDate": "2013-12-24T02:46:58.833", "LastActivityDate": "2013-12-24T04:37:37.753"}, "20754161": {"CommentCount": "1", "AcceptedAnswerId": "20754198", "PostTypeId": "1", "LastEditorUserId": "1783614", "CreationDate": "2013-12-24T02:41:01.373", "LastActivityDate": "2013-12-24T04:37:37.753", "LastEditDate": "2013-12-24T02:46:31.367", "ViewCount": "507", "FavoriteCount": "2", "Title": "STL map<string, string>, assign 0 value to a key causes compile error", "Id": "20754161", "Score": "4", "Body": "<p>I am running into a compiler issue when using map class, and wrote the following simple program to highlight the error:</p>\n<pre><code>  1 #include &lt;string&gt;\n  2 #include &lt;map&gt;\n  3\n  4 using namespace std;\n  5\n  6 int main()\n  7 {\n  8     map&lt;string, string&gt; testmap;\n  9\n 10\n 11     testmap[\"one\"] = 11;\n 12     testmap[\"two\"] = 22;\n 13     testmap[\"zero\"] = 0;\n 14     // testmap[\"zero\"] = 10;\n 15\n 16     return 0;\n 17 }\n</code></pre>\n<p>I get the following compilation error:</p>\n<blockquote>\n<p id=\"so_20754161_20754161_0\">g++ ./test.cc\n  ./test.cc: In function 'int main()':\n  ./test.cc:13:23: error: ambiguous overload for 'operator=' in 'testmap.std::map&lt;_Key, _Tp, _Compare, _Alloc&gt;::operator[], std::basic_string, std::less &gt;, &gt;std::allocator, std::basic_string &gt; &gt; &gt;((* &amp; std::basic_string(((const char*)\"zero\"), (<em>(const std::allocator</em>)(&amp; std::allocator()))))) = 0'\n  ./test.cc:13:23: note: candidates are:\n  In file included from /usr/include/c++/4.7/string:54:0,\n                  from ./test.cc:1:\n  /usr/include/c++/4.7/bits/basic_string.h:543:7: note: std::basic_string&lt;_CharT, _Traits, _Alloc&gt;&amp; std::basic_string&lt;_CharT, _Traits, _Alloc&gt;::operator=(const std::basic_string&lt;_CharT, _Traits, _Alloc&gt;&amp;) [with &gt;_CharT = char; _Traits = std::char_traits; _Alloc = std::allocator; std::basic_string&lt;_CharT, _Traits, _Alloc&gt; = std::basic_string]\n  /usr/include/c++/4.7/bits/basic_string.h:551:7: note: std::basic_string&lt;_CharT, _Traits, _Alloc&gt;&amp; std::basic_string&lt;_CharT, _Traits, _Alloc&gt;::operator=(const _CharT*) [with _CharT = char; _Traits = &gt;std::char_traits; _Alloc = std::allocator; std::basic_string&lt;_CharT, _Traits, _Alloc&gt; = std::basic_string]\n  /usr/include/c++/4.7/bits/basic_string.h:562:7: note: std::basic_string&lt;_CharT, _Traits, _Alloc&gt;&amp; std::basic_string&lt;_CharT, _Traits, _Alloc&gt;::operator=(_CharT) [with _CharT = char; _Traits = std::char_traits; _Alloc = std::allocator; std::basic_string&lt;_CharT, _Traits, _Alloc&gt; = std::basic_string]</p>\n</blockquote>\n<p>I have a few questions:\n1. Initially I thought the map \"values\" - 11 and 22 were being converted to string.  However, after getting this compiler error makes me believe otherwise.  What is exactly happening under the hood in the following:\n    testmap[\"one\"] = 11;</p>\n<ol>\n<li><p>If the values 11, 22 is in fact converted to string, then why is 0 not converted to a string.</p></li>\n<li><p>I am trying hard to understand the compiler error message, so I can decode the error myself.  I understand parts of it, where the template map class definition is expanded with the key/value being of type string.  Can someone please point me to the parts of the error message that may help me understand the issue.</p></li>\n</ol>\n<p>Any help is much appreciated.</p>\n<p>Thank you,\nAhmed.</p>\n", "Tags": "<c++><string><c++11><stl>", "OwnerUserId": "1348939", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_20754161_20754198_1": {"section_id": 39, "quality": 0.7272727272727273, "length": 16}}, "n3337": {"so_20754161_20754198_1": {"section_id": 36, "quality": 0.6363636363636364, "length": 14}}, "n4659": {"so_20754161_20754198_1": {"section_id": 39, "quality": 0.7272727272727273, "length": 16}}}});