post_cb({"bq_ids": {"n4140": {"so_44913311_44913311_0": {"length": 15, "quality": 1.0, "section_id": 7070}}, "n3337": {"so_44913311_44913311_0": {"length": 15, "quality": 1.0, "section_id": 6814}}, "n4659": {"so_44913311_44913311_0": {"length": 15, "quality": 1.0, "section_id": 8568}}}, "44913417": {"Id": "44913417", "PostTypeId": "2", "Body": "<p>Two reasons, at least.</p>\n<p>First, that <code>enum { i = 1 };</code> might not be present in <strong>every</strong> translation unit that includes the header that defines <code>X</code>. The result would be conflicting definitions of <code>X</code>.</p>\n<p>Second, suppose that, in your first example, the class also has a member function defined <strong>after</strong> the array:</p>\n<pre><code>void show() const {\n    for (int idx = 0; idx &lt; i; ++idx)\n        std::cout &lt;&lt; v[idx];\n}\n</code></pre>\n<p>How is the compiler supposed to figure out that the <code>i</code> here should be the same as the <strong>first</strong> <code>i</code> and not the <strong>second</strong>?</p>\n", "LastActivityDate": "2017-07-04T20:10:07.733", "CommentCount": "1", "CreationDate": "2017-07-04T20:10:07.733", "ParentId": "44913311", "Score": "1", "OwnerUserId": "1593860"}, "44913311": {"ViewCount": "48", "Body": "<p>I understand all the errors shown in the example in <a href=\"http://eel.is/c++draft/basic.scope.class#5\" rel=\"nofollow noreferrer\">[basic.scope.class]/5</a> refer to <a href=\"http://eel.is/c++draft/basic.scope.class#2\" rel=\"nofollow noreferrer\">[basic.scope.class]/2</a>.</p>\n<p>[basic.scope.class]/2:</p>\n<blockquote>\n<p id=\"so_44913311_44913311_0\">A name N used in a class S shall refer to the same declaration in its\n  context and when re-evaluated in the completed scope of S. No\n  diagnostic is required for a violation of this rule.</p>\n</blockquote>\n<p>But what I'd like to know is why do we need such a rule in the language in the first place?</p>\n<p>For instance, consider the first example in [basic.scope.class]/5:</p>\n<p>What would be problem if the language allowed this, i.e., <code>v[i]</code> an array of one element below</p>\n<pre><code>enum { i = 1 };\n\nclass X {\n  char  v[i];\n  enum { i = 2 };\n};\n</code></pre>\n<p>and an array of two elements in the example that follows?</p>\n<pre><code>enum { i = 1 };\n\nclass X {\n  enum { i = 2 };\n  char  v[i];\n};\n</code></pre>\n", "Title": "Why do we need [basic.scope.class]/2?", "CreationDate": "2017-07-04T19:58:30.123", "LastActivityDate": "2017-07-04T20:23:34.243", "CommentCount": "2", "PostTypeId": "1", "Id": "44913311", "Score": "1", "OwnerUserId": "5479741", "Tags": "<c++><class><scope><language-lawyer>", "AnswerCount": "2"}, "44913442": {"Id": "44913442", "PostTypeId": "2", "Body": "<p>In this code snippet</p>\n<pre><code>enum { i = 1 };\n\nclass X {\n  char  v[i];\n  enum { i = 2 };\n};\n</code></pre>\n<p>when the array is declared the name <code>i</code> refers to the enumerator declared in the outer scope and the array is declared as having only one element.</p>\n<p>If to exchange the declarations of the data members we will get another result that is that the enumerator declared in the class definition hides the enumerator declared in the outer scope. As result the array has two elements.</p>\n<pre><code>enum { i = 1 };\n\nclass X {\n  enum { i = 2 };\n  char  v[i];\n};\n</code></pre>\n<p>This is a reason for bugs that difficult to find.</p>\n<p>For example let's assume that the class has a constructor within which the array is initialized.</p>\n<pre><code>enum { i = 1 };\n\nclass X {\npublic:\n    X()\n    {\n        for (size_t j; j &lt; i; j++) v[j] = 'A' + j;\n    }\nprivate:\n    char  v[i];\n    enum { i = 2 };\n};\n</code></pre>\n<p>As you can see there will be undefined behavior. Within the constructor the name <code>i</code> refers to the enumerator declared in the class while in the declaration of the array itself the name <code>i</code> refers to the enumerator declared in the outer scope.</p>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2017-07-04T20:23:34.243", "Score": "0", "CreationDate": "2017-07-04T20:12:31.057", "ParentId": "44913311", "CommentCount": "3", "OwnerUserId": "2877241", "LastEditDate": "2017-07-04T20:23:34.243"}});