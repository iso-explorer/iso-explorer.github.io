post_cb({"bq_ids": {"n4140": {"so_29280690_29280690_1": {"length": 8, "quality": 1.0, "section_id": 5851}, "so_29280690_29280690_2": {"length": 16, "quality": 1.0, "section_id": 5852}, "so_29280690_29280690_3": {"length": 50, "quality": 0.9433962264150944, "section_id": 5873}}, "n3337": {"so_29280690_29280690_3": {"length": 49, "quality": 0.9245283018867925, "section_id": 5644}, "so_29280690_29280690_2": {"length": 16, "quality": 1.0, "section_id": 5622}, "so_29280690_29280690_1": {"length": 8, "quality": 1.0, "section_id": 5621}}, "n4659": {"so_29280690_29280690_3": {"length": 50, "quality": 0.9433962264150944, "section_id": 7356}, "so_29280690_29280690_2": {"length": 14, "quality": 0.875, "section_id": 7331}, "so_29280690_29280690_1": {"length": 8, "quality": 1.0, "section_id": 7330}}}, "29281779": {"Id": "29281779", "PostTypeId": "2", "Body": "<p>It looks to me like the benefit of allowing multiple access specifiers in the <code>union</code> case were not outweighed by the cost of the inconsistency and additional words introduced.</p>\n", "LastActivityDate": "2015-03-26T14:59:30.917", "CommentCount": "0", "CreationDate": "2015-03-26T14:59:30.917", "ParentId": "29280690", "Score": "0", "OwnerUserId": "251738"}, "29280690": {"ViewCount": "94", "Body": "<p>\u00a79.0</p>\n<blockquote>\n<p id=\"so_29280690_29280690_0\">7. A class S is a standard-layout class if it:</p>\n<p id=\"so_29280690_29280690_1\">(7.3)\n  has the same access control (Clause\n  11\n  ) for all non-static data members,</p>\n<p id=\"so_29280690_29280690_2\">8\n  A\n  standard-layout struct\n  is a standard-layout class defined with the\n  class-key\n  struct\n  or the\n  class-key\n  class\n  .\n  A\n  standard-layout union\n  is a standard-layout class defined with the\n  class-key\n  union\n  .</p>\n</blockquote>\n<p>AFAICT, \u00a79.0.7.3 exists because of \u00a79.2.13</p>\n<blockquote>\n<p id=\"so_29280690_29280690_3\">13\n  Nonstatic data members of a (non-union) class with the same access control (Clause\n  11\n  ) are allocated so\n  that later members have higher addresses within a class object. <strong>The order of allocation of non-static data\n  members with different access control is unspecified</strong> (Clause\n  11\n  ). Implementation alignment requirements\n  might cause two adjacent members not to be allocated immediately after each other; so might requirements\n  for space for managing virtual functions (\n  10.3\n  ) and virtual base classes (\n  10.1\n  ).</p>\n</blockquote>\n<p>However, this does not seem to apply to unions, as all (non-static data) members of a union have the same address.  Is this a defect in the standard?  Or is there some compelling reason why that I'm not seeing?</p>\n", "Title": "Why are unions which have members with differing access control not standard-layout?", "CreationDate": "2015-03-26T14:11:28.057", "LastActivityDate": "2015-04-24T15:16:25.053", "CommentCount": "0", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-04-24T15:16:25.053", "LastEditorUserId": "718379", "Id": "29280690", "Score": "1", "OwnerUserId": "483486", "Tags": "<c++><language-lawyer><unions><standard-layout>", "AnswerCount": "1"}});