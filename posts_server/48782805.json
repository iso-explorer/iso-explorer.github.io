post_cb({"48783054": {"Id": "48783054", "PostTypeId": "2", "Body": "<p>It's a compiler optimization on the constructor. You can check it changing the optimization level.</p>\n<p>As the data member <code>number</code> is not initialized, the value of the variable is following the UB rule. That said the compiler (cpp.sh cited above) optimize the constructor at Full (-O2) assigning always 10, as it's times cheaper than trying to do the string comparison and make a jump or an assignment.</p>\n<p>Tried to change the optimization level to <code>normal</code> and it didn't happen.</p>\n<p>Tried with VS 2017, debug &amp; release and it doesn't happen.</p>\n<p>It's an optimization done by the compiler. Specifically by the compiler used by cpp.sh at <code>Full (-o2)</code></p>\n", "CommentCount": "0", "LastActivityDate": "2018-02-14T08:53:52.193", "CreationDate": "2018-02-14T08:53:52.193", "ParentId": "48782805", "Score": "4", "OwnerUserId": "1140699"}, "48782805": {"ViewCount": "182", "LastEditDate": "2018-02-14T08:41:23.163", "AcceptedAnswerId": "48783083", "Title": "C++ Weird behavior with String comparison", "CreationDate": "2018-02-14T08:38:07.480", "LastActivityDate": "2018-02-14T08:55:44.013", "CommentCount": "6", "FavoriteCount": "0", "OwnerUserId": "1688565", "PostTypeId": "1", "LastEditorUserId": "1000551", "Id": "48782805", "Score": "6", "Body": "<p>I am using <a href=\"http://cpp.sh\" rel=\"noreferrer\">cpp.sh</a> to compile and run this code. I am expecting the value of <code>number</code> to be either default initialized to <code>0</code> or some garbage value. However, in the constructor, even though the <code>if</code> condition is false, the value of <code>number</code> is still initialized to <code>10</code>. Can someone explain to me what's happening?</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Number\n{\n    int number;\npublic:\n    Number(std::string s)\n    {\n        if (s == \"foo\")\n        {\n            number = 10;\n        }\n    }\n    int getNumber()\n    {\n        return number;\n    }\n};\n\nint main()\n{\n  Number n(\"bar\");\n  std::cout &lt;&lt; n.getNumber() &lt;&lt; std::endl;\n}\n</code></pre>\n", "Tags": "<c++><string>", "AnswerCount": "5"}, "48782911": {"Id": "48782911", "PostTypeId": "2", "Body": "<p>In case s is not <code>\"foo\"</code> your code leaves number <strong>uninitialized</strong> when constructing an instance of <code>Number</code>. Then when you read the value of number using <code>n.getNumber()</code> you invoke <strong>undefined bahavior</strong>. This means the value of returned by this function can be any integer number (including by chance the value 10 that you don't expect). </p>\n", "CommentCount": "4", "LastActivityDate": "2018-02-14T08:44:46.353", "CreationDate": "2018-02-14T08:44:46.353", "ParentId": "48782805", "Score": "2", "OwnerUserId": "812912"}, "bq_ids": {"n4140": {"so_48782805_48783083_0": {"length": 26, "quality": 1.0, "section_id": 3291}}, "n4659": {"so_48782805_48783083_0": {"length": 26, "quality": 1.0, "section_id": 4053}}}, "48783083": {"Id": "48783083", "PostTypeId": "2", "Body": "<p>From clause 9 in <a href=\"http://www.open-std.org/jtc1/sc22/open/n2356/decl.html\" rel=\"noreferrer\">[dcl.decl]</a></p>\n<blockquote>\n<p id=\"so_48782805_48783083_0\">If no initializer is specified for an object, the object is default-initialized. When storage for an object\n  with automatic or dynamic storage duration is obtained, the object has an <em>indeterminate value</em>, and if\n  no initialization is performed for the object, that object retains an indeterminate value until that value is\n  replaced</p>\n</blockquote>\n<p>Value 10 is placed just as optimization done by compiler to eliminate conditional statement.</p>\n", "CommentCount": "0", "LastActivityDate": "2018-02-14T08:55:44.013", "CreationDate": "2018-02-14T08:55:44.013", "ParentId": "48782805", "Score": "10", "OwnerUserId": "312896"}, "48782929": {"PostTypeId": "2", "LastEditDate": "2018-02-14T08:48:48.993", "ParentId": "48782805", "CommentCount": "0", "LastEditorUserId": "1989269", "LastActivityDate": "2018-02-14T08:48:48.993", "CreationDate": "2018-02-14T08:45:58.027", "Id": "48782929", "Score": "4", "Body": "<p>All the primitive data types should be initialized. Here you are accessing an <code>int</code> without initializing. You can initialize the variable while declaring using <code>{}</code>. For example, see below code  - </p>\n<pre><code>class Number\n{\n    int number {0}; // or any other default value.\n};\n</code></pre>\n<p>Please note that accessing uninitialized variable is <strong>Undefined Behavior</strong>. For more details regarding Undefined Behavior, you can see this - <a href=\"http://en.cppreference.com/w/cpp/language/ub\" rel=\"nofollow noreferrer\">http://en.cppreference.com/w/cpp/language/ub</a> </p>\n", "OwnerUserId": "1989269"}, "48782863": {"Id": "48782863", "PostTypeId": "2", "Body": "<p>So, in this lucky case undefined behavior causes that number is treated as initialized by 10 (but actually it is not!). Trying to use this will cause more UB in your code.</p>\n<p>To avoid such problems, prefer to always initialize a variable with some value. For example:</p>\n<pre><code>Number(std::string s)\n    : number ( -1 )\n{\n    if (s == \"foo\")\n    {\n        number = 10;\n    }\n}\n</code></pre>\n", "CommentCount": "1", "LastActivityDate": "2018-02-14T08:41:49.577", "CreationDate": "2018-02-14T08:41:49.577", "ParentId": "48782805", "Score": "3", "OwnerUserId": "7592072"}});