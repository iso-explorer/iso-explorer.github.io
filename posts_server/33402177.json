post_cb({"33402274": {"ParentId": "33402177", "PostTypeId": "2", "CommentCount": "8", "Body": "<p>I think that will define the <code>human</code> several times, so it can happen that this causes an ODR violation (see below). It's usually best to only declare it in the header</p>\n<pre><code>extern const string human;\n</code></pre>\n<p>and add the definition to the implementation file</p>\n<pre><code>string human(\"human\");\n</code></pre>\n<p>Be careful about the initialization order fiasco and the equivalent when closing the application.</p>\n<p>An ODR violation can be caused when an inline function with external linkage ODR-uses <code>human</code>. I think that, since that is really easy to do and there is no way to guard against it, it is best to define constant strings in the implementation file.</p>\n", "OwnerUserId": "808241", "LastEditorUserId": "808241", "LastEditDate": "2015-10-28T22:43:30.213", "Id": "33402274", "Score": "1", "CreationDate": "2015-10-28T21:53:25.657", "LastActivityDate": "2015-10-28T22:43:30.213"}, "33402177": {"CommentCount": "0", "AcceptedAnswerId": "33402258", "PostTypeId": "1", "LastEditorUserId": "1392132", "CreationDate": "2015-10-28T21:46:43.997", "LastActivityDate": "2015-10-28T22:43:30.213", "LastEditDate": "2015-10-28T22:17:37.303", "ViewCount": "1907", "FavoriteCount": "1", "Title": "const global variable in namespace", "Id": "33402177", "Score": "5", "Body": "<p>I know that <code>static</code> <code>const</code> <code>class</code> members can be initialised in headers only. Is it the same for namespaces ? For example, is it valid to write :</p>\n<p><strong><code>namehuman.hpp</code></strong></p>\n<pre><code>namespace namehuman\n{\n   string const human(\"human\");\n}\n</code></pre>\n<p><strong><code>main.cpp</code></strong></p>\n<pre><code>#include \"namehuman.hpp\"\ncout &lt;&lt; namehuman::human &lt;&lt; endl;\n</code></pre>\n<p>I am wondering if all files including the header file will have their own copy of <code>string</code> human, or if human will be a true global variable (not copied many times). In order to avoid each including file making its copy, am I obliged to use <code>extern</code> ?</p>\n", "Tags": "<c++>", "OwnerUserId": "5400651", "AnswerCount": "2"}, "33402258": {"ParentId": "33402177", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Constants have internal linkage. Thus any compilation unit that includes the header with the definition of the constant will have its own instance of the object.</p>\n<p>According to the C++ Standard (3.5 Program and linkage)</p>\n<blockquote>\n<p id=\"so_33402177_33402258_0\">3 A name having namespace scope (3.3.6) has internal linkage if it is\n  the name of</p>\n</blockquote>\n<p>...</p>\n<blockquote>\n<p id=\"so_33402177_33402258_1\">\u2014 a non-volatile variable that is explicitly declared const or\n  constexpr and neither explicitly declared extern nor previously\n  declared to have external linkage; or</p>\n</blockquote>\n<p>If you want a constant with external linkage, you must declare it with the specifier <code>extern</code>, and define it in a compilation unit.</p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "5482150", "LastEditDate": "2015-10-28T22:14:48.800", "Id": "33402258", "Score": "4", "CreationDate": "2015-10-28T21:52:30.207", "LastActivityDate": "2015-10-28T22:14:48.800"}, "bq_ids": {"n4140": {"so_33402177_33402258_0": {"section_id": 7136, "quality": 0.875, "length": 7}, "so_33402177_33402258_1": {"section_id": 7136, "quality": 1.0, "length": 16}}, "n3337": {"so_33402177_33402258_0": {"section_id": 6880, "quality": 0.875, "length": 7}, "so_33402177_33402258_1": {"section_id": 6880, "quality": 0.9375, "length": 15}}, "n4659": {"so_33402177_33402258_0": {"section_id": 8637, "quality": 0.875, "length": 7}, "so_33402177_33402258_1": {"section_id": 8637, "quality": 0.8125, "length": 13}}}});