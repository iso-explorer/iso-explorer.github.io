post_cb({"14554288": {"CommentCount": "1", "AcceptedAnswerId": "14562285", "PostTypeId": "1", "LastEditorUserId": "819272", "CreationDate": "2013-01-28T01:33:05.260", "LastActivityDate": "2013-01-28T12:55:36.460", "LastEditDate": "2013-01-28T12:44:51.783", "ViewCount": "448", "FavoriteCount": "0", "Title": "Marking function as virtual causes compiler error with unique_ptr", "Id": "14554288", "Score": "7", "Body": "<p>I have a templated class that wraps a vector.  I'm trying to store unique_ptrs in this class, and it works fine.  However, when I mark the <code>void add(const T&amp; elem)</code> function as virtual, my compiler (clang) tells me that I'm making a \"call to implicitly-deleted copy constructor\" for unique_ptr.</p>\n<p>I understand that unique_ptrs can't be copied, so that's why I created the <code>void add(T&amp;&amp; elem)</code> function.  I just don't know why marking the other add function as virtual causes the compiler error.  </p>\n<p>Thanks for your time.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;memory&gt;\n\nusing namespace std;\n\ntemplate &lt;typename T&gt;\nclass ContainerWrapper {\nprivate:\n    vector&lt;T&gt; vec;\npublic:\n    ContainerWrapper() : vec() {\n\n    }\n\n    //Marking this as virtual causes a compiler error\n    void add(const T&amp; elem) {\n        vec.push_back(elem);\n    }\n\n    void add(T&amp;&amp; elem) {\n        vec.push_back(std::move(elem));\n    }\n\n    T removeLast() {\n        T last = std::move(vec.back());\n        vec.pop_back();\n        return last;\n    }\n};\n\nint main() {\n    ContainerWrapper&lt;unique_ptr&lt;string&gt;&gt; w;\n    w.add(unique_ptr&lt;string&gt;(new string(\"hello\")));\n\n    unique_ptr&lt;string&gt; s = w.removeLast();\n\n    cout &lt;&lt; *s &lt;&lt; endl;\n}\n</code></pre>\n", "Tags": "<c++><templates><c++11><instantiation><overload-resolution>", "OwnerUserId": "2016673", "AnswerCount": "2"}, "14562285": {"ParentId": "14554288", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2013-01-28T12:41:52.693", "Score": "5", "LastEditorUserId": "819272", "LastEditDate": "2013-01-28T12:55:36.460", "Id": "14562285", "OwnerUserId": "819272", "Body": "<p>The problem here is that <code>std::unique_ptr</code> has its copy constructor marked as <code>=delete</code>. This means that the <code>vec.push_back(elem)</code> call inside the <code>add(T const&amp;)</code> overloaded member function will not compile when being called with a <code>std::unique_ptr</code>. The compiler will realize this as soon as that member function is being instantiated. </p>\n<p>The <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf\" rel=\"noreferrer\">Standard</a> has 2 relevant quotes here in <strong>14.7.1 Implicit instantiation [temp.inst]</strong>:</p>\n<blockquote>\n<p id=\"so_14554288_14562285_0\">6 If the overload resolution process can determine the correct\n  function to call without instantiating a class template de\ufb01nition, it\n  is unspeci\ufb01ed whether that instantiation actually takes place.</p>\n<p id=\"so_14554288_14562285_1\">10 [...] It is unspeci\ufb01ed whether or not an implementation implicitly\n  instantiates a virtual member function of a class template if the\n  virtual member function would not otherwise be instantiated. [...]</p>\n</blockquote>\n<p>Clause 6 states that -without the <code>virtual</code> keyword- the compiler is allowed but not required to instantiate both <code>add(T const&amp;)</code> and <code>add(T&amp;&amp;)</code> in order to resolve which overload is the best match. Neither gcc 4.7.2 nor Clang 3.2 need the instantiation because they happen to deduce that rvalue references always are a better match for temporaries than lvalue references.</p>\n<p>Clause 10 states that -even with the <code>virtual</code> keyword- the compiler is also allowed but not required to instantiate <code>add(T const&amp;)</code> and <code>add(T&amp;&amp;)</code> in order to resolve which overload is the best match. Both gcc 4.7.2 and Clang 3.2 happen to the instantiate both member functions, even though they both could have deduced that the lvalue overload would never be a better match.</p>\n<p>Note that if you make <code>ContainerWrapper</code> a regular class with a nested <code>typedef unique_ptr&lt;string&gt; T;</code>, then both gcc and Clang will generate errors with or without the <code>virtual</code> keyword because they have to generate code for both member functions. This will not be SFINAE'ed away because it the error does not happen during substitution of deduced arguments.</p>\n<p><strong>Conclusion</strong>: this is <strong>not a bug</strong> but a <strong>quality of implementation</strong> issue.</p>\n", "LastActivityDate": "2013-01-28T12:55:36.460"}, "14554345": {"ParentId": "14554288", "PostTypeId": "2", "CommentCount": "1", "CreationDate": "2013-01-28T01:41:24.337", "Score": "9", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:05:58.370", "Id": "14554345", "OwnerUserId": "1217572", "Body": "<p>This is most likely due to ContainerWrapper being a template. With templates, the compiler most often won't even check member functions as long as you don't call them. However, marking it virtual forces the function to be present (you might also even get a link error).</p>\n<p>You can possibly take a look at this post : <a href=\"https://stackoverflow.com/questions/3483932/when-the-virtual-member-functions-of-a-template-class-instantiated\">When the virtual member functions of a template class instantiated?</a>.</p>\n", "LastActivityDate": "2013-01-28T01:41:24.337"}, "bq_ids": {"n4140": {"so_14554288_14562285_0": {"section_id": 239, "quality": 0.8888888888888888, "length": 16}, "so_14554288_14562285_1": {"section_id": 243, "quality": 0.9375, "length": 15}}, "n3337": {"so_14554288_14562285_0": {"section_id": 231, "quality": 0.8888888888888888, "length": 16}, "so_14554288_14562285_1": {"section_id": 235, "quality": 0.9375, "length": 15}}, "n4659": {"so_14554288_14562285_0": {"section_id": 248, "quality": 0.6111111111111112, "length": 11}, "so_14554288_14562285_1": {"section_id": 250, "quality": 0.9375, "length": 15}}}});