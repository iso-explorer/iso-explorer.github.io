post_cb({"6185991": {"ParentId": "6185957", "LastEditDate": "2011-05-31T10:17:53.267", "CommentCount": "2", "CreationDate": "2011-05-31T10:07:32.710", "OwnerUserId": "39742", "LastEditorUserId": "39742", "PostTypeId": "2", "Id": "6185991", "Score": "9", "Body": "<p>Rethrown exception is supposed to be caught by some other <code>try..catch</code> block, not the catch handler of the same <code>try</code> block. See this example:</p>\n<pre><code>using namespace std;\nclass Base\n{\npublic:\n    virtual ~Base(){}\n};\n\nclass Derived : public Base\n{\n};\n\nvoid f()\n{\n    try\n    {\n        throw Derived();\n    }\n    catch(Derived&amp; ex)\n    {\n        cout&lt;&lt;\"Caught in f\\n\";\n        throw;\n    }\n\n}\n\nint main()\n{\n    try\n    {\n        f();\n    }\n    catch(Base&amp; b)\n    {\n        cout&lt;&lt;\"Caught in main\\n\";\n    }\n\n    return 0;\n}\n</code></pre>\n<p>output is:</p>\n<blockquote>\n<p id=\"so_6185957_6185991_0\">Caught in f</p>\n<p id=\"so_6185957_6185991_1\">Caught in main</p>\n</blockquote>\n", "LastActivityDate": "2011-05-31T10:17:53.267"}, "6185957": {"CommentCount": "1", "ViewCount": "25550", "LastActivityDate": "2011-05-31T10:26:52.903", "Body": "<p>Why doesn't the following doesn't handle the exception that was rethrown? I tried all the combinations but none of them would show the output in last catch so I'm confused!</p>\n<pre><code>Derived D;\n\ntry {\n       throw D;\n} catch ( const Derived &amp;d) {\n       throw;\n} catch (const Base &amp;b) {\n      cout &lt;&lt; \"caught!\" &lt;&lt; endl;\n}\n</code></pre>\n<hr>\n<pre><code>Derived D;\n\ntry {\n    throw D;\n} catch ( const Derived d) {\n    throw;\n} catch (const Base b) {\n    cout &lt;&lt; \"caught!\" &lt;&lt; endl;\n}\n</code></pre>\n<hr>\n<pre><code>Derived D;\n\ntry {\n    throw D;\n} catch ( const Derived d) {\n    throw;\n} catch (const Base &amp;b) {\n    cout &lt;&lt; \"caught!\" &lt;&lt; endl;\n}\n</code></pre>\n<hr>\n<pre><code>Derived D;\n\ntry {\n    throw D;\n} catch ( const Derived &amp;d) {\n    throw;\n} catch (const Base b) {\n    cout &lt;&lt; \"caught!\" &lt;&lt; endl;\n}\n</code></pre>\n</hr></hr></hr>", "PostTypeId": "1", "AcceptedAnswerId": "6186019", "FavoriteCount": "1", "Title": "Rethrowing exceptions", "Id": "6185957", "Score": "11", "CreationDate": "2011-05-31T10:04:20.623", "Tags": "<c++><exception>", "OwnerUserId": "777453", "AnswerCount": "3"}, "6186019": {"ParentId": "6185957", "LastEditDate": "2011-05-31T10:26:52.903", "CommentCount": "9", "CreationDate": "2011-05-31T10:10:25.323", "OwnerUserId": "560648", "LastEditorUserId": "560648", "PostTypeId": "2", "Id": "6186019", "Score": "13", "Body": "<p>The re-throw is not handled by the same <code>try-catch</code> block. It's thrown up to the calling scope.</p>\n<p>In <code>[except.throw]</code> (2003 wording):</p>\n<blockquote>\n<p id=\"so_6185957_6186019_0\">A throw-expression with no operand rethrows the exception being handled.</p>\n</blockquote>\n<p>and:</p>\n<blockquote>\n<p id=\"so_6185957_6186019_1\">When an exception is thrown, control is transferred to the nearest handler with a matching type (15.3);\n  \u201cnearest\u201d means the handler for which the compound-statement, ctor-initializer, or function-body following\n  the try keyword was most recently entered by the thread of control <strong>and not yet exited</strong>.</p>\n</blockquote>\n<p>Your <code>try</code> block has exited, so its handlers are not candidates. Thus, none of the <code>catch</code> blocks in your code may handle the re-throw.</p>\n<p>Admittedly this is rather confusing wording.</p>\n", "LastActivityDate": "2011-05-31T10:26:52.903"}, "bq_ids": {"n4140": {"so_6185957_6186019_0": {"section_id": 3382, "quality": 0.8333333333333334, "length": 5}, "so_6185957_6186019_1": {"section_id": 3335, "quality": 0.8888888888888888, "length": 24}}, "n3337": {"so_6185957_6186019_0": {"section_id": 3251, "quality": 0.8333333333333334, "length": 5}, "so_6185957_6186019_1": {"section_id": 3205, "quality": 0.8888888888888888, "length": 24}}, "n4659": {"so_6185957_6186019_0": {"section_id": 4142, "quality": 0.8333333333333334, "length": 5}, "so_6185957_6186019_1": {"section_id": 4102, "quality": 0.8888888888888888, "length": 24}}}, "6186094": {"ParentId": "6185957", "LastEditDate": "2011-05-31T10:20:06.217", "CommentCount": "1", "CreationDate": "2011-05-31T10:17:53.327", "OwnerUserId": "476681", "LastEditorUserId": "201725", "PostTypeId": "2", "Id": "6186094", "Score": "2", "Body": "<p>This should work :</p>\n<pre><code>Derived D;\n\n\ntry{\n\n    try {\n        throw D;\n    } catch ( const Derived &amp;d) {\n        throw;\n    } catch (const Base &amp;b) {\n        cout &lt;&lt; \"caught!\" &lt;&lt; endl;\n    }\n\n} catch (const Base &amp;b) {\n    cout &lt;&lt; \"caught here!\" &lt;&lt; endl;\n}\n</code></pre>\n<p>As other said, the <code>rethrow</code> will rethrow the same exception out of the catch block.</p>\n", "LastActivityDate": "2011-05-31T10:20:06.217"}});