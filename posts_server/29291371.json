post_cb({"29291371": {"CommentCount": "3", "ViewCount": "215", "PostTypeId": "1", "LastEditorUserId": "420683", "CreationDate": "2015-03-27T00:36:42.297", "LastActivityDate": "2015-04-30T08:00:51.743", "Title": "C++ 11 Dynamic Array Partial List Initialization (Bug or Misunderstanding)?", "FavoriteCount": "1", "LastEditDate": "2015-03-27T00:51:20.417", "Id": "29291371", "Score": "9", "Body": "<p>I have the following C++ 11 code:</p>\n<pre><code>int *ipa = new int[5]{1, 2, 3};\n</code></pre>\n<p>I thought I understood that elements 3 and 4 were supposed to be value (0 in this case) initialized. In Visual C++ 2013, that is happening. In Mingw 4.8.1 it is not; they are being default initialized (that is, uninitialized).</p>\n<p>My question is, is this a known compiler (GCC or MingW) bug? I've searched through all the bug lists (and Googled) in vain. Or, have I somehow misunderstood what is supposed to happen?</p>\n", "Tags": "<c++><c++11><initialization><new-operator>", "OwnerUserId": "1663569", "AnswerCount": "2"}, "29962211": {"ParentId": "29291371", "CommentCount": "0", "Body": "<p>The compiler will initialize the 3 and 4 element be 0.</p>\n<p>in c++ 11 this expression is be supported.</p>\n<p>So that, you can initialize the array (int or char ...) like : <code>int a[10] = {0};</code></p>\n", "OwnerUserId": "2861230", "PostTypeId": "2", "Id": "29962211", "Score": "0", "CreationDate": "2015-04-30T08:00:51.743", "LastActivityDate": "2015-04-30T08:00:51.743"}, "29292092": {"ParentId": "29291371", "CommentCount": "0", "Body": "<p>First off, if you suspect there is a bug, there's no harm in reporting it. Here's a link to the <a href=\"https://gcc.gnu.org/bugzilla/\" rel=\"nofollow\">GCC bugzilla</a> and their <a href=\"https://gcc.gnu.org/bugs/\" rel=\"nofollow\">bug reporting instructions</a>. At the very least, you need to provide a test case and the operating system and version of your compiler. There's very little purpose to reporting it to SO first, since you can read <a href=\"http://en.cppreference.com/w/cpp/language/initialization\" rel=\"nofollow\">all about initialization here</a>.<sup>1</sup></p>\n<hr/>\n<p>The correct behavior is that the remaining elements are initialized to 0. Quoting the C++11 draft standard:</p>\n<blockquote>\n<p id=\"so_29291371_29292092_0\">\u00a75.3.4/15 A <em>new-expression</em> that creates an object of type T\n  initializes that object as follows: [...]</p>\n<ul>\n<li>Otherwise, the <em>new-initializer</em> is interpreted according to the initialization rules of 8.5 for direct-initialization.</li>\n</ul>\n<p id=\"so_29291371_29292092_1\">\u00a78.5.4/3 List-initialization of an object or reference of type <code>T</code> is\n  defined as follows: [...]</p>\n<ul>\n<li>Otherwise, if <code>T</code> is an aggregate, aggregate initialization is performed (8.5.1).</li>\n</ul>\n<p id=\"so_29291371_29292092_2\">[...]</p>\n<ul>\n<li>Otherwise, if the initializer list has no elements, the object is value-initialized.</li>\n</ul>\n<p id=\"so_29291371_29292092_3\">\u00a78.5.1/7 If there are fewer <em>initializer-clauses</em> in the list than\n  there are members in the aggregate, then each member not explicitly\n  initialized shall be initialized from an empty initializer list\n  (8.5.4).</p>\n<p id=\"so_29291371_29292092_4\">\u00a78.5/5 To <em>zero-initialize</em> an object or reference of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a scalar type (3.9), the object is set to the value 0 (zero), taken as an integral constant expression, converted to\n  T;<sup>103</sup> [...]</li>\n</ul>\n<p id=\"so_29291371_29292092_5\">\u00a78.5/7 To <em>value-initialize</em> an object of type <code>T</code> means: [...]</p>\n<ul>\n<li><p id=\"so_29291371_29292092_6\">if <code>T</code> is an array type, then each element is value-initialized;</p></li>\n<li><p id=\"so_29291371_29292092_7\">otherwise, the object is zero-initialized.</p></li>\n</ul>\n</blockquote>\n<p><sup>1 I've started a meta thread called <a href=\"https://meta.stackoverflow.com/questions/286640/do-we-need-a-canonical-question-about-c-initialization\">Do we need a canonical question about C++ initialization?</a> to address the lack of prior research in initialization questions.</sup></p>\n", "Id": "29292092", "PostTypeId": "2", "OwnerDisplayName": "user3920237", "Score": "1", "CreationDate": "2015-03-27T02:01:32.380", "LastActivityDate": "2015-03-27T02:01:32.380"}, "bq_ids": {"n4140": {"so_29291371_29292092_5": {"section_id": 3287, "quality": 0.8, "length": 4}, "so_29291371_29292092_3": {"section_id": 3304, "quality": 0.8947368421052632, "length": 17}, "so_29291371_29292092_1": {"section_id": 3325, "quality": 0.8571428571428571, "length": 6}, "so_29291371_29292092_0": {"section_id": 6098, "quality": 0.875, "length": 7}, "so_29291371_29292092_6": {"section_id": 3287, "quality": 1.0, "length": 6}, "so_29291371_29292092_4": {"section_id": 3285, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_29291371_29292092_5": {"section_id": 3157, "quality": 0.8, "length": 4}, "so_29291371_29292092_3": {"section_id": 3174, "quality": 0.8947368421052632, "length": 17}, "so_29291371_29292092_1": {"section_id": 3195, "quality": 0.8571428571428571, "length": 6}, "so_29291371_29292092_0": {"section_id": 5864, "quality": 0.875, "length": 7}, "so_29291371_29292092_6": {"section_id": 3157, "quality": 1.0, "length": 6}, "so_29291371_29292092_4": {"section_id": 3155, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_29291371_29292092_0": {"section_id": 7595, "quality": 0.875, "length": 7}, "so_29291371_29292092_3": {"section_id": 4070, "quality": 0.7894736842105263, "length": 15}, "so_29291371_29292092_6": {"section_id": 4049, "quality": 1.0, "length": 6}, "so_29291371_29292092_4": {"section_id": 653, "quality": 0.6666666666666666, "length": 4}, "so_29291371_29292092_1": {"section_id": 4091, "quality": 0.8571428571428571, "length": 6}}}});