post_cb({"bq_ids": {"n4140": {"so_38215743_38215816_0": {"length": 71, "quality": 0.922077922077922, "section_id": 7151}, "so_38215743_38215816_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 5809}}, "n3337": {"so_38215743_38215816_0": {"length": 71, "quality": 0.922077922077922, "section_id": 6895}, "so_38215743_38215816_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 5582}}, "n4659": {"so_38215743_38215816_1": {"length": 7, "quality": 0.7777777777777778, "section_id": 7270}}}, "38215816": {"Id": "38215816", "PostTypeId": "2", "Body": "<p>Initialization of global variables is guaranteed single-threaded as long as the program doesn't itself start a thread (e.g. in a constructor of some global variable); once that happens, the implementation is then allowed to parallellize remaining initializations, to some extent.</p>\n<blockquote>\n<p id=\"so_38215743_38215816_0\"><strong>[basic.start.init]/2</strong> ...Variables with ordered initialization defined within a single translation unit shall be initialized in the order of their definitions in the translation unit. If a program starts a thread (30.3), the subsequent initialization of a variable is unsequenced with respect to the initialization of a variable defined in a different translation unit. Otherwise, the initialization of a variable is indeterminately sequenced with respect to the initialization of a variable defined in a different translation unit. If a program starts a thread, the subsequent unordered initialization of a variable is unsequenced with respect to every other dynamic initialization. Otherwise, the unordered initialization of a variable is indeterminately sequenced with respect to every other dynamic initialization. [ <em>Note:</em> This definition permits initialization of a sequence of ordered variables concurrently\n  with another sequence. <em>\u2014end note</em> ]</p>\n</blockquote>\n<p>\"Indeterminately sequenced\" is the part that guarantees single-threaded execution. By definition, the notion of <em>sequenced {before, after, indeterminately}</em> is only meaningful within a single thread:</p>\n<blockquote>\n<p id=\"so_38215743_38215816_1\"><strong>[intro.execution]/13</strong> <em>Sequenced before</em> is a ... relation between evaluations executed by a single thread...</p>\n</blockquote>\n", "LastEditorUserId": "1670129", "LastActivityDate": "2016-07-06T04:02:39.903", "Score": "5", "CreationDate": "2016-07-06T03:11:42.753", "ParentId": "38215743", "CommentCount": "2", "OwnerUserId": "1670129", "LastEditDate": "2016-07-06T04:02:39.903"}, "38215743": {"ViewCount": "131", "Body": "<p>For example, the <code>node::node()</code> constructor in the following snippet accesses the globals <code>node::count</code> and <code>::tail</code> without any multithread guards. Does the C++ standard guarantee that the output would always be a permutation of <code>0 1 2</code> (regardless of the order)?</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nstruct node *tail;\n\nstruct node\n{\n    static int count;\n\n    int index;\n    node *prev;\n\n    node()\n    {   index = count++; prev = tail; tail = this; }\n};\n\nint node::count;\n\nnode one, two[2];\n\nint main(int argc, char *argv[])\n{\n    for(node *p = tail; p; p = p-&gt;prev)\n        printf(\"%d\\n\", p-&gt;index);\n\n    return 0;\n}\n</code></pre>\n<p>I am looking for an answer based on the (applicable) standard, not for implementation or compiler specific behaviors. There are a number of related questions on SO but it's not entirely clear how they directly apply to this particular and rather basic case (<a href=\"https://stackoverflow.com/questions/1962880/is-c-static-member-variable-initialization-thread-safe\">Is C++ static member variable initialization thread-safe?</a>, <a href=\"https://stackoverflow.com/questions/8102125/is-local-static-variable-initialization-thread-safe-in-c11\">Is local static variable initialization thread-safe in C++11?</a> etc).</p>\n", "AcceptedAnswerId": "38215816", "Title": "Are pre-main global initializers guaranteed to run single-threaded?", "CreationDate": "2016-07-06T02:59:46.770", "Id": "38215743", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:52:34.803", "LastEditorUserId": "-1", "LastActivityDate": "2016-07-06T04:02:39.903", "Score": "6", "OwnerUserId": "5538420", "Tags": "<c++><multithreading><language-lawyer>", "AnswerCount": "1"}});