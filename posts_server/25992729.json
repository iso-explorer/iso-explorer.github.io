post_cb({"25992973": {"ParentId": "25992729", "CommentCount": "1", "Body": "<p>Angew got the relevant quote, but the interpretation is flawed.</p>\n<p>You propose to add a template specialization in <code>namespace std</code>. This is permitted <strong>only</strong> if it depends on a user-defined type. You specifically mention that it does not. Therefore, the preconditions for the exception are not met, and the basic rule (no additions) applies. Not OK.</p>\n", "OwnerUserId": "15416", "PostTypeId": "2", "Id": "25992973", "Score": "5", "CreationDate": "2014-09-23T10:38:18.543", "LastActivityDate": "2014-09-23T10:38:18.543"}, "26023826": {"ParentId": "25992729", "CommentCount": "0", "Body": "<p>STL classes are meant to be used in well-defined ways, i.e. either instantiate them with a POD type, or a STL class that conforms to the class's requirements, or a user-defined type that implements the class's requirements.</p>\n<p>You're not supposed to inherit from STL types either; it's better to create a new class with the STL object as a member; then you can implement public methods matching the STL object's method signature.</p>\n<p>Without going into all the rationale for this rules, this is the most portable and likely long-lived way to use STL classes. It keeps a bright line between application-specific classes and STL classes.</p>\n", "OwnerUserId": "4071730", "PostTypeId": "2", "Id": "26023826", "Score": "0", "CreationDate": "2014-09-24T18:21:10.103", "LastActivityDate": "2014-09-24T18:21:10.103"}, "25992978": {"ParentId": "25992729", "CommentCount": "1", "Body": "<p>Standard Library is flexible enough, having many extra params for allocators, predicates etc. So that, if you're about to add something to std namespace, it seems you pursuit your goals via the wrong way.</p>\n<p>Take a rest to switch your mind, then read STL sources and play conform with it.</p>\n", "OwnerUserId": "1964969", "PostTypeId": "2", "Id": "25992978", "Score": "1", "CreationDate": "2014-09-23T10:38:22.423", "LastActivityDate": "2014-09-23T10:38:22.423"}, "25992729": {"CommentCount": "3", "CreationDate": "2014-09-23T10:25:42.667", "PostTypeId": "1", "AcceptedAnswerId": "25992877", "LastEditorUserId": "-1", "LastActivityDate": "2014-09-24T18:21:10.103", "LastEditDate": "2017-05-23T11:53:26.267", "ViewCount": "413", "FavoriteCount": "3", "Title": "Adding template specialization in std namespace", "Id": "25992729", "Score": "5", "Body": "<p><strong>Background:</strong><br> I tried to answer the question <a href=\"https://stackoverflow.com/questions/25973226/why-isnt-my-overloading-operator-not-working-for-stl-sort/25973427\">Why isn't my overloading &lt; operator not working for STL sort</a>. One of my suggestion (apart from using predicate) was to move the custom <code>operator &lt;</code> for <code>std::string</code> in namespace std so that it can be preferred by the compiler over templated version.</br></p>\n<p>At lightening speed the answer was down-voted with following comment from a highly reputed user:</p>\n<blockquote>\n<p id=\"so_25992729_25992729_0\">This is undefined behaviour, you are not allowed to add declarations\n  to namespace std because it can change the behaviour of the standard\n  library componens</p>\n</blockquote>\n<p><strong>My Question:</strong><br> Is it okay to add template specialization for stl types even if the declaration of this specialization doesn't contain user defined data type?</br></p>\n<hr>\n<p><sup>p.s. I have deleted my answer as I am afraid it may be possibly wrong</sup></p>\n</hr>", "Tags": "<c++><stl><language-lawyer>", "OwnerUserId": "2659313", "AnswerCount": "4"}, "25992877": {"ParentId": "25992729", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>C++11, [namespace.std]\u00a71:</p>\n<blockquote>\n<p id=\"so_25992729_25992877_0\">The behavior of a C++ program is undefined if it adds declarations or definitions to namespace <code>std</code> or to a\n  namespace within namespace <code>std</code> unless otherwise specified. A program may add a template specialization\n  for any standard library template to namespace <code>std</code> only if the declaration depends on a user-defined type\n  and the specialization meets the standard library requirements for the original template and is not explicitly\n  prohibited.</p>\n</blockquote>\n<p>The above paragraph explcitily prohibits specialisations which do not depend on a user-defined type.</p>\n<p>As to the motivation: you wouldn't be adding a template specialisation, but a separate declaration, which is also prohibited. </p>\n", "OwnerUserId": "1782465", "LastEditorUserId": "1782465", "LastEditDate": "2014-09-23T10:38:57.590", "Id": "25992877", "Score": "11", "CreationDate": "2014-09-23T10:33:03.540", "LastActivityDate": "2014-09-23T10:38:57.590"}, "bq_ids": {"n4140": {"so_25992729_25992877_0": {"section_id": 6299, "quality": 0.9705882352941176, "length": 33}}, "n3337": {"so_25992729_25992877_0": {"section_id": 6056, "quality": 0.9705882352941176, "length": 33}}, "n4659": {"so_25992729_25992877_0": {"section_id": 7808, "quality": 0.9705882352941176, "length": 33}}}});