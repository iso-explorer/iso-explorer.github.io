post_cb({"bq_ids": {"n4140": {"so_40912448_40912554_0": {"length": 13, "quality": 1.0, "section_id": 5943}, "so_40912448_40912554_1": {"length": 25, "quality": 1.0, "section_id": 5943}}, "n3337": {"so_40912448_40912554_0": {"length": 13, "quality": 1.0, "section_id": 5714}, "so_40912448_40912554_1": {"length": 25, "quality": 1.0, "section_id": 5714}}, "n4659": {"so_40912448_40912554_0": {"length": 13, "quality": 1.0, "section_id": 7428}, "so_40912448_40912554_1": {"length": 25, "quality": 1.0, "section_id": 7428}}}, "40912448": {"ViewCount": "517", "Body": "<p>On x86_64 CentOS 7 GCC 4.8.5 C++11:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    std::cout &lt;&lt; ((ssize_t)1 - (size_t)5) &lt;&lt; '\\n';\n}\n\n// Output: 18446744073709551612\n</code></pre>\n<p>But:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    std::cout &lt;&lt; ((ssize_t)1 - (unsigned int)5) &lt;&lt; '\\n';\n}\n\n// Output: -4\n</code></pre>\n<p>And on i686 CentOS 6 GCC 4.8.2 C++11, they both give <code>4294967292</code> so I have to do this:</p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    std::cout &lt;&lt; ((ssize_t)1 - (ssize_t)5) &lt;&lt; '\\n';\n}\n\n// Output: -4\n</code></pre>\n<p>An extremely contrived example, obviously, and I understand that I'm hitting various clauses in the integral promotion rules depending on the platform/implementation-defined type equivalences, but on a Thursday my brain can't unravel them for a rigourous assessment.</p>\n<p>What exactly is the sequence of standard rules that leads me to these results?</p>\n", "AcceptedAnswerId": "40912554", "Title": "Why is this expression being unsigneded?", "CreationDate": "2016-12-01T13:53:25.560", "Id": "40912448", "CommentCount": "6", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-12-02T16:37:56.093", "LastEditorUserId": "560648", "LastActivityDate": "2016-12-02T16:37:56.093", "Score": "14", "OwnerUserId": "560648", "Tags": "<c++><c++11><language-lawyer>", "AnswerCount": "1"}, "40912554": {"Id": "40912554", "PostTypeId": "2", "Body": "<p><sup>Disclaimer: I refer to paragraph 11 of clause 5 of the latest draft N4606 of C++17. The wording I quote and cite is contained in <a href=\"https://timsong-cpp.github.io/cppwp/n3337/expr#9\" rel=\"nofollow noreferrer\">paragraph 9 of N3337</a>, which is virtually identical to the C++11 standard, and in that form also in the FD of C++14, so this answer applies to these standards as well.</sup></p>\n<p>Assuming that <code>ssize_t</code> and <code>size_t</code> have equal rank, in your first case, <a href=\"http://eel.is/c++draft/expr#11.5.5\" rel=\"nofollow noreferrer\">[expr]/(11.5.5)</a> applies:</p>\n<blockquote>\n<p id=\"so_40912448_40912554_0\">Otherwise, both operands shall be converted to the unsigned integer type corresponding to the\n  type of the operand with signed integer type.</p>\n</blockquote>\n<p>1 will be converted to the unsigned version of <code>ssize_t</code>, which should be  <code>size_t</code>\u2014hence the unsigned underflow, and the value of 2<sup><code>sizeof(size_t)*8</code></sup>-4.</p>\n<p>For your second case, assuming that the rank of <code>unsigned</code> is less than that of <code>ssize_t</code>, and the latter can hold all of the former's values; see <a href=\"http://eel.is/c++draft/expr#11.5.4\" rel=\"nofollow noreferrer\">[expr]/(11.5.4)</a>:</p>\n<blockquote>\n<p id=\"so_40912448_40912554_1\">Otherwise, if the type of the operand with signed integer type can represent all of the values of\n  the type of the operand with unsigned integer type, the operand with unsigned integer type shall\n  be converted to the type of the operand with signed integer type.</p>\n</blockquote>\n<p>I.e. <code>5</code> will be converted to <code>ssize_t</code>, and so we get the negative result. If <code>ssize_t</code> is not of greater rank than <code>unsigned</code>, we'd get 2<sup><code>sizeof(unsigned)*8</code></sup>-4; if instead <code>ssize_t</code> could not hold all of <code>unsigned</code>'s values, we get the negative result again, because we fall through to the aforementioned (11.5.5).</p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2016-12-02T12:37:41.430", "Score": "16", "CreationDate": "2016-12-01T13:58:54.577", "ParentId": "40912448", "CommentCount": "0", "OwnerUserId": "3647361", "LastEditDate": "2016-12-02T12:37:41.430"}});