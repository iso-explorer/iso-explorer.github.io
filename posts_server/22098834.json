post_cb({"22098970": {"Id": "22098970", "PostTypeId": "2", "Body": "<p>n3337  <strong>\u00a7</strong> 3.8/6</p>\n<blockquote>\n<p id=\"so_22098834_22098970_0\">Similarly, before the lifetime of an object has started but after the\n  storage which the object will occupy has been allocated or, after the\n  lifetime of an object has ended and before the storage which the\n  object occupied is reused or released, any glvalue that refers to the\n  original object may be used but only in limited ways. For an object\n  under construction or destruction, see 12.7. Otherwise, such a glvalue\n  refers to allocated storage (3.7.4.2), and using the properties of the\n  glvalue that do not depend on its value is well-defined. The program\n  has undefined behavior if: </p>\n<p id=\"so_22098834_22098970_1\">\u2014 an lvalue-to-rvalue conversion (4.1) is\n  applied to such a glvalue, </p>\n<p id=\"so_22098834_22098970_2\">\u2014 the glvalue is used to access a\n  non-static data member or call a non-static member function of the\n  object, or</p>\n<p id=\"so_22098834_22098970_3\">\u2014 the glvalue is implicitly converted (4.10) to a reference\n  to a base class type, or </p>\n<p id=\"so_22098834_22098970_4\">\u2014 the glvalue is used as the operand of a\n  static_cast (5.2.9) except when the conversion is ultimately to cv\n  char&amp; or cv unsigned char&amp;, or </p>\n<p id=\"so_22098834_22098970_5\">\u2014 the glvalue is used as the operand of\n  a dynamic_cast (5.2.7) or as the operand of typeid.</p>\n</blockquote>\n<p>So, to answer your questions:</p>\n<blockquote>\n<p id=\"so_22098834_22098970_6\">Question 1: Is it permitted to define an object of this type passing\n  its name as a reference?</p>\n</blockquote>\n<p>Yes. Using just the address seems not to violate this (at least for a variable put on stack).</p>\n<p><code>A a(a);</code></p>\n<blockquote>\n<p id=\"so_22098834_22098970_7\">or will this trigger undefined behavior?</p>\n</blockquote>\n<p>No.</p>\n<blockquote>\n<p id=\"so_22098834_22098970_8\">Question 2: If yes, what are the parts of the standard that permit the\n  initialization of the reference from a still-to-be-constructed object?</p>\n</blockquote>\n<p><strong>\u00a7</strong> 3.8/6 (above)</p>\n<hr>\n<p>The only question that remains is how this correspond to</p>\n<blockquote>\n<p id=\"so_22098834_22098970_9\">A reference shall be initialized to refer to a <strong>valid object</strong> or\n  function.</p>\n</blockquote>\n<p>The problem is in term <em>valid object</em>. Because <strong>\u00a7</strong> 8.3.2/4 says that</p>\n<blockquote>\n<p id=\"so_22098834_22098970_10\">It is unspecified whether or not a reference requires storage</p>\n</blockquote>\n<p>it seems that <strong>\u00a7</strong> 8.3.2 is problematic and should be reworded. The confusion lead to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#453\" rel=\"nofollow\">change proposed</a> in document <em>C++ Standard Core Language Active Issues, Revision 87</em> dated on 20.01.2014:</p>\n<blockquote>\n<p id=\"so_22098834_22098970_11\">A reference shall be initialized to refer to an object or function.</p>\n<p id=\"so_22098834_22098970_12\">Change 8.3.2 [dcl.ref] paragraph 4 as follows:</p>\n<p id=\"so_22098834_22098970_13\">If an lvalue to which a reference is directly bound designates neither\n  an existing object or function of an appropriate type (8.5.3\n  [dcl.init.ref]), nor a region of memory of suitable size and alignment\n  to contain an object of the reference's type (1.8 [intro.object], 3.8\n  [basic.life], 3.9 [basic.types]), the behavior is undefined.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "1141471", "LastActivityDate": "2014-03-03T11:01:06.710", "Score": "5", "CreationDate": "2014-02-28T15:17:57.310", "ParentId": "22098834", "CommentCount": "16", "OwnerUserId": "1141471", "LastEditDate": "2014-03-03T11:01:06.710"}, "bq_ids": {"n4140": {"so_22098834_22098970_2": {"length": 10, "quality": 1.0, "section_id": 7194}, "so_22098834_22098970_1": {"length": 5, "quality": 1.0, "section_id": 6185}, "so_22098834_22098970_3": {"length": 6, "quality": 0.75, "section_id": 6169}, "so_22098834_22099297_2": {"length": 7, "quality": 1.0, "section_id": 7049}, "so_22098834_22098970_10": {"length": 5, "quality": 1.0, "section_id": 3221}, "so_22098834_22098970_5": {"length": 5, "quality": 0.8333333333333334, "section_id": 7194}, "so_22098834_22099297_0": {"length": 13, "quality": 0.8125, "section_id": 7049}, "so_22098834_22098970_4": {"length": 8, "quality": 0.7272727272727273, "section_id": 7193}, "so_22098834_22098970_0": {"length": 51, "quality": 0.9272727272727272, "section_id": 7194}, "so_22098834_22098970_11": {"length": 5, "quality": 1.0, "section_id": 3222}, "so_22098834_22098970_9": {"length": 6, "quality": 1.0, "section_id": 3222}, "so_22098834_22098834_0": {"length": 19, "quality": 1.0, "section_id": 5869}, "so_22098834_22098834_1": {"length": 6, "quality": 1.0, "section_id": 3222}}, "n3337": {"so_22098834_22098970_2": {"length": 10, "quality": 1.0, "section_id": 6938}, "so_22098834_22098970_1": {"length": 5, "quality": 1.0, "section_id": 5946}, "so_22098834_22098970_3": {"length": 7, "quality": 0.875, "section_id": 6938}, "so_22098834_22098970_10": {"length": 5, "quality": 1.0, "section_id": 3095}, "so_22098834_22098970_5": {"length": 5, "quality": 0.8333333333333334, "section_id": 6938}, "so_22098834_22099297_0": {"length": 13, "quality": 0.8125, "section_id": 6794}, "so_22098834_22098834_0": {"length": 19, "quality": 1.0, "section_id": 5640}, "so_22098834_22098834_1": {"length": 6, "quality": 1.0, "section_id": 3096}, "so_22098834_22098970_0": {"length": 51, "quality": 0.9272727272727272, "section_id": 6938}, "so_22098834_22098970_11": {"length": 5, "quality": 1.0, "section_id": 3096}, "so_22098834_22098970_9": {"length": 6, "quality": 1.0, "section_id": 3096}, "so_22098834_22098970_4": {"length": 10, "quality": 0.9090909090909091, "section_id": 6938}, "so_22098834_22099297_2": {"length": 7, "quality": 1.0, "section_id": 6794}}, "n4659": {"so_22098834_22098970_2": {"length": 9, "quality": 0.9, "section_id": 8702}, "so_22098834_22098970_1": {"length": 5, "quality": 1.0, "section_id": 7687}, "so_22098834_22099297_2": {"length": 7, "quality": 1.0, "section_id": 8546}, "so_22098834_22098970_3": {"length": 6, "quality": 0.75, "section_id": 8539}, "so_22098834_22098970_5": {"length": 5, "quality": 0.8333333333333334, "section_id": 8703}, "so_22098834_22099297_0": {"length": 13, "quality": 0.8125, "section_id": 8546}, "so_22098834_22098970_10": {"length": 5, "quality": 1.0, "section_id": 3978}, "so_22098834_22098970_4": {"length": 6, "quality": 0.5454545454545454, "section_id": 8702}, "so_22098834_22098970_0": {"length": 51, "quality": 0.9272727272727272, "section_id": 8703}, "so_22098834_22098970_11": {"length": 5, "quality": 1.0, "section_id": 3979}, "so_22098834_22098970_9": {"length": 6, "quality": 1.0, "section_id": 3979}, "so_22098834_22098834_0": {"length": 19, "quality": 1.0, "section_id": 7352}, "so_22098834_22098834_1": {"length": 6, "quality": 1.0, "section_id": 3979}}}, "22144500": {"Id": "22144500", "PostTypeId": "2", "Body": "<p>\"valid object\" is not defined anywhere in the standard, but it is intented to mean a region of memory with appropriate size and alignment that can contain an object of the specified type. It just means to exclude references to such things as dereferenced null pointers, misaligned regions of memory, etc. An uninitialised object is valid.</p>\n<p>There is an open issue to clear up the wording, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#453\">CWG 453</a>.</p>\n", "LastActivityDate": "2014-03-03T10:38:46.923", "CommentCount": "1", "CreationDate": "2014-03-03T10:38:46.923", "ParentId": "22098834", "Score": "7", "OwnerUserId": "743382"}, "22098834": {"ViewCount": "1176", "Body": "<p>Skimming through the standard draft (n3242) I found this sentence in Clause 9.2 (emphasis mine):</p>\n<blockquote>\n<p id=\"so_22098834_22098834_0\">Non-static (9.4) data members shall not have incomplete types. In\n  particular, a class C shall not contain a non-static member of class\n  C, but it <strong>can contain</strong> a pointer or <strong>reference</strong> to an object of class\n  C.</p>\n</blockquote>\n<p>From this I argue that is fine to define a class like this:</p>\n<pre><code>class A {\npublic:\n  A(A&amp; a) : a_(a){\n  }\nprivate:\n  A&amp; a_;\n};\n</code></pre>\n<p>Then in clause 8.3.2 I found the following:</p>\n<blockquote>\n<p id=\"so_22098834_22098834_1\">A reference shall be initialized to refer to a <strong>valid object</strong> or\n  function</p>\n</blockquote>\n<p><strong>Question 1:</strong> Is it permitted to define an object of this type passing its name as a reference:</p>\n<pre><code>A a(a);\n</code></pre>\n<p>or will this trigger undefined behavior? </p>\n<p><strong>Question 2:</strong> If yes, what are the parts of the standard that permit the initialization of the reference from a still-to-be-constructed object? </p>\n<p><strong>Question 3:</strong> If no, does this mean the definition of class A is well formed but no <em>first</em> object can be created without triggering UB? In this case what is the rationale behind this?</p>\n", "AcceptedAnswerId": "22144500", "Title": "Class that holds a reference to itself", "CreationDate": "2014-02-28T15:10:47.873", "Id": "22098834", "CommentCount": "9", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2014-03-03T11:01:06.710", "Score": "24", "OwnerUserId": "771663", "Tags": "<c++><language-lawyer>", "AnswerCount": "3"}, "22099297": {"Id": "22099297", "PostTypeId": "2", "Body": "<p>From n1905, 3.3.1.1</p>\n<blockquote>\n<p id=\"so_22098834_22099297_0\">The point of declaration for a name is immediately after its complete\n  declarator (clause 8 ) and before its initializer (if any), except as\n  noted below. </p>\n<p id=\"so_22098834_22099297_1\">[ Example:<br>\n  int x = 12;<br>\n  { int x = x; } </br></br></p>\n<p id=\"so_22098834_22099297_2\">Here the second x\n  is initialized with its own (indeterminate) value.</p>\n<p id=\"so_22098834_22099297_3\">\u2014end example ]</p>\n</blockquote>\n<p>My emphasis ( correct me if I am wrong ): In your example -</p>\n<pre><code>A a(a);\n</code></pre>\n<p>is equivalent to -</p>\n<pre><code>A a = a;  // Copy initialization\n</code></pre>\n<p>So, according to standard <code>a</code> is initialized with it's own indeterminate value. And the member is holding reference to one such indeterminate value.</p>\n", "LastActivityDate": "2014-02-28T15:32:09.653", "CommentCount": "1", "CreationDate": "2014-02-28T15:32:09.653", "ParentId": "22098834", "Score": "0", "OwnerUserId": "528724"}});