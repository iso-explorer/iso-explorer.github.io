post_cb({"bq_ids": {"n4140": {"so_4263748_4265666_0": {"length": 26, "quality": 1.0, "section_id": 639}, "so_4263748_4263748_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 639}, "so_4263748_4264747_0": {"length": 18, "quality": 0.9, "section_id": 603}}, "n3337": {"so_4263748_4265666_0": {"length": 26, "quality": 1.0, "section_id": 629}, "so_4263748_4263748_2": {"length": 12, "quality": 0.9230769230769231, "section_id": 629}, "so_4263748_4264747_0": {"length": 18, "quality": 0.9, "section_id": 593}}, "n4659": {"so_4263748_4265666_0": {"length": 26, "quality": 1.0, "section_id": 667}, "so_4263748_4263748_2": {"length": 13, "quality": 1.0, "section_id": 667}, "so_4263748_4264747_0": {"length": 18, "quality": 0.9, "section_id": 629}}}, "4264747": {"Id": "4264747", "PostTypeId": "2", "Body": "<p><strike>\nDisclaimer : the standard is really complex on these parts, so I may be completely wrong in my understanding.</strike></p>\n<p>Standard definition of the <em>best</em> viable function (13.3.3) :</p>\n<blockquote>\n<p id=\"so_4263748_4264747_0\">Given these definitions, a viable\n  function F1 is defined to be a better\n  function than another viable function\n  F2 if for all arguments i, ICSi(F1) is\n  not a worse conversion sequence than\n  ICSi(F2), and then</p>\n<p id=\"so_4263748_4264747_1\">[...]</p>\n<ul>\n<li>the context is <strong>an initialization by user-defined conversion</strong> (see 8.5,\n  13.3.1.5, and 13.3.1.6) and the standard conversion sequence from the\n  return type of F1 <strong>to the destination\n  type</strong> (i.e., the type of the entity\n  being initialized) is a better\n  conversion sequence than the standard\n  conversion sequence from the return\n  type of F2 to the destination type.</li>\n</ul>\n</blockquote>\n<p>If I understand correctly, the type of the object being constructed has its importance here, and that would make <code>A::A(const A &amp;)</code> a better candidate.\n</p>\n<hr>\n<p>Refer to Johannes comments to see why this answer is incorrect : this is indeed ambiguous for the reason pointed out by Chubsdad.</p>\n</hr>", "LastEditorUserId": "451980", "LastActivityDate": "2010-12-18T10:17:40.370", "Score": "1", "CreationDate": "2010-11-24T08:28:46.637", "ParentId": "4263748", "CommentCount": "12", "OwnerUserId": "451980", "LastEditDate": "2010-12-18T10:17:40.370"}, "4265666": {"Id": "4265666", "PostTypeId": "2", "Body": "<p>Yes, the expected result is Ambiguity to the best of my interpretation of Clause 13.3.3.2</p>\n<p>Matching argument 'v' of type 'B' to the parameters of either of the overloaded constructors of 'A' requires a user defined conversion. There both the sequences are of CONVERSION rank. </p>\n<p>My interpretation is that the following quote from $13.3.3.2 applies</p>\n<blockquote>\n<p id=\"so_4263748_4265666_0\">[...]User-defined conversion sequence\n  U1 is a better conversion sequence\n  than another user-defined conversion\n  sequence U2 <strong>if they contain the same\n  user-defined conversion function or\n  constructor <em>and</em> if the second standard\n  conversion sequence of U1 is better\n  than the second standard conversion\n  sequence of U2.</strong></p>\n</blockquote>\n<p>Both of these invoke different conversion functions in class 'B'. Therefore, I think the first condition itself is not satisfied and hence the expected result is Ambiguity as nither of the conversion sequences is better than the other.</p>\n", "LastActivityDate": "2010-11-24T10:18:38.687", "CommentCount": "1", "CreationDate": "2010-11-24T10:18:38.687", "ParentId": "4263748", "Score": "4", "OwnerUserId": "418110"}, "4263748": {"ViewCount": "471", "Body": "<pre><code> struct A \n {\n     A(const A&amp; src);\n     A(const char* src);\n };\n struct B \n {\n     operator A();\n     operator char*();\n };\n void test()  \n {\n     B v;\n     A s(v);\n }\n</code></pre>\n<p>EDG/Comeau and MSVC allows the code while GCC 4.4.4, CLANG and BCC\nreject it as ambiguous.</p>\n<p>A C++ committee member replied with this (initially):</p>\n<blockquote>\n<p id=\"so_4263748_4263748_0\">It's not ambiguous; the A(const A&amp;)\n  constructor is better than the A(const\n  char*) constructor. The const A&amp;\n  parameter binds directly to the result\n  of the conversion function, so the\n  conversion sequence is considered to\n  be a user-defined conversion followed\n  by an identity conversion\n  (13.3.3.1.4p1). The const char*\n  parameter is a user-defined conversion\n  followed by a qualification\n  conversion, so it's worse.</p>\n</blockquote>\n<p>Then, he followed up with this.</p>\n<blockquote>\n<p id=\"so_4263748_4263748_1\">Actually, I was wrong. While it is\n  true that the second conversion\n  sequence in a user-defined conversion\n  sequence is a tiebreaker, looking more\n  closely at 13.3.3.2p3, the\n  next-to-last bullet, reveals that this\n  tiebreaker only applies if the two\n  sequences contain the same\n  user-defined conversion sequence, and\n  that is not the case in this example.\n  Because one constructor's conversion\n  sequence uses B::operator A() and the\n  other uses b::operator char*(),\n  there's no tiebreaker between the two\n  user-defined conversion sequences and\n  they are ambiguous.</p>\n</blockquote>\n<p>My question is this.</p>\n<p>13.3.3.2 p3 states that, </p>\n<blockquote>\n<p id=\"so_4263748_4263748_2\">Two implicit conversion sequences of\n  the same form are indistinguishable\n  conversion sequences unless one of the\n  following rules apply.</p>\n</blockquote>\n<p>From my understanding, the keywords are \"one of the following rules\".\nIt doesn't mean that the bullet which states \"same conversion sequence\"\noverrides all the ones above. I would've thought \"the rank of S1 is better\nthan the rank of S2\" would be applicable instead?</p>\n", "AcceptedAnswerId": "4265666", "Title": "Should this be ambiguous or not? (implicit casts)", "CreationDate": "2010-11-24T05:30:16.123", "Id": "4263748", "CommentCount": "6", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2010-11-24T12:40:55.577", "LastEditorUserId": "121332", "LastActivityDate": "2010-12-18T10:17:40.370", "Score": "23", "OwnerUserId": "383306", "Tags": "<c++><standards><casting>", "AnswerCount": "2"}});