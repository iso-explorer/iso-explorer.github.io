post_cb({"40001257": {"ParentId": "40001188", "CommentCount": "1", "CreationDate": "2016-10-12T14:29:51.113", "OwnerUserId": "2380830", "PostTypeId": "2", "Id": "40001257", "Score": "4", "Body": "<p>The line <code>class innerClass;</code> within <code>outerClass</code> is a <em>forward declaration</em> to a <code>class</code> that you never define.</p>\n<p>Hence <code>outerClass::innerClass</code> is an <em>incomplete type</em>.</p>\n<p>The separate <code>innerClass</code> definition that starts with</p>\n<pre><code>class innerClass\n{\n</code></pre>\n<p>is a <em>completely</em> different <code>class</code> to the forward declared class.</p>\n<p>There's nothing wrong with your <code>friend class outerClass;</code> statement within the defined <code>innerClass</code>.</p>\n", "LastActivityDate": "2016-10-12T14:29:51.113"}, "40001188": {"CommentCount": "1", "ViewCount": "278", "PostTypeId": "1", "LastEditorUserId": "2020827", "CreationDate": "2016-10-12T14:26:26.247", "LastActivityDate": "2016-10-12T15:36:04.840", "Title": "Friendship in nested classes C++", "AcceptedAnswerId": "40001541", "LastEditDate": "2016-10-12T15:36:04.840", "Id": "40001188", "Score": "4", "Body": "<p>I am trying to understand concept of friendship in nested classes but I am not getting the concept properly. I have written a sample program to understand it but the program is not working</p>\n<pre><code>#include&lt;iostream&gt;\n\nusing namespace std;\n\n\nclass outerClass\n{\n    private:\n        int a;\n    public:\n        class innerClass;\n        bool print(innerClass);\n};\n\nclass innerClass\n{\n    friend class outerClass;\n    private:\n        int b;\n\n    public:\n        innerClass() =default;\n\n};\n\nbool outerClass::print(outerClass::innerClass obj)\n{\n    cout&lt;&lt;\"Value of b in inner class is:\"&lt;&lt;obj.b;\n}\n\nint main()\n{\n    outerClass in;\n    outerClass::innerClass obj;\n    obj.b=5;\n    in.print(obj);\n}\n</code></pre>\n<p>I am getting below errors:</p>\n<pre><code>try.cpp: In member function \u2018bool outerClass::print(outerClass::innerClass)\u2019:\ntry.cpp:26:6: error: \u2018obj\u2019 has incomplete type\ntry.cpp:11:15: error: forward declaration of \u2018class outerClass::innerClass\u2019\ntry.cpp: In function \u2018int main()\u2019:\ntry.cpp:34:28: error: aggregate \u2018outerClass::innerClass obj\u2019 has incomplete type and cannot be defined\n</code></pre>\n<p>As I read through articles on internet I learnt following points please comment on them if they are correct or not:</p>\n<ul>\n<li>innerClass can access all the members of outerClass by default.</li>\n<li>For outerClass to access private members of innnerClass we need to make outerClass as friend class to innerClass.</li>\n</ul>\n<p>Please help in pointing out the mistake in code and also if the points I understood are correct.</p>\n", "Tags": "<c++><friend>", "OwnerUserId": "1678247", "AnswerCount": "3"}, "40002113": {"ParentId": "40001188", "CommentCount": "0", "CreationDate": "2016-10-12T15:09:28.183", "OwnerUserId": "4643584", "PostTypeId": "2", "Id": "40002113", "Score": "0", "Body": "<p>I think you are confusing with <code>nested class</code> and <code>friend class</code><br>\nYou can use <code>friend class</code> not using <code>nested class</code> and<br>\nyou can use <code>nested class</code> not using <code>friend class</code> </br></br></p>\n<p>Here are some example:  </p>\n<pre><code>class A {};\nclass B {};\n</code></pre>\n<p>Here the A class knows the B class, but the B cannot know the A class. So you need to tell the A class that the B class is exist.<br>\nThis doing thing, is called <strong>Forward Declaration</strong><br>\nSo:  </br></br></p>\n<pre><code>class B;       // forward declaration\nclass A {};    // A knows the B\nclass B {};    // B knows the A\n</code></pre>\n", "LastActivityDate": "2016-10-12T15:09:28.183"}, "bq_ids": {"n4140": {"so_40001188_40001541_3": {"section_id": 6700, "quality": 0.9, "length": 9}, "so_40001188_40001541_1": {"section_id": 6700, "quality": 1.0, "length": 9}, "so_40001188_40001541_0": {"section_id": 369, "quality": 0.5714285714285714, "length": 4}}, "n3337": {"so_40001188_40001541_3": {"section_id": 6455, "quality": 0.9, "length": 9}, "so_40001188_40001541_1": {"section_id": 6455, "quality": 1.0, "length": 9}, "so_40001188_40001541_0": {"section_id": 359, "quality": 0.5714285714285714, "length": 4}}, "n4659": {"so_40001188_40001541_3": {"section_id": 8174, "quality": 0.9, "length": 9}, "so_40001188_40001541_1": {"section_id": 8174, "quality": 1.0, "length": 9}, "so_40001188_40001541_0": {"section_id": 4018, "quality": 0.5714285714285714, "length": 4}}}, "40001541": {"ParentId": "40001188", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2016-10-12T14:42:07.540", "Score": "2", "LastEditorUserId": "2020827", "LastEditDate": "2016-10-12T15:33:36.197", "Id": "40001541", "OwnerUserId": "2020827", "Body": "<p>If you want to define <code>innerClass</code> outside of <code>outerClass</code>, here is how to do it:</p>\n<pre><code>class outerClass\n{\n    class innerClass; // forward declaration\n};\n\nclass outerClass::innerClass // definition\n{\n};\n</code></pre>\n<p>The rest is OK, except of <code>obj.b=5</code>. The class <code>outerClass</code> is allowed to access <code>innerClass::b</code>, the function <code>main()</code> is not.</p>\n<p><a href=\"http://www.tutorialspoint.com/compile_cpp11_online.php?PID=0Bw_CjBb95KQMY1JRcEVzUE5wWFE\" rel=\"nofollow\">Demo</a></p>\n<hr>\n<blockquote>\n<p id=\"so_40001188_40001541_0\">innerClass can access all the members of outerClass by default.</p>\n</blockquote>\n<p>Right. From the standard <strong>[class.access.nest]</strong>:</p>\n<blockquote>\n<p id=\"so_40001188_40001541_1\">A nested class is a member and as such has the same access rights as any other member.</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_40001188_40001541_2\">For outerClass to access private members of innnerClass we need to make outerClass as friend class to innerClass.</p>\n</blockquote>\n<p>Right. From the standard <strong>[class.access.nest]</strong>:</p>\n<blockquote>\n<p id=\"so_40001188_40001541_3\">The members of an enclosing class have no special access to members of a nested class;</p>\n</blockquote>\n</hr></hr>", "LastActivityDate": "2016-10-12T15:33:36.197"}});