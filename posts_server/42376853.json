post_cb({"42379792": {"ParentId": "42376853", "CommentCount": "0", "CreationDate": "2017-02-21T23:13:48.543", "OwnerUserId": "7601530", "PostTypeId": "2", "Id": "42379792", "Score": "1", "Body": "<p>I think the examples stave off some plausible but wrong ideas one might otherwise come up with. </p>\n<p>In paragraph 6 one might expect <code>f()</code> to have <em>external</em> linkage since that is what <code>extern</code> \"normally\" (i.e. at file scope) means, but it's actually <em>internal</em> linkage because of the <code>static</code> declaration further up.</p>\n<p>In paragraph 7 someone might expect <code>extern void q();</code> to make <code>q()</code> available outside of (or in loose speech <em>external</em> to) <code>p()</code>, so it could be called in <code>middle()</code>, but that doesn't happen either.</p>\n<p>Both would still be true without the <code>extern</code> keyword, but then it wouldn't be surprising to people expecting <code>extern</code> to mean something different.</p>\n", "LastActivityDate": "2017-02-21T23:13:48.543"}, "bq_ids": {"n4140": {"so_42376853_42376853_0": {"section_id": 7139, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_42376853_42376853_0": {"section_id": 6883, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_42376853_42376853_0": {"section_id": 8640, "quality": 0.9333333333333333, "length": 14}}}, "42376853": {"CommentCount": "1", "ViewCount": "375", "PostTypeId": "1", "LastEditorUserId": "4463557", "CreationDate": "2017-02-21T20:02:09.547", "LastActivityDate": "2017-02-21T23:13:48.543", "Title": "Why did they insist in using the `extern` specifier in the examples below?", "LastEditDate": "2017-02-21T20:36:06.903", "Id": "42376853", "Score": "7", "Body": "<p><a href=\"http://eel.is/c++draft/basic.link#6\" rel=\"nofollow noreferrer\">[basic.link]/6</a> (my emphasiss):  </p>\n<blockquote>\n<p id=\"so_42376853_42376853_0\"><strong>The name of a function declared in block scope</strong> and the name of a variable declared by a block scope extern declaration <strong>have linkage</strong>.\n  <code>...</code></p>\n</blockquote>\n<pre><code>static void f();\nstatic int i = 0;\n\nvoid g() {\n    extern void f(); // internal linkage\n    int i; // #2 i has no linkage\n    {\n        extern void f(); // internal linkage  &lt;--\n        extern int i; // #3 external linkage\n    }\n}\n</code></pre>\n<p><a href=\"http://eel.is/c++draft/basic.link#7\" rel=\"nofollow noreferrer\">[basic.link]/7</a>:<br>\n<code>...</code></br></p>\n<pre><code>namespace X {\n    void p() {\n        q(); // error: q not yet declared\n        extern void q(); // q is a member of namespace X  &lt;--\n    }\n    void middle() {\n        q(); // error: q not yet declared\n    }\n    void q() { /* ... */ } // definition of X::q\n}\nvoid q() { /* ... */ } // some other, unrelated q\n</code></pre>\n<p>The <code>extern</code>specifiers pointed by the arrows are not necessary, given the very first sentence in paragraph [basic.link]/6 highlighted in bold characters above.Or am I missing something?</p>\n", "Tags": "<c++><language-lawyer><c++1z><linkage>", "OwnerUserId": "4463557", "AnswerCount": "2"}, "42379676": {"ParentId": "42376853", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2017-02-21T23:04:02.560", "Score": "1", "LastEditorUserId": "636019", "LastEditDate": "2017-02-21T23:09:06.713", "Id": "42379676", "OwnerUserId": "636019", "Body": "<p>The <code>extern</code>s are there to <em>emphasize</em> the respective comments, pointing out that the <code>extern</code> has no effect in certain circumstances (due to the rules outlined in that paragraph).</p>\n<p>In the first example, <code>f</code> has internal linkage <em>despite</em> being declared <code>extern</code>, because it was first declared <code>static</code> at namespace-scope.</p>\n<p>In the second exmaple, <code>extern</code> has no effect on the declaration because <code>q</code> is also declared at namespace scope without it (and <code>X::q</code> takes precedence over <code>::q</code>).</p>\n", "LastActivityDate": "2017-02-21T23:09:06.713"}});