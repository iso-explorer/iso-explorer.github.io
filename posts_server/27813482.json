post_cb({"27813482": {"CommentCount": "1", "ViewCount": "124", "ClosedDate": "2015-01-07T06:40:32.383", "OwnerDisplayName": "user2953119", "CreationDate": "2015-01-07T06:17:08.493", "LastActivityDate": "2015-01-07T06:39:31.740", "PostTypeId": "1", "AcceptedAnswerId": "27813711", "FavoriteCount": "1", "Title": "Function default argument replacing when redeclaration", "Id": "27813482", "Score": "4", "Body": "<p>Why the following code is well-formed:</p>\n<pre><code>void foo(int i, int j = 56);\nvoid foo(int i = 42, int j);\n\nint main(){  }\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/0cb3926344862dfc\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n<p>But the following</p>\n<pre><code>void foo(int i = 42, int j);\nvoid foo(int i, int j = 56);\n\nint main(){  }\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/919542d2a8b86911\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n<p>is ill-formed. I tried to look up in the <code>N4296::8.3.6 [dcl.fct.default]</code> and what I found was the following example:</p>\n<pre><code>class C \n{\n    void f(int i = 3);\n    void g(int i, int j = 99);\n};\nvoid C::f(int i = 3) { } //error\nvoid C::g(int i = 88, int j) { // C::g can be called with no argument\n}\n</code></pre>\n<p>But clang doesn't seem that way.</p>\n<pre><code>struct A\n{\n    void foo(int i = 42, int j);\n};\n\nvoid A::foo(int i, int j = 56){ }; //error\n\nint main(){  }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/792775fd4175763f\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>So, is it an implementation issue? Formally, all this example should be acceptable, should they?</p>\n", "Tags": "<c++><function><default-arguments>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_27813482_27813711_0": {"section_id": 3255, "quality": 1.0, "length": 9}, "so_27813482_27813711_1": {"section_id": 3255, "quality": 1.0, "length": 15}}, "n3337": {"so_27813482_27813711_0": {"section_id": 3127, "quality": 1.0, "length": 9}, "so_27813482_27813711_1": {"section_id": 3127, "quality": 1.0, "length": 15}}, "n4659": {"so_27813482_27813711_0": {"section_id": 4013, "quality": 1.0, "length": 9}, "so_27813482_27813711_1": {"section_id": 4013, "quality": 1.0, "length": 15}}}, "27813711": {"ParentId": "27813482", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>[dcl.fct.default]</p>\n<blockquote id=\"so_27813482_27813711_0\">\n<ol start=\"4\">\n<li>[...]default arguments can be added in later declarations of a function in the same scope.</li>\n</ol>\n</blockquote>\n<pre><code>void foo(int i, int j = 56);\nvoid foo(int i = 42, int j);\n</code></pre>\n<p>This is fine because the second declaration is adding a default argument to the first parameter, which previously didn't have one. </p>\n<blockquote>\n<p id=\"so_27813482_27813711_1\">[...]In a given function declaration, each parameter subsequent to a parameter with a default argument shall have a default argument supplied in this or a previous declaration[...]</p>\n</blockquote>\n<p>The second parameter in the second declaration already has a default argument, trying to provide another one would be an error.</p>\n<pre><code>void foo(int i = 42, int j); // error\nvoid foo(int i, int j = 56);\n</code></pre>\n<p>This is an error because the first declaration gives a default argument for the first parameter, but not the second, and there are no previous declarations unlike the first example.</p>\n<pre><code>struct A\n{\n    void foo(int i = 42, int j); // the error should be here\n};\n\nvoid A::foo(int i, int j = 56){ }; // not here\n</code></pre>\n<p>This is incorrect for exactly the same reasons as above, <code>j</code> has no default argument in the initial declaration, the next line in your example is irrelevant.</p>\n", "OwnerUserId": "657267", "LastEditorUserId": "657267", "LastEditDate": "2015-01-07T06:39:31.740", "Id": "27813711", "Score": "1", "CreationDate": "2015-01-07T06:34:09.323", "LastActivityDate": "2015-01-07T06:39:31.740"}});