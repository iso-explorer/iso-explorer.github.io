post_cb({"bq_ids": {"n4140": {"so_9114930_9115110_1": {"length": 8, "quality": 0.6153846153846154, "section_id": 6066}}, "n3337": {"so_9114930_9115110_1": {"length": 8, "quality": 0.6153846153846154, "section_id": 5834}}, "n4659": {"so_9114930_9115110_1": {"length": 8, "quality": 0.6153846153846154, "section_id": 7562}}}, "9115025": {"Id": "9115025", "PostTypeId": "2", "Body": "<p><code>this</code> is a pointer containing the address to the \"current object\". It is not a variable that is stored somewhere (or could even be changed), it is a special keyword with these properties.</p>\n<p>As such, taking its address makes no sense. If you want to know the address of the \"current object\" you can simply output:</p>\n<pre><code>std::cout &lt;&lt; this;\n</code></pre>\n<p>or store as</p>\n<pre><code>void* a = this;\n</code></pre>\n", "LastActivityDate": "2012-02-02T15:30:56.330", "CommentCount": "3", "CreationDate": "2012-02-02T15:30:56.330", "ParentId": "9114930", "Score": "19", "OwnerUserId": "833362"}, "9114930": {"ViewCount": "9829", "Body": "<p>I try to find address of <code>this</code> pointer, but this code is showing a strange\nerror:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass Base\n{\n    public:\n        void test()\n        {\n            void *address_of_this =&amp;this;\n            cout&lt;&lt;address_of_this&lt;&lt;endl;\n        }\n};\n\nint main()\n{   Base k;\n    k.test();\n\n    return 0;\n}   //error non-lvalue in unary'&amp;'   \n</code></pre>\n<p>Can you explain this error ?<br>\nAlso point that what is illegal in taking address of <code>this</code>?  </br></p>\n", "AcceptedAnswerId": "9115025", "Title": "address of this", "CreationDate": "2012-02-02T15:26:34.950", "Id": "9114930", "CommentCount": "1", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2012-02-02T15:33:33.507", "LastEditorUserId": "85371", "LastActivityDate": "2012-02-02T15:39:55.953", "Score": "9", "OwnerUserId": "1152334", "Tags": "<c++><pointers><this>", "AnswerCount": "2"}, "9115110": {"Id": "9115110", "PostTypeId": "2", "Body": "<p>Quoting the 2003 C++ standard:</p>\n<blockquote>\n<p id=\"so_9114930_9115110_0\">5.1 [expr.prim] The keyword <code>this</code> names a pointer to the object for which a nonstatic member function (9.3.2) is invoked. ... The type of the expression is a pointer to the function\u2019s class (9.3.2), ... The expression is an rvalue.</p>\n<p id=\"so_9114930_9115110_1\">5.3.1 [expr.unary.op] The result of the unary <code>&amp;</code> operator is a pointer to its operand. The operand shall be an lvalue or a <strong>qualified_id</strong>.</p>\n</blockquote>\n<p>To put it simply, <code>&amp;</code> requires an lvalue. <code>this</code> is an rvalue, not an lvalue, just as the error message indicates. </p>\n", "LastActivityDate": "2012-02-02T15:37:07.393", "CommentCount": "0", "CreationDate": "2012-02-02T15:37:07.393", "ParentId": "9114930", "Score": "7", "OwnerUserId": "8747"}});