post_cb({"bq_ids": {"n4140": {"so_33256160_33256418_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 3890}, "so_33256160_33256418_2": {"length": 24, "quality": 1.0, "section_id": 3893}}, "n3337": {"so_33256160_33256418_0": {"length": 21, "quality": 0.875, "section_id": 3750}, "so_33256160_33256418_2": {"length": 24, "quality": 1.0, "section_id": 3753}}, "n4659": {"so_33256160_33256418_0": {"length": 20, "quality": 0.8333333333333334, "section_id": 4776}, "so_33256160_33256418_2": {"length": 24, "quality": 1.0, "section_id": 4779}}}, "33256418": {"Id": "33256418", "PostTypeId": "2", "Body": "<p>Here's what the standard says about a <code>switch</code> (\u00a76.4.2, emphasis mine):</p>\n<blockquote>\n<p id=\"so_33256160_33256418_0\">2 - <strong>Any statement</strong> within the\n  switch\n  statement can be labeled with one or more case labels as\n  follows:\n  case\n  constant-expression\n  :\n  where the\n  constant-expression\n  shall be a converted constant expression (\n  5.19\n  ) of the promoted type of the\n  switch condition.</p>\n<p id=\"so_33256160_33256418_1\">&lt;...&gt;</p>\n<p id=\"so_33256160_33256418_2\">5 - When the\n  switch\n  statement is executed, its condition is evaluated and compared with each case constant. If\n  one of the case constants is equal to the value of the condition, control is passed to the statement following\n  the matched case label</p>\n</blockquote>\n<p>So the <code>switch</code> doesn't care where exactly the cases are, the following works:</p>\n<pre><code>int main() {\n    int i = 0;\n    switch(i)\n    {\n        case 1:\n        {\n        case 2:\n            {\n                if(false)\n                {\n                    case 0:\n                        std::cout &lt;&lt; \"hello there!\"; //yes it will print\n                }\n            }\n        }\n    }\n\n    return 0;\n}\n</code></pre>\n<p>Regarding the modification you propose, check my answer to <a href=\"https://stackoverflow.com/questions/11578936/getting-a-bunch-of-crosses-initialization-error/11578973#11578973\">this question</a>. Basically with </p>\n<pre><code>case 1:{\n    std::cout &lt;&lt; \"Evaluated 1\\n\";\n    int a = i;\n    if(a == 1){\n            return 1;\n    }\n    case 2:\n    //here a is in scope\n    std::cout &lt;&lt; \"Evaluated 2\\n\";\n    return 2;\n }\n</code></pre>\n<p>you can jump to <code>case2</code> without actually creating <code>a</code>, but <code>a</code> will still be in scope.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-10-21T10:05:36.233", "Score": "3", "CreationDate": "2015-10-21T10:05:36.233", "ParentId": "33256160", "CommentCount": "0", "OwnerUserId": "1490355", "LastEditDate": "2017-05-23T12:14:41.173"}, "33256744": {"Id": "33256744", "PostTypeId": "2", "Body": "<p><code>switch</code> to a label works in an identical way to <code>goto</code> with a label when it comes to moving to a different scope block.</p>\n<p>You should take care when adopting such a scheme, in particular with regards to reading uninitialised variables, the behaviour of which is undefined.</p>\n", "LastActivityDate": "2015-10-21T10:20:00.167", "CommentCount": "0", "CreationDate": "2015-10-21T10:20:00.167", "ParentId": "33256160", "Score": "2", "OwnerUserId": "2380830"}, "33256160": {"ViewCount": "219", "Body": "<p>I saw some surprising code:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    // your code goes here\n    auto myDummy = [](int i){\n    switch(i){\n        case 0: return 0;\n        case 1:{\n            std::cout &lt;&lt; \"Evaluated 1\\n\";\n            if(i == 1){\n                return 1;\n            }\n            case 2:\n            std::cout &lt;&lt; \"Evaluated 2\\n\";\n            return 2;\n        }\n        break;\n        default: return -1;\n    }\n    };\n    std::cout &lt;&lt; myDummy(1) &lt;&lt; \"\\n\";\n    return 0;\n}\n</code></pre>\n<p>It compiles and run without warning. The bracket of case 1{} seems to be ignored.</p>\n<blockquote>\n<p id=\"so_33256160_33256160_0\">myDummy(1)</p>\n<p id=\"so_33256160_33256160_1\">-&gt; 1</p>\n<p id=\"so_33256160_33256160_2\">myDummy(2) </p>\n<p id=\"so_33256160_33256160_3\">-&gt; 2</p>\n</blockquote>\n<p>If I modify the code for case 1 to be:</p>\n<pre><code>             case 1:{\n                std::cout &lt;&lt; \"Evaluated 1\\n\";\n                int a = i;\n                if(a == 1){\n                    return 1;\n                }\n                case 2:\n                std::cout &lt;&lt; \"Evaluated 2\\n\";\n                return 2;\n            }\n            break;\n</code></pre>\n<p>then it does not compile anymore:</p>\n<blockquote>\n<p id=\"so_33256160_33256160_4\">prog.cpp:16:13: error: jump to case label [-fpermissive]</p>\n<pre><code>    case 2:\n\n         ^ prog.cpp:12:21: note:   crosses initialization of 'int a'\n\n             int a = i;\n</code></pre>\n</blockquote>\n<p>The brackets for case 1:{}break; do not cancel the switch context. It just creates a local scope for variable.\nBut this is really obfuscating.\nWhy such a behaviour?</p>\n", "AcceptedAnswerId": "33256418", "Title": "local scope in switch case", "CreationDate": "2015-10-21T09:54:37.123", "Id": "33256160", "CommentCount": "4", "LastEditDate": "2015-10-21T13:00:09.913", "PostTypeId": "1", "LastEditorUserId": "584518", "LastActivityDate": "2015-10-21T13:00:09.913", "Score": "4", "OwnerUserId": "3062393", "Tags": "<c++>", "AnswerCount": "3"}, "33256354": {"Id": "33256354", "PostTypeId": "2", "Body": "<p>You can place a scope anywhere:</p>\n<pre><code>int main() {\n    int a;\n    {\n        int a; // in a more local scope.\n    }\n}\n</code></pre>\n<p>But you can't put a variable initialization in a scope where it would be visible by more than 2 cases of a switch:</p>\n<pre><code>int main() {\n    int b;\n    switch(1) {\n    case 0:\n        int a = 0; // error\n        break;\n    case 1:\n        b = a; // what happens?\n        break;\n    }\n}\n</code></pre>\n<p>Finally, there's nothing wrong with a case label inside another scope (as long as it would not violate our second rule, there):</p>\n<pre><code>int main() {\n  switch(1) {\n  case 1: {\n    break;\n  case 2:\n    break;\n    }\n  }\n}\n</code></pre>\n", "LastEditorUserId": "3854787", "LastActivityDate": "2015-10-21T10:16:05.507", "Score": "2", "CreationDate": "2015-10-21T10:03:23.093", "ParentId": "33256160", "CommentCount": "5", "OwnerUserId": "3854787", "LastEditDate": "2015-10-21T10:16:05.507"}});