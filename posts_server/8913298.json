post_cb({"bq_ids": {"n4140": {"so_8913298_8913361_0": {"length": 31, "quality": 0.8611111111111112, "section_id": 5485}}, "n3337": {"so_8913298_8913361_0": {"length": 35, "quality": 0.9722222222222222, "section_id": 5271}}, "n4659": {"so_8913298_8913361_0": {"length": 31, "quality": 0.8611111111111112, "section_id": 6920}}}, "8913361": {"Id": "8913361", "PostTypeId": "2", "Body": "<p><code>\u00a77.3.1.2 [namespace.memdef] p3</code></p>\n<blockquote>\n<p id=\"so_8913298_8913361_0\">[...] If a <code>friend</code> declaration in a nonlocal class first declares a class or function the friend class or function is a member of the innermost enclosing namespace. <strong>The name of the friend is not found by unqualified lookup or by qualified lookup until a matching declaration is provided in that namespace scope</strong> (either before or after the class definition granting friendship). [...]</p>\n</blockquote>\n<p>See also <a href=\"https://stackoverflow.com/q/8207633/500104\">this question of mine</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-01-18T16:07:36.973", "Score": "1", "CreationDate": "2012-01-18T16:07:36.973", "ParentId": "8913298", "CommentCount": "1", "OwnerUserId": "500104", "LastEditDate": "2017-05-23T12:03:15.983"}, "8913983": {"Id": "8913983", "PostTypeId": "2", "Body": "<ol>\n<li><p>Friend functions are functions that are not members of a class but\nthey still have access to the private members of the class.</p></li>\n<li><p>I should point out that a friend function declaration \nmay be placed in either the private section or the public section,<br>\nbut it will be a public function in either case, so it is clearer to\nlist it in the public section.</br></p></li>\n</ol>\n<blockquote id=\"so_8913298_8913983_0\">\n<pre><code>class MyClass\n{\nprivate:\n  int data;\npublic:\n  MyClass(int value);\n  friend void myFriend(MyClass *myObject);\n\n};\n\n void myFriend(MyClass *myObject)\n {\n   cout &lt;&lt; myObject-&gt;data&lt;&lt; endl;\n }\n\nMyClass::MyClass(int value)\n{\n  data = value*2;\n}\n\nint main()\n{         \n  MyClass myObject(3);\n  myFriend(&amp;myObject);\n}\n</code></pre>\n</blockquote>\n<p>So, you need to define the friend function after you declare it.</p>\n", "LastActivityDate": "2012-01-18T16:48:50.637", "CommentCount": "0", "CreationDate": "2012-01-18T16:48:50.637", "ParentId": "8913298", "Score": "0", "OwnerUserId": "1154908"}, "8913298": {"ViewCount": "732", "Body": "<p>what's wrong with this code?</p>\n<pre><code>class matrix{ \nprivate:  \n   friend transpose(const matrix&amp;);  \n   friend class invert;  \n   public: //...\n};  \nmatrix (*p)(const matrix&amp;)=&amp;transpose; //error: no transpose() in scope.\n</code></pre>\n<p>what does the statement means \"a friend declaration does not introduce a name into enclosing scope\".This problem does not occur when friend keyword is removed</p>\n", "AcceptedAnswerId": "8913380", "Title": "enclosing scope", "CreationDate": "2012-01-18T16:03:52.750", "Id": "8913298", "CommentCount": "1", "LastEditDate": "2012-01-18T16:04:43.200", "PostTypeId": "1", "LastEditorUserId": "572670", "LastActivityDate": "2012-01-18T16:48:50.637", "Score": "0", "OwnerUserId": "1152334", "Tags": "<c++>", "AnswerCount": "3"}, "8913380": {"Id": "8913380", "PostTypeId": "2", "Body": "<p>The difference between the declaration of transpose() as a friend and without the friend declaration is that if you declare \"friend transpose()\" all you are doing is telling the compiler that a function friend with the signature shown in the friend declaration can have access to the private members of an object of type matrix. It does <em>not</em> declare a function transpose() with this signature - you still have to do this outside the scope of the matrix class.</p>\n<p>If you remove the 'friend' keyword, you are declaring a member function transpose() inside the class matrix, so the compiler actually has seen a function it can take the address of.</p>\n", "LastActivityDate": "2012-01-18T16:09:07.700", "CommentCount": "0", "CreationDate": "2012-01-18T16:09:07.700", "ParentId": "8913298", "Score": "1", "OwnerUserId": "29068"}});