post_cb({"23750750": {"ViewCount": "59", "Body": "<p>For the below code, I got some compiling errors and don't know why.</p>\n<pre><code>~/sandbox/test-cxx $ g++ test-template-specialization.cpp\ntest-template-specialization.cpp:23:12: error: invalid use of incomplete type \u2018class Search_A_Scale&lt;A, 0, C&gt;\u2019\n operator()()\n            ^\ntest-template-specialization.cpp:8:7: error: declaration of \u2018class Search_A_Scale&lt;A, 0, C&gt;\u2019\n class Search_A_Scale\n       ^\n</code></pre>\n<p>Code:</p>\n<pre><code>/* test-template-specialization.cpp */\n#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\ntemplate &lt;int A,\n          int B,\n          int C&gt;\nclass Search_A_Scale\n{\n  public:\n    bool operator()();\n\n    enum {\n        kb = B,\n        kc = C\n    };\n};\n\n#if 1 // this block cimpiled failed.\ntemplate &lt;int A,\n          int C&gt;\nbool Search_A_Scale&lt;A, 0, C&gt;::\noperator()()\n{\n    return true;\n}\n#else // this block compiled successfully.\ntemplate &lt;int A, int C&gt;\nclass Search_A_Scale&lt;A, 0, C&gt;\n{ \n  public:\n    bool operator() () { return true; }\n};\n#endif\n\nint main()\n{\n    Search_A_Scale&lt;1, 0, 24&gt; a;\n    cout &lt;&lt; a() &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<hr>\n<p><strong>UPDATED</strong>: <strong>My own answer</strong></p>\n<p>According the standard 14.5.5.3</p>\n<blockquote>\n<p id=\"so_23750750_23750750_0\">A class template specialization is a distinct template. The members of\n  the class template partial specialization are unrelated to the members\n  of the primary template.</p>\n</blockquote>\n<p>That is to say the primary class template <code>Search_A_Scale&lt;A, B, C&gt;</code> is distinct with the class template partial specialization <code>Search_A_Scale&lt;A, 0, C&gt;</code>, so the specified member <code>Search_A_Scale&lt;A, 0, C&gt;::operator()</code> requires a definition of the <code>Search_A_Scale&lt;A, 0, C&gt;</code> but which is missed.</p>\n</hr>", "Title": "Why my partial template specialization of a class member function got compiling error?", "CreationDate": "2014-05-20T03:54:57.700", "Id": "23750750", "CommentCount": "3", "LastEditDate": "2014-05-20T07:31:58.503", "PostTypeId": "1", "LastEditorUserId": "153487", "LastActivityDate": "2014-05-20T07:31:58.503", "Tags": "<c++><templates>", "Score": "0", "OwnerUserId": "153487", "ClosedDate": "2014-05-20T05:47:11.703", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_23750750_23750750_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 149}}, "n3337": {"so_23750750_23750750_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 143}}, "n4659": {"so_23750750_23750750_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 153}}}, "23751699": {"Id": "23751699", "PostTypeId": "2", "Body": "<p>The function in #if looks like member function of </p>\n<pre><code>template &lt;int A, int B, int C&gt;\nclass Search_A_Scale\n</code></pre>\n<p>You should change the declaration in \"#if\" as :</p>\n<pre><code>#if 1 // this block changed,which was failing earlier\ntemplate &lt;int A, int B, int C&gt;\nbool Search_A_Scale&lt;A, B, C&gt;::operator()()\n{\n    return true;\n}\n</code></pre>\n<p>When we use Search_A_Scale this as scope resolution compiler should find </p>\n<pre><code>template &lt;int A, int B, int C&gt; \nclass Search_A_Scale \n</code></pre>\n<p>as candidate but the template specification in your function is  </p>\n<pre><code>template &lt;int A,int C&gt;\nbool Search_A_Scale&lt;A, 0, C&gt;::operator()()\n</code></pre>\n<p>and there is no class defined which takes 2 params, it exist when else part of #if condition:\n    template  \n    class Search_A_Scale </p>\n<p>Hence when we execute the else part we get a class specialized to take three params of type A, 0 and C. </p>\n", "LastEditorUserId": "2112844", "LastActivityDate": "2014-05-20T05:41:43.747", "Score": "0", "CreationDate": "2014-05-20T05:31:10.290", "ParentId": "23750750", "CommentCount": "0", "OwnerUserId": "2112844", "LastEditDate": "2014-05-20T05:41:43.747"}});