post_cb({"10924193": {"Id": "10924193", "PostTypeId": "2", "Body": "<p>[class.mem] says:</p>\n<blockquote>\n<p id=\"so_10924047_10924193_0\">-2- A class is considered a completely-defined object type (3.9) (or complete type) at the closing <code>}</code> of the <em>class-specifier</em>. Within the class <em>member-specification</em>, the class is regarded as complete within function bodies, default arguments, and <em>brace-or-equal-initializers</em> for non-static data members (including such things in nested classes). Otherwise it is regarded as incomplete within its own class <em>member-specification</em>.</p>\n</blockquote>\n<p>For the class to be complete within function bodies then in general all declaration need to be parsed: without completely parsing all declaration you can't know if something that wasn't parsed would change the meaning.  Although, possibly related to that is [basic.scope.class]/1 which says:</p>\n<blockquote>\n<p id=\"so_10924047_10924193_1\">3) If reordering member declarations in a class yields an alternate valid program under (1) and (2), the program is ill-formed, no diagnostic is required.</p>\n</blockquote>\n<p>That means certain declarations could be used without parsing the entire class, because if another later declaration altered the meaning then the program would be ill-formed.</p>\n<p>Of course the \"as if\" rule allows the compiler to choose any implementation as long as the user can't tell the difference, so maybe a compiler <em>could</em> choose to parse function bodies and then parse definitions as needed, but it would be hard to tell what's needed to process the member function definition (consider a function call which might call one of several overloaded functions, possibly involving enable_if-type tricks.)</p>\n", "LastActivityDate": "2012-06-07T00:34:30.380", "CommentCount": "0", "CreationDate": "2012-06-07T00:34:30.380", "ParentId": "10924047", "Score": "1", "OwnerUserId": "981959"}, "bq_ids": {"n4140": {"so_10924047_10924193_0": {"length": 36, "quality": 1.0, "section_id": 5862}, "so_10924047_10924198_1": {"length": 7, "quality": 0.875, "section_id": 7070}, "so_10924047_10924193_1": {"length": 11, "quality": 1.0, "section_id": 7070}, "so_10924047_10924198_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 7054}}, "n3337": {"so_10924047_10924198_1": {"length": 7, "quality": 0.875, "section_id": 6814}, "so_10924047_10924193_0": {"length": 36, "quality": 1.0, "section_id": 5632}, "so_10924047_10924193_1": {"length": 11, "quality": 1.0, "section_id": 6814}, "so_10924047_10924198_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 6798}}, "n4659": {"so_10924047_10924193_0": {"length": 32, "quality": 0.8888888888888888, "section_id": 7345}, "so_10924047_10924198_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 8551}}}, "10924047": {"ViewCount": "219", "Body": "<p>This question <a href=\"https://stackoverflow.com/q/10923533/845568\">here</a> piqued my interest a little. Is there anywhere in the C++ standard that specifies all declarations within a class <em>must</em> be parsed before any accompanying implementations of member functions? I've seen a few other questions similar to this but no references to the standard in any of the answers. </p>\n", "AcceptedAnswerId": "10924198", "Title": "Parsing declarations before definitions in a class", "CreationDate": "2012-06-07T00:11:43.200", "Id": "10924047", "CommentCount": "4", "LastEditDate": "2017-05-23T10:27:54.840", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2012-06-07T00:50:51.667", "Score": "0", "OwnerUserId": "845568", "Tags": "<c++><standards>", "AnswerCount": "3"}, "10924198": {"Id": "10924198", "PostTypeId": "2", "Body": "<p>The Standard doesn't specify how the compiler should parse a translation unit. Instead, it specifies everywhere it is and is not valid to use any identifier to refer to a declaration.</p>\n<p>3.3.2p5:</p>\n<blockquote>\n<p id=\"so_10924047_10924198_0\">After the point of declaration of a class member, the member name can be looked up in the scope of its\n  class. [ Note: this is true even if the class is an incomplete class. ]</p>\n</blockquote>\n<p>3.3.7p1:</p>\n<blockquote>\n<p id=\"so_10924047_10924198_1\">The following rules describe the scope of names declared in classes.</p>\n<ol>\n<li>The potential scope of a name declared in a class consists not only of the declarative region following the name\u2019s point of declaration, but also of all function bodies, <em>brace-or-equal-initializers</em> of non-static data members, and default arguments in that class (including such things in nested classes).</li>\n<li>A name <code>N</code> used in a class <code>S</code> shall refer to the same declaration in its context and when re-evaluated in the completed scope of <code>S</code>. No diagnostic is required for a violation of this rule.</li>\n<li>If reordering member declarations in a class yields an alternate valid program under (1) and (2), the program is ill-formed, no diagnostic is required.</li>\n<li>A name declared within a member function hides a declaration of the same name whose scope extends to or past the end of the member function\u2019s class.</li>\n<li>The potential scope of a declaration that extends to or past the end of a class definition also extends to the regions defined by its member definitions, even if the members are defined lexically outside the class (this includes static data member definitions, nested class definitions, member function definitions (including the member function body and any portion of the declarator part of such definitions which follows the <em>declarator-id</em>, including a parameter-declaration-clause and any default arguments (8.3.6).</li>\n</ol>\n</blockquote>\n", "LastActivityDate": "2012-06-07T00:35:14.783", "CommentCount": "1", "CreationDate": "2012-06-07T00:35:14.783", "ParentId": "10924047", "Score": "1", "OwnerUserId": "459640"}, "10924190": {"Id": "10924190", "PostTypeId": "2", "Body": "<p>This is the draft which explains C++ Programming Language Standard. </p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">Programming Language C++ PDF</a></p>\n<p>I think page 220 has some explanations on member functions.</p>\n", "LastEditorUserId": "1435234", "LastActivityDate": "2012-06-07T00:40:26.873", "Score": "0", "CreationDate": "2012-06-07T00:34:08.403", "ParentId": "10924047", "CommentCount": "2", "LastEditDate": "2012-06-07T00:40:26.873", "OwnerUserId": "1435234"}});