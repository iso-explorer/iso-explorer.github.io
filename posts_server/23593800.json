post_cb({"bq_ids": {"n4140": {"so_23593800_23594083_0": {"length": 13, "quality": 1.0, "section_id": 3919}}, "n3337": {"so_23593800_23594083_0": {"length": 13, "quality": 1.0, "section_id": 3779}}, "n4659": {"so_23593800_23594083_0": {"length": 13, "quality": 1.0, "section_id": 4805}}}, "23593800": {"ViewCount": "111", "Body": "<p>In the following scenario:</p>\n<pre><code>HeavyInitClass* f()\n{\n    static HeavyInitClass* heavy = new HeavyInitClass();\n    return heavy;\n}\n</code></pre>\n<p>I know that in C++11 heavy will be initialized exactly once in a multithreaded environment because the flag that marks that heavy was not initialized is thread-safe.</p>\n<p>BUT does it also block the threads until heavy has been initialized?\nIf 100 threads call f() in the same time, does the 99 other threads wait until the initializing thread finishes the initialization?</p>\n<p>Thanks a lot!</p>\n", "AcceptedAnswerId": "23594083", "Title": "static variable initalization syncronizes in C++11?", "CreationDate": "2014-05-11T14:27:18.050", "Id": "23593800", "CommentCount": "11", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-08-03T09:04:48.583", "Score": "2", "OwnerUserId": "324827", "Tags": "<c++><multithreading><c++11><static><initialization>", "AnswerCount": "1"}, "23594083": {"Id": "23594083", "PostTypeId": "2", "Body": "<p>This is mandated by \u00a76.7 [stmt.dcl]/p4 of the standard:</p>\n<blockquote>\n<p id=\"so_23593800_23594083_0\">If control enters the declaration concurrently while the variable is being initialized, the concurrent execution shall wait for completion of the initialization.</p>\n</blockquote>\n<p>In other words, yes. The other threads must block until initialization is complete.</p>\n", "LastEditorUserId": "2756719", "LastActivityDate": "2014-08-03T09:04:48.583", "Score": "5", "CreationDate": "2014-05-11T14:55:05.183", "ParentId": "23593800", "CommentCount": "0", "OwnerUserId": "2756719", "LastEditDate": "2014-08-03T09:04:48.583"}});