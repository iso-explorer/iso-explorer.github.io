post_cb({"bq_ids": {"n4140": {"so_12203347_12206063_0": {"length": 15, "quality": 0.8333333333333334, "section_id": 4548}}, "n3337": {"so_12203347_12206063_0": {"length": 15, "quality": 0.8333333333333334, "section_id": 4378}}, "n4659": {"so_12203347_12206063_0": {"length": 15, "quality": 0.8333333333333334, "section_id": 5922}}}, "12206063": {"Id": "12206063", "PostTypeId": "2", "Body": "<p><strong>function object</strong>: An object <code>f</code> that you can call with the <code>f(x)</code> syntax. This includes function pointers, class objects having an overloaded <code>operator()</code> or conversion function to a function pointer/reference. </p>\n<p>The Standard has a straight forward definition of it</p>\n<blockquote>\n<p id=\"so_12203347_12206063_0\">A function object type is an object type (3.9) that can be the type of the postfix-expression in a function call (5.2.2, 13.3.1.1). A function object is an object of a function object type.</p>\n</blockquote>\n<p>In particular, a <em>function</em> or <em>function reference</em> is not a function object, even though they are callable entities. Some people confuse the term \"function object\" and take it to mean exclusively class type objects with an overloaded <code>operator()</code>. </p>\n<p><strong>function pointer</strong>: An, err, pointer to a function</p>\n<p><strong>lambda function</strong>: I think you refer to the C++11 lambdas. These are not really functions, but special compiler-generated class type function objects that have an overloaded <code>operator()</code>.</p>\n", "LastEditorUserId": "777186", "LastActivityDate": "2012-08-31T00:21:51.840", "Score": "6", "CreationDate": "2012-08-30T21:49:39.637", "ParentId": "12203347", "CommentCount": "0", "OwnerUserId": "34509", "LastEditDate": "2012-08-31T00:21:51.840"}, "12203347": {"ViewCount": "1248", "Body": "<p>I know each can be passed to another function. All of them seem to me like alternatives with subtle differences. </p>\n<ol>\n<li><p>function pointer: a pointer to a function</p></li>\n<li><p>function object: instance of a class that has overloaded the () operator; capable of acting as a function;</p></li>\n<li><p>lambda function: an anonymous function (newly introduced in C++11) that may be defined on the spot and that exists only during the lifetime of the statement of which it is a part</p></li>\n</ol>\n<p>Because of the subtleties, I wonder which of the 3 choices would be the most appropriate in a given scenario. So, experts out there, kindly shed some light (on some selection criteria?) so that I could decide and use them in different scenarios.</p>\n", "Title": "What is the difference between function pointers, function object, and lambda functions?", "CreationDate": "2012-08-30T18:38:07.997", "LastActivityDate": "2012-08-31T00:21:51.840", "CommentCount": "9", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2012-08-30T18:57:09.467", "LastEditorUserId": "312124", "Id": "12203347", "ClosedDate": "2012-08-30T23:20:28.023", "Score": "3", "OwnerUserId": "1636844", "Tags": "<c++><c++11>", "AnswerCount": "1"}});