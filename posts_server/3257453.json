post_cb({"bq_ids": {"n4140": {"so_3257453_3257519_0": {"length": 8, "quality": 0.8, "section_id": 6170}}, "n3337": {"so_3257453_3257519_0": {"length": 8, "quality": 0.8, "section_id": 5931}}, "n4659": {"so_3257453_3257519_0": {"length": 8, "quality": 0.8, "section_id": 7668}}}, "3257453": {"ViewCount": "2066", "Body": "<p>So I ran into something interesting that I didn't realize about the ternary operator (at least in Visual C++ 98-2010).  As pointed out in <a href=\"http://msdn.microsoft.com/en-us/library/e4213hs1(VS.71).aspx\" rel=\"noreferrer\">http://msdn.microsoft.com/en-us/library/e4213hs1(VS.71).aspx</a> if both the expression and conditional-expression are l-values the result is an l-value.</p>\n<p>Of course normally in c/c++ you'd write something like:</p>\n<p><code>int value = (x == 1) ? 1 : 0;</code></p>\n<p>and never even care about the r-value/l-value involvment, and in this case neither 1 nor 0 are convertible to l-values.</p>\n<p>However, take something like:</p>\n<p><code>int value = (x == 1) ? y : z;</code></p>\n<p>both y and z are l-values and they, or more precisely, one of them is the actual result of the ternary operator (not its stored value) which isn't necessarily obvious (at least I had never thought about it at any length). </p>\n<p>But, what that leads to is the ability to write the following </p>\n<p><code>(x == 1 ? y : z) = 99;</code></p>\n<p>Which assigns 99 to y if x == 1 or 99 to z if x != 1 </p>\n<p>I've never seen that described anywhere and in all the discussions I've read about the use (or, usually, whether to use) the ternary operator.</p>\n<p>Of course it only works if both the expression and conditional-expression are l-values something like</p>\n<p><code>(x == 1 ? 0 : z) = 99;</code></p>\n<p>fails to compile because 0 is an r-value as happily pointed out by the compiler.</p>\n<p>And this only works if you include the parenthesis</p>\n<p><code>x == 1 ? y : z = 99;</code></p>\n<p>is something entirely different which assigns 99 to z only if (x != 1) and the beautiful part is that both sides are still l-values so there is the serious rat-hole of what things like <code>(x == 1 ? y : z = 99) = 100</code> do (it assigns 100 to y or z depending on the truth of x == 1, stomping on the z = 99 assignment if x==1 is false)</p>\n<p>So, this leads me to my questions:</p>\n<p>A) Is this part of the actual c++ standard (which seems like it would be) and not just a Microsoft thing  -- I've looked but have failed, so far, to find this info.</p>\n<p>B) If this is widely realized and I've been living under a rock? I've never seen it used in any code that I can recall, and never seen it mentioned when the ternary operator is discussed.</p>\n<p>C) Do I need to get out more often?</p>\n", "AcceptedAnswerId": "3257502", "Title": "c++ ternary operator", "CreationDate": "2010-07-15T16:00:46.593", "Id": "3257453", "CommentCount": "3", "LastEditDate": "2010-07-15T16:01:51.330", "PostTypeId": "1", "LastEditorUserId": "96780", "LastActivityDate": "2010-07-15T16:13:30.477", "Score": "8", "OwnerUserId": "229904", "Tags": "<c++><visual-c++><conditional-operator>", "AnswerCount": "3"}, "3257502": {"Id": "3257502", "PostTypeId": "2", "Body": "<p>A) Yes, this is part of the standard.</p>\n<p>B) It's not widely realized, though it may be here on SO.  There's a reason it was voted the #1 hidden feature of C++: <a href=\"https://stackoverflow.com/questions/75538/hidden-features-of-c-closed\">Hidden Features of C++?</a>.</p>\n<p>C) No comment. :)</p>\n<p>Personally, I recommend steering clear of using this feature.  It is a lot less intuitive than using <code>if</code>/<code>else</code> statements, and clearly not everyone knows about it.  </p>\n<p>Going against my own warning, I actually tried using this once on a personal project, and I got burned by missing the parentheses and wasting 30 minutes trying to find the error.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2010-07-15T16:09:33.903", "Score": "10", "CreationDate": "2010-07-15T16:04:32.917", "ParentId": "3257453", "CommentCount": "1", "OwnerUserId": "303783", "LastEditDate": "2017-05-23T12:01:58.213"}, "3257508": {"Id": "3257508", "PostTypeId": "2", "Body": "<p>You have never seen it used because this usage is less intuitive and readable than the most common one. I have never seen it used this way in production code, either, and I hope I never see it.</p>\n<p>Remember Herb Sutter &amp; Andrei Alexandrescu's <a href=\"http://www.gotw.ca/publications/c++cs.htm\" rel=\"nofollow noreferrer\">C++ Coding Standards</a>, rule 6: \"Correctness, simplicity, and clarity come first.\"</p>\n", "LastActivityDate": "2010-07-15T16:04:50.157", "CommentCount": "2", "CreationDate": "2010-07-15T16:04:50.157", "ParentId": "3257453", "Score": "2", "OwnerUserId": "96780"}, "3257519": {"Id": "3257519", "PostTypeId": "2", "Body": "<p><strong>A.</strong> Yes. \u00a7[expr.cond]/4:</p>\n<blockquote>\n<p id=\"so_3257453_3257519_0\">If the second and third operands are lvalues and have the same type, the result is of that type and is an lvalue ...</p>\n</blockquote>\n<p>(Note that it is <em>not</em> true in C. Explicitly written in the C99 standard, footnote 93, \"A conditional expression does not yield an lvalue.\")</p>\n<p><strong>B.</strong> I don't think it's widely used as the usage is pretty obscure. It's more common to see</p>\n<pre><code>if (x == 1)\n  y = 99;\nelse\n  z = 99;\n</code></pre>\n", "LastEditorUserId": "224671", "LastActivityDate": "2010-07-15T16:13:30.477", "Score": "3", "CreationDate": "2010-07-15T16:06:25.830", "ParentId": "3257453", "CommentCount": "1", "OwnerUserId": "224671", "LastEditDate": "2010-07-15T16:13:30.477"}});