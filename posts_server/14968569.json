post_cb({"14968613": {"ParentId": "14968569", "PostTypeId": "2", "CommentCount": "5", "CreationDate": "2013-02-19T22:18:06.577", "Score": "3", "LastEditorUserId": "150634", "LastEditDate": "2013-02-19T22:25:20.910", "Id": "14968613", "OwnerUserId": "150634", "Body": "<p>The array of <code>const char</code> denoted by <code>\"end\"</code> is converted to a temporary object of type <code>std::string</code>. That temporary is destroyed as soon as <code>EnglishTranslate</code> returns. That leaves the returned reference dangling, not pointing at a valid object.</p>\n<p>Passing that returned reference to the copy assignment operator of <code>me</code> will result in undefined behaviour (assuming the operator is defined to do what it should do).</p>\n<p>I recommend returning by value instead:</p>\n<pre><code>std::string TranslationTable::EnglishTranslate()\n{\n    return \"end\";\n}\n</code></pre>\n<p>Don't worry about the copy to the return value - the compiler is allowed to remove the copy entirely.</p>\n<p>The only real common use for returning a reference from a function is to return a reference to a data member. A data member, unlike a local variable, is not going to be destroyed at the end of the function. See <a href=\"http://en.cppreference.com/w/cpp/container/vector/operator_at\" rel=\"nofollow\"><code>std::vector::operator[]</code></a> for an example.</p>\n", "LastActivityDate": "2013-02-19T22:25:20.910"}, "14968569": {"CommentCount": "2", "ViewCount": "50", "CreationDate": "2013-02-19T22:15:19.303", "LastActivityDate": "2013-02-19T22:25:20.910", "Title": "Return type of reference and copying object", "AcceptedAnswerId": "14968613", "PostTypeId": "1", "Id": "14968569", "Score": "0", "Body": "<p>If I return a std::string&amp; from a function, and the return type is the rvalue of an assignment, I get a warning message from GCC. Is this because passing by reference will not copy properly? The error states that I am passing a temporary value, which I am, because it will soon be removed from the stack.</p>\n<p>Here is some code for your consideration: Is what I am going to do a problem?</p>\n<pre><code>const std::string&amp; TranslationTable::EnglishTranslate()\n{\n    return \"end\";\n}\n</code></pre>\n<p>And inside main:</p>\n<pre><code>std::string me;\nme = EnglishTranslate();\n</code></pre>\n<p>Will the contents of the returned string copy correctly into <code>me</code>?</p>\n", "Tags": "<c++><string><copy>", "OwnerUserId": "893254", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_14968569_14968668_1": {"section_id": 382, "quality": 0.8823529411764706, "length": 15}}, "n3337": {"so_14968569_14968668_1": {"section_id": 373, "quality": 0.8823529411764706, "length": 15}}, "n4659": {"so_14968569_14968668_1": {"section_id": 397, "quality": 0.8823529411764706, "length": 15}}}, "14968668": {"ParentId": "14968569", "CommentCount": "8", "CreationDate": "2013-02-19T22:21:18.070", "OwnerUserId": "1932150", "PostTypeId": "2", "Id": "14968668", "Score": "2", "Body": "<blockquote>\n<p id=\"so_14968569_14968668_0\">Is what I am going to do a problem?</p>\n</blockquote>\n<p><strong>Yes.</strong></p>\n<p>Per Paragraph 12.2/5 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_14968569_14968668_1\">The lifetime of a temporary bound to the returned value in a function return statement (6.6.3) is not\n  extended; <strong>the temporary is destroyed at the end of the full-expression in the return statement</strong>.</p>\n</blockquote>\n<p>Hence, the reference returned by your function is dangling, and you have <strong>Undefined Behavior</strong> when dereferencing it.</p>\n", "LastActivityDate": "2013-02-19T22:21:18.070"}});