post_cb({"bq_ids": {"n4140": {"so_6094732_6094772_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 665}, "so_6094732_6094778_0": {"length": 13, "quality": 1.0, "section_id": 665}}, "n3337": {"so_6094732_6094772_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 655}, "so_6094732_6094778_0": {"length": 13, "quality": 1.0, "section_id": 655}}, "n4659": {"so_6094732_6094772_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 693}, "so_6094732_6094778_0": {"length": 13, "quality": 1.0, "section_id": 693}}}, "6094769": {"Id": "6094769", "PostTypeId": "2", "Body": "<p>Yes, it is valid the int as a parameter it only a policy enforcing parameter to distinguish between prefix and postfix operators. The passed parameter will be received as an argument, which is the behavior you see &amp; it is prfectly defined behavior. </p>\n", "LastActivityDate": "2011-05-23T08:38:39.287", "CommentCount": "0", "CreationDate": "2011-05-23T08:38:39.287", "ParentId": "6094732", "Score": "8", "OwnerUserId": "452307"}, "6094732": {"ViewCount": "401", "Body": "<p>I am not using this code in any production environment, it is just for my understanding. Is this code valid (i.e. can I define my postfix operator like this?):</p>\n<pre><code>class A\n{\npublic:\n    A&amp; operator++(int n)\n    {\n        std::cout&lt;&lt;\"N is:\"&lt;&lt;n&lt;&lt;\"\\n\";\n        return *this;\n    }\n};\n\n\nint main()\n{   \n    A a;\n    a++;\n    a.operator ++(10);\n}\n</code></pre>\n<p>On VS2008, I get the output as: </p>\n<blockquote>\n<p id=\"so_6094732_6094732_0\">N is 0</p>\n</blockquote>\n<p>for first call and </p>\n<blockquote>\n<p id=\"so_6094732_6094732_1\">N is 10</p>\n</blockquote>\n<p>for second call</p>\n", "AcceptedAnswerId": "6094772", "Title": "Is it allowed to name the parameter in postfix operator ++?", "CreationDate": "2011-05-23T08:35:01.867", "Id": "6094732", "CommentCount": "1", "FavoriteCount": "3", "PostTypeId": "1", "LastActivityDate": "2011-05-23T08:39:09.963", "Score": "26", "OwnerUserId": "392315", "Tags": "<c++><operator-overloading>", "AnswerCount": "3"}, "6094778": {"Id": "6094778", "PostTypeId": "2", "Body": "<p><code>a++</code> is equivalent to <code>a.operator++(0);</code>. Your code is valid</p>\n<p>13.5/7</p>\n<blockquote>\n<p id=\"so_6094732_6094778_0\">When the postfix increment is called as a result of using the ++ operator, the int\n    argument will have value zero.</p>\n</blockquote>\n", "LastActivityDate": "2011-05-23T08:39:09.963", "CommentCount": "0", "CreationDate": "2011-05-23T08:39:09.963", "ParentId": "6094732", "Score": "11", "OwnerUserId": "165520"}, "6094772": {"Id": "6094772", "PostTypeId": "2", "Body": "<p>This behavior is legal and well defined in 13.5.7:</p>\n<blockquote>\n<p id=\"so_6094732_6094772_0\">Calling operator++ explicitly, as in\n  expressions like a.operator++(2), has\n  no special properties: The argument to\n  operator++ is 2.</p>\n</blockquote>\n", "LastActivityDate": "2011-05-23T08:38:50.047", "CommentCount": "1", "CreationDate": "2011-05-23T08:38:50.047", "ParentId": "6094732", "Score": "20", "OwnerUserId": "160206"}});