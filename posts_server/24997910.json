post_cb({"bq_ids": {"n4140": {"so_24997910_24998000_0": {"length": 24, "quality": 0.9230769230769231, "section_id": 5600}}, "n3337": {"so_24997910_24998000_0": {"length": 24, "quality": 0.9230769230769231, "section_id": 5383}}, "n4659": {"so_24997910_24998000_0": {"length": 24, "quality": 0.9230769230769231, "section_id": 7044}}}, "24998000": {"Id": "24998000", "PostTypeId": "2", "Body": "<p>I would use:</p>\n<pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main()\n{\n    auto v = std::vector&lt;int&gt; { 1, 2, 3 };\n    auto rit = std::find(v.rbegin(), v.rend(), 3);\n    if (rit != v.rend()) {\n        auto idx = std::distance(begin(v), rit.base()) - 1;\n        std::cout &lt;&lt; idx;\n    } else\n        std::cout &lt;&lt; \"not found!\";\n}\n</code></pre>\n<p><a href=\"http://coliru.stacked-crooked.com/a/3cff456b9f485ea1\" rel=\"nofollow\"><strong>Live Example</strong></a>.</p>\n<p>The reason for the <code>-1</code> in the distance computation is because of the conversion between reverse and regular iterators in the <code>.base()</code> member:</p>\n<p><strong>24.5.1 Reverse iterators [reverse.iterators]</strong></p>\n<blockquote>\n<p id=\"so_24997910_24998000_0\">1 Class template reverse_iterator is an iterator adaptor that iterates\n  from the end of the sequence defined by its underlying iterator to the\n  beginning of that sequence. The fundamental relation between a reverse\n  iterator and its corresponding iterator i is established by the\n  identity: <code>&amp;*(reverse_iterator(i)) == &amp;*(i - 1)</code>.</p>\n</blockquote>\n<p><strong>Note</strong>: you could also use the above code without the check for <code>v.rend()</code>, and use the convention that <code>idx == -1</code> is equivalent to an element that is not found. However, that loses the ability to do <code>v[idx]</code>, so eventually you would need a check against that as well.</p>\n", "LastEditorUserId": "819272", "LastActivityDate": "2014-07-28T18:39:20.273", "Score": "5", "CreationDate": "2014-07-28T14:55:38.687", "ParentId": "24997910", "CommentCount": "4", "OwnerUserId": "819272", "LastEditDate": "2014-07-28T18:39:20.273"}, "24997987": {"Id": "24997987", "PostTypeId": "2", "Body": "<p>You could use:</p>\n<p><code>container.size() - 1 - (iterator - container.rbegin())</code></p>\n<p>or</p>\n<p><code>container.size() - 1 - std::distance(container.rbegin(), iterator)</code></p>\n<p>More info about reverse iterators. <a href=\"http://www.drdobbs.com/cpp/how-to-use-reverse-iterators-without-get/240168652\" rel=\"nofollow\">How To Use Reverse Iterators Without Getting Confused</a>. To convert reverse iterators into forward iterators and much more.</p>\n", "LastEditorUserId": "3837231", "LastActivityDate": "2014-07-28T15:16:41.357", "Score": "0", "CreationDate": "2014-07-28T14:55:08.857", "ParentId": "24997910", "CommentCount": "2", "OwnerUserId": "3837231", "LastEditDate": "2014-07-28T15:16:41.357"}, "24997910": {"ViewCount": "2918", "Body": "<p>I know how to get the index from a vector iterator, by subtracting the begin iterator from it. For example:</p>\n<pre><code>vector&lt;int&gt;::iterator it = find(vec.begin(), vec.end(), x);\nsize_t position = it - vec.begin();\n</code></pre>\n<p>However, now I want to find the index of the last <code>x</code> in the vector. How can I get the real index from the reverse iterators? I've found the following that seems to work (edit: it doesn't) but maybe there is a better (more idiomatic or whatever..) way.</p>\n<pre><code>vector&lt;int&gt;::reverse_iterator it = find(vec.rbegin(), vec.rend(), x);\nsize_t position = vec.size() - (it - vec.rbegin());\n</code></pre>\n", "AcceptedAnswerId": "24998000", "Title": "Get index in vector from reverse iterator", "CreationDate": "2014-07-28T14:50:40.817", "Id": "24997910", "CommentCount": "1", "LastEditDate": "2014-07-28T18:40:11.917", "PostTypeId": "1", "LastEditorUserId": "819272", "LastActivityDate": "2014-07-28T18:40:11.917", "Score": "6", "OwnerUserId": "2068573", "Tags": "<c++><vector><iterator><find><reverse-iterator>", "AnswerCount": "2"}});