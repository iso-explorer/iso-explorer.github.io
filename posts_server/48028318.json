post_cb({"48028400": {"Id": "48028400", "PostTypeId": "2", "Body": "<p>It's because it's part of the C++ spec<sup>1</sup>, \u00a711.6.2, which discusses the behavior of initializing character (or wide character) arrays using string literals:</p>\n<blockquote>\n<p id=\"so_48028318_48028400_0\">If there are fewer initializers than there are array elements, each element not explicitly initialized shall be\n  zero-initialized (11.6).</p>\n</blockquote>\n<p>Anyway, regarding computational cost:</p>\n<p>When you initialize an array in global (not function scope), it would typically land in the <code>.data</code> segment of your executable and be initialized by copying pages of memory straight from the executable image, rather than instructions that poke bytes of memory at a time during initialization. Either the page is copied as the program is loaded, or it's <a href=\"https://en.wikipedia.org/wiki/Demand_paging\" rel=\"nofollow noreferrer\">demand-paged</a>, again at a page-level granularity.</p>\n<p>In this case, since the entirety of the storage must be initialized, there's no additional cost to specifically initialize it with zeros.</p>\n<p><sup>1</sup> I can't find a good non-paywalled copy of the official spec. This quote is taken from a <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf\" rel=\"nofollow noreferrer\">draft</a>, on page 228 (per page footers) or page 242 (per PDF pagination).</p>\n", "LastEditorUserId": "1424875", "LastActivityDate": "2017-12-29T21:06:31.900", "Score": "1", "CreationDate": "2017-12-29T21:01:01.940", "ParentId": "48028318", "CommentCount": "3", "OwnerUserId": "1424875", "LastEditDate": "2017-12-29T21:06:31.900"}, "bq_ids": {"n4140": {"so_48028318_48028400_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 3316}}, "n3337": {"so_48028318_48028400_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 3186}}, "n4659": {"so_48028318_48028400_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 4082}}}, "48028318": {"ViewCount": "28", "Body": "<p>I've recently observed that by initializing an array, the garbage values are <strong>all</strong> replaced by null terminators. This would appear to be inconsequential, but in a large program I don't think it would be preferable to spend resources on cleaning out an array. Now to be clear, I don't program large programs, that's why I'm asking, I'm just a beginner. However, when used properly, it would stand to reason that garbage values would be perfectly fine as long as there is always an explicitly placed terminator.</p>\n<p>So then, should I take it as bible to always initialize my arrays, or should I consider whether I can get away with leaving the garbage values untouched?</p>\n", "AcceptedAnswerId": "48028400", "Title": "Initializing arrays, potentially unforseen consequences?", "CreationDate": "2017-12-29T20:51:48.107", "Id": "48028318", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2017-12-29T21:06:31.900", "Score": "1", "OwnerUserId": "9154274", "Tags": "<arrays><string><c++11><cin>", "AnswerCount": "1"}});