post_cb({"bq_ids": {"n4140": {"so_37290298_37290467_1": {"length": 27, "quality": 0.7941176470588235, "section_id": 6186}, "so_37290298_37290467_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 91}}, "n3337": {"so_37290298_37290467_1": {"length": 33, "quality": 0.9705882352941176, "section_id": 5947}, "so_37290298_37290467_0": {"length": 11, "quality": 0.8461538461538461, "section_id": 86}}, "n4659": {"so_37290298_37290467_1": {"length": 25, "quality": 0.7352941176470589, "section_id": 7689}}}, "37290298": {"ViewCount": "1146", "Body": "<p>Why don't I get an error trying to create a negative-size array?</p>\n<pre><code>#include &lt;array&gt;\n\nint main()\n{\n    std::array&lt;int, -1&gt; arr;\n}\n</code></pre>\n<p>With <code>-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC</code> I get no error. Is this intended behavior?</p>\n", "Title": "No error for negative-size array", "CreationDate": "2016-05-18T04:26:14.637", "LastActivityDate": "2016-05-18T11:04:53.277", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-05-18T10:42:43.957", "LastEditorUserId": "3614835", "Id": "37290298", "Score": "12", "OwnerUserId": "6348851", "Tags": "<c++><arrays><c++11><stdarray>", "AnswerCount": "2"}, "37290467": {"Id": "37290467", "PostTypeId": "2", "Body": "<p>No it's not legal. There's nothing about the specification of <code>std::array</code> that explicitly prevents this, but it's illegal because of narrowing conversions.</p>\n<p>\u00a714.3.2/5:</p>\n<blockquote>\n<p id=\"so_37290298_37290467_0\">For a non-type template-parameter of integral or enumeration type, conversions \n  permitted in a converted constant expression (5.19) are applied.</p>\n</blockquote>\n<p>\u00a75.19/3:</p>\n<blockquote>\n<p id=\"so_37290298_37290467_1\">A converted constant expression of type T is a literal constant expression, \n  implicitly converted to type T, where the implicit conversion (if any) is \n  permitted in a literal constant expression and the implicit conversion sequence\n  contains only user-defined conversions, lvalue-to-rvalue conversions (4.1), \n  integral promotions (4.5), and integral conversions (4.7) other than narrowing \n  conversions (8.5.4)</p>\n</blockquote>\n<p>The only way to get GCC to complain is to enable <code>-Wsign-conversion</code>. This is a <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57891\">known bug</a> and they haven't made any movement to fix it.</p>\n<p>In Clang you get the expected error message:</p>\n<pre><code>error: non-type template argument evaluates to -1, which cannot be \nnarrowed to type 'std::size_t' (aka 'unsigned long') [-Wc++11-narrowing]\n    std::array&lt;int, -1&gt; arr;\n</code></pre>\n", "LastActivityDate": "2016-05-18T04:42:57.020", "CommentCount": "1", "CreationDate": "2016-05-18T04:42:57.020", "ParentId": "37290298", "Score": "19", "OwnerUserId": "6292850"}, "37290450": {"Id": "37290450", "PostTypeId": "2", "Body": "<p>Type of <code>std::array</code> is:</p>\n<pre><code>template&lt; \n    class T, \n    std::size_t N \n&gt; struct array;\n</code></pre>\n<p>When you initialize second template parameter with <code>-1</code>, it is implicitly converted to a very large value as <code>std::size_t</code> is <code>unsigned</code> (which is illegal in C++ as pointed by <a href=\"https://stackoverflow.com/questions/37290298/no-error-for-negative-size-array/37290467#37290467\">other answer</a> and it should be diagnosed).</p>\n<p>Another possibility is that your <code>arr</code> is optimized out. You can confirm this by adding <code>-fdump-tree-optimized</code> flag to gcc command line.</p>\n<p>If you ensure <code>arr</code> is not optimized out, I hope you should get the <a href=\"http://ideone.com/olnlYo\" rel=\"nofollow noreferrer\">following warning</a>:</p>\n<pre><code>prog.cpp:5:25: error: size of variable 'arr' is too large\n     std::array&lt;int, -1&gt; arr;\n</code></pre>\n", "LastEditorUserId": "-1", "LastActivityDate": "2016-05-18T11:04:53.277", "Score": "8", "CreationDate": "2016-05-18T04:41:01.260", "ParentId": "37290298", "CommentCount": "2", "OwnerUserId": "2659313", "LastEditDate": "2017-05-23T12:15:56.913"}});