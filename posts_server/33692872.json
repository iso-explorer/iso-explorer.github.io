post_cb({"33692872": {"CommentCount": "1", "ViewCount": "2947", "PostTypeId": "1", "LastEditorUserId": "3664960", "CreationDate": "2015-11-13T12:34:52.210", "LastActivityDate": "2015-12-04T19:37:37.967", "Title": "constexpr const char * vs constexpr const char[]", "AcceptedAnswerId": "33692987", "LastEditDate": "2015-11-24T12:53:24.437", "Id": "33692872", "Score": "16", "Body": "<p>The \"first attempt\" doesn't compile while the second does. Why? What's the difference?</p>\n<p><strong>First attempt:</strong></p>\n<pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    constexpr const char text2[] = \"hello\";\n    constexpr const char * b = &amp;text2[4];  // error: '&amp; text2[4]' is not a constant expression\n    std::cout &lt;&lt; b &lt;&lt; std::endl;\n}\n</code></pre>\n<p><strong>Second attempt:</strong></p>\n<pre><code>#include &lt;iostream&gt;\nint main()\n{\nconstexpr const char * text1 = \"hello\";\nconstexpr const char * a = &amp;text1[4];\nstd::cout &lt;&lt; a &lt;&lt; std::endl;\n\nreturn 0;\n}\n</code></pre>\n<p>I compile with (g++ version 4.9.2)</p>\n<pre><code>g++ -std=c++11 -o main *.cpp\n</code></pre>\n<p>which gives following error</p>\n<pre><code>main.cpp: In function 'int main()':\nmain.cpp:7:40: error: '&amp; text2[4]' is not a constant expression constexpr const char * b = &amp;text2[4];  // error: '&amp; text2[4]' is not a constant expression  \n</code></pre>\n", "Tags": "<c++><c++11><constexpr>", "OwnerUserId": "4734434", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33692872_33692987_1": {"section_id": 5356, "quality": 1.0, "length": 26}, "so_33692872_33692987_0": {"section_id": 87, "quality": 0.6956521739130435, "length": 16}}, "n3337": {"so_33692872_33692987_1": {"section_id": 5153, "quality": 1.0, "length": 26}, "so_33692872_33692987_0": {"section_id": 5947, "quality": 1.0, "length": 23}}, "n4659": {"so_33692872_33692987_1": {"section_id": 6781, "quality": 1.0, "length": 26}, "so_33692872_33692987_0": {"section_id": 7690, "quality": 0.6956521739130435, "length": 16}}}, "33692987": {"ParentId": "33692872", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>From the draft C++11 standard section <code>5.19</code> <em>[expr.const]</em> we can see an <a href=\"http://en.cppreference.com/w/cpp/language/constant_expression#Address_constant_expression\" rel=\"nofollow\">address constant expression</a> is (<em>emphasis mine gong forward</em>):</p>\n<blockquote>\n<p id=\"so_33692872_33692987_0\">[...] a prvalue core constant expression\n  of <strong>pointer type that evaluates to the address of an object with\n  static storage duration</strong>, to the address of a function, or to a null\n  pointer value, or a prvalue core constant expression of type\n  std::nullptr_t.</p>\n</blockquote>\n<p>In your first case although <code>\"hello\"</code> is a string literal which has static storage duration. It is copied into an array <code>text2</code> which does not have static storage duration.</p>\n<p>While in your second case <code>text1</code> is a pointer to a <a href=\"http://en.cppreference.com/w/cpp/language/string_literal\" rel=\"nofollow\">string literal</a> which has static storage duration.</p>\n<p>Changing your first example to make <code>text2</code> static (<em><a href=\"http://melpon.org/wandbox/permlink/vGxTxgwXB9ey87aW\" rel=\"nofollow\">see it live</a></em>):</p>\n<pre><code>constexpr char static text2[] = \"hello\";\n               ^^^^^^\n</code></pre>\n<p>we no longer get an error.</p>\n<p>We can see a string literal has static storage duration from section <code>2.14.5</code> <em>[lex.string]</em>:</p>\n<blockquote>\n<p id=\"so_33692872_33692987_1\">Ordinary string literals and UTF-8 string literals are also referred\n  to as narrow string literals. A narrow string literal has type \u201carray\n  of n const char\u201d, where n is the size of the string as defined below,\n  and has static storage duration (3.7).</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2015-12-04T19:37:37.967", "Id": "33692987", "Score": "21", "CreationDate": "2015-11-13T12:40:03.930", "LastActivityDate": "2015-12-04T19:37:37.967"}});