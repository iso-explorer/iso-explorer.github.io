post_cb({"5887433": {"Id": "5887433", "PostTypeId": "2", "Body": "<p>They're equivalent, in both cases a ctor with no arguments will be called.</p>\n", "LastActivityDate": "2011-05-04T17:31:07.537", "CommentCount": "3", "CreationDate": "2011-05-04T17:31:07.537", "ParentId": "5887416", "Score": "7", "OwnerUserId": "16102"}, "bq_ids": {"n4140": {"so_5887416_5887445_0": {"length": 7, "quality": 1.0, "section_id": 6098}}, "n3337": {"so_5887416_5887445_0": {"length": 7, "quality": 1.0, "section_id": 5864}}, "n4659": {"so_5887416_5887445_0": {"length": 7, "quality": 1.0, "section_id": 7595}}}, "5887453": {"Id": "5887453", "PostTypeId": "2", "Body": "<p>It automatically calls the default constructor. You may encounter these as well:</p>\n<pre><code>Test t1;\nTest t3 = Test();\n</code></pre>\n<p>They all have the same effect of calling default constructor.</p>\n", "LastEditorUserId": "279982", "LastActivityDate": "2011-05-05T15:20:48.477", "Score": "0", "CreationDate": "2011-05-04T17:32:33.530", "ParentId": "5887416", "CommentCount": "2", "OwnerUserId": "279982", "LastEditDate": "2011-05-05T15:20:48.477"}, "5887416": {"ViewCount": "146", "Body": "<blockquote>\n<p id=\"so_5887416_5887416_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/620137/do-the-parentheses-after-the-type-name-make-a-difference-with-new\">Do the parentheses after the type name make a difference with new?</a> </br></p>\n</blockquote>\n<p>Hi guys,</p>\n<p>I have a question about C++ regarding to the following code:</p>\n<pre><code>Test *t1 = new Test; // there is no () after new Test;\n</code></pre>\n<p>if there is a user declared default constructor, what operations are performed by the above line?</p>\n<p>and what about </p>\n<pre><code>Test *t2 = new Test(); // there is () after new Test;\n</code></pre>\n", "AcceptedAnswerId": "5887433", "Title": "In C++, how does the following code works?", "CreationDate": "2011-05-04T17:29:14.830", "Id": "5887416", "CommentCount": "0", "LastEditDate": "2017-05-23T12:03:20.330", "PostTypeId": "1", "OwnerDisplayName": "user707549", "LastEditorUserId": "-1", "LastActivityDate": "2011-05-05T15:20:48.477", "ClosedDate": "2011-05-04T17:38:17.773", "Score": "1", "Tags": "<c++>", "AnswerCount": "3"}, "5887445": {"Id": "5887445", "PostTypeId": "2", "Body": "<p><s>For <code>struct</code>s and <code>class</code>es that have a constructor it's the same, the only difference between using the empty parentheses is for primitive types, which are zero-initialized if the parentheses are there, while they are left uninitialized otherwise.</s></p>\n<p>Actually, it's more complicated than that; if you omit the parentheses:</p>\n<ul>\n<li>non-POD <code>class</code>es and <code>struct</code>s are default-initialized, which actually means that their constructor is called;</li>\n<li>PODs (and in particular primitive types) are left not initialized;</li>\n</ul>\n<p>If, instead, you specify the parentheses, the default-initialization is always performed, which, for primitive types, means zero-initialization.</p>\n<p>The full story is explained at \u00a75.3.4 \u00b615; the default initialization is covered at \u00a78.5.</p>\n<hr/>\n<p><em><strong>Relevant standard quotation:</strong></em></p>\n<blockquote>\n<p id=\"so_5887416_5887445_0\">A new-expression that creates an\n  object of type T initializes that\n  object as follows:</p>\n<ul>\n<li>If the new-initializer is omitted:\n  <ul>\n<li>If <code>T</code> is a (possibly cv-qualified) non-POD class type (or\n  array thereof), the object is\n  default-initialized (8.5) If <code>T</code> is a\n  <code>const</code>-qualified type, the underlying\n  class type shall have a user-declared\n  default constructor.</li>\n<li>Otherwise, the object created has indeterminate value. If <code>T</code> is a\n  <code>const</code>-qualified type, or a (possibly\n  cv-qualified) POD class type (or array\n  thereof) containing (directly or\n  indirectly) a member of\n  const-qualified type, the program is\n  ill-formed;</li>\n</ul></li>\n<li>If the new-initializer is of the form <code>()</code>, default-initialization\n  shall be performed (8.5);</li>\n<li>If the new-initializer is of the form (expression-list) and <code>T</code> is a\n  class type, the appropriate\n  constructor is called, using\n  expression-list as the arguments\n  (8.5);</li>\n<li>If the new-initializer is of the form (expression-list) and T is an\n  arithmetic, enumeration, pointer, or\n  pointer-to-member type and\n  expression-list comprises exactly one\n  expression, then the object is\n  initialized to the (possibly\n  converted) value of the expression\n  (8.5); \u2014 Otherwise the new-expression\n  is ill-formed.</li>\n</ul>\n</blockquote>\n<p>(\u00a75.3.4 \u00b615)</p>\n", "LastEditorUserId": "214671", "LastActivityDate": "2011-05-04T17:38:51.477", "Score": "3", "CreationDate": "2011-05-04T17:32:06.890", "ParentId": "5887416", "CommentCount": "0", "OwnerUserId": "214671", "LastEditDate": "2011-05-04T17:38:51.477"}});