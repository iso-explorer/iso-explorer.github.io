post_cb({"bq_ids": {"n4140": {"so_13597170_13599511_2": {"section_id": 1584, "quality": 1.0, "length": 4}, "so_13597170_13599511_7": {"section_id": 1635, "quality": 1.0, "length": 4}}, "n3337": {"so_13597170_13599511_7": {"section_id": 1632, "quality": 1.0, "length": 4}}, "n4659": {"so_13597170_13599511_2": {"section_id": 1736, "quality": 1.0, "length": 4}, "so_13597170_13599511_7": {"section_id": 1790, "quality": 1.0, "length": 4}}}, "13599511": {"ParentId": "13597170", "LastEditDate": "2012-11-28T09:20:21.567", "CommentCount": "0", "CreationDate": "2012-11-28T06:59:18.173", "OwnerUserId": "367273", "LastEditorUserId": "367273", "PostTypeId": "2", "Id": "13599511", "Score": "2", "Body": "<p>Given that they have word-for-word identical specs in the standard, it's hard to envisage a reasonable implementation where their runtime cost would differ:</p>\n<blockquote>\n<p id=\"so_13597170_13599511_0\"><code>21.4.6 basic_string modi\ufb01ers [string.modi\ufb01ers]</code></p>\n<p id=\"so_13597170_13599511_1\"><code>21.4.6.1 basic_string::operator+= [string::op+=]</code></p>\n<p id=\"so_13597170_13599511_2\"><code>basic_string&amp; operator+=(const basic_string&amp; str);</code></p>\n<p id=\"so_13597170_13599511_3\">1 E\ufb00ects: <strong>Calls <code>append(str.data, str.size()).</code></strong></p>\n<p id=\"so_13597170_13599511_4\">2 Returns: <code>*this</code></p>\n<p id=\"so_13597170_13599511_5\"><code>...</code></p>\n<p id=\"so_13597170_13599511_6\"><code>21.4.6.2 basic_string::append [string::append]</code></p>\n<p id=\"so_13597170_13599511_7\"><code>basic_string&amp; append(const basic_string&amp; str);</code></p>\n<p id=\"so_13597170_13599511_8\">1 E\ufb00ects: <strong>Calls <code>append(str.data(), str.size()).</code></strong></p>\n<p id=\"so_13597170_13599511_9\">2 Returns: <code>*this.</code></p>\n</blockquote>\n", "LastActivityDate": "2012-11-28T09:20:21.567"}, "13597170": {"CommentCount": "3", "ViewCount": "438", "PostTypeId": "1", "LastEditorUserId": "1804543", "LastActivityDate": "2012-11-28T17:50:20.607", "Body": "<p>I am just curious about the implementation of c++ string +=.</p>\n<p>Is there any performance penalty for this?\nWhich one is supposed to be faster?</p>\n<pre><code>String a = \"xxx\";\na += \"(\" + \"abcd\" + \")\"\n</code></pre>\n<p>or</p>\n<pre><code>String a = \"xxx\";\na.append(\"(\");\na.append(\"abcd\");\na.append(\")\");\n</code></pre>\n", "Title": "c++ string += how is it implemented?", "FavoriteCount": "0", "LastEditDate": "2012-11-28T17:50:20.607", "Id": "13597170", "Score": "0", "CreationDate": "2012-11-28T03:12:15.817", "Tags": "<c++><string>", "OwnerUserId": "1804543", "AnswerCount": "3"}, "13597230": {"ParentId": "13597170", "CommentCount": "1", "Body": "<p>There are no difference between them, In fact += operator's implemention just invoke append.\nI read it from the STL code.</p>\n", "OwnerUserId": "1124357", "PostTypeId": "2", "Id": "13597230", "Score": "0", "CreationDate": "2012-11-28T03:19:53.700", "LastActivityDate": "2012-11-28T03:19:53.700"}, "13597221": {"ParentId": "13597170", "CommentCount": "1", "Body": "<p>I'd be very surprised if the <code>+=</code> operator wasn't implemented by a call to <code>append</code>.</p>\n<p>In fact, <a href=\"http://www.sgi.com/tech/stl/basic_string.html\" rel=\"nofollow\">SGI's documentation</a> for <code>basic_string</code> indicates that:</p>\n<blockquote>\n<p id=\"so_13597170_13597221_0\"><code>basic_string&amp; operator+=(const basic_string&amp; s)</code>  Equivalent to <code>append(s)</code>.</p>\n</blockquote>\n<p>Furthermore, <a href=\"http://www.sgi.com/tech/stl/string\" rel=\"nofollow\">the code</a> reads:</p>\n<pre><code>basic_string&amp; operator+=(const basic_string&amp; __s) { return append(__s); }\n</code></pre>\n<p><a href=\"http://www.sgi.com/tech/stl/string\" rel=\"nofollow\">http://www.sgi.com/tech/stl/string</a></p>\n", "OwnerUserId": "119527", "PostTypeId": "2", "Id": "13597221", "Score": "0", "CreationDate": "2012-11-28T03:18:17.820", "LastActivityDate": "2012-11-28T03:18:17.820"}});