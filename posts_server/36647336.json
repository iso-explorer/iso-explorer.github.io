post_cb({"36647336": {"ViewCount": "36", "Body": "<p>I have a problem to compile the following code, it simply results in a compile error, see below.</p>\n<p>What I did not understand:\nIf my class <code>Any</code> itself is not a template class, all works as expected. ( you can uncomment the example code lines to this.</p>\n<p>If <code>Any</code> is a template the <code>BASE_T</code> is not longer visible. Is there a trick to make it visible again?</p>\n<p>Why I need the <code>BASE_T</code>? As you can see ConcatHelper template creates a class from all types which are part of the variadic list of this template. Real world code did some more but doesn't matter for this example here. I defined my <code>BASE_T</code> to reduce my code and must not copy all the template parameters again and again.</p>\n<p>Used compilers: g++5.3.1 and latest snapshot of gcc6.</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass F {};  \n\ntemplate&lt;typename T&gt;\nclass FReader\n{   \n    public:\n        FReader(F&amp;){}\n};  \n\ntemplate&lt;typename T&gt; class A { };\ntemplate&lt;typename T&gt; class B { };\n\n\ntemplate &lt; typename FILETYPE, typename Base, typename ...Tail&gt; class ConcatHelper;\n\ntemplate &lt;typename FILETYPE, typename Base, typename Head, typename ...Tail&gt;\nclass ConcatHelper&lt; FILETYPE, Base, Head, Tail...&gt;: public Head, public ConcatHelper&lt; FILETYPE, Base, Tail... &gt;\n{   \n    public:\n        typedef ConcatHelper&lt; FILETYPE, Base, Head, Tail...&gt; BASES_T;\n\n        ConcatHelper(FILETYPE &amp;_is): ConcatHelper&lt; FILETYPE, Base, Tail... &gt;(_is){}\n};  \n\ntemplate&lt;typename FILETYPE, typename Base&gt;\nclass ConcatHelper&lt;FILETYPE, Base&gt;: public Base\n{   \n    public:\n    ConcatHelper(FILETYPE&amp; _i): Base(_i){}\n};  \n\n//class OUTER_MASTER{};\ntemplate &lt;typename OUTER_MASTER&gt;\nclass Any: public ConcatHelper&lt;F, FReader&lt;OUTER_MASTER&gt;, A&lt;OUTER_MASTER&gt;,B&lt;OUTER_MASTER&gt;&gt;\n{   \n    public:\n        Any( F&amp; is): BASES_T ( is ) {} // did not compile\n        //Any( F&amp; is):ConcatHelper&lt;F, FReader&lt;OUTER_MASTER&gt;, A&lt;OUTER_MASTER&gt;,B&lt;OUTER_MASTER&gt;&gt;(is) {} // compiles\n};  \n\nint main()\n{   \n    F f;\n    Any&lt;int&gt; gr(f);\n    //Any gr(f);\n\n}   \n</code></pre>\n<p>results in:</p>\n<pre><code>error: class 'Any&lt;OUTER_MASTER&gt;' does not have any field named 'BASES_T'\n</code></pre>\n<p>if I change:</p>\n<pre><code>Any( F&amp; is): BASES_T ( is ) {}\n</code></pre>\n<p>to</p>\n<pre><code>Any( F&amp; is): std::remove_reference&lt;decltype(*this)&gt;::type::BASES_T ( is ) {}\n</code></pre>\n<p>But is this really valid c++ code?</p>\n", "AcceptedAnswerId": "36647755", "Title": "Visibility of a base class constructor in a derived template class", "CreationDate": "2016-04-15T12:36:12.093", "Id": "36647336", "CommentCount": "1", "LastEditDate": "2016-04-15T13:06:07.230", "PostTypeId": "1", "LastEditorUserId": "13767", "LastActivityDate": "2016-04-15T13:06:07.230", "Score": "3", "OwnerUserId": "878532", "Tags": "<c++><templates>", "AnswerCount": "1"}, "36647755": {"Id": "36647755", "PostTypeId": "2", "Body": "<p>To use a typename from a template derived class you need to qualify used type name.</p>\n<p>As the C++ standards says (14.6.2/3):</p>\n<blockquote>\n<p id=\"so_36647336_36647755_0\">In the definition of a class template or a member of a class template,\n  if a base class of the class template depends on a template-parameter,\n  the base class scope <strong>is not examined during unqualified name lookup</strong>\n  either at the point of definition of the class template or member or\n  during an instantiation of the class template or member.</p>\n</blockquote>\n<p>Qualifying the constructor with class name works:</p>\n<pre><code>template &lt;typename OUTER_MASTER&gt;\nclass Any: public ConcatHelper&lt;F, FReader&lt;OUTER_MASTER&gt;, A&lt;OUTER_MASTER&gt;,B&lt;OUTER_MASTER&gt;&gt;\n{   \n    public:\n        Any( F&amp; is): Any::BASES_T(is) {}\n}; \n</code></pre>\n", "LastEditorUserId": "13767", "LastActivityDate": "2016-04-15T13:00:16.600", "Score": "4", "CreationDate": "2016-04-15T12:55:25.667", "ParentId": "36647336", "CommentCount": "1", "OwnerUserId": "13767", "LastEditDate": "2016-04-15T13:00:16.600"}, "bq_ids": {"n4140": {"so_36647336_36647755_0": {"length": 27, "quality": 0.8709677419354839, "section_id": 190}}, "n3337": {"so_36647336_36647755_0": {"length": 27, "quality": 0.8709677419354839, "section_id": 184}}, "n4659": {"so_36647336_36647755_0": {"length": 22, "quality": 0.7096774193548387, "section_id": 195}}}});