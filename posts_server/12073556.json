post_cb({"12074205": {"ParentId": "12073556", "CommentCount": "0", "Body": "<p>That is correct, \u00a712.8 sets the conditions when a move constructor gets implicitly declared and the presence of a user-declared copy constructor precludes that. You cannot have</p>\n<ul>\n<li>user-declared copy constructor</li>\n<li>user-declared copy assignment operator</li>\n<li>user-declared move-assignment operator</li>\n<li>user-declared destructor</li>\n</ul>\n", "OwnerUserId": "661519", "PostTypeId": "2", "Id": "12074205", "Score": "1", "CreationDate": "2012-08-22T13:24:58.530", "LastActivityDate": "2012-08-22T13:24:58.530"}, "12073591": {"ParentId": "12073556", "CommentCount": "0", "Body": "<p>A <code>default</code>ed copy constructor <em>is</em> indeed \"user-declared\"; I think the addition of <code>default</code> was in fact the reason why they changed the term from \"user-defined\" to \"user-declared\".</p>\n", "OwnerUserId": "541686", "PostTypeId": "2", "Id": "12073591", "Score": "2", "CreationDate": "2012-08-22T12:52:17.547", "LastActivityDate": "2012-08-22T12:52:17.547"}, "12074507": {"ParentId": "12073556", "CommentCount": "0", "Body": "<p>From the standard:</p>\n<blockquote>\n<h3>8.4.2 Explicitly-defaulted functions [dcl.fct.def.default]</h3>\n<p id=\"so_12073556_12074507_0\">4 - [...] A special member function is user-provided if it is user-declared and not explicitly\n  defaulted or deleted on its \ufb01rst declaration. [...]</p>\n</blockquote>\n<p>An explicit default can be combined with its declaration, or it can be separate:</p>\n<pre><code>struct S {\n    S();\n};\nS::S() = default;\n</code></pre>\n<p>In either case its (first) declaration makes it user-declared.</p>\n", "OwnerUserId": "567292", "PostTypeId": "2", "Id": "12074507", "Score": "3", "CreationDate": "2012-08-22T13:42:29.587", "LastActivityDate": "2012-08-22T13:42:29.587"}, "12073556": {"CommentCount": "1", "AcceptedAnswerId": "12073591", "CreationDate": "2012-08-22T12:50:26.563", "LastActivityDate": "2012-08-22T14:23:12.513", "PostTypeId": "1", "ViewCount": "1744", "FavoriteCount": "2", "Title": "C++ 11: is a defaulted copy constructor user declared?", "Id": "12073556", "Score": "14", "Body": "<p>I guess it is so, but I am looking for C++11 language lawyers to confirm my impression. Is it true that the following class</p>\n<pre><code>struct X{\nX(){}\nX(X const&amp;)=default;\n};\n</code></pre>\n<p>will not be automatically move-enabled, i.e., getting <code>X(X&amp;&amp;)</code> and <code>operator=(X&amp;&amp;)</code>, because its copy constructor is \"user-declared\", even though it looks equivalent to</p>\n<pre><code>struct X{\n};\n</code></pre>\n<p>which will get both <code>X(X const&amp;)</code> and <code>X(X&amp;&amp;)</code> etc., implicitely declared and (trivially) defined on use.</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "779373", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_12073556_12074507_0": {"section_id": 3274, "quality": 0.6363636363636364, "length": 7}}, "n3337": {"so_12073556_12074507_0": {"section_id": 3145, "quality": 0.8181818181818182, "length": 9}}, "n4659": {"so_12073556_12074507_0": {"section_id": 4032, "quality": 0.6363636363636364, "length": 7}}}, "12075249": {"ParentId": "12073556", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Yes, your defaulted copy assign operator precludes the implicit move ctor.</p>\n<p>BTW putting <code>=default</code> is actually a <em>definition</em>.  I remember <a href=\"https://stackoverflow.com/questions/9020372/how-do-i-use-unique-ptr-for-pimpl\">trying to implement</a> a pimpl idiom with <code>std::unique_ptr</code> and having to remove <code>=default</code> from headers and putting them in the implementation file because the destructor for <code>unique_ptr</code> needed the definition of the class it is trying to clean up.</p>\n", "OwnerUserId": "680359", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:01:44.953", "Id": "12075249", "Score": "2", "CreationDate": "2012-08-22T14:23:12.513", "LastActivityDate": "2012-08-22T14:23:12.513"}});