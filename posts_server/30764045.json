post_cb({"30764045": {"CommentCount": "1", "ViewCount": "92", "CreationDate": "2015-06-10T18:07:31.840", "LastActivityDate": "2015-06-10T20:14:37.737", "Title": "The destructor for the class member `B`, why is it invoked in the snippet below?", "AcceptedAnswerId": "30764117", "PostTypeId": "1", "Id": "30764045", "Score": "3", "Body": "<p>From \u00a75.3.5[expr.delete]/1, I can understand that the destructor for the object <code>*a</code> is <strong>not</strong> invoked in the snippet below. But I didn't understand why is the destructor for the class member <code>B</code> invoked in this case, as can be seen in this <a href=\"http://coliru.stacked-crooked.com/a/d1bf3f2a54acea32\" rel=\"nofollow\">live example</a>.</p>\n<pre><code>#include &lt;iostream&gt;\nclass A\n{\npublic:\n   class B{ public: ~B(){ std::cout &lt;&lt; \"B dtor\" &lt;&lt; '\\n'; } };\n   A() { p = new B(); }\n   operator B*() { return p; }\nprivate:\n   B* p;\n};\n\nint main()\n{\n   A* a = new A();\n   delete *a;\n   std::cout &lt;&lt; \"end\" &lt;&lt; '\\n';\n}\n</code></pre>\n<p>Would appreciate some quote from the Standard explaining this.</p>\n", "Tags": "<c++><language-lawyer><c++14><delete-operator>", "OwnerUserId": "2548699", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_30764045_30764117_2": {"section_id": 6106, "quality": 1.0, "length": 18}}, "n3337": {"so_30764045_30764117_1": {"section_id": 5871, "quality": 0.8823529411764706, "length": 15}, "so_30764045_30764117_2": {"section_id": 5872, "quality": 1.0, "length": 18}}, "n4659": {"so_30764045_30764117_1": {"section_id": 8732, "quality": 0.5882352941176471, "length": 10}, "so_30764045_30764117_2": {"section_id": 7603, "quality": 1.0, "length": 18}}}, "30764117": {"ParentId": "30764045", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Your <code>delete *a</code> applies operator <code>delete</code> to a <em>non-pointer</em> expression <code>*a</code> of type <code>A</code>. The only way this can be legal is when type <code>A</code> is implicitly convertible to some pointer type. </p>\n<blockquote>\n<p id=\"so_30764045_30764117_0\"><strong>5.3.5 Delete [expr.delete]</strong> </p>\n<p id=\"so_30764045_30764117_1\"><strong>1</strong> ... The operand shall have a pointer to object type, or a class type having a single non-explicit conversion\n  function (12.3.2) to a pointer to object type. </p>\n<p id=\"so_30764045_30764117_2\"><strong>2</strong> If the operand has a\n  class type, the operand is converted to a pointer type by calling the\n  above-mentioned conversion function, and the converted operand is used\n  in place of the original operand for the remainder of this section.</p>\n</blockquote>\n<p>In this case your class <code>A</code> is implicitly convertible to <code>B *</code>, which is exactly what happens when you do <code>delete *a</code>.</p>\n<p>In other words, your <code>delete *a</code> is actually interpreted as</p>\n<pre><code>delete (*a).operator B*();\n</code></pre>\n<p>It is <code>B</code> you <code>delete</code> in your code, not <code>A</code>. This is why the destructor of <code>B</code> is called.</p>\n<p>If you wanted to destroy the <code>A</code> object, you'd have to do</p>\n<pre><code>delete a;\n</code></pre>\n<p>(note, no <code>*</code>). That would not call <code>B</code>'s destructor.</p>\n", "OwnerUserId": "187690", "LastEditorUserId": "187690", "LastEditDate": "2015-06-10T20:14:37.737", "Id": "30764117", "Score": "13", "CreationDate": "2015-06-10T18:10:48.303", "LastActivityDate": "2015-06-10T20:14:37.737"}, "30766265": {"ParentId": "30764045", "CommentCount": "0", "Body": "<p>if you tried to implement smart pointer - then you probably should examine <a href=\"http://www.boost.org/doc/libs/1_57_0/boost/move/unique_ptr.hpp\" rel=\"nofollow\">boost sources</a></p>\n<p>in a nutshell smart pointer pattern provide the idea of some small object, that wrap original object and destroy it as it's not required.</p>\n<p>for example very simple example, also without custom deleters and so on:</p>\n<pre><code>&lt;template class T&gt;\nclass scope_delete\n{\n public:\n   scope_delete(T* ptr) : p(ptr) {}\n   ~scope_delete() { delete p; }\n   T* operator-&gt;() { return p; }\n private:\n   T * p;\n};\n\n// somewere in programm\n{\n  auto obj = scope_delete(new MyCLasss);\n  obj-&gt;some_fun();\n} // here stack object obj will be deleted and remove original object.\n</code></pre>\n<p>for detailed information you should read some books, or I've just google this <a href=\"http://www.codeproject.com/Articles/15351/Implementing-a-simple-smart-pointer-in-c\" rel=\"nofollow\">article</a>.</p>\n", "OwnerUserId": "4985257", "PostTypeId": "2", "Id": "30766265", "Score": "0", "CreationDate": "2015-06-10T20:05:58.497", "LastActivityDate": "2015-06-10T20:05:58.497"}});