post_cb({"9489609": {"ViewCount": "2190", "Body": "<blockquote>\n<p id=\"so_9489609_9489609_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/2474018/when-does-invoking-a-member-function-on-a-null-instance-result-in-undefined-beha\">When does invoking a member function on a null instance result in undefined behavior?</a><br>\n<a href=\"https://stackoverflow.com/questions/2727834/c-standard-dereferencing-null-pointer-to-get-a-reference\">C++ standard: dereferencing NULL pointer to get a reference?</a> </br></br></p>\n</blockquote>\n<p>Say I have the class:</p>\n<pre><code>class A\n{\npublic:\n   void foo() { cout &lt;&lt; \"foo\"; }\n};\n</code></pre>\n<p>and call foo like so:</p>\n<pre><code>A* a = NULL;\na-&gt;foo();\n</code></pre>\n<p>I suspect this invokes undefined behavior, since it's equivalent to <code>(*a).foo()</code> (or is it?), and dereferencing a <code>NULL</code> <strong>is</strong> UB, but I can't find the reference. Can anyone help me out? Or is it defined? </p>\n<p>No, the function is not <code>virtual</code>. No, I'm not accessing any members.</p>\n<p>EDIT: I voted to close this question but will not delete it as I couldn't find the duplicate myself, and I suspect this title might be easier to find by others.</p>\n", "AcceptedAnswerId": "9489679", "Title": "Is calling a function on a NULL pointer undefined?", "CreationDate": "2012-02-28T20:57:06.113", "LastActivityDate": "2012-02-28T21:15:32.540", "CommentCount": "11", "LastEditDate": "2017-05-23T12:22:53.710", "PostTypeId": "1", "Tags": "<c++><undefined-behavior>", "Id": "9489609", "AnswerCount": "4", "Score": "7", "OwnerUserId": "673730", "ClosedDate": "2012-02-28T22:13:13.467", "LastEditorUserId": "-1"}, "9489623": {"Id": "9489623", "PostTypeId": "2", "Body": "<p>Yes, that is UB as <code>a</code> has not been initialized to point to a valid memory location before it is dereferenced.</p>\n", "LastActivityDate": "2012-02-28T20:58:30.390", "CommentCount": "4", "CreationDate": "2012-02-28T20:58:30.390", "ParentId": "9489609", "Score": "0", "OwnerUserId": "1053"}, "9489679": {"Id": "9489679", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_9489609_9489679_0\">I'm looking for the reference that says <code>a-&gt;x</code> is equivalent to <code>(*a).x</code>.</p>\n</blockquote>\n<p>Here it is:</p>\n<blockquote>\n<p id=\"so_9489609_9489679_1\"><code>[C++11: 5.2.5/2]:</code> For the first option (dot) the first expression shall have complete class type. For the second option (arrow) the first expression shall have pointer to complete class type. <strong>The expression <code>E1-&gt;E2</code> is converted to the equivalent form <code>(*(E1)).E2</code>;</strong> the remainder of 5.2.5 will address only the first option (dot). In either case, the <em>id-expression</em> shall name a member of the class or of one of its base classes. [ <em>Note:</em> because the name of a class is inserted in its class scope (Clause 9), the name of a class is also considered a nested member of that class. <em>\u2014end note</em> ] [ <em>Note:</em> 3.4.5 describes how names are looked up after the <code>.</code> and <code>-&gt;</code> operators. <em>\u2014end note</em> ]</p>\n</blockquote>\n<p>There is no direct quotation for dereferencing a NULL pointer being UB, unfortunately. You may find more under this question: <a href=\"https://stackoverflow.com/questions/2474018/when-does-invoking-a-member-function-on-a-null-instance-result-in-undefined-beha\">When does invoking a member function on a null instance result in undefined behavior?</a></p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-02-28T21:04:09.427", "Score": "9", "CreationDate": "2012-02-28T21:04:09.427", "ParentId": "9489609", "CommentCount": "3", "OwnerUserId": "560648", "LastEditDate": "2017-05-23T12:33:02.230"}, "bq_ids": {"n4140": {"so_9489609_9489820_2": {"length": 14, "quality": 0.7, "section_id": 6021}, "so_9489609_9489679_1": {"length": 60, "quality": 0.8108108108108109, "section_id": 6005}}, "n3337": {"so_9489609_9489820_2": {"length": 14, "quality": 0.7, "section_id": 5789}, "so_9489609_9489679_1": {"length": 60, "quality": 0.8108108108108109, "section_id": 5773}}, "n4659": {"so_9489609_9489820_2": {"length": 14, "quality": 0.7, "section_id": 7520}, "so_9489609_9489679_1": {"length": 57, "quality": 0.7702702702702703, "section_id": 7504}}}, "9489820": {"Id": "9489820", "PostTypeId": "2", "Body": "<p>It is covered here: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#232\" rel=\"nofollow\">http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#232</a></p>\n<blockquote>\n<p id=\"so_9489609_9489820_0\">At least a couple of places in the IS state that indirection through a\n  null pointer produces undefined behavior: 1.9 [intro.execution]\n  paragraph 4 gives \"dereferencing the null pointer\" as an example of\n  undefined behavior, and 8.3.2 [dcl.ref] paragraph 4 (in a note) uses\n  this supposedly undefined behavior as justification for the\n  nonexistence of \"null references.\"</p>\n<p id=\"so_9489609_9489820_1\">However, 5.3.1 [expr.unary.op] paragraph 1, which describes the unary\n  \"*\" operator, does not say that the behavior is undefined if the\n  operand is a null pointer, as one might expect. Furthermore, at least\n  one passage gives dereferencing a null pointer well-defined behavior:\n  5.2.8 [expr.typeid] paragraph 2 says</p>\n<p id=\"so_9489609_9489820_2\">If the lvalue expression is obtained by applying the unary * operator\n  to a pointer and the pointer is a null pointer value (4.10\n  [conv.ptr]), the typeid expression throws the bad_typeid exception\n  (18.7.3 [bad.typeid]). </p>\n<p id=\"so_9489609_9489820_3\">This is inconsistent and should be cleaned up.</p>\n</blockquote>\n<p>Read more at the link if you want to learn more.</p>\n", "OwnerDisplayName": "user195488", "LastActivityDate": "2012-02-28T21:15:01.673", "Score": "0", "CreationDate": "2012-02-28T21:15:01.673", "ParentId": "9489609", "CommentCount": "3"}, "9489657": {"Id": "9489657", "PostTypeId": "2", "Body": "<p>I'm aware of at least one case where this idiom is not only allowed but relied upon: Microsoft's MFC class CWnd provides a member function GetSafeHwnd which tests if <code>this==NULL</code> and returns without accessing any member variables.</p>\n<p>Of course there are plenty of people who would claim that MFC is a very bad example.</p>\n<p>Regardless of whether the behavior is undefined or not, in practice it's not likely to behave badly. The compiler will treat <code>a-&gt;foo()</code> as <code>A::foo(a)</code> which does not do a dereference at the call site, as long as <code>foo</code> is not virtual.</p>\n", "LastEditorUserId": "5987", "LastActivityDate": "2012-02-28T21:07:46.820", "Score": "0", "CreationDate": "2012-02-28T21:01:45.773", "ParentId": "9489609", "CommentCount": "2", "OwnerUserId": "5987", "LastEditDate": "2012-02-28T21:07:46.820"}});