post_cb({"40669058": {"CommentCount": "3", "AcceptedAnswerId": "40669709", "LastEditDate": "2016-11-18T04:44:17.660", "LastEditorUserId": "2383721", "CreationDate": "2016-11-18T03:50:18.227", "LastActivityDate": "2017-09-29T18:06:56.287", "PostTypeId": "1", "ViewCount": "95", "Title": "- minus unary operator overloading in c++", "Id": "40669058", "OwnerUserId": "6548233", "Body": "<pre><code>#include &lt;iostream&gt;\n#include&lt;conio.h&gt;\nusing namespace std;\n\nclass Distance {\n   private:\n      int feet;             // 0 to infinite\n      int inches;           // 0 to 12\n   public:\n   // required constructors\n      Distance(){\n        feet = 0;\n        inches = 0;\n     }\n     Distance(int f, int i){\n        feet = f;\n        inches = i;\n     }\n     // method to display distance\n     void displayDistance() {\n         cout &lt;&lt; \"F: \" &lt;&lt; feet &lt;&lt; \" I:\" &lt;&lt; inches &lt;&lt;endl;\n     }\n     // overloaded minus (-) operator\n     Distance operator- () {\n        feet = -feet;\n        inches = -inches;\n       // return Distance(feet, inches);\n     }\n};\n\nint main() {\n   Distance D1(11, 10), D2(-5, 11);\n\n   -D1;                     // apply negation\n   D1.displayDistance();    // display D1\n\n   -D2;                     // apply negation\n    D2.displayDistance();    // display D2\n\n   return 0;\n}\n</code></pre>\n<p>I am a beginner learning C++ overloading operator function. This code is actually working fine but at one step I am little confused about <code>// return Distance(feet, inches);</code> I have made this statement as comment in program but still output is true. but if i run program without making it comment the program also works fine than in what purpose is this statement is using? Second, is it constructor function returning values? Third, how it is returning values I mean it is not a variable i always heard we can return values from variable?</p>\n", "Tags": "<c++>", "Score": "0", "AnswerCount": "2"}, "40669709": {"ParentId": "40669058", "PostTypeId": "2", "CommentCount": "1", "Body": "<blockquote>\n<p id=\"so_40669058_40669709_0\">if I run program without making it comment the program also works fine than in what purpose is this statement is using</p>\n</blockquote>\n<p>From <a href=\"http://eel.is/c++draft/stmt.return\" rel=\"nofollow noreferrer\">[stmt.return]</a>:</p>\n<blockquote>\n<p id=\"so_40669058_40669709_1\">Flowing off the end of a constructor, a destructor, or a function with a cv void return type is equivalent to a return with no operand. Otherwise, flowing off the end of a function other than main ([basic.start.main]) results in undefined behavior.</p>\n</blockquote>\n<p>Your program is resulting an <strong>undefined behavior</strong>, anything can happen.</p>\n<blockquote>\n<p id=\"so_40669058_40669709_2\">Second, is it constructor function returning values?</p>\n</blockquote>\n<p>I think you meant this line:</p>\n<pre><code>return Distance(feet, inches);\n</code></pre>\n<p>That line return a <code>prvalue</code> of <code>Distance</code> which is constructed from <code>feet</code> and <code>inches</code>. That value should be eligible to copy-elision and is guaranteed to be elided in copy from C++17</p>\n<blockquote>\n<p id=\"so_40669058_40669709_3\">Third, how it is returning values I mean it is not a variable I always heard we can return values from variable?</p>\n</blockquote>\n<p>From the said [stmt.return], emphasis is mine:</p>\n<blockquote>\n<p id=\"so_40669058_40669709_4\">The expr-or-braced-init-list of a return statement is called its operand. A return statement with no operand shall be used only in a function whose return type is cv void, a constructor ([class.ctor]), or a destructor ([class.dtor]). A return statement with an operand of type void shall be used only in a function whose return type is cv void. A return statement with any other operand shall be used only in a function whose return type is not cv void; <strong>the return statement initializes the glvalue result or prvalue result object of the (explicit or implicit) function call by copy-initialization ([dcl.init]) from the operand</strong>. [ Note: A return statement can involve an invocation of a constructor to perform a copy or move of the operand if it is not a prvalue or if its type differs from the return type of the function. A copy operation associated with a return statement may be elided or converted to a move operation if an automatic storage duration variable is returned ([class.copy]).  \u2014 end note ] [ Example:</p>\n<pre><code> std::pair&lt;std::string,int&gt; f(const char* p, int x) {\n     return {p,x};\n }\n</code></pre>\n</blockquote>\n<p>The <code>return</code> statement should go in those form:</p>\n<pre><code>return; // for void and constructor, destructor\n</code></pre>\n<p>or</p>\n<pre><code>return expression-or-braced-init-list;\n</code></pre>\n<hr>\n<p>Anyway, I think your minus operator should look like this:</p>\n<pre><code> Distance operator- () {\n    return Distance(-feet, -inches);\n }\n</code></pre>\n</hr>", "OwnerUserId": "4115625", "LastEditorUserId": "3840840", "LastEditDate": "2017-09-29T18:06:56.287", "Id": "40669709", "Score": "0", "CreationDate": "2016-11-18T05:01:49.133", "LastActivityDate": "2017-09-29T18:06:56.287"}, "40669614": {"ParentId": "40669058", "CommentCount": "0", "Body": "<ol>\n<li><p><code>return Distance(feet, inches);</code> affects the value of expressions like <code>-D1</code>, so if you do <code>D1 = -D2</code>, then using <code>return</code> will make a difference. </p></li>\n<li><p>A constructor function does not return anything. It just contains the code that runs when an object is created.</p></li>\n<li><p>In some sense, the return value is like an invisible variable. However, you would need to read a lot about assembly, compilers, and the cpu to understand it better.</p></li>\n</ol>\n", "OwnerUserId": "1107013", "PostTypeId": "2", "Id": "40669614", "Score": "0", "CreationDate": "2016-11-18T04:52:08.137", "LastActivityDate": "2016-11-18T04:52:08.137"}, "bq_ids": {"n4659": {"so_40669058_40669709_1": {"section_id": 4799, "quality": 0.9166666666666666, "length": 22}, "so_40669058_40669709_4": {"section_id": 4799, "quality": 0.8777777777777778, "length": 79}}}});