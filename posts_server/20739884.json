post_cb({"20739970": {"Id": "20739970", "PostTypeId": "2", "Body": "<p>The backslash <code>\\</code> is a very widespread escape character, and C++ also uses it like that. This means it's used to express special meaning (usually nonprintable characters). For example, to encode a line-feed character (ASCII 10) into a string, you express it as <code>\\n</code> in the string literal. Another example, putting a single backslash at the end of a line (that is, before the line's terminating newline character) escapes the newline - so this way, you can continue a macro definition or <code>//</code>-style comment across several source file lines, and they will still count as one logical line.</p>\n<p>This of course means that to get a literal backslash character, you have to escape the backslash itself, to get remove its \"escape character\" status. So typing <code>\\\\</code> into a string literal yields a literal <code>\\</code> character.</p>\n<p>That's why you get only half the amount of backslashes output - the C++ source code parser consumes two to produce one.</p>\n", "LastActivityDate": "2013-12-23T08:50:44.183", "CommentCount": "1", "CreationDate": "2013-12-23T08:50:44.183", "ParentId": "20739884", "Score": "2", "OwnerUserId": "1782465"}, "bq_ids": {"n4140": {"so_20739884_20739968_0": {"length": 9, "quality": 0.5625, "section_id": 5345}}, "n3337": {"so_20739884_20739968_0": {"length": 9, "quality": 0.5625, "section_id": 5142}}, "n4659": {"so_20739884_20739968_0": {"length": 9, "quality": 0.5625, "section_id": 6770}}}, "20740001": {"Id": "20740001", "PostTypeId": "2", "Body": "<p>If it is C++, why not use string:</p>\n<pre><code>string testme(64, '\\\\');\ncout &lt;&lt; testme &lt;&lt; endl;\n</code></pre>\n", "LastActivityDate": "2013-12-23T08:53:05.490", "CommentCount": "1", "CreationDate": "2013-12-23T08:53:05.490", "ParentId": "20739884", "Score": "3", "OwnerUserId": "608126"}, "20739972": {"Id": "20739972", "PostTypeId": "2", "Body": "<p>Didn't you notice one thing:</p>\n<p>You printed 64 <code>'\\'</code> but it printed only 32 of them.</p>\n<p>Did you try 60, or 54, or some odd combi. say 33 ?</p>\n<p>In C, <code>'\\'</code> is escape character. You should have used <code>'\\n'</code> for newline didn't you notice then, that <code>'\\'</code> is not being printed. </p>\n<p>To print <code>'\\'</code> you must use <code>'\\\\'</code>.</p>\n<p>A question for you:</p>\n<p>Try printing 64 <code>'%'</code>. See what you get. Try understanding the reason for the output.</p>\n", "LastActivityDate": "2013-12-23T08:50:48.590", "CommentCount": "2", "CreationDate": "2013-12-23T08:50:48.590", "ParentId": "20739884", "Score": "2", "OwnerUserId": "2628863"}, "20739937": {"Id": "20739937", "PostTypeId": "2", "Body": "<p><code>\\\\</code> is used to denote a single backslash: <code>\\</code>. This is because <code>\\</code> is used in string literals to denote other symbols like <code>\\t</code> for a tab, <code>\\n</code> for a newline and <code>\\\"</code> for a quotation character.</p>\n<p>So <code>\\\\</code> gives you one backslash, <code>\\\\\\\\</code> gives you two and so on.</p>\n", "LastActivityDate": "2013-12-23T08:48:47.753", "CommentCount": "0", "CreationDate": "2013-12-23T08:48:47.753", "ParentId": "20739884", "Score": "4", "OwnerUserId": "2380830"}, "20739884": {"ViewCount": "364", "Body": "<p>This question may be silly but would be great if i understand the behavior.</p>\n<p>I try to print </p>\n<p><code>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</code></p>\n<p>using a simple program</p>\n<pre><code>char testme [] =\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\0\";\ncout&lt;&lt;\"testme:\"&lt;&lt;testme&lt;&lt;endl;\n</code></pre>\n<p>The out put in this case is </p>\n<pre><code>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n</code></pre>\n<p>I intend to print 64 \"\\\" characters, instead the output is 32 \"\\\" characters.</p>\n<p>There seems to be some thing that i am missing since the out put is exactly half.</p>\n<p>Edit: The reason why i was asking is becasue , i have to <code>^</code>  \"\\\" to another char for HMAC encryption and i see some weird things.</p>\n", "AcceptedAnswerId": "20739968", "Title": "Printing \"\\\" character in C++", "CreationDate": "2013-12-23T08:45:32.407", "Id": "20739884", "CommentCount": "7", "LastEditDate": "2013-12-23T09:22:40.937", "PostTypeId": "1", "LastEditorUserId": "35060", "LastActivityDate": "2013-12-23T09:22:40.937", "Score": "-2", "OwnerUserId": "1442040", "Tags": "<c++>", "AnswerCount": "8"}, "20739968": {"Id": "20739968", "PostTypeId": "2", "Body": "<p>To print a <code>\\</code> standard states that  </p>\n<h2>C11; 6.4.4.4 Character constants:</h2>\n<blockquote>\n<p id=\"so_20739884_20739968_0\">The double-quote <code>\"</code> and question-mark <code>?</code> are representable either by themselves or by the\n  escape sequences <code>\\\"</code> and <code>\\?</code>, respectively, but <strong>the single-quote <code>'</code> and the backslash <code>\\</code>\n  shall be represented, respectively, by the escape sequences <code>\\'</code> and <code>\\\\</code></strong><sub>1</sub>.  </p>\n</blockquote>\n<p>That mean to print a <code>\\</code> you need an extra backslash <code>\\</code> . To print two <code>\\\\</code> you need four backslash <code>\\\\\\\\</code> and hence for <code>64</code> backslash you need <code>128</code> backslash.  </p>\n<hr>\n<p><sub>1. Emphasis is mine.</sub></p>\n</hr>", "LastEditorUserId": "2455888", "LastActivityDate": "2013-12-23T09:03:20.980", "Score": "3", "CreationDate": "2013-12-23T08:50:40.743", "ParentId": "20739884", "CommentCount": "9", "OwnerUserId": "2455888", "LastEditDate": "2013-12-23T09:03:20.980"}, "20739979": {"Id": "20739979", "PostTypeId": "2", "Body": "<p><code>\\</code> is a special character known as <a href=\"http://en.wikipedia.org/wiki/Escape_sequences_in_C\" rel=\"nofollow\">Escape Character</a>. For ex:: <code>\\n</code> means <code>newline character</code>. So, if you want to print <code>single \\</code>, you have to give <code>\\\\</code>. The first <code>\\</code> says the compiler to not treat the next <code>\\</code> as an escape character.</p>\n", "LastActivityDate": "2013-12-23T08:51:17.923", "CommentCount": "3", "CreationDate": "2013-12-23T08:51:17.923", "ParentId": "20739884", "Score": "3", "OwnerUserId": "1182192"}, "20739983": {"Id": "20739983", "PostTypeId": "2", "Body": "<p>in C++11 you can do like this... </p>\n<pre><code>char testme [] =R\"(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\0)\";\ncout&lt;&lt;\"testme:\"&lt;&lt;testme&lt;&lt;endl;\n</code></pre>\n<p>The R\"(...)\" for <code>Raw Character Strings</code>...\nTo represent a backslash () in a string literal, we have to precede it with a backslash. To prevent errors (cos of too many backslash), C++ provides <code>raw string literals</code>...</p>\n", "LastEditorDisplayName": "user1814023", "OwnerDisplayName": "user1814023", "LastActivityDate": "2013-12-23T08:57:18.000", "Score": "7", "CreationDate": "2013-12-23T08:51:26.807", "ParentId": "20739884", "CommentCount": "3", "LastEditDate": "2013-12-23T08:57:18.000"}, "20739962": {"Id": "20739962", "PostTypeId": "2", "Body": "<p>This is called escaping and is a mechanism to insert certain characters into a string. For example, if you want to insert a citation mark into a string, you need to escape it.</p>\n<pre><code>char testme [] =\"I am a so called \\\"programmer\\\".\";\n</code></pre>\n<p>There's also <code>\\n</code>, <code>\\t</code> and other codes. However, this applies to <code>\\</code> itself, since you might want to be able to have a string that says <code>\\n</code> without converting it into a newline character. </p>\n<pre><code>char testme [] =\"This is a backslash followed by the letter n: \\\\n\";\n</code></pre>\n", "LastActivityDate": "2013-12-23T08:50:28.370", "CommentCount": "0", "CreationDate": "2013-12-23T08:50:28.370", "ParentId": "20739884", "Score": "5", "OwnerUserId": "593264"}});