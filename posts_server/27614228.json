post_cb({"27614281": {"ParentId": "27614228", "CommentCount": "0", "Body": "<p>This is because an empty string still contains the the null character <code>'\\0'</code> at the end, so there is still a value to bind to the variable name, whereas an empty character literal has no value.</p>\n", "OwnerUserId": "4364151", "PostTypeId": "2", "Id": "27614281", "Score": "3", "CreationDate": "2014-12-23T04:54:49.607", "LastActivityDate": "2014-12-23T04:54:49.607"}, "27617545": {"ParentId": "27614228", "CommentCount": "0", "Body": "<p>String is a set of character terminated by a NULL character ( '\\0' ). \nSo a Empty string will always have a NULL character in it at the end .</p>\n<p>But in case of a character literal no value is there.\nit needs at least  one character.</p>\n", "OwnerUserId": "4377391", "PostTypeId": "2", "Id": "27617545", "Score": "0", "CreationDate": "2014-12-23T09:31:29.553", "LastActivityDate": "2014-12-23T09:31:29.553"}, "27614263": {"ParentId": "27614228", "CommentCount": "1", "Body": "<p>The reason is that a character literal is defined as a character. There may be extensions that allow it to be <em>more</em> than one character, but it needs to be at least one character or it just doesn't make any sense. It would be the same as trying to do:</p>\n<pre><code>int i = ;\n</code></pre>\n<p>If you don't specify a value, what do you put there?</p>\n", "OwnerUserId": "5987", "PostTypeId": "2", "Id": "27614263", "Score": "10", "CreationDate": "2014-12-23T04:52:47.553", "LastActivityDate": "2014-12-23T04:52:47.553"}, "27614228": {"CommentCount": "0", "ViewCount": "146", "CreationDate": "2014-12-23T04:48:02.213", "LastActivityDate": "2014-12-23T09:31:29.553", "Title": "Why can't character constants/literals be empty?", "PostTypeId": "1", "Id": "27614228", "Score": "3", "Body": "<p>In C and C++ the rules are the same. In C,</p>\n<blockquote>\n<p id=\"so_27614228_27614228_0\"><code>[\u00a76.4.4.4]/2</code> An integer character constant is a sequence of one or\n  more multibyte characters enclosed in single-quotes, as in <code>'x'</code>.</p>\n</blockquote>\n<p>In C++,</p>\n<blockquote>\n<p id=\"so_27614228_27614228_1\"><code>[\u00a72.14.3]/1</code> A character literal is one or more characters enclosed\n  in single quotes, as in <code>'x'</code>, optionally preceded by one of the\n  letters <code>u</code>, <code>U</code>, or <code>L</code>, as in <code>u'y'</code>, <code>U'z'</code>, or <code>L'x'</code>,\n  respectively.</p>\n</blockquote>\n<p>The key phrase is \"one or more\". In contrast, a string literal can be empty, <code>\"\"</code>, presumably because it consists of the null terminating character. In C, this leads to awkward initialization of a char. Either you leave it uninitialized, or use a useless value like <code>0</code> or <code>'\\0'</code>.</p>\n<pre><code>char garbage;\nchar useless = 0;\nchar useless2 = '\\0';\n</code></pre>\n<p>In C++, you have to use a string literal instead of a character literal if you want it to be empty.</p>\n<pre><code>(somecondition ? ' ' : '') // error\n(somecondition ? \" \" : \"\") // necessary\n</code></pre>\n<p>What is the reason it is this way? I'm assuming C++'s reason is inherited from C.</p>\n", "Tags": "<c++><c><character>", "OwnerUserId": "4387336", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_27614228_27614228_1": {"section_id": 5343, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_27614228_27614228_1": {"section_id": 5140, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_27614228_27614228_1": {"section_id": 6764, "quality": 0.7857142857142857, "length": 11}}}});