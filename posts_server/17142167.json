post_cb({"31182873": {"ParentId": "17142167", "CommentCount": "1", "Body": "<p><strong>T&amp;&amp;</strong> In C++11 is rValue reference. They behave like lvalue reference from C++ 98,03. Their goal - to be a candidate for moving. In C++98 such construction can be appear in refrence collapsing</p>\n<p><strong>std::move</strong> - turns expression in rvalue. It could be called <em>rvalue_cast</em>, but such keyword is not exist.</p>\n<p>Explicit cast to type T&amp;&amp; possible in principle. Real standart cost some money, but in draft of the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">ISO/IEC 14882:2011</a> \nThere is exist such info</p>\n<blockquote>\n<p id=\"so_17142167_31182873_0\">5.2.9 Static cast</p>\n<p id=\"so_17142167_31182873_1\">8) \u00a0</p>\n<p id=\"so_17142167_31182873_2\">The lvalue-to-rvalue (4.1), array-to-pointer (4.2), and function-to-pointer (4.3) conversions are applied to\u00a0the\n  operand....</p>\n</blockquote>\n<p>From practical point of view it is more convenient to use std::move.\nImagine such example:</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;utility&gt;\n\nclass A\n{\npublic:\nA () {printf (\"A ()\" \"\\n\");}\nA (const A &amp;) {printf (\"A (&amp;)\" \"\\n\");}\nA (A &amp;&amp;) {printf (\"A (&amp;&amp;)\" \"\\n\");}\nA (const A &amp;&amp;) {printf (\"A (const &amp;&amp;)\" \"\\n\");}\n~ A () {printf (\"~ A ()\" \"\\n\");}\n};\n\n\nint main ()\n{\nconst A obj;\nA obj2 (std::move (obj)); // 1-st approach\nA obj3 (static_cast &lt;const A&amp;&amp;&gt; (obj));  // 2-nd approach\n}\n</code></pre>\n<p>As for me 1-st approach is </p>\n<ul>\n<li>more convenient (should you perform static_cast to <strong>const A&amp;&amp;</strong>, or to <strong>A&amp;&amp;</strong> ?)</li>\n<li>more explicitly (I can use search in text-editor to find std::move in project)</li>\n<li>less error-prone when software developer write code</li>\n</ul>\n", "OwnerUserId": "1154447", "PostTypeId": "2", "Id": "31182873", "Score": "0", "CreationDate": "2015-07-02T11:07:35.580", "LastActivityDate": "2015-07-02T11:07:35.580"}, "17142167": {"CommentCount": "1", "CreationDate": "2013-06-17T07:14:33.323", "PostTypeId": "1", "AcceptedAnswerId": "17142253", "LastEditorUserId": "453803", "LastActivityDate": "2017-10-15T09:47:15.950", "LastEditDate": "2013-06-17T08:18:06.493", "ViewCount": "2342", "FavoriteCount": "2", "Title": "is there any difference between static cast to rvalue reference and std::move", "Id": "17142167", "Score": "17", "Body": "<p>The description for static cast says</p>\n<blockquote>\n<p id=\"so_17142167_17142167_0\">If new_type is an rvalue reference type, static_cast converts the value of expression to xvalue. This type of static_cast is used to implement move semantics in std::move.(since C++11)</p>\n</blockquote>\n<p>Does this confirm that the following are equivalent ?</p>\n<p>(A)</p>\n<pre><code>X x1;\nX x2 = static_cast&lt;X&amp;&amp;&gt;(x1); \n</code></pre>\n<p>(B)</p>\n<pre><code>X x1;\nX x2 = std::move(x1);\n</code></pre>\n", "Tags": "<c++><c++11><move><static-cast>", "OwnerUserId": "1411750", "AnswerCount": "3"}, "46469562": {"ParentId": "17142167", "LastEditDate": "2017-10-15T09:47:15.950", "CommentCount": "5", "CreationDate": "2017-09-28T12:47:06.653", "OwnerUserId": "6222803", "LastEditorUserId": "6222803", "PostTypeId": "2", "Id": "46469562", "Score": "-1", "Body": "<p>You can use <code>static_cast&lt;A &amp;&amp;&gt;(a)</code> when a is an rvalue, but you shouldn't use <code>std::move(a)</code>.<br>\nWhen you use <code>A &amp;&amp; a = std::move(A())</code>, you get a dangling reference.</br></p>\n", "LastActivityDate": "2017-10-15T09:47:15.950"}, "bq_ids": {"n4140": {"so_17142167_31182873_2": {"section_id": 6034, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_17142167_31182873_2": {"section_id": 5802, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_17142167_31182873_2": {"section_id": 7533, "quality": 0.8571428571428571, "length": 6}}}, "17142253": {"ParentId": "17142167", "LastEditDate": "2017-06-13T13:10:45.777", "CommentCount": "1", "CreationDate": "2013-06-17T07:19:54.180", "OwnerUserId": "1918154", "LastEditorUserId": "3980929", "PostTypeId": "2", "Id": "17142253", "Score": "30", "Body": "<p>Yes there is a very important difference: <code>std::move</code> documents what you want to do. In addition the cast is prone to writing errors like a forgotten <code>&amp;</code> or wrong type <code>X</code>.</p>\n<p>As it can be seen, <code>std::move</code> is even less to type.</p>\n", "LastActivityDate": "2017-06-13T13:10:45.777"}});