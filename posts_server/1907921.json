post_cb({"1907988": {"PostTypeId": "2", "ParentId": "1907921", "Body": "<p>In C++0x there is a new null pointer constant called <code>nullptr</code> of type <code>nullptr_t</code>.  It can be implicitly converted to any pointer type.</p>\n<p>Until then I would recommend using NULL, however 0 and 0L will both work on every implementation I've ever heard of.</p>\n", "CreationDate": "2009-12-15T14:55:01.517", "Score": "4", "CommentCount": "2", "Id": "1907988", "OwnerUserId": "3153", "LastActivityDate": "2009-12-15T14:55:01.517"}, "1907921": {"LastEditDate": "2017-05-23T11:47:46.440", "Body": "<p>In <a href=\"https://stackoverflow.com/questions/1907795/what-is-going-on-at-the-top-of-this-function\">this question</a> an initializer is used to set a pointer to null. Instead of using value of <code>0</code> value of <code>0L</code> is used. I've read that one should use exactly <code>0</code> for null pointers because exact null pointer representation is implementation-specific.</p>\n<p>Can using <code>0L</code> to set a pointer to null cause problems while porting?</p>\n", "CreationDate": "2009-12-15T14:44:26.323", "Score": "2", "AcceptedAnswerId": "1907953", "CommentCount": "0", "OwnerUserId": "57428", "Title": "Can using 0L to initialize a pointer in C++ cause problems?", "LastActivityDate": "2009-12-15T22:57:39.347", "PostTypeId": "1", "Tags": "<c++><pointers><null-pointer>", "AnswerCount": "9", "Id": "1907921", "ViewCount": "10984", "LastEditorUserId": "-1"}, "1908020": {"PostTypeId": "2", "ParentId": "1907921", "Body": "<p>I would disagree with those who recommend using NULL, though any of the three stated options would indeed work. In idiomatic C++, the standard choice is 0 (perhaps because that's Stroustrup's preference: <a href=\"http://www2.research.att.com/~bs/bs_faq2.html#null\" rel=\"nofollow noreferrer\">http://www2.research.att.com/~bs/bs_faq2.html#null</a>).</p>\n<p>0L will be implicitly cast to the appropriate pointer type in the same way as 0 would be; it just looks a bit strange and doesn't really make a great deal of sense for the reason Jesper gave..</p>\n", "CreationDate": "2009-12-15T15:00:09.570", "Score": "2", "CommentCount": "2", "Id": "1908020", "OwnerUserId": "232163", "LastActivityDate": "2009-12-15T15:00:09.570"}, "1911057": {"PostTypeId": "2", "ParentId": "1907921", "Body": "<p>You can use <code>false</code>, <code>0</code>, <code>0l</code>, <code>0L</code>, <code>0ul</code>, <code>0u</code>, <code>00</code>, or any number of ways to represent the literal zero. The literal zero is basically a magical symbol that happens to also correspond to a null pointer constant.</p>\n<p>If we were talking about a value that happens to be bitwise zero and the code were memcpy-ing it over the pointer, then we would have the problems mentioned above.</p>\n<p>Bonus question: What types have a null pointer constant that isn't bitwise zero?</p>\n", "CreationDate": "2009-12-15T22:57:39.347", "Score": "2", "CommentCount": "0", "Id": "1911057", "OwnerUserId": "6210", "LastActivityDate": "2009-12-15T22:57:39.347"}, "1907958": {"PostTypeId": "2", "ParentId": "1907921", "Body": "<p>I can't give you an exact answer, but regardless of what the exact answer to your question is, just the idea itself of initializing a pointer with <code>0L</code> is wrong, because it suggests that a pointer is the same size as a <code>long</code>, which is not necessarily true, ofcourse.</p>\n<p>Whether the compiler accepts it or not, and whether it's safe or not, I wouldn't do it because it suggests an invalid idea.</p>\n", "CreationDate": "2009-12-15T14:50:23.363", "Score": "3", "CommentCount": "5", "Id": "1907958", "OwnerUserId": "135589", "LastActivityDate": "2009-12-15T14:50:23.363"}, "bq_ids": {"n3337": {"so_1907921_1907953_0": {"quality": 0.75, "length": 9, "section_id": 36}}}, "1907953": {"PostTypeId": "2", "ParentId": "1907921", "Body": "<p>From the standard (4.10.1):</p>\n<blockquote>\n<p id=\"so_1907921_1907953_0\">A null pointer constant is an integral\n  constant expression (5.19) rvalue of\n  integer type that evaluates to zero</p>\n</blockquote>\n<p>so I guess <code>0L</code> is ok.</p>\n", "CreationDate": "2009-12-15T14:49:16.613", "Score": "16", "CommentCount": "0", "Id": "1907953", "OwnerUserId": "125672", "LastActivityDate": "2009-12-15T14:49:16.613"}, "1907964": {"PostTypeId": "2", "ParentId": "1907921", "Body": "<p>The null pointer representation is implementation specific, but neither 0 nor 0L is necessarily that implementation - they are just ways that the user can specify the null pointer, and either is OK.</p>\n<p>I should point out that Bjarne Stroustrup has several times indicated that his preference is to use plain 0 (and not NULL).</p>\n", "CreationDate": "2009-12-15T14:51:42.723", "LastEditorDisplayName": "anon", "LastEditDate": "2009-12-15T14:57:14.583", "CommentCount": "1", "Id": "1907964", "Score": "2", "OwnerDisplayName": "anon", "LastActivityDate": "2009-12-15T14:57:14.583"}, "1907978": {"PostTypeId": "2", "ParentId": "1907921", "Body": "<p>Assignment of 0L, a long integer (64bit) to an 32bit pointer might cause problems. As in the other post mentioned, use NULL to initializse pointers to zero.</p>\n", "CreationDate": "2009-12-15T14:54:19.630", "Score": "-2", "CommentCount": "4", "Id": "1907978", "OwnerUserId": "227178", "LastActivityDate": "2009-12-15T14:54:19.630"}, "1907966": {"PostTypeId": "2", "ParentId": "1907921", "Body": "<p>I think <code>0L</code> is fine, except for the fact that it would imply that you believe the pointer type your assigning to is the same size as a long, and so is a bit confusing.</p>\n<p>I think using <code>NULL</code> is much more clear.</p>\n", "LastEditorUserId": "219398", "LastActivityDate": "2009-12-15T14:58:32.617", "LastEditDate": "2009-12-15T14:58:32.617", "CommentCount": "7", "Id": "1907966", "OwnerUserId": "219398", "Score": "13", "CreationDate": "2009-12-15T14:52:15.280"}, "1909620": {"PostTypeId": "2", "ParentId": "1907921", "Body": "<p>I would have to agree with everyone that said NULL.  To those that prefer using 0, my opinion is that your code should say what it means.  The result you want is a null pointer, so your code should say that.  It makes even more sense when you do a comparison:</p>\n<pre><code>if (some_variable == NULL) { ... }\n</code></pre>\n<p>is much clearer than</p>\n<pre><code>if (some_variable == 0) { ... }\n</code></pre>\n", "CreationDate": "2009-12-15T19:04:44.490", "Score": "1", "CommentCount": "1", "Id": "1909620", "OwnerUserId": "229844", "LastActivityDate": "2009-12-15T19:04:44.490"}});