post_cb({"35542313": {"Id": "35542313", "PostTypeId": "2", "Body": "<p>In all your examples, there is not a even a subtle point of confusion. There's only one way to interpret any of these so that it can compile. Try it yourself: place curly braces ('{' &amp; '}') in each code fragment and try to give it 2 different meanings. You won't be able to do that.</p>\n", "LastActivityDate": "2016-02-21T21:28:22.887", "CommentCount": "0", "CreationDate": "2016-02-21T21:28:22.887", "ParentId": "35542228", "Score": "1", "OwnerUserId": "3887516"}, "35542364": {"Id": "35542364", "PostTypeId": "2", "Body": "<p><code>while (condition)</code> applies to the next <strong>statement</strong>. Often we use a <strong>compound statement</strong>, i.e., a line or more of code enclosed in curly braces:</p>\n<pre><code>while (condition)\n{\n/* code goes here */\n}\n</code></pre>\n<p>but the statement doesn't have to be a compound statement:</p>\n<pre><code>while (condition)\n    std::cout &lt;&lt; \"I'm still in the condition.\\n\";\n</code></pre>\n<p>and sometimes the statement can be more complicated:</p>\n<pre><code>while (condition)\n    if (some_other_condition)\n        /* some code here */\n    else\n       /* some other code here */\n</code></pre>\n<p>and the statement can be a looping statement:</p>\n<pre><code>while (condition)\n    while (another_condition)\n        while (yet_another_condition)\n            /* whew, we got here! */\n</code></pre>\n", "LastActivityDate": "2016-02-21T21:32:55.810", "CommentCount": "0", "CreationDate": "2016-02-21T21:32:55.810", "ParentId": "35542228", "Score": "4", "OwnerUserId": "1593860"}, "35542335": {"Id": "35542335", "PostTypeId": "2", "Body": "<p>The point is that all loops might iterate over a control block, which might either be:</p>\n<ol>\n<li>a single control block (e.g. a statement), or</li>\n<li>multiple control blocks grouped to a single one by <code>{...}</code>.</li>\n</ol>\n<p>In your case,</p>\n<pre><code>while (condition)\nfor (condition)\nif (condition)\nelse\n</code></pre>\n<p><code>if...else</code> form a single control block, and so does <code>for</code>; hence, this is unambigously identical to</p>\n<pre><code>while (condition) {\n    for (condition) {\n        if (condition) {\n           ...\n        } else {\n           ...\n        }\n    }\n}\n</code></pre>\n", "LastActivityDate": "2016-02-21T21:30:29.327", "CommentCount": "0", "CreationDate": "2016-02-21T21:30:29.327", "ParentId": "35542228", "Score": "3", "OwnerUserId": "4433386"}, "bq_ids": {"n4140": {"so_35542228_35542686_1": {"length": 7, "quality": 0.7, "section_id": 3882}, "so_35542228_35542686_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 3895}, "so_35542228_35542686_2": {"length": 8, "quality": 0.5333333333333333, "section_id": 3877}, "so_35542228_35542686_3": {"length": 4, "quality": 0.6666666666666666, "section_id": 3881}}, "n3337": {"so_35542228_35542686_1": {"length": 7, "quality": 0.7, "section_id": 3742}, "so_35542228_35542686_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 3755}, "so_35542228_35542686_2": {"length": 8, "quality": 0.5333333333333333, "section_id": 3737}, "so_35542228_35542686_3": {"length": 4, "quality": 0.6666666666666666, "section_id": 3741}}, "n4659": {"so_35542228_35542686_1": {"length": 7, "quality": 0.7, "section_id": 4771}, "so_35542228_35542686_0": {"length": 6, "quality": 0.5454545454545454, "section_id": 4786}, "so_35542228_35542686_2": {"length": 8, "quality": 0.5333333333333333, "section_id": 4761}, "so_35542228_35542686_3": {"length": 4, "quality": 0.6666666666666666, "section_id": 4770}}}, "35542228": {"ViewCount": "74", "Body": "<p>I was curious about what would be default nesting in the body of a for loop and while loop in cases with no brackets.</p>\n<p>I.E.</p>\n<pre><code>while (condition) //without brackets\nif (condition)\nelse\n</code></pre>\n<p>and  </p>\n<pre><code>for (condition) \nif (condition)\nelse\n</code></pre>\n<p>versus </p>\n<pre><code>while (condition)\nfor (condition)\nif (condition\nelse\n</code></pre>\n<p>I know that for loop will nest an else if there is an if within it's body whenever there is no bracket presented. What happens with a while loop? Would it be the same? And also, including a while and a for loop within the condition? Would it turn out something like</p>\n<pre><code>while (condition) {\n   for (condition) {\n       if (condition)\n       else\n   } // for\n} //while\n</code></pre>\n<p>What happens if there was another set of if and else in the for loop? Would it just be ignored into</p>\n<pre><code>for (condition)\n    if (condition)\n    else \nif (condition)\nelse\n</code></pre>\n<p>Is there any other case I should watch for?</p>\n", "AcceptedAnswerId": "35542364", "Title": "Nesting default of while and for loop", "CreationDate": "2016-02-21T21:20:56.580", "Id": "35542228", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2016-02-21T22:06:28.117", "Score": "0", "OwnerUserId": "5610398", "Tags": "<c++><nested-loops>", "AnswerCount": "6"}, "35542485": {"Id": "35542485", "PostTypeId": "2", "Body": "<p>The both iteration statements are defined like</p>\n<pre><code>while ( condition ) statement\n                    ^^^^^^^^^\nfor ( for-init-statement conditionopt; expressionopt) statement\n                                                      ^^^^^^^^^ \n</code></pre>\n<p>where <em>statement</em> is any statement including the compound statement or empty statement.</p>\n<p>So for example in this construction</p>\n<pre><code>while (condition) //without brackets\nif (condition) statement\nelse statement\n</code></pre>\n<p>the <em>statement</em> is the if-else statement</p>\n<pre><code>if (condition) statement\nelse statement\n</code></pre>\n<p>You could enclose it in braces making a compound statement containing a single if-else statement</p>\n<pre><code>while (condition) //without brackets\n{\nif (condition) statement\nelse statement\n}\n</code></pre>\n<p>However the effect would be the same.</p>\n<p>In this construction</p>\n<pre><code>while (condition)\nfor (condition)\nif (condition) statement\nelse statement\n</code></pre>\n<p>the while loop has the for loop as its statement that in turn has if-else as its own statement. You could write for example</p>\n<pre><code>while (condition)\n{\n    for (condition)\n    {\n        if (condition) statement\n        else statement\n    }\n}\n</code></pre>\n<p>however the both compound statements contain only a single statement. So these two constructions are equivalent.</p>\n", "LastActivityDate": "2016-02-21T21:42:53.660", "CommentCount": "0", "CreationDate": "2016-02-21T21:42:53.660", "ParentId": "35542228", "Score": "0", "OwnerUserId": "2877241"}, "35542350": {"Id": "35542350", "PostTypeId": "2", "Body": "<p>There are no specific nesting rules for loops and conditional expressions. You just have to keep in mind that if you don't use braces, the loop executes only one statement.</p>\n<p>Generally it is a good idea to always use braces.</p>\n", "LastActivityDate": "2016-02-21T21:31:30.207", "CommentCount": "0", "CreationDate": "2016-02-21T21:31:30.207", "ParentId": "35542228", "Score": "0", "OwnerUserId": "5924721"}, "35542686": {"Id": "35542686", "PostTypeId": "2", "Body": "<p>There's no ambiguity; let's look up the actual grammar (C++11 \u00a7A.5):</p>\n<p>The <code>while</code> and <code>for</code> are under <em>iteration-statement</em></p>\n<blockquote>\n<p id=\"so_35542228_35542686_0\"><em>iteration-statement:</em><br> \u00a0\u00a0\u00a0\u00a0<code>while (</code><em>condition</em><code>)</code> <em>statement</em><br> \u00a0\u00a0\u00a0\u00a0<code>do</code>\n<em>statement</em> <code>while (</code> <em>expression</em><code>)</code><br> \u00a0\u00a0\u00a0\u00a0<code>for (</code> <em>for-init-statement</em> <em>condition<sub>opt</sub></em>;\n  <em>expression<sub>opt</sub></em><code>)</code> <em>statement</em></br></br></br></p>\n</blockquote>\n<p>(each row is an alternative pattern that satisfies the term that precedes the colon in the first row; words in italic are references to other grammar rules; the <sub>opt</sub> marks optional terms)</p>\n<p><code>if</code> and <code>if</code>/<code>else</code> are under <em>selection-statement</em>:</p>\n<blockquote>\n<p id=\"so_35542228_35542686_1\"><em>selection-statement:</em><br> \u00a0\u00a0\u00a0\u00a0<code>if (</code> <em>condition</em> <code>)</code> <em>statement</em><br> \u00a0\u00a0\u00a0\u00a0<code>if (</code> <em>condition</em> <code>)</code>\n<em>statement</em> <code>else</code> <em>statement</em> <br> \u00a0\u00a0\u00a0\u00a0<code>switch (</code> <em>condition</em> <code>)</code> <em>statement</em></br></br></br></p>\n</blockquote>\n<p>Now, as you can see they all require <em>one, single, generic</em> \"<em>statement</em>\" to execute, with no explicit mention of the braces; <em>statement</em>, in turn, is defined as:</p>\n<blockquote>\n<p id=\"so_35542228_35542686_2\"><em>statement:</em><br> \u00a0\u00a0\u00a0\u00a0<em>labeled-statement</em><br> \u00a0\u00a0\u00a0\u00a0<em>attribute-specifier-seq<sub>opt</sub></em>\n<em>expression-statement</em><br> \u00a0\u00a0\u00a0\u00a0<em>attribute-specifier-seq<sub>opt</sub></em>\n<em>compound-statement</em><br> \u00a0\u00a0\u00a0\u00a0<em>attribute-specifier-seq<sub>opt</sub></em>\n<em>selection-statement</em><br> \u00a0\u00a0\u00a0\u00a0<em>attribute-specifier-seq<sub>opt</sub></em>\n<em>iteration-statement</em><br> \u00a0\u00a0\u00a0\u00a0<em>attribute-specifier-seq<sub>opt</sub></em>\n<em>jump-statement</em><br> \u00a0\u00a0\u00a0\u00a0<em>declaration-statement</em> \u00a0\u00a0\u00a0\u00a0<em>attribute-specifier-seq<sub>opt</sub></em>\n<em>try-block</em><br/></br></br></br></br></br></br></br></p>\n</blockquote>\n<p>let's forget about <em>attribute-specifier-seq<sub>opt</sub></em>; the point to take home is that a <em>statement</em> in turn can be any of the <code>while</code>/<code>for</code>/<code>if</code> above, plus some other stuff, including the <em>compound-statement</em>, i.e. the braces:</p>\n<blockquote>\n<p id=\"so_35542228_35542686_3\"><em>compound-statement:</em><br> \u00a0\u00a0\u00a0\u00a0<code>{</code> <em>statement-seq<sub>opt</sub></em> <code>}</code><br>\n<em>statement-seq:</em><br> \u00a0\u00a0\u00a0\u00a0<em>statement</em><br> \u00a0\u00a0\u00a0\u00a0<em>statement-seq</em> <em>statement</em></br></br></br></br></p>\n</blockquote>\n<p>(which is a formal way to say that inside the braces you can put one or more <em>statement</em>s)</p>\n<p>Now, with this knowledge we can disentangle your example by thinking mechanically like the parser does:</p>\n<pre><code>for (condition)\nif (condition)\ndoA();\nelse\ndoB();\nif (condition)\ndoC();\nelse\ndoD();\n</code></pre>\n<ul>\n<li><p>the <code>for</code> after the stuff in the <code>()</code> wants a <em>statement</em>; let's try to parse what follows as such:</p>\n<ul>\n<li><p>there's an <code>if</code>; <code>if</code> either wants just a <em>statement</em> of a <em>statement</em> followed by <code>else</code> and another statement; let's see:</p>\n<ul>\n<li><code>doA()</code> is an <em>expression-statement</em></li>\n<li>an <code>else</code> follows</li>\n<li><code>doB()</code> is an <em>expression-statement</em></li>\n</ul>\n<p>thus the whole <code>if (condition) doA(); else doB();</code> is a statement, in particular a <em>selection-statement</em></p></li>\n</ul>\n<p>ok, we have full <em>statement</em> to provide as loop body to the <code>for</code>, so the <code>for</code> statement is completed;</p></li>\n<li><p>then, we have an <code>if-else</code>, which is parsed as above</p>\n<ul>\n<li><code>doC()</code> is an <em>expression-statement</em></li>\n<li>an <code>else</code> follows</li>\n<li><code>doD()</code> is an <em>expression-statement</em></li>\n</ul></li>\n</ul>\n<p>Thus, the final \"braced\" interpretation is</p>\n<pre><code>for (condition) {\n    if (condition) {\n        doA();\n    } else {\n        doB();\n    }\n}\nif (condition) {\n    doC();\n} else {\n    doD();\n}\n</code></pre>\n", "LastEditorUserId": "214671", "LastActivityDate": "2016-02-21T22:06:28.117", "Score": "0", "CreationDate": "2016-02-21T22:01:23.560", "ParentId": "35542228", "CommentCount": "0", "OwnerUserId": "214671", "LastEditDate": "2016-02-21T22:06:28.117"}});