post_cb({"12979529": {"CommentCount": "7", "ViewCount": "4387", "PostTypeId": "1", "LastEditorUserId": "1916449", "CreationDate": "2012-10-19T17:38:47.047", "LastActivityDate": "2015-11-27T16:41:27.923", "Title": "Default constructors and POD", "AcceptedAnswerId": "12979633", "LastEditDate": "2015-11-27T16:41:27.923", "Id": "12979529", "Score": "2", "Body": "<p>I got what <a href=\"https://en.wikipedia.org/wiki/Passive_data_structure\" rel=\"nofollow\">POD</a> means, and I know that when I declare a structure in C++ as</p>\n<pre><code>struct f {};\n</code></pre>\n<p>there's a default constructor, a default copy constructor, a default destructor, etc.. (if I got this correctly)</p>\n<p>My question is: how can I declare a POD structure with just plain data (like 4 int values) without implicit constructors/destructors/etc.. getting in the way?</p>\n<p>Did I miss something?</p>\n", "Tags": "<c++>", "OwnerUserId": "1494037", "AnswerCount": "4"}, "12979623": {"ParentId": "12979529", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_12979529_12979623_0\">how can I declare a POD structure with just plain data (like 4 int values) without implicit constructors/destructors/etc.. getting in the way?</p>\n</blockquote>\n<p>Like this:</p>\n<pre><code>struct f {\n  int i1, i2, i3, i4;\n};\n</code></pre>\n<p>Compiler-generated constructors don't get in the way of it being a POD.</p>\n<h3>9 Classes [class]</h3>\n<blockquote>\n<p id=\"so_12979529_12979623_1\">10) A POD struct<sup>109</sup> is a non-union class that is both a trivial class and a standard-layout class, and has no\n  non-static data members of type non-POD struct, non-POD union (or array of such types). Similarly, a\n  POD union is a union that is both a trivial class and a standard layout class, and has no non-static data\n  members of type non-POD struct, non-POD union (or array of such types). A POD class is a class that is\n  either a POD struct or a POD union.</p>\n</blockquote>\n<p>So, it has to be </p>\n<p>a) A trivial class and <br/>\nb) A standard-layout class.</p>\n<p>which are described below:</p>\n<blockquote>\n<p id=\"so_12979529_12979623_2\">7) A standard-layout class is a class that:<br/>\n  \u2014 has no non-static data members of type non-standard-layout class (or array of such types) or reference, <br/>\n  \u2014 has no virtual functions (10.3) and no virtual base classes (10.1),<br/>\n  \u2014 has the same access control (Clause 11) for all non-static data members,<br/>\n  \u2014 has no non-standard-layout base classes,<br/>\n  \u2014 either has no non-static data members in the most derived class and at most one base class with<br/>\n  non-static data members, or has no base classes with non-static data members, and <br/>\n  \u2014 has no base classes of the same type as the first non-static data member.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_12979529_12979623_3\">6) [...] A trivial class is a class that has a trivial default constructor (12.1) and is trivially copyable</p>\n</blockquote>\n<p>Detailed in:</p>\n<h3>12.1 Constructors [class.ctor]</h3>\n<blockquote>\n<p id=\"so_12979529_12979623_4\">5) [...]<strong>A default constructor is trivial if it is not user-provided</strong> and if:<br/>\n  \u2014 its class has no virtual functions (10.3) and no virtual base classes (10.1), and<br/>\n  \u2014 no non-static data member of its class has a brace-or-equal-initializer, and<br/>\n  \u2014 all the direct base classes of its class have trivial default constructors, and<br/>\n  \u2014 for all the non-static data members of its class that are of class type (or array thereof), each such class\n  has a trivial default constructor.</p>\n</blockquote>\n<p>As all conditions above apply, the class is a POD.</p>\n", "OwnerUserId": "673730", "LastEditorUserId": "673730", "LastEditDate": "2012-10-19T17:49:47.330", "Id": "12979623", "Score": "5", "CreationDate": "2012-10-19T17:43:52.453", "LastActivityDate": "2012-10-19T17:49:47.330"}, "12979559": {"ParentId": "12979529", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Yes, the definition of POD explicitly excludes the implicitly generated special member functions. It gets trickier if you specify one of them that does <strong>exactly</strong> the same as the default generated one: Your type is no longer POD. In C++11 this problem is solved with the <code>default</code> keyword.</p>\n<p>With all this, the definition of a POD is (usually) just the same as you would have in C code:</p>\n<pre><code>struct X { int a, b, c, d; };\n</code></pre>\n", "OwnerUserId": "105672", "LastEditorUserId": "105672", "LastEditDate": "2012-10-19T17:48:06.197", "Id": "12979559", "Score": "1", "CreationDate": "2012-10-19T17:40:34.850", "LastActivityDate": "2012-10-19T17:48:06.197"}, "12979599": {"ParentId": "12979529", "CommentCount": "0", "Body": "<p>Firstly, all these implicit member function exist only conceptually. The don't really affect anything until you actually attempt to use them. This means that they should not be \"getting in the way\" if you don't want them to.</p>\n<p>Secondly, non-virtual member functions (regardless of whether they are explicitly declared or not) have no effect on data layout of the class. I.e. they are not \"getting in the way\" in that regard (if that's what you meant).</p>\n", "OwnerUserId": "187690", "PostTypeId": "2", "Id": "12979599", "Score": "2", "CreationDate": "2012-10-19T17:42:53.110", "LastActivityDate": "2012-10-19T17:42:53.110"}, "12979633": {"ParentId": "12979529", "PostTypeId": "2", "CommentCount": "14", "Body": "<p>Every object type has a constructor\u2014else how would you construct it?\u2014and a destructor\u2014else how would it be destroyed? They don\u2019t \u201cget in the way\u201d of anything, because the default implementations are no-ops in the case of POD-only fields, just as if you had said:</p>\n<pre><code>struct f {\n    f() {}\n    ~f() {}\n    int a, b, c, d;\n};\n</code></pre>\n<p>However, if you write an empty constructor, the type becomes non-POD. C++11 solves this with defaulting:</p>\n<pre><code>f() = default;\n~f() = default;\n</code></pre>\n<p>The situation is slightly different with copy constructors, where the implicitly generated one is just a convenience that does \u201cthe right thing\u201d for POD types:</p>\n<pre><code>f(const f&amp; other) : a(other.a), b(other.b), c(other.c), d(other.d) {}\n</code></pre>\n<p>There is no reason to rewrite this yourself. If you want to make a type noncopyable, you can mark the copy constructor as deleted with <code>f(const f&amp;) = delete;</code> or declare it <code>private</code>.</p>\n<p>It\u2019s also important to note that member functions are not stored on the object as member variables are. You can think of a <code>class</code> or <code>struct</code> as simultaneously two things:</p>\n<ol>\n<li><p>A description of a data layout</p></li>\n<li><p>A <em>namespace</em> containing functions and types for manipulating that data</p></li>\n</ol>\n<p>The C++ model of object-oriented programming simply couples these two things in one place.</p>\n", "OwnerUserId": "246886", "LastEditorUserId": "246886", "LastEditDate": "2012-10-19T20:52:50.113", "Id": "12979633", "Score": "7", "CreationDate": "2012-10-19T17:44:37.360", "LastActivityDate": "2012-10-19T20:52:50.113"}, "bq_ids": {"n4140": {"so_12979529_12979623_1": {"section_id": 5854, "quality": 0.9166666666666666, "length": 44}, "so_12979529_12979623_4": {"section_id": 369, "quality": 0.9555555555555556, "length": 43}, "so_12979529_12979623_2": {"section_id": 5851, "quality": 0.9655172413793104, "length": 56}, "so_12979529_12979623_3": {"section_id": 5850, "quality": 0.7777777777777778, "length": 7}}, "n3337": {"so_12979529_12979623_1": {"section_id": 5624, "quality": 0.9375, "length": 45}, "so_12979529_12979623_4": {"section_id": 359, "quality": 0.9555555555555556, "length": 43}, "so_12979529_12979623_2": {"section_id": 5621, "quality": 0.9655172413793104, "length": 56}, "so_12979529_12979623_3": {"section_id": 5620, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_12979529_12979623_1": {"section_id": 7333, "quality": 0.9166666666666666, "length": 44}, "so_12979529_12979623_4": {"section_id": 383, "quality": 0.9111111111111111, "length": 41}, "so_12979529_12979623_2": {"section_id": 7330, "quality": 0.7241379310344828, "length": 42}, "so_12979529_12979623_3": {"section_id": 7329, "quality": 0.6666666666666666, "length": 6}}}});