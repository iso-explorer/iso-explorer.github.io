post_cb({"38197057": {"Id": "38197057", "PostTypeId": "2", "Body": "<p>No memory is allocated for the macro. When compiling the code, the macro is mechanically replaced with its value in all places it is used.</p>\n", "LastActivityDate": "2016-07-05T06:58:05.610", "CommentCount": "0", "CreationDate": "2016-07-05T06:58:05.610", "ParentId": "38197026", "Score": "3", "OwnerUserId": "515212"}, "38197051": {"Id": "38197051", "PostTypeId": "2", "Body": "<p>No, macros don't work like that.</p>\n<p>They are substituted by the <em>preprocessor</em>. The <em>compiler</em> doesn't get to see <code>NUMBER</code>. All it will see is the literal <code>10</code>.</p>\n<p>In this respect, C and C++ are identical.</p>\n", "LastActivityDate": "2016-07-05T06:57:51.713", "CommentCount": "0", "CreationDate": "2016-07-05T06:57:51.713", "ParentId": "38197026", "Score": "7", "OwnerUserId": "2380830"}, "38197071": {"Id": "38197071", "PostTypeId": "2", "Body": "<p>A <code>#define</code> by itself does not take up any memory, what happens is the compiler - during pre-compilation stage - replaces all occurrences of NUMBER in your code with the definition, in your case 10.  </p>\n", "LastActivityDate": "2016-07-05T06:58:54.370", "CommentCount": "0", "CreationDate": "2016-07-05T06:58:54.370", "ParentId": "38197026", "Score": "1", "OwnerUserId": "2963819"}, "38197101": {"Id": "38197101", "PostTypeId": "2", "Body": "<p><strong>No</strong>, Macro does not allocate the memory. </p>\n<p>These statements are not like variable assignment, no memory is allocated. Remember, the <strong>preprocessor</strong> acts before compilation.</p>\n<p><code>NUMBER</code> is relevant only in <code>pre-processing</code> stage and does not have any identity at run time. During pre-processing all instances of <code>NUMBER</code> are replaced with 10. so there is no memory requirement at run time because 10 is an integer literal(Compile time). </p>\n<p>Please, read reference <a href=\"http://www.thegeekstuff.com/2011/10/c-program-to-an-executable/\" rel=\"nofollow\">link</a>.</p>\n", "LastEditorUserId": "3436922", "LastActivityDate": "2016-07-05T07:31:40.637", "Score": "2", "CreationDate": "2016-07-05T07:00:37.350", "ParentId": "38197026", "CommentCount": "0", "OwnerUserId": "5612562", "LastEditDate": "2016-07-05T07:31:40.637"}, "bq_ids": {"n4140": {"so_38197026_38197171_0": {"length": 11, "quality": 1.0, "section_id": 5313}}, "n3337": {"so_38197026_38197171_0": {"length": 11, "quality": 1.0, "section_id": 5110}}, "n4659": {"so_38197026_38197171_0": {"length": 11, "quality": 1.0, "section_id": 6737}}}, "38197066": {"Id": "38197066", "PostTypeId": "2", "Body": "<p>This define does not allocate memory in your program.</p>\n<p>It just tells the preprocessor (part of the compiler) to replace further instances of the token <code>NUMBER</code> by <code>10</code>.</p>\n<p>It probably allocates some bytes in the preprocessor, though.</p>\n", "LastActivityDate": "2016-07-05T06:58:39.120", "CommentCount": "0", "CreationDate": "2016-07-05T06:58:39.120", "ParentId": "38197026", "Score": "1", "OwnerUserId": "908515"}, "38197171": {"Id": "38197171", "PostTypeId": "2", "Body": "<p>No, in general, a <code>#define</code> directive does not <em>allocate</em> any memory as such. </p>\n<p>To elaborate, <code>#define</code> is a replacement directive. All it does is a textual replacement during the preprocessing stage.</p>\n<p>So, a textual code like</p>\n<pre><code>#define NUMBER 10\n.\n.\n.\nif (val == NUMBER)\n</code></pre>\n<p>looks like</p>\n<pre><code>if (val == 10)\n</code></pre>\n<p>after preprocessing. So, the MACRO substitution defined by <code>#define</code> does not take any separate memory. FWIW, The replacement (literal) value will take up usual place in the code segment (<em>same as if you've written the later format, with direct litreal value, without a MCARO</em>).</p>\n<p>Related, from C11, chapter \u00a75.1.1.2/ p4, <em>Translation phases</em></p>\n<blockquote>\n<p id=\"so_38197026_38197171_0\">Preprocessing directives are executed, macro invocations are expanded, and\n  _Pragma unary operator expressions are executed. [...]</p>\n</blockquote>\n", "LastEditorUserId": "2173917", "LastActivityDate": "2016-07-05T07:33:39.793", "Score": "2", "CreationDate": "2016-07-05T07:04:29.127", "ParentId": "38197026", "CommentCount": "0", "OwnerUserId": "2173917", "LastEditDate": "2016-07-05T07:33:39.793"}, "38197026": {"ViewCount": "261", "Body": "<p>Does a macro allocate memory in a segment? If yes, in which memory segment <code>NUMBER</code> is stored?</p>\n<pre><code>#define NUMBER 10\n</code></pre>\n", "AcceptedAnswerId": "38197051", "Title": "Does a macro allocate memory?", "CreationDate": "2016-07-05T06:56:34.830", "LastActivityDate": "2016-07-05T07:39:59.170", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-07-05T07:39:59.170", "OwnerDisplayName": "user6359267", "LastEditorUserId": "2173917", "Id": "38197026", "ClosedDate": "2016-07-05T07:13:15.553", "Score": "3", "Tags": "<c++><c><memory><macros>", "AnswerCount": "6"}});