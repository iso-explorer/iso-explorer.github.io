post_cb({"bq_ids": {"n4140": {"so_11238653_11240372_0": {"length": 39, "quality": 0.8478260869565217, "section_id": 6045}}, "n3337": {"so_11238653_11240372_0": {"length": 39, "quality": 0.8478260869565217, "section_id": 5813}}, "n4659": {"so_11238653_11240372_0": {"length": 39, "quality": 0.8478260869565217, "section_id": 7544}}}, "11240372": {"Id": "11240372", "PostTypeId": "2", "Body": "<p>The cast is permitted, by 5.2.10 (6):</p>\n<blockquote>\n<p id=\"so_11238653_11240372_0\">A function pointer can be explicitly converted to a function pointer of a di\ufb00erent type. The e\ufb00ect of calling\n  a function through a pointer to a function type (8.3.5) that is not the same as the type used in the de\ufb01nition\n  of the function is unde\ufb01ned. Except that converting a prvalue of type \u201cpointer to T1\u201d to the type \u201cpointer to\n  T2\u201d (where T1 and T2 are function types) and back to its original type yields the original pointer value, the\n  result of such a pointer conversion is unspeci\ufb01ed.</p>\n</blockquote>\n<p>This is equivalent to C 6.3.2.3 (8):</p>\n<blockquote>\n<p id=\"so_11238653_11240372_1\">A pointer to a function of one type may be converted to a pointer to a function of another\n  type and back again; the result shall compare equal to the original pointer. If a converted\n  pointer is used to call a function whose type is not compatible with the pointed-to type,\n  the behavior is unde\ufb01ned.</p>\n</blockquote>\n<p>In practice, calling through a function pointer with different but compatible argument types (especially pointer types) usually succeeds, and has the effect of a C-style cast on the arguments.  This is by no means guaranteed, however; <a href=\"https://stackoverflow.com/a/189126/567292\">https://stackoverflow.com/a/189126/567292</a> discusses a case where gcc decided to make such undefined function pointer cast calls <code>abort</code>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2012-06-28T07:58:56.107", "Score": "3", "CreationDate": "2012-06-28T07:58:56.107", "ParentId": "11238653", "CommentCount": "2", "LastEditDate": "2017-05-23T12:32:00.200", "OwnerUserId": "567292"}, "11238653": {"ViewCount": "5950", "Body": "<p>Suppose I have a function <pre><code>void myFun(int*) </code></pre>    In C++ what exactly does the following mean</p>\n<pre><code>\n  ( void(*)(void*) )&amp;myFun;\n\n</code></pre>\n<p>Is it a pointer to a function that takes a <code>(void*)</code> as an argument and returns a <code>void</code>?    Is this type of cast permitted? </p>\n", "AcceptedAnswerId": "11238733", "Title": "Cast a function pointer", "CreationDate": "2012-06-28T00:22:46.150", "Id": "11238653", "CommentCount": "0", "LastEditDate": "2012-06-28T19:02:30.337", "PostTypeId": "1", "OwnerDisplayName": "Myke", "LastEditorUserId": "1392274", "LastActivityDate": "2012-06-28T19:02:30.337", "Score": "2", "OwnerUserId": "1392274", "Tags": "<c++>", "AnswerCount": "2"}, "11238733": {"Id": "11238733", "PostTypeId": "2", "Body": "<p>As it stands, I'm pretty sure it's just not allowed.</p>\n<p>If you remove the parens around the initial <code>void</code> to get:</p>\n<pre><code>void (*)(void *)\n</code></pre>\n<p>...then yes, it's a pointer to a function returning void and taking a pointer to void as its only argument. To cast to that type, you need to enclose the entire name of the type in parentheses, so you'd get: <code>(void (*)(void *))</code>, which you'd follow by the value being cast, to get:</p>\n<pre><code>(void (*)(void *))&amp;myFun;\n</code></pre>\n<p>At least if memory serves, yes, this is allowed, though dereferencing the pointer (i.e., attempting to call the function it points at) via the result may give undefined behavior. In particular, when/if you call the function, it's expecting a pointer to int, and will (presumably) use whatever it points at as an int. If, however, what it points at isn't properly aligned to be used as an int, it's not likely to work as expected.</p>\n", "LastEditorUserId": "179910", "LastActivityDate": "2012-06-28T15:04:53.497", "Score": "4", "CreationDate": "2012-06-28T05:49:54.233", "ParentId": "11238653", "CommentCount": "3", "LastEditDate": "2012-06-28T15:04:53.497", "OwnerUserId": "179910"}});