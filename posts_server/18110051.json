post_cb({"bq_ids": {"n4140": {"so_18110051_18110127_1": {"length": 42, "quality": 0.9333333333333333, "section_id": 1394}, "so_18110051_18110127_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 1393}, "so_18110051_18110051_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 1401}}, "n3337": {"so_18110051_18110127_1": {"length": 42, "quality": 0.9333333333333333, "section_id": 1388}, "so_18110051_18110127_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 1387}, "so_18110051_18110051_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 1395}}, "n4659": {"so_18110051_18110127_1": {"length": 42, "quality": 0.9333333333333333, "section_id": 1512}, "so_18110051_18110127_0": {"length": 14, "quality": 0.9333333333333333, "section_id": 1511}, "so_18110051_18110051_0": {"length": 10, "quality": 0.7142857142857143, "section_id": 1518}}}, "18110127": {"Id": "18110127", "PostTypeId": "2", "Body": "<ul>\n<li>OK - but shouldn't it also require that the elements referred to also be comparable?</li>\n</ul>\n<p>If you scrolled up above in the standard you would have found these requirements (under \u00a7 25.4) for the sorting algorithms:</p>\n<blockquote>\n<p id=\"so_18110051_18110127_0\">All the operations in 25.4 have two versions: one that takes a\n  function object of type Compare and one that uses an operator&lt;.</p>\n</blockquote>\n<p>Which means it's already enforced in the standard for the types to be required to use <code>operator&lt;</code> <em>or</em> a custom comparator. </p>\n<p>The custom comparator has the following requirements:</p>\n<blockquote>\n<p id=\"so_18110051_18110127_1\"><code>Compare</code> is a function object type (20.8). The return value of the\n  function call operation applied to an object of type <code>Compare</code>, when\n  contextually converted to <code>bool</code> (4), yields true if the \ufb01rst argument\n  of the call is less than the second, and false otherwise. <code>Compare</code> comp\n  is used throughout for algorithms assuming an ordering relation. It is\n  assumed that comp will not apply any non-constant function through the\n  dereferenced iterator.</p>\n</blockquote>\n", "LastEditorUserId": "1381108", "LastActivityDate": "2013-08-07T17:47:05.947", "Score": "4", "CreationDate": "2013-08-07T17:41:43.407", "ParentId": "18110051", "CommentCount": "0", "OwnerUserId": "1381108", "LastEditDate": "2013-08-07T17:47:05.947"}, "18110051": {"ViewCount": "116", "Body": "<p>My copy of the C++ standard document documents the standard sort function.</p>\n<p>25.4.1.1 sort</p>\n<pre><code>template&lt;class RandomAccessIterator&gt;\nvoid sort(RandomAccessIterator first, RandomAccessIterator last);\n...\nEffects: Sorts the elements in the range [first,last).\n</code></pre>\n<blockquote>\n<p id=\"so_18110051_18110051_0\">Requires: RandomAccessIterator shall satisfy the requirements of\n  ValueSwappable (17.6.3.2). The type of *first shall satisfy the\n  requirements of MoveConstructible (Table 20) and of MoveAssignable</p>\n</blockquote>\n<p>OK - but shouldn't it also require that the elements referred to also be comparable?</p>\n<p>I would expect the \"Requires\" clause to include something like:</p>\n<p>\"type which results from dereferencing the <code>RandomAccessIterator</code> should satisfy the requirements of <code>LessThanComparable</code>.\"</p>\n<p>Or better yet</p>\n<p>\"<code>iterator_traits&lt;RandomAccessIterator&gt;::value_type</code> should satisfy the requirements of LessThanComparable.\"</p>\n<p>since 24.4.1 says in part \"it is required that if <code>Iterator</code> is the type of an iterator, the types ... <code>iterator_traits&lt;Iterator&gt;::value_type</code> be defined\"</p>\n<p>Why isn't such language included. Surely the sort function can't sort elements which can't be compared.</p>\n", "Title": "C++ standard sort documentation issue", "CreationDate": "2013-08-07T17:36:51.937", "LastActivityDate": "2013-08-07T17:47:05.947", "CommentCount": "4", "LastEditDate": "2013-08-07T17:38:48.880", "PostTypeId": "1", "LastEditorUserId": "1381108", "Id": "18110051", "Score": "0", "OwnerUserId": "2491382", "Tags": "<c++>", "AnswerCount": "1"}});