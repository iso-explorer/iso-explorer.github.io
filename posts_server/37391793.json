post_cb({"37391793": {"CommentCount": "1", "ViewCount": "42", "PostTypeId": "1", "ClosedDate": "2016-05-23T13:11:55.243", "LastEditorUserId": "4342498", "CreationDate": "2016-05-23T13:04:10.227", "LastActivityDate": "2016-05-23T13:13:25.353", "LastEditDate": "2016-05-23T13:13:25.353", "FavoriteCount": "0", "Title": "g++ and clang++ different behaviour with initialization of C-style array of class types", "Id": "37391793", "Score": "8", "Body": "<p>I suppose it's a g++ bug but I'm asking for confirmation.</p>\n<p>The following code:</p>\n<pre><code>#include &lt;complex&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    std::complex&lt;double&gt;  ac[10] = 23.5;\n\n    for (int i = 0; i &lt; 10; ++i)\n        std::cout &lt;&lt; ac[i] &lt;&lt; \", \";\n\n    std::cout &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>fails to compile on clang++ 3.5 with</p>\n<blockquote>\n<p id=\"so_37391793_37391793_0\">\"error: array initializer must be an initializer list\")</p>\n</blockquote>\n<p>but compiles, without errors or warnings, with g++ 4.9.2.</p>\n<p>The output of the g++ compiled executable is </p>\n<pre><code>(23.5,0), (23.5,0), (23.5,0), (23.5,0), (23.5,0), (23.5,0), (23.5,0), (23.5,0), (23.5,0), (23.5,0),\n</code></pre>\n<p>so this array initialization</p>\n<pre><code>std::complex&lt;double&gt;  ac[10] = 23.5;\n</code></pre>\n<p>work as initialization of every element of the array with the value on the right of the equal sign (and, I suppose, could be useful, if it would a standard accepted feature)</p>\n<p>If I substitute the <code>std::complex&lt;double&gt;</code> array with a <code>double</code> array</p>\n<pre><code>double  ac[10] = 23.5;\n</code></pre>\n<p>g++ gives an error similar to the clang++ one: </p>\n<blockquote>\n<p id=\"so_37391793_37391793_1\">\"error: array must be initialized with a brace-enclosed initializer\".</p>\n</blockquote>\n<p>Another case: an array of vectors</p>\n<pre><code>std::vector&lt;double&gt;  ac[10] = std::vector&lt;double&gt;(3, 0.5) ;\n</code></pre>\n<p>g++ compiles it (and initialize every vector in the array) and clang++ give the usual error.</p>\n<p>So I suppose it's a g++ bug occurring only with initialization of array of class (struct?) types. I'm asking for confirmation.</p>\n", "Tags": "<c++><arrays><g++><language-lawyer><clang++>", "OwnerUserId": "6022656", "AnswerCount": "0"}, "bq_ids": {"n4140": {"so_37391793_37391793_1": {"section_id": 3301, "quality": 0.6666666666666666, "length": 4}, "so_37391793_37391793_0": {"section_id": 3308, "quality": 0.6666666666666666, "length": 4}}, "n3337": {"so_37391793_37391793_1": {"section_id": 3171, "quality": 0.6666666666666666, "length": 4}, "so_37391793_37391793_0": {"section_id": 3178, "quality": 0.6666666666666666, "length": 4}}, "n4659": {"so_37391793_37391793_1": {"section_id": 4067, "quality": 0.6666666666666666, "length": 4}, "so_37391793_37391793_0": {"section_id": 4074, "quality": 0.6666666666666666, "length": 4}}}});