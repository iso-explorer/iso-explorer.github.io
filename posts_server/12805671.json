post_cb({"bq_ids": {"n4140": {"so_12805671_12805759_0": {"length": 26, "quality": 0.8666666666666667, "section_id": 6101}}, "n3337": {"so_12805671_12805759_0": {"length": 26, "quality": 0.8666666666666667, "section_id": 5867}}, "n4659": {"so_12805671_12805759_0": {"length": 26, "quality": 0.8666666666666667, "section_id": 7598}}}, "12805671": {"ViewCount": "106", "Body": "<p>Can anybody explain what will happen if a new is overloaded but corresponding delete is not loaded in C++? </p>\n", "Title": "What will happen if a new is overloaded but corresponding delete is not loaded?", "CreationDate": "2012-10-09T17:55:45.293", "LastActivityDate": "2012-10-09T18:01:11.263", "CommentCount": "1", "LastEditDate": "2012-10-09T17:57:26.430", "PostTypeId": "1", "LastEditorUserId": "635608", "Id": "12805671", "Score": "4", "OwnerUserId": "1642928", "Tags": "<c++><new-operator>", "AnswerCount": "1"}, "12805759": {"Id": "12805759", "PostTypeId": "2", "Body": "<p>This is only an issue when the object construction throws an exception, and it is described in C++11 5.3.4/18:</p>\n<blockquote>\n<p id=\"so_12805671_12805759_0\">If no unambiguous matching deallocation function can be\n  found, propagating the exception does not cause the object\u2019s memory to be freed. [ Note: This is appropriate\n  when the called allocation function does not allocate memory; otherwise, it is likely to result in a memory\n  leak. \u2014end note ]</p>\n</blockquote>\n<p>Example:</p>\n<pre><code>T * p = new (true, 'x', Blue) T(\"Jim\");\n</code></pre>\n<p>If the constructor of <code>T</code> throws, we need an overload <code>operator delete(void *, bool, char, enum Color)</code>, either at namespace scope or as a static member of <code>T</code>, and if this function does not exist, then no deallocation function is called.</p>\n<p>As the note says, in the case of placement-new functions which are essentially no-ops, this may not be a problem. However, if the allocation function does non-trivial work, then there'll be no matching clean-up function.</p>\n", "LastActivityDate": "2012-10-09T18:01:11.263", "CommentCount": "0", "CreationDate": "2012-10-09T18:01:11.263", "ParentId": "12805671", "Score": "5", "OwnerUserId": "596781"}});