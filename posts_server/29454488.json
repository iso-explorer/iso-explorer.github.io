post_cb({"bq_ids": {"n4140": {"so_29454488_29456602_0": {"length": 27, "quality": 1.0, "section_id": 6331}}, "n3337": {"so_29454488_29456602_0": {"length": 27, "quality": 1.0, "section_id": 6088}}, "n4659": {"so_29454488_29456602_0": {"length": 27, "quality": 1.0, "section_id": 7841}}}, "29461049": {"Id": "29461049", "PostTypeId": "2", "Body": "<p>To answer your question:</p>\n<blockquote>\n<p id=\"so_29454488_29461049_0\">Why is it that g++ doesn't give any warnings, and compiles the code correctly?</p>\n</blockquote>\n<p>Because C++ implementations aren't required to and it's actually quite difficult to implement this warning given the way <code>#include</code> works. <a href=\"https://code.google.com/p/include-what-you-use/\" rel=\"nofollow\">Attempts</a> have been made, but there are problems that haven't been entirely addressed.</p>\n<hr>\n<p>Moving to a <a href=\"http://clang.llvm.org/docs/Modules.html\" rel=\"nofollow\">different model</a> can enable this kind of checking. However, in the interests of backwards compatibility and allowing the easiest possible transition the 'modularizations' of the standard library I've used happen to explicitly allow code that previously depended on indirect includes to continue to work.</p>\n<p>You can see this, for example, in libc++'s <a href=\"http://llvm.org/svn/llvm-project/libcxx/trunk/include/module.modulemap\" rel=\"nofollow\">module map</a>; Those <code>export *</code> lines declare \"any modules imported by this module are also exported.\" Which is to say, a module std.algorithm that imports a module std.cmath also exports, so anyone that imports std.algorithm also gets access to std.cmath.</p>\n<p>For new code it would be very nice if these 'legacy exports' could be turned off, but for pre-existing large projects it is very nice to be able to just flip on -fmodules and have the project work with no changes.</p>\n<hr>\n<p>Using clang's implementation of modules with libc++, and modifying the module map file to remove the non-portable, indirect include behavior, clang reports such errors like:</p>\n<blockquote>\n<p id=\"so_29454488_29461049_1\">main.cpp:5:16: error: declaration of 'log' must be imported from module 'Darwin.C.math' before it is required</p>\n<pre><code>return int(log(23.f));\n           ^  \n</code></pre>\n<p id=\"so_29454488_29461049_2\">/usr/include/math.h:387:15: note: previous declaration is here  </p>\n<pre><code>extern double log(double);  \n              ^  \n</code></pre>\n<p id=\"so_29454488_29461049_3\">1 error generated.</p>\n</blockquote>\n<p>libc++ <code>&lt;algorithm&gt;</code> doesn't include <code>&lt;cmath&gt;</code>, so I used <code>&lt;random&gt;</code> instead. Otherwise the source that produced the above is the same as what you show.</p>\n</hr></hr>", "LastEditorUserId": "365496", "LastActivityDate": "2015-04-06T22:22:08.223", "Score": "2", "CreationDate": "2015-04-05T19:01:06.640", "ParentId": "29454488", "CommentCount": "0", "OwnerUserId": "365496", "LastEditDate": "2015-04-06T22:22:08.223"}, "29454829": {"Id": "29454829", "PostTypeId": "2", "Body": "<p>According to the standard, some headers do include others. As an example, <code>&lt;cinttypes&gt;</code> includes <code>&lt;cstdint&gt;</code>. See the <strong>Includes</strong> section <a href=\"http://en.cppreference.com/w/cpp/header/cinttypes\" rel=\"noreferrer\">here</a>. With respect to <code>&lt;algorithm&gt;</code>, there is no such statement as to which other headers it should include (see <a href=\"http://en.cppreference.com/w/cpp/header/algorithm\" rel=\"noreferrer\">here</a>). So, the conclusion is, <code>&lt;algorithm&gt;</code> is not required to include <code>&lt;cmath&gt;</code>, and your example code is not portable. It may fail to compile on other C++ implementations.</p>\n", "LastActivityDate": "2015-04-05T06:39:25.683", "CommentCount": "1", "CreationDate": "2015-04-05T06:39:25.683", "ParentId": "29454488", "Score": "9", "OwnerUserId": "1348273"}, "29454488": {"ViewCount": "804", "Body": "<p>The following program compiles correctly:</p>\n<pre><code>#include &lt;algorithm&gt;\n\nint main(int argc, char *argv[]) {\n\n    return int(log(23.f));\n\n}\n</code></pre>\n<p>(under g++ 4.9.2 with the flag <code>-std=c++11</code>)</p>\n<p>The code uses the function <code>log</code>, which is defined on <code>&lt;cmath&gt;</code>. However, it does not include the header <code>&lt;cmath&gt;</code>, only the header <code>&lt;algorithm&gt;</code>. Why is it that <code>g++</code> doesn't give any warnings, and compiles the code correctly?</p>\n", "AcceptedAnswerId": "29456602", "Title": "Does <algorithm> include <cmath>?", "CreationDate": "2015-04-05T05:41:35.447", "Id": "29454488", "CommentCount": "10", "PostTypeId": "1", "LastActivityDate": "2015-04-06T22:22:08.223", "Score": "4", "OwnerUserId": "3067276", "Tags": "<c++><c++11><standards><c++-standard-library>", "AnswerCount": "3"}, "29456602": {"Id": "29456602", "PostTypeId": "2", "Body": "<p>In the C++11 standard, [res.on.headers]/1 states that</p>\n<blockquote>\n<p id=\"so_29454488_29456602_0\">A C++ header may include other C++ headers. A C++ header shall provide\n  the declarations and definitions that appear in its synopsis. <strong>A C++\n  header shown in its synopsis as including other C++ headers shall\n  provide the declarations and definitions that appear in the synopses\n  of those other headers.</strong></p>\n</blockquote>\n<p>Now consider [algorithms.general]/2:</p>\n<blockquote id=\"so_29454488_29456602_1\">\n<h3>Header <code>&lt;algorithm&gt;</code> synopsis</h3>\n<pre><code>#include &lt;initializer_list&gt;\n\nnamespace std {\n  // ......\n</code></pre>\n</blockquote>\n<p><code>&lt;cmath&gt;</code> isn't listed and clearly not included in <code>&lt;initializer_list&gt;</code>. Thus your program is not guaranteed to compile on a standard-conforming implementation. One should never rely on \"implicit inclusion\" - the general guideline is to include every header from which an entity is used.<br>\nExceptions are e.g. <code>&lt;iostream&gt;</code> including <code>&lt;ostream&gt;</code>, which is guaranteed since C++11.</br></p>\n", "LastEditorUserId": "3647361", "LastActivityDate": "2015-04-05T18:27:14.990", "Score": "6", "CreationDate": "2015-04-05T11:04:28.313", "ParentId": "29454488", "CommentCount": "0", "OwnerUserId": "3647361", "LastEditDate": "2015-04-05T18:27:14.990"}});