post_cb({"bq_ids": {"n4140": {"so_4804258_4804301_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 6106}}, "n3337": {"so_4804258_4804301_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 5872}}, "n4659": {"so_4804258_4804301_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 7603}}}, "4804377": {"Id": "4804377", "PostTypeId": "2", "Body": "<p>It depends on the scope of record. If it's a class member and is deleted in the destructor then no, they're not the same. The first version can leave you with a double-delete issue (if new Record() throws) because record is not NULL.</p>\n<p>If it has function-level scope then I think the second version is overkill.</p>\n<p>The second version is more safe.</p>\n", "LastEditorUserId": "439751", "LastActivityDate": "2011-01-26T12:14:11.187", "Score": "6", "CreationDate": "2011-01-26T12:06:24.467", "ParentId": "4804258", "CommentCount": "3", "OwnerUserId": "439751", "LastEditDate": "2011-01-26T12:14:11.187"}, "4804301": {"Id": "4804301", "PostTypeId": "2", "Body": "<p>Yes, it is: <code>delete</code> on a NULL pointer is expected to work as in your latter code.</p>\n<p>See $ 5.3.5:</p>\n<blockquote>\n<p id=\"so_4804258_4804301_0\">2 If the operand has a class type, the\n  operand is converted to a pointer type\n  by calling the above-mentioned\n  conversion function, and the converted\n  operand is used in place of the\n  original operand for the remainder of\n  this section. In either alternative,\n  the value of the operand of delete may\n  be a null pointer value.</p>\n</blockquote>\n", "LastActivityDate": "2011-01-26T11:58:17.173", "CommentCount": "0", "CreationDate": "2011-01-26T11:58:17.173", "ParentId": "4804258", "Score": "1", "OwnerUserId": "347137"}, "4804258": {"ViewCount": "583", "Body": "<blockquote>\n<p id=\"so_4804258_4804258_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/3844374/test-for-void-pointer-in-c-before-deleting\">Test for void pointer in C++ before deleting</a> </br></p>\n</blockquote>\n<p>Is code snippet 1 equivalent to snippet 2?</p>\n<pre><code>//Snippet 1:\n    delete record;          \n    record = new Record;\n\n\n//Snippet 2     \n    if (record != NULL) \n    {\n        delete record;\n        record = NULL;\n    }       \n    record = new Record;\n</code></pre>\n", "AcceptedAnswerId": "4804327", "Title": "C++: Checking for NULL on delete", "CreationDate": "2011-01-26T11:54:10.853", "LastActivityDate": "2011-01-26T12:26:29.550", "CommentCount": "1", "LastEditDate": "2017-05-23T12:04:16.363", "PostTypeId": "1", "Tags": "<c++>", "Id": "4804258", "AnswerCount": "6", "Score": "4", "OwnerUserId": "87968", "ClosedDate": "2011-01-26T13:16:01.367", "LastEditorUserId": "-1"}, "4804326": {"Id": "4804326", "PostTypeId": "2", "Body": "<p>A nitpicking answer: The result is the same IF record is a pointer to record (with the caveats described in the other posts wrt. the record constructor throwing). If it's a class type with an implicit conversion to a pointer, the result might not be the same (because operators might be overloaded.)</p>\n", "LastEditorUserId": "524436", "LastActivityDate": "2011-01-26T12:17:49.717", "Score": "1", "CreationDate": "2011-01-26T12:00:24.337", "ParentId": "4804258", "CommentCount": "0", "OwnerUserId": "524436", "LastEditDate": "2011-01-26T12:17:49.717"}, "4804327": {"Id": "4804327", "PostTypeId": "2", "Body": "<p>The only difference I can see is that if the <code>Record</code> constructor throws an exception, the first sample might leave the <code>record</code> variable set to the old deleted value, whereas in the second, it will be set to <code>NULL</code>.</p>\n<p>EDIT:<br>\nIndeed the first sample, if repeated later, would lead to a double delete.</br></p>\n<pre><code>delete record;\nrecord = new Record; // Throwing exception\n// record points to old object\n// ... later ...\ndelete record; // Double deletion - sky falls down etc.\n</code></pre>\n<p>The safe form would be:</p>\n<pre><code>delete record; record = 0;\nrecord = new Record; // Can throw an exception if it likes\n</code></pre>\n<p>Or use a <code>std::auto_ptr</code> instead of a raw pointer.</p>\n", "LastEditorUserId": "3978", "LastActivityDate": "2011-01-26T12:26:29.550", "Score": "8", "CreationDate": "2011-01-26T12:00:27.463", "ParentId": "4804258", "CommentCount": "1", "OwnerUserId": "3978", "LastEditDate": "2011-01-26T12:26:29.550"}, "4804275": {"Id": "4804275", "PostTypeId": "2", "Body": "<p>They are the same in that you have a new Record at the end of each, but snippet two has an unnecessary check for NULL prior to the delete.</p>\n", "LastActivityDate": "2011-01-26T11:56:03.137", "CommentCount": "0", "CreationDate": "2011-01-26T11:56:03.137", "ParentId": "4804258", "Score": "3", "OwnerUserId": "1898"}, "4804289": {"Id": "4804289", "PostTypeId": "2", "Body": "<p>The <code>delete</code> operator in C++ is required to work correctly (do nothing) when the pointer is NULL, so the two code fragments are the same.  See <a href=\"http://opensource.devx.com/tips/Tip/14443\" rel=\"nofollow\">http://opensource.devx.com/tips/Tip/14443</a>, for example.</p>\n", "LastActivityDate": "2011-01-26T11:57:15.063", "CommentCount": "0", "CreationDate": "2011-01-26T11:57:15.063", "ParentId": "4804258", "Score": "1", "OwnerUserId": "319906"}});