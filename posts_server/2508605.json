post_cb({"43773764": {"Id": "43773764", "PostTypeId": "2", "Body": "<p>This is covered by section [dcl.type.cv]/4 of the C++14 standard (earlier standards had similar text too):</p>\n<blockquote>\n<p id=\"so_2508605_43773764_0\">Except that any class member declared <code>mutable</code> can be modified, any attempt to modify a <code>const</code> object during its lifetime results in undefined behavior.</p>\n</blockquote>\n<p><code>e</code> is a const object, and <code>*w = 5;</code> attempts to modify that object, therefore the result is <a href=\"https://stackoverflow.com/a/4105123/1505939\">undefined behavior</a>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2017-05-04T04:13:20.287", "Score": "1", "CreationDate": "2017-05-04T04:13:20.287", "ParentId": "2508605", "CommentCount": "0", "OwnerUserId": "1505939", "LastEditDate": "2017-05-23T12:26:03.807"}, "bq_ids": {"n4140": {"so_2508605_43773764_0": {"length": 17, "quality": 1.0, "section_id": 5433}}, "n3337": {"so_2508605_43773764_0": {"length": 17, "quality": 1.0, "section_id": 5228}}, "n4659": {"so_2508605_43773764_0": {"length": 17, "quality": 1.0, "section_id": 6861}}}, "2508655": {"Id": "2508655", "PostTypeId": "2", "Body": "<p>I'm guessing that the compiler has optimised the value output. It sees that <code>e</code> is const (so, it can't change -- in theory) and changes <code>cout &lt;&lt; e &lt;&lt; endl;</code> to <code>cout &lt;&lt; 2 &lt;&lt; endl;</code>. However, <code>e</code> still has to exist because it's used by <code>w</code>, so <code>w</code> correctly takes its address and modifies its value, but you don't see that in the <code>cout</code>.</p>\n<p>Moral of the story -- only declare things <code>const</code> when you actually want to be <code>const</code>. Casting away <code>const</code>ness is not a good idea.</p>\n", "LastActivityDate": "2010-03-24T14:51:46.857", "CommentCount": "0", "CreationDate": "2010-03-24T14:51:46.857", "ParentId": "2508605", "Score": "4", "OwnerUserId": "235825"}, "2508651": {"Id": "2508651", "PostTypeId": "2", "Body": "<p>The only thing I can think of is the compiler has some how optimised the code in such a way that any references to e are replaced with a value of 2 even though it assigns memory for e</p>\n<p>so in effect (affect?) the line at comment (4) is 'optimized' to be</p>\n<pre><code>cout &lt;&lt; \"2\" &lt;&lt; endln;\n</code></pre>\n", "LastActivityDate": "2010-03-24T14:51:14.847", "CommentCount": "0", "CreationDate": "2010-03-24T14:51:14.847", "ParentId": "2508605", "Score": "3", "OwnerUserId": "300797"}, "2508659": {"Id": "2508659", "PostTypeId": "2", "Body": "<p>As I said in my comment, once you modified the const value you are in undefined behaviour land, so it doesn't make much sense to talk about what is happening. But what the hell..</p>\n<pre><code>cout &lt;&lt; *w &lt;&lt; endl;            // (3) outputs 5\ncout &lt;&lt; e &lt;&lt; endl;             // (4) outputs 2\n</code></pre>\n<p>At a guess, <code>*w</code> is being evaluated at runtime, but <code>e</code> is being treated as a compile time constant</p>\n", "OwnerDisplayName": "anon", "LastActivityDate": "2010-03-24T14:52:21.717", "Score": "17", "CreationDate": "2010-03-24T14:52:21.717", "ParentId": "2508605", "CommentCount": "11"}, "2508645": {"Id": "2508645", "PostTypeId": "2", "Body": "<p>I suspect that you're tripping up the compiler.  It doesn't expect you to play dirty tricks with e, so when it sees the line:</p>\n<pre><code>cout &lt;&lt; e &lt;&lt; endl;\n</code></pre>\n<p>It simply inserts the value 2 instead of looking for the actual value.  You can verify (or disprove) this by looking at the disassembly of your program.</p>\n", "LastActivityDate": "2010-03-24T14:50:14.567", "CommentCount": "1", "CreationDate": "2010-03-24T14:50:14.567", "ParentId": "2508605", "Score": "8", "OwnerUserId": "114421"}, "2508605": {"ViewCount": "709", "Body": "<p>I'm a bit confused what happened in the following code: </p>\n<pre><code>\nconst int e = 2;\n\nint* w = ( int* ) &amp;e;          // (1) cast to remove const-ness\n*w = 5;                        // (2)\n\ncout &lt;&lt; *w &lt;&lt; endl;            // (3) outputs 5\ncout &lt;&lt; e &lt;&lt; endl;             // (4) outputs 2\n\ncout &lt;&lt; \"w = \" &lt;&lt; w &lt;&lt; endl;   // (5) w points to the address of e\ncout &lt;&lt; \"&amp;e; = \" &lt;&lt; &amp;e; &lt;&lt; endl;\n</code></pre>\n<p>In (1), w points to the address of e. In (2), that value was changed to 5. However, when the values of *w and e were displayed, their values are different. But if you print value of w pointer and &amp;e, they have the same value/address.</p>\n<p>How come e still contained 2, even if it was changed to 5? Were they stored in a separate location? Or a temporary? But how come the value pointed by w is still the address of e?</p>\n", "AcceptedAnswerId": "2508659", "Title": "Modifying a const through a non-const pointer", "CreationDate": "2010-03-24T14:46:05.053", "Id": "2508605", "CommentCount": "3", "LastEditDate": "2010-09-18T18:17:51.363", "PostTypeId": "1", "LastEditorDisplayName": "Roger Pate", "LastActivityDate": "2017-05-04T04:13:20.287", "Score": "12", "OwnerUserId": "223465", "Tags": "<c++><pointers><casting><const-correctness>", "AnswerCount": "6"}, "2508646": {"Id": "2508646", "PostTypeId": "2", "Body": "<p>I guess the compiler uses the constness to optimizes out the variable and insert a fixed value into the code.</p>\n", "LastActivityDate": "2010-03-24T14:50:36.843", "CommentCount": "0", "CreationDate": "2010-03-24T14:50:36.843", "ParentId": "2508605", "Score": "2", "OwnerUserId": "1660"}});