post_cb({"21481614": {"PostTypeId": "2", "Body": "<p>A temporary will be created and the reference is bound to that temporary (C++03 8.5.3.5).  The temporary will be destroyed at the end of the constructor call, leaving a dangling reference.  This is specified in C++03 12.2.5:</p>\n<blockquote>\n<p id=\"so_21481481_21481614_0\">A temporary bound to a reference member in a constructor's ctor-initializer (12.6.2) persists until the constructor exits.</p>\n</blockquote>\n", "LastActivityDate": "2014-01-31T14:14:33.063", "LastEditorUserId": "951890", "Id": "21481614", "CommentCount": "0", "CreationDate": "2014-01-31T13:46:35.843", "ParentId": "21481481", "Score": "2", "OwnerUserId": "951890", "LastEditDate": "2014-01-31T14:14:33.063"}, "bq_ids": {"n4140": {"so_21481481_21481630_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 382}, "so_21481481_21481630_0": {"length": 9, "quality": 0.6428571428571429, "section_id": 382}, "so_21481481_21481614_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 382}}, "n3337": {"so_21481481_21481630_0": {"length": 9, "quality": 0.6428571428571429, "section_id": 373}, "so_21481481_21481614_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 373}, "so_21481481_21481630_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 373}}}, "21481481": {"ViewCount": "542", "Body": "<p>In the following code , I am initializing a reference variable with a literal.</p>\n<pre><code>class ABC\n{\n  public:\n     const int&amp; a;\n     ABC():a(43) { }\n     void newfoo()\n     {\n           printf(\"NEWFOO %d\",a);\n     }\n};\nint main()\n{\n   ABC obj;\n   obj.newfoo();\n}\n</code></pre>\n<p>The output of this program is <code>NEWFOO 32767</code> which seems illogical when I know that the following code works just fine.</p>\n<pre><code>int main()\n{ \n  const int&amp; b=3;\n  printf(\"%d\",b);\n}\n</code></pre>\n<p>What is happening here ? If compiler declares some temp variable during initializing of the reference variable , then isn't the scope of that variable will be inside main since the class is in global scope ?</p>\n", "AcceptedAnswerId": "21481630", "Title": "Initializing reference member variable with literal", "CreationDate": "2014-01-31T13:38:56.167", "Id": "21481481", "CommentCount": "2", "LastEditDate": "2014-01-31T13:41:14.457", "PostTypeId": "1", "LastEditorUserId": "2783703", "LastActivityDate": "2014-01-31T14:17:22.040", "Score": "4", "OwnerUserId": "1252349", "Tags": "<c++><variables><reference><initialization>", "AnswerCount": "2"}, "21481630": {"PostTypeId": "2", "Body": "<p>Well <code>clang</code> produces the following warning for this code even without any flags (<em><a href=\"http://coliru.stacked-crooked.com/a/6902abb44681f88b\" rel=\"nofollow\">see it live</a></em>):</p>\n<pre><code>warning: binding reference member 'a' to a temporary value [-Wdangling-field]\n ABC():a(43) { }\n         ^~\n</code></pre>\n<p><code>gcc</code> on the other hand requires either <code>-Wall</code> or <code>-Wextra</code>.</p>\n<p>and if we check out <a href=\"http://en.cppreference.com/w/cpp/language/reference_initialization\" rel=\"nofollow\">this reference initialization reference</a> it says:</p>\n<blockquote>\n<p id=\"so_21481481_21481630_0\">a temporary bound to a reference member in a constructor initializer list persists only until the constructor exits, not as long as the object exists.</p>\n</blockquote>\n<p>This can be found in the draft C++ standard section <code>12.2</code> <em>Temporary objects</em> paragraph <em>5</em> which includes the following bullet</p>\n<blockquote>\n<p id=\"so_21481481_21481630_1\">\u2014 A temporary bound to a reference member in a constructor\u2019s ctor-initializer (12.6.2) persists until the constructor exits.</p>\n</blockquote>\n", "LastActivityDate": "2014-01-31T14:17:22.040", "LastEditorUserId": "1708801", "Id": "21481630", "CommentCount": "0", "CreationDate": "2014-01-31T13:47:03.267", "ParentId": "21481481", "Score": "2", "OwnerUserId": "1708801", "LastEditDate": "2014-01-31T14:17:22.040"}});