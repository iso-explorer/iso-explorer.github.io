post_cb({"bq_ids": {"n4140": {"so_9415075_9415539_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 5404}}, "n3337": {"so_9415075_9415539_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 5199}}, "n4659": {"so_9415075_9415539_0": {"length": 13, "quality": 0.9285714285714286, "section_id": 6853}}}, "9415539": {"Id": "9415539", "PostTypeId": "2", "Body": "<p>If you mark a function as inline, you must include it in every source file from which it is used.</p>\n<p>The C++11 standard has this to say:</p>\n<blockquote>\n<p id=\"so_9415075_9415539_0\">7.1.2/4: \"An inline function shall be defined in every\n  translation unit in which it is odr-used and shall have exactly the\n  same definition in every case.\"</p>\n</blockquote>\n", "LastActivityDate": "2012-02-23T15:03:49.603", "CommentCount": "3", "CreationDate": "2012-02-23T15:03:49.603", "ParentId": "9415075", "Score": "2", "OwnerUserId": "59379"}, "9415075": {"ViewCount": "252", "Body": "<p>Say I have something the following in my program,</p>\n<pre><code>// namespaceB.h\n#include \"namespaceA.h\"\nnamespace B {\nclass Tree {\n    public:\n    Tree *prev;\n    Tree *next;\n    Tree *down;\n    A::Kind kind;\n\n    Tree();\n    ~Tree();\n};\n}\n// end of namespaceB.h\n// Implementation details of the class are placed in namespaceB.cc\n// Constructor / Desctructor defined in the namespaceB.cc file!\n// Something like this,\n#include \"namespaceB.h\"\nnamespace B {\ninline Tree::Tree() { ... }\ninline Tree::~Tree() { ... }\n}\n</code></pre>\n<p>My question is that does inlining the ctor/dtor restrict their uses to within the current source file?</p>\n<p>I thought inlining is just a way to improve efficiency?</p>\n<p>What if Tree has a memeber method like</p>\n<pre><code>Tree&amp; Tree::operator+(Tree const&amp; rhs);\n</code></pre>\n<p>defined in header file, and in the source file</p>\n<pre><code>inline Tree&amp; Tree::operator+(Tree const&amp; rhs) { ... }\n</code></pre>\n<p>I played with that a bit, and it seems \"inline\" here also restricts Tree::operator+(...) to the scope of that source file</p>\n<p>which means this will fail:</p>\n<pre><code>#include \"namespaceB.h\"\nint main() {\nB::Tree tree;    // Fail to link\nreturn 0;    \n}\n</code></pre>\n<p>As shown here:\n<a href=\"https://stackoverflow.com/questions/9414605/cannot-create-an-instance-of-a-class-from-another-namespace\">Cannot create an instance of a class from another namespace?</a></p>\n<p>After I removed \"inline\" from ctor/dtor of class Tree, everything compiled and linked perfectly.</p>\n<p>Can someone please explain what exactly inline does?</p>\n<p>Thanks,</p>\n", "AcceptedAnswerId": "9415539", "Title": "Does Inline restrict the function/method to the scope of its current source file?", "CreationDate": "2012-02-23T14:34:57.683", "Id": "9415075", "CommentCount": "0", "LastEditDate": "2017-05-23T12:03:33.917", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2012-02-23T15:07:41.693", "Score": "1", "OwnerUserId": "690061", "Tags": "<c++><inline>", "AnswerCount": "1"}});