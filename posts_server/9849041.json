post_cb({"9849228": {"Id": "9849228", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_9849041_9849228_0\">It is unspecified whether or not a reference requires storage (C++11 8.3.2.4)</p>\n</blockquote>\n<p>For the case</p>\n<pre><code>int y = 10;\nint &amp; x = y;\n</code></pre>\n<p>the compiler may not use any extra memory; it will just consider <code>x</code> to be an alias of <code>y</code>. Once <code>x</code> is initialized it can't be reassigned to reference another variable, so the compiler can do this.</p>\n<p>If a reference is used as a function parameter or in a class/struct, then it will probably be implemented internally as a pointer so the size will be <code>sizeof(int*)</code>. Of course, if a function with reference parameters is inlined, then no extra memory will be needed.</p>\n", "LastActivityDate": "2012-03-24T04:47:10.567", "CommentCount": "0", "CreationDate": "2012-03-24T04:47:10.567", "ParentId": "9849041", "Score": "4", "OwnerUserId": "446788"}, "9849083": {"Id": "9849083", "PostTypeId": "2", "Body": "<p>The result of application of sizeof to a reference or a reference type is the size of the referenced type. (C++ 03, 5.3.3.2)</p>\n<p>If your int is 4 bytes (it does not have to be), then so is the reference.</p>\n", "LastActivityDate": "2012-03-24T04:10:52.543", "CommentCount": "2", "CreationDate": "2012-03-24T04:10:52.543", "ParentId": "9849041", "Score": "0", "OwnerUserId": "49329"}, "9849041": {"ViewCount": "128", "Body": "<p>What is the size of ( variable = &amp;anotherVar )</p>\n<pre><code>int y = 10; // the size of y is 4 bytes\nint &amp; x = y; // what is the size of x that receives the address of y\n</code></pre>\n", "Title": "What is the size of ( variable = &anotherVar )", "CreationDate": "2012-03-24T04:01:53.877", "LastActivityDate": "2012-03-24T06:30:45.520", "CommentCount": "5", "PostTypeId": "1", "Id": "9849041", "Score": "1", "OwnerUserId": "423903", "Tags": "<c++><reference><pass-by-reference><sizeof>", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_9849041_9849228_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 3221}}, "n3337": {"so_9849041_9849228_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 3095}}, "n4659": {"so_9849041_9849228_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 3978}}}, "9849660": {"Id": "9849660", "PostTypeId": "2", "Body": "<p>A simple test should clear up any confusion:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid f(char &amp;r)\n{\n  cout &lt;&lt; sizeof(r) &lt;&lt; endl;\n  cout &lt;&lt; sizeof(&amp;r) &lt;&lt; endl;\n}\n\nint main()\n{\n  char x = 0;\n  char &amp;y = x;\n  cout &lt;&lt; sizeof(y) &lt;&lt; endl;\n  cout &lt;&lt; sizeof(&amp;y) &lt;&lt; endl;\n  f(x);\n  return 0;\n}\n</code></pre>\n<p>Output (compiled as an x86 32-bit program):</p>\n<pre><code>1\n4\n1\n4\n</code></pre>\n", "LastActivityDate": "2012-03-24T06:30:45.520", "CommentCount": "0", "CreationDate": "2012-03-24T06:30:45.520", "ParentId": "9849041", "Score": "0", "OwnerUserId": "968261"}, "9849074": {"Id": "9849074", "PostTypeId": "2", "Body": "<p>Assuming you're talking about the physical size of the reference type <code>int&amp;</code>, it will almost certainly be the same size as the pointer type <code>int*</code>, which is typically 4 or 8 bytes on modern architectures (32- or 64-bit processors).</p>\n<p>If you want to measure it on your compiler, use this:</p>\n<pre><code>struct Test { int&amp; x; }\nprintf(\"%d\\n\", (int)sizeof(Test));\n</code></pre>\n<p>Also note that, technically, your compiler might pad the <code>Test</code> struct and give you the wrong answer, but this will probably work fine.</p>\n<p>Note that <code>sizeof(int&amp;)</code> is the same as <code>sizeof(int)</code>, and doesn't tell you exactly how much space an <code>int&amp;</code> will use if it is a data member.</p>\n", "LastEditorUserId": "5696", "LastActivityDate": "2012-03-24T04:13:44.137", "Score": "3", "CreationDate": "2012-03-24T04:08:11.130", "ParentId": "9849041", "CommentCount": "3", "OwnerUserId": "5696", "LastEditDate": "2012-03-24T04:13:44.137"}, "9849110": {"Id": "9849110", "PostTypeId": "2", "Body": "<p>So I think you are confusing pointers and references.</p>\n<p>You ask what is (x = &amp;y) ?</p>\n<p>But then your example is a reference (X&amp; x = y).</p>\n<p>I think you mean what is the size of a pointer?  It is architecture dependent.  To find out what it is  on your paticular target type:</p>\n<pre><code>cout &lt;&lt; sizeof(void*)\n</code></pre>\n", "LastActivityDate": "2012-03-24T04:17:04.907", "CommentCount": "0", "CreationDate": "2012-03-24T04:17:04.907", "ParentId": "9849041", "Score": "0", "OwnerUserId": "1131467"}});