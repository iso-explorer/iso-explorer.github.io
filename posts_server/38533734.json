post_cb({"38533937": {"ParentId": "38533734", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>This is clang 3.8 bug, specifically <a href=\"https://llvm.org/bugs/show_bug.cgi?id=26297\">26297</a>. From [class.virtual], wording from N4594:</p>\n<blockquote>\n<p id=\"so_38533734_38533937_0\">The return type of an overriding function shall be either identical to the return type of the overridden function\n  or <em>covariant</em> with the classes of the functions. If a function <code>D::f</code> overrides a function <code>B::f</code>, the return types\n  of the functions are covariant if they satisfy the following criteria:\n  (7.1) \u2014 both are pointers to classes, both are lvalue references to classes, or both are rvalue references to\n  classes<br>\n  (7.2) \u2014 the class in the return type of <code>B::f</code> is the same class as the class in the return type of <code>D::f</code>, or is an\n  unambiguous and accessible direct or indirect base class of the class in the return type of <code>D::f</code><br>\n  (7.3) \u2014 both pointers or references have the same cv-qualification and the class type in the return type of <code>D::f</code>\n  has the same cv-qualification as or less cv-qualification than the class type in the return type of <code>B::f</code>.</br></br></p>\n</blockquote>\n<p>Having <code>B::f</code> return <code>C const*</code> and <code>D::f</code> return <code>C*</code> matches all of these requirements (neither pointer is cv-qualified, and the class type of <code>D::f</code> is less cv-qualified than the base), hence it should be allowed.</p>\n<p>There is no requirement on completeness; <code>C</code> does not need to be complete to check that these criteria. </p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2016-07-22T20:11:06.150", "Id": "38533937", "Score": "17", "CreationDate": "2016-07-22T19:22:41.193", "LastActivityDate": "2016-07-22T20:11:06.150"}, "38533734": {"CommentCount": "1", "AcceptedAnswerId": "38533937", "PostTypeId": "1", "LastEditorUserId": "1466970", "CreationDate": "2016-07-22T19:08:35.357", "LastActivityDate": "2016-07-23T05:09:58.127", "LastEditDate": "2016-07-22T19:46:14.410", "ViewCount": "454", "FavoriteCount": "3", "Title": "Covariant return types, const-ness, and incomplete classes", "Id": "38533734", "Score": "16", "Body": "<p>This code compiles successfully under g++ 6.1 but gives an error with clang 3.8:</p>\n<pre><code>class C;\n\nclass Base {\npublic:\n  virtual const C *getC();\n};\n\nclass Derived : public Base {\npublic:\n  virtual       C *getC();\n};\n</code></pre>\n<p>The error from clang is as follows:</p>\n<pre><code>$ dev/compilers/linux-x86_64-2.12.2/clang3.8/bin/clang++ -Wall -c testcovariantreturn.cxx\ntestcovariantreturn.cxx:10:20: error: return type of virtual function 'getC' is not covariant with the return type of the function it overrides ('C' is incomplete)\n</code></pre>\n<p>If class C is completely defined rather than forward-declared, there is no error. My understanding is that covariant allows \"lesser\" cv-qualification (ie, dropping the const from the return type) when overriding a virtual method.</p>\n<p>Is clang correct / allowed to require a complete type, and if so, why ? How can having the definition of C available change anything here ?</p>\n<p>This is not totally academic, in a large code base I am reluctant to add in unnecessary includes, we try to forward declare as standard practice.</p>\n", "Tags": "<c++><covariance>", "OwnerUserId": "36034", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_38533734_38533937_0": {"section_id": 7008, "quality": 0.9722222222222222, "length": 70}, "so_38533734_38533908_1": {"section_id": 7009, "quality": 1.0, "length": 15}}, "n3337": {"so_38533734_38533937_0": {"section_id": 6754, "quality": 0.9722222222222222, "length": 70}, "so_38533734_38533908_1": {"section_id": 6755, "quality": 0.8, "length": 12}}, "n4659": {"so_38533734_38533937_0": {"section_id": 8505, "quality": 0.9722222222222222, "length": 70}, "so_38533734_38533908_1": {"section_id": 8506, "quality": 1.0, "length": 15}}}, "38533908": {"ParentId": "38533734", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>I also find nothing wrong with your code. It compiles with the head version of clang and all compilers I tried, except clang 3.8 and earlier.</p>\n<p><a href=\"http://melpon.org/wandbox/permlink/wo5Y8Yp13TfLzcoL\" rel=\"nofollow\">Live demo</a></p>\n<p>The relevant standard text:</p>\n<blockquote>\n<p id=\"so_38533734_38533908_0\">10.3 note 8:</p>\n<p id=\"so_38533734_38533908_1\">If the class type in the covariant return type of D::f differs from\n  that of B::f, the <em>class type</em> in the return type of D::f shall be\n  <em>complete</em> at the point of declaration of D::f <em>or shall be the class\n  type D.</em></p>\n</blockquote>\n<p>The <em>class type</em> of the covariant methods must be the same or\ncomplete, but as I understand it const/volatile differences are still considered\n the same <em>class type</em>, making your example legal.</p>\n", "OwnerUserId": "1149664", "LastEditorUserId": "1149664", "LastEditDate": "2016-07-23T05:09:58.127", "Id": "38533908", "Score": "3", "CreationDate": "2016-07-22T19:20:03.903", "LastActivityDate": "2016-07-23T05:09:58.127"}});