post_cb({"16848469": {"ParentId": "16848222", "CommentCount": "4", "Body": "<p>I think you missed the last bullet of that article (8.5.3p5), that states:</p>\n<blockquote>\n<p id=\"so_16848222_16848469_0\">If T1 is reference-related to T2 and the reference is an rvalue\n  reference, the initializer expression shall not be an lvalue.</p>\n</blockquote>\n", "OwnerUserId": "2422194", "PostTypeId": "2", "Id": "16848469", "Score": "3", "CreationDate": "2013-05-31T01:30:24.980", "LastActivityDate": "2013-05-31T01:30:24.980"}, "bq_ids": {"n4140": {"so_16848222_16848222_0": {"section_id": 3321, "quality": 0.625, "length": 5}, "so_16848222_16848469_0": {"section_id": 3321, "quality": 1.0, "length": 7}}, "n3337": {"so_16848222_16848222_0": {"section_id": 3191, "quality": 0.625, "length": 5}, "so_16848222_16848469_0": {"section_id": 3191, "quality": 1.0, "length": 7}}, "n4659": {"so_16848222_16848222_0": {"section_id": 4087, "quality": 0.625, "length": 5}, "so_16848222_16848469_0": {"section_id": 4087, "quality": 1.0, "length": 7}}}, "16848222": {"CommentCount": "7", "ViewCount": "234", "PostTypeId": "1", "LastEditorUserId": "856199", "CreationDate": "2013-05-31T00:56:37.737", "LastActivityDate": "2013-05-31T01:30:24.980", "Title": "C++11 standard ref for not initializing rvalue reference with lvalue?", "AcceptedAnswerId": "16848469", "LastEditDate": "2013-05-31T01:13:44.373", "Id": "16848222", "Score": "3", "Body": "<p>Consider the following C++11 code:</p>\n<pre><code>int&amp; f();\n\nint&amp;&amp; i = f();\n</code></pre>\n<p>This produces an error:</p>\n<pre><code>cannot bind \u2018int\u2019 lvalue to \u2018int&amp;&amp;\u2019\n</code></pre>\n<p>I understand why, but I'm trying to justify it from the language in the standard.</p>\n<p>Paraphrasing C++11 N3485 8.5.3.5:</p>\n<blockquote>\n<p id=\"so_16848222_16848222_0\">A reference to int is initialized by an expression of type int as follows: (yes)</p>\n<p id=\"so_16848222_16848222_1\">If the reference is an rvalue reference: (yes)</p>\n<p id=\"so_16848222_16848222_2\">If the initializer expression: (yes)</p>\n<ol>\n<li>is an xvalue, class prvalue, array prvalue or function lvalue (no?), or</li>\n<li>has class type [snip] (no)</li>\n</ol>\n</blockquote>\n<p>Is it the case that neither of these two points apply?  So we should just assume it is ill-formed because neither do?</p>\n<p>How can you determine from the standard that you can't initialize an rvalue reference to int with an lvalue of type int?</p>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "1131467", "AnswerCount": "1"}});