post_cb({"bq_ids": {"n4140": {"so_3845353_3845403_1": {"length": 18, "quality": 0.8571428571428571, "section_id": 7215}, "so_3845353_3845403_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 7215}}, "n3337": {"so_3845353_3845403_1": {"length": 18, "quality": 0.8571428571428571, "section_id": 6959}, "so_3845353_3845403_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 6959}}, "n4659": {"so_3845353_3845403_1": {"length": 18, "quality": 0.8571428571428571, "section_id": 8724}, "so_3845353_3845403_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 8724}}}, "3845394": {"Id": "3845394", "PostTypeId": "2", "Body": "<p>It will produce random numbers, Why? because i tested it with g++:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nstruct fool_bool\n{ \n    bool a;\nbool b;\n};\n\nint main(int argc, char **argv)\n{\nfool_bool fb1;\ncout &lt;&lt; fb1.a &lt;&lt; \" : \" &lt;&lt; fb1.b &lt;&lt; endl;\n}\n</code></pre>\n<p>the first test showed me 121, 235 and the second one showed me, 34, 331\nso it will be easy to figure it out!</p>\n", "LastActivityDate": "2010-10-02T11:11:00.060", "CommentCount": "2", "CreationDate": "2010-10-02T11:11:00.060", "ParentId": "3845353", "Score": "-1", "OwnerUserId": "298851"}, "3845404": {"Id": "3845404", "PostTypeId": "2", "Body": "<p>It depends on how you create it. If the struct is constructed by <em>default-initialization</em> e.g.</p>\n<pre><code>void foo () {\n  fool_boolen x;   // &lt;---\n</code></pre>\n<p>then the values will be <strong>undefined</strong> (bad things will happen if you read it before setting a value).</p>\n<p>On the other hand, if the struct is constructed by <em>value-initialization</em> or <em>zero-initialization</em> e.g.</p>\n<pre><code>fool_boolen x;   // &lt;--\n\nvoid foo2 () {\n  static fool_boolen y; // &lt;--\n  fool_boolen z = fool_boolen();  // &lt;--\n</code></pre>\n<p>then the values will be zero, i.e. <strong>false</strong>.</p>\n", "LastEditorUserId": "224671", "LastActivityDate": "2016-04-28T17:59:10.407", "Score": "14", "CreationDate": "2010-10-02T11:14:54.213", "ParentId": "3845353", "CommentCount": "0", "OwnerUserId": "224671", "LastEditDate": "2016-04-28T17:59:10.407"}, "3845383": {"Id": "3845383", "PostTypeId": "2", "Body": "<p>The value of the <code>bool</code> will is undefined. It will be whatever else was on the stack before it, which is sometimes zeroed out if nothing has used it previously.</p>\n<p>But again, it is undefined, which means it can be either true or false.</p>\n<p>If you need a default value, you can do:</p>\n<pre><code>struct fool_bool {\n  bool b1;\n  bool b2;\n  fool_bool() {\n    b1 = true;\n    b2 = false;\n  }\n};\n</code></pre>\n<p>This makes b1 true by default, and b2 false.</p>\n", "LastActivityDate": "2010-10-02T11:06:09.057", "CommentCount": "0", "CreationDate": "2010-10-02T11:06:09.057", "ParentId": "3845353", "Score": "9", "OwnerUserId": "429435"}, "3845403": {"Id": "3845403", "PostTypeId": "2", "Body": "<p>From Standard docs, <em>3.9.1.6.</em> </p>\n<blockquote>\n<p id=\"so_3845353_3845403_0\">Values of type bool are either true or false.47)</p>\n</blockquote>\n<p><em>47)</em></p>\n<blockquote>\n<p id=\"so_3845353_3845403_1\">Using a bool value in ways described by this International Standard as \u201cundefined,\u201d such as by <strong>examining the value of an uninitialized automatic\n  variable</strong>, might cause it to <strong>behave as if it is neither true nor false.</strong></p>\n</blockquote>\n<p>So, it is undefined..</p>\n", "LastActivityDate": "2010-10-02T11:14:53.580", "CommentCount": "0", "CreationDate": "2010-10-02T11:14:53.580", "ParentId": "3845353", "Score": "4", "OwnerUserId": "249490"}, "3845353": {"ViewCount": "8381", "Body": "<p>Suppose I have a struct called foo_boolean that contains some boolean values:</p>\n<pre><code>struct foo_boolean {\n    bool b1;\n    bool b2;\n};\n</code></pre>\n<p>If I define a variable of type foo_boolean without initializing it, what will the default value of the member variables be? (i.e., true, false, or a random value of the two.)</p>\n", "AcceptedAnswerId": "3845404", "Title": "what will be the default value of an uninitialized boolean value in c++", "CreationDate": "2010-10-02T10:56:19.237", "Id": "3845353", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-01-25T20:23:37.190", "LastEditorUserId": "128940", "LastActivityDate": "2016-04-28T17:59:10.407", "Score": "8", "OwnerUserId": "157300", "Tags": "<c++>", "AnswerCount": "7"}, "3845361": {"Id": "3845361", "PostTypeId": "2", "Body": "<p>if you mean <code>bool</code> the initial value is <strong>unknown</strong>.</p>\n", "LastActivityDate": "2010-10-02T10:59:33.987", "CommentCount": "3", "CreationDate": "2010-10-02T10:59:33.987", "ParentId": "3845353", "Score": "1", "OwnerUserId": "395573"}, "3845395": {"Id": "3845395", "PostTypeId": "2", "Body": "<p>According to my understanding, </p>\n<p>if u declare the object as global or static then the values should be initialized to false.</p>\n<p>Otherwise the values are not initialized (basically could be either true/false). </p>\n", "LastActivityDate": "2010-10-02T11:11:18.203", "CommentCount": "3", "CreationDate": "2010-10-02T11:11:18.203", "ParentId": "3845353", "Score": "-2", "OwnerUserId": "433874"}, "29482290": {"Id": "29482290", "PostTypeId": "2", "Body": "<p>In VS 2012, you will encounter error C4700 if you don't initialize the bool variable: <code>uninitialized local variable 'temp' used</code></p>\n<p>However, in VS 2005 it will allow you to build, but during runtime you will encounter this error: <code>Run-Time Check Failure #3 - The variable 'a' is being used without being defined.</code></p>\n", "LastEditorUserId": "4099598", "LastActivityDate": "2015-04-07T01:54:18.097", "Score": "-1", "CreationDate": "2015-04-07T01:32:59.637", "ParentId": "3845353", "CommentCount": "0", "OwnerUserId": "4064987", "LastEditDate": "2015-04-07T01:54:18.097"}});