post_cb({"31143642": {"CommentCount": "2", "ViewCount": "119", "CreationDate": "2015-06-30T16:31:32.477", "LastActivityDate": "2015-06-30T16:58:05.997", "Title": "C++ Use Class as Variable", "AcceptedAnswerId": "31143687", "PostTypeId": "1", "Id": "31143642", "Score": "2", "Body": "<p>So I have a class similar to this one:</p>\n<pre><code>class CVal {\npublic:\n    void operator=(int n) {\n        d = n;\n    }\nprivate:\n    int d;\n};\n</code></pre>\n<p>Now whenever I do something like</p>\n<pre><code>CVal c;\nswitch(c) {...}\n</code></pre>\n<p>I want the CVal::d to be accessed, so how would I do that? I thought of overloading some operator but I can't find anything.</p>\n", "Tags": "<c++><class><variables><operator-overloading><operators>", "OwnerUserId": "4802529", "AnswerCount": "2"}, "31143687": {"ParentId": "31143642", "PostTypeId": "2", "CommentCount": "7", "CreationDate": "2015-06-30T16:33:53.300", "Score": "12", "LastEditorUserId": "2877241", "LastEditDate": "2015-06-30T16:40:48.433", "Id": "31143687", "OwnerUserId": "2877241", "Body": "<p>You should define conversion operator like this</p>\n<pre><code>class CVal {\npublic:\n    //...\n    operator int() const { return d; }\nprivate:\n    int d;\n};\n</code></pre>\n<p>Or if you have a compiler that supports C++ 2014 then you can define it the following way</p>\n<pre><code>class CVal {\npublic:\n    //...\n    operator auto() const { return d; }\nprivate:\n    int d;\n};\n</code></pre>\n<p>According to the C++ Standard (6.4.2 The switch statement)</p>\n<blockquote>\n<p id=\"so_31143642_31143687_0\">2 The condition shall be of integral type, enumeration type, or class\n  type. If of class type, the condition is contextually implicitly\n  converted (Clause 4) to an integral or enumeration type. Integral\n  promotions are performed....</p>\n</blockquote>\n", "LastActivityDate": "2015-06-30T16:40:48.433"}, "bq_ids": {"n4140": {"so_31143642_31143687_0": {"section_id": 3890, "quality": 0.8571428571428571, "length": 18}}, "n3337": {"so_31143642_31143687_0": {"section_id": 3750, "quality": 0.6666666666666666, "length": 14}}, "n4659": {"so_31143642_31143687_0": {"section_id": 4776, "quality": 0.8571428571428571, "length": 18}}}, "31143765": {"ParentId": "31143642", "PostTypeId": "2", "CommentCount": "11", "CreationDate": "2015-06-30T16:37:54.830", "Score": "0", "LastEditorUserId": "1583052", "LastEditDate": "2015-06-30T16:58:05.997", "Id": "31143765", "OwnerUserId": "1583052", "Body": "<p>You <strong>can not</strong> access a private member of a class. But if you want use the value of a private member no matter what, you need to write <strong>get</strong> functions. eg:</p>\n<pre><code>class CVal {\npublic:\n    void operator=(int n) {\n        d = n;\n    }\n    int getD() {  // this function returns the value of private member d\n        return d;\n    }        \nprivate:\n    int d;\n};\n</code></pre>\n<p>Now you can access d in the following way:</p>\n<pre><code>CVal c;\nswitch(c.getD()) {...}\n</code></pre>\n<p>This option is better than implicity convert the class to make it accessible in <strong>switch</strong>. Because it can save you from possible debugging error in future. Besides many coding conventions prefer this option better.  </p>\n", "LastActivityDate": "2015-06-30T16:58:05.997"}});