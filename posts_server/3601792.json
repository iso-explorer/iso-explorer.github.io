post_cb({"3601852": {"Id": "3601852", "PostTypeId": "2", "Body": "<ol>\n<li>In compiling case the order of the elements in the class is irrevelant.</li>\n<li>In case of a <strong>typedef</strong> the order IS relevant, because a name that was visible outside of the scope might be covered by the new typename.</li>\n<li>The third example is ill-formed, you cant initialize with a non-static member variable.</li>\n</ol>\n", "LastActivityDate": "2010-08-30T15:32:00.823", "Score": "8", "CreationDate": "2010-08-30T15:32:00.823", "ParentId": "3601792", "CommentCount": "0", "OwnerUserId": "233522"}, "bq_ids": {"n4140": {"so_3601792_3602671_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 7070}, "so_3601792_3601884_0": {"length": 32, "quality": 0.9142857142857143, "section_id": 5862}, "so_3601792_3602671_0": {"length": 23, "quality": 0.8214285714285714, "section_id": 7070}}, "n3337": {"so_3601792_3602671_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 6814}, "so_3601792_3601884_0": {"length": 32, "quality": 0.9142857142857143, "section_id": 5632}, "so_3601792_3602671_0": {"length": 23, "quality": 0.8214285714285714, "section_id": 6814}}, "n4659": {"so_3601792_3602671_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 8567}, "so_3601792_3601884_0": {"length": 32, "quality": 0.9142857142857143, "section_id": 7345}, "so_3601792_3602671_0": {"length": 23, "quality": 0.8214285714285714, "section_id": 8567}}}, "3601884": {"Id": "3601884", "PostTypeId": "2", "Body": "<p>For point 1:</p>\n<blockquote>\n<p id=\"so_3601792_3601884_0\">$9.2/2 - \"A class is considered a\n  completely-defined object type (3.9)\n  (or complete type) at the closing } of\n  the class-specifier. Within the class\n  member-specification, the class is\n  regarded as complete within function\n  bodies, default arguments and\n  constructor ctor-initializers\n  (including such things in nested\n  classes). Otherwise it is regarded as\n  incomplete within its own class\n  member-specification.\"</p>\n</blockquote>\n<p>Therefore INT has to be defined before the member function 'foo' is declared.</p>\n<p>For point 2:\nThe reason here is that 'x' is not a static member of 'Dummy'. A non static member of Dummy needs an object expression.</p>\n", "LastActivityDate": "2010-08-30T15:36:55.007", "Score": "2", "CreationDate": "2010-08-30T15:36:55.007", "ParentId": "3601792", "CommentCount": "4", "OwnerUserId": "418110"}, "3601792": {"ViewCount": "428", "Body": "<p>Following code does compile whereas name \"aNumber\" is not declared before use.</p>\n<pre><code>class A\n{\n    A()\n        :aNumber(100)\n    {\n    }\n    void foo()\n    {\n         aNumber = 0;\n\n    }\n    int aNumber;\n};\n</code></pre>\n<p>If above code compiles then why not following :-</p>\n<pre><code>A.\nclass Dummy\n{\n    void foo(INT);\n    typedef int INT;\n};\n</code></pre>\n<p>B.Default initialization by member variable :-</p>\n<pre><code>class Dummy\n{\n    void foo(int y = x);\n    int x;\n};\n</code></pre>\n", "AcceptedAnswerId": "3602044", "Title": "Declare Before use in C++?", "CreationDate": "2010-08-30T15:24:23.510", "Id": "3601792", "CommentCount": "0", "LastEditDate": "2010-08-30T15:25:28.187", "PostTypeId": "1", "LastEditorUserId": "20270", "LastActivityDate": "2010-09-01T08:27:13.570", "Score": "2", "OwnerUserId": "434946", "Tags": "<c++>", "AnswerCount": "5"}, "3602044": {"Id": "3602044", "PostTypeId": "2", "Body": "<p>You're comparing apples and oranges. The following code is OK:</p>\n<pre><code>class A {\n    A() :aNumber(100) { INT bNumber = aNumber; }\n    void foo() { aNumber = INT(42); }\n    void bar(int bNumber = INT(1)) { aNumber = bNumber; }\n    int aNumber;\n    typedef int INT;\n};\n</code></pre>\n<p>The problem is not <em>what</em> you declare, but  where the declarations are used. <strong>Method</strong> definitions, even it they appear lexically inside a class, are compiled as if they are declared inside the class, but defined outside and after the class declaration, and so are default arguments.</p>\n", "LastEditorUserId": "15416", "LastActivityDate": "2010-09-01T08:27:13.570", "Score": "1", "CreationDate": "2010-08-30T15:57:19.327", "ParentId": "3601792", "CommentCount": "2", "LastEditDate": "2010-09-01T08:27:13.570", "OwnerUserId": "15416"}, "3601843": {"Id": "3601843", "PostTypeId": "2", "Body": "<p>It's easiest to process the language in fewer front-to-back passes. Defining things before use improves organization, too.</p>\n<p>More substantial definitions can be introduced by a small forward declaration:</p>\n<pre><code>class Dummy\n{\n    class bar; // declare first, but not a big deal\n    void foo(bar*);\n    class bar { ... };\n};\n</code></pre>\n<p>Sample \"B\" is not affected by the order of declaration. It illustrates that a default argument cannot name a nonstatic member.</p>\n", "LastActivityDate": "2010-08-30T15:31:05.370", "Score": "1", "CreationDate": "2010-08-30T15:31:05.370", "ParentId": "3601792", "CommentCount": "0", "OwnerUserId": "153285"}, "3602671": {"Id": "3602671", "PostTypeId": "2", "Body": "<p>The Standard defines the places where a member name is in scope in certain parts of its members. See <code>3.3.6/1</code>:</p>\n<blockquote id=\"so_3601792_3602671_0\">\n<ul>\n<li>The potential scope of a name declared in a class consists not only of the declarative region following\n  the name\u2019s declarator, but also of all function bodies, default arguments, and constructor ctor-\n  initializers in that class (including such things in nested classes).</li>\n</ul>\n</blockquote>\n<p>\"Potential scope\" is the scope that the name has if it isn't hidden by any other name. Note that \"following the name's declarator\" is a not quite correct term, because some declarations are not declared using a declarator (nested class declarations, for example). So C++0x changed this to read</p>\n<blockquote>\n<p id=\"so_3601792_3602671_1\">The potential scope of a name declared in a class consists not only of the declarative region following\n  the <em>name\u2019s point of declaration</em>, [...]</p>\n</blockquote>\n<p>Another guy quoted another part of the Standard (<code>9.2/2</code>), that requires the class type to be regarded as complete at certain parts. This allows you to create objects of your class within member function bodies, for example. </p>\n", "LastEditorUserId": "34509", "LastActivityDate": "2010-08-30T17:26:41.303", "Score": "0", "CreationDate": "2010-08-30T17:18:10.247", "ParentId": "3601792", "CommentCount": "0", "LastEditDate": "2010-08-30T17:26:41.303", "OwnerUserId": "34509"}});