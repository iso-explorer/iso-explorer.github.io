post_cb({"45975183": {"ParentId": "45975114", "PostTypeId": "2", "CommentCount": "17", "Body": "<p>Because the compiler (the entire translation process, actually) doesn't <em>have</em> to enforce anything if you perform an ODR<sup>1</sup> violation. According to the C++ standard at <a href=\"https://timsong-cpp.github.io/cppwp/n4140/basic.def.odr#4\" rel=\"noreferrer\">[basic.def.odr/4]</a>:</p>\n<blockquote>\n<p id=\"so_45975114_45975183_0\">Every program shall contain exactly one definition of every non-inline\n  function or variable that is odr-used in that program; <strong>no diagnostic\n  required</strong>. The definition can appear explicitly in the program, it can\n  be found in the standard or a user-defined library, or (when\n  appropriate) it is implicitly defined (see [class.ctor], [class.dtor]\n  and [class.copy]). An inline function shall be defined in every\n  translation unit in which it is odr-used.</p>\n</blockquote>\n<p>The compiler is perfectly within its right to figure out your program isn't actually using<sup>2</sup> the destructor of <code>Derived</code> (and therefore the destructor of <code>Base</code>), and just not bother with notifying you.</p>\n<hr>\n<p><sub>\n<sup>1</sup> <strong>O</strong>ne <strong>D</strong>efinition <strong>R</strong>ule<br>\n<sup>2</sup> <a href=\"https://stackoverflow.com/questions/19630570/what-does-it-mean-to-odr-use-something\">What does it mean to \u201cODR-use\u201d something?</a>\n</br></sub></p>\n</hr>", "OwnerUserId": "817643", "LastEditorUserId": "817643", "LastEditDate": "2017-08-31T07:21:38.973", "Id": "45975183", "Score": "10", "CreationDate": "2017-08-31T07:00:47.310", "LastActivityDate": "2017-08-31T07:21:38.973"}, "45975114": {"CommentCount": "7", "ViewCount": "123", "PostTypeId": "1", "LastEditorUserId": "2932052", "CreationDate": "2017-08-31T06:57:13.607", "LastActivityDate": "2017-08-31T08:01:30.340", "Title": "Does compiler really enforce implementation of pure virtual destructor?", "AcceptedAnswerId": "45975183", "LastEditDate": "2017-08-31T07:53:55.943", "Id": "45975114", "Score": "2", "Body": "<p>To validate the statement \"<em>compiler &amp; linker enforce existence of function body for pure virtual destructor.</em>\" from this <a href=\"http://www.geeksforgeeks.org/pure-virtual-destructor-c/\" rel=\"nofollow noreferrer\">geeksforgeeks article</a>, I compiled this code:</p>\n<pre><code>class Base\n{\npublic:\n    virtual ~Base()=0; // Pure virtual destructor\n};\n\nclass Derived : public Base\n{\npublic:\n    ~Derived()\n    {\n        std::cout &lt;&lt; \"~Derived() is executed\";\n    }\n};\n\nint main()\n{\n    //Derived d;   &lt;&lt;&lt;\n    return 0;\n}\n</code></pre>\n<p>which compiled without any error. So why the compiler didn't chose to enforce the existence of the function body in this case?</p>\n", "Tags": "<c++><compilation><language-lawyer><destructor><pure-virtual>", "OwnerUserId": "1465553", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_45975114_45975183_0": {"section_id": 7041, "quality": 0.8888888888888888, "length": 32}}, "n3337": {"so_45975114_45975183_0": {"section_id": 6786, "quality": 0.8888888888888888, "length": 32}}, "n4659": {"so_45975114_45975183_0": {"section_id": 8538, "quality": 0.8888888888888888, "length": 32}}}, "45975521": {"ParentId": "45975114", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_45975114_45975521_0\">Does compiler really enforce the implementation of the pure virtual destructor?</p>\n</blockquote>\n<p>No the compiler does nothing like this.</p>\n<p>The compiler compiles compilation units to object files, that's why it</p>\n<blockquote>\n<p id=\"so_45975114_45975521_1\">compiled without any error.</p>\n</blockquote>\n<p>I think nearly every compiler will compile this without any error. But the linker will complain. The compiler just adds code to object files, and also in- and outgoing references that are bound by the linker (for static linking).</p>\n<p>Of course the program will not link if you comment-in the line <code>Derived d;</code> again, see <a href=\"https://ideone.com/rRDHPN\" rel=\"nofollow noreferrer\">online demo</a>.</p>\n<h2>Update</h2>\n<p>What you show in your question is just a single compilation unit, if you link it as a program, the linker will probably remove unused code. <a href=\"https://stackoverflow.com/a/45975183/2932052\">StorryTeller's answer</a> says a lot about this.</p>\n<p>If you comment-in the <code>Derived</code> usage in main and copy the definition of <code>Base</code> class into another compilation unit and add the destructor implementation there, you'll see that both will be linked together and the resulting program will run without any error. The compiler itself doesn't care if you include definitions from headers or not. I don't suggest to do this for productive programming but to understand why the compiler traditionally doesn't care about completeness of definitions. Most real-world compilation units are often incomplete. </p>\n", "OwnerUserId": "2932052", "LastEditorUserId": "2932052", "LastEditDate": "2017-08-31T08:01:30.340", "Id": "45975521", "Score": "1", "CreationDate": "2017-08-31T07:18:45.713", "LastActivityDate": "2017-08-31T08:01:30.340"}});