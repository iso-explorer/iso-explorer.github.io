post_cb({"bq_ids": {"n4140": {"so_22522829_22523086_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 3490}, "so_22522829_22523086_1": {"length": 19, "quality": 0.8260869565217391, "section_id": 3490}}, "n3337": {"so_22522829_22523086_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 3355}, "so_22522829_22523086_1": {"length": 19, "quality": 0.8260869565217391, "section_id": 3355}}, "n4659": {"so_22522829_22523086_0": {"length": 16, "quality": 0.9411764705882353, "section_id": 4253}, "so_22522829_22523086_1": {"length": 19, "quality": 0.8260869565217391, "section_id": 4253}}}, "22523086": {"Id": "22523086", "PostTypeId": "2", "Body": "<p>The trouble with using a fixed sequence like that is that you get the same sequence of seeds out of it, much the same as if you had called <code>srand(42)</code> at the start of your program: it generates identical sequences.</p>\n<p>The C++11 standard states (in section <code>26.5.7.1 Class seed_seq</code>):</p>\n<blockquote>\n<p id=\"so_22522829_22523086_0\">A seed sequence is an object that consumes a sequence of integer-valued data and produces a requested number of unsigned integer values i, 0  i &lt; 2<sup>32</sup>, based on the consumed data.</p>\n<p id=\"so_22522829_22523086_1\">[Note: Such an object provides a mechanism to avoid replication of streams of random variates. This can be useful, for example, in applications requiring large numbers of random number engines. \u2014end note]</p>\n</blockquote>\n<p>It also states <em>how</em> those integers are turned into seeds in paragraph <code>8</code> of that section, in such a way that the distribution of those seeds is acceptable even if the integer input items are very similar. So you can probably think of it as a pseudo-random number generator for seed values.</p>\n<p>A larger number of items will provide more \"randomness\" in the seed values, provided they have some randomness themselves. Using constants as input is a bad idea for this reason.</p>\n<p>What I tend to do is very similar to the way you normally randomise <em>one</em> generator, with <code>srand (time (0))</code>. In other words:</p>\n<pre><code>#include &lt;random&gt;\n#include &lt;cstdint&gt;\n#include &lt;ctime&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    std::seed_seq seq{time(0)};\n    std::vector&lt;std::uint32_t&gt; seeds(10);\n    seq.generate(seeds.begin(), seeds.end());\n    for (std::uint32_t n : seeds) {\n        std::cout &lt;&lt; n &lt;&lt; '\\n';\n    }\n}\n</code></pre>\n<p>If you have <em>multiple</em> sources of randomness, such as a value read from <code>/dev/random</code> under Linux, or a white noise generator of some description, or the average number of milliseconds between keypresses the last time a user ran this program, you could use those as extra inputs:</p>\n<pre><code>std::seed_seq seq{time(0), valFromDevRandom(), getWhiteNoise(), avgMillis()};\n</code></pre>\n<p>but I doubt constants are the way to go, since they add no randomness to the equation.</p>\n", "LastEditorUserId": "14860", "LastActivityDate": "2014-03-20T04:43:09.443", "Score": "8", "CreationDate": "2014-03-20T03:48:37.893", "ParentId": "22522829", "CommentCount": "7", "OwnerUserId": "14860", "LastEditDate": "2014-03-20T04:43:09.443"}, "22522829": {"ViewCount": "2004", "Body": "<p>I have a C++11 program that needs to create several independent random generators, for use by different threads in a parallel computation.  These generators should be initialized with different seed values so that they all produce different pseudo-random sequences.</p>\n<p>I see that there's a <code>std::seed_seq</code> class that seems to be meant for this purpose, but it's not clear what's the right way to construct one.  The examples I've seen, such as <a href=\"http://en.cppreference.com/w/cpp/numeric/random/seed_seq\" rel=\"noreferrer\">the one on cppreference.com</a>, initialize it with a handful of integer constants hard-coded in the program:</p>\n<pre><code>std::seed_seq seq{1,2,3,4,5};\n</code></pre>\n<p>I doubt that's actually a recommended best practice, so I'm wondering what <em>is</em> the recommended practice.  In particular:</p>\n<ul>\n<li>Since a <code>seed_seq</code> can be initialized with an arbitrary number of integers, what's the significance of the length of its initializer list?  If I want to produce seeds for 100 random generators, do I need to initialize my <code>seed_seq</code> with 100 integers?</li>\n<li>If the length of the initializer list doesn't have to match the number of seeds I intend to generate, is it OK to initialize a <code>seed_seq</code> with just <em>one</em> integer and then use it to produce a large number of seeds?</li>\n<li>How about initializing with <em>no</em> integers, i.e. using the default constructor?  (This means I'd get the same seeds every time, of course.)</li>\n<li>If it's OK to construct a <code>seed_seq</code> from a single integer and then generate lots of seeds from it, what's the benefit of using <code>seed_seq</code> instead of an ordinary random generator?  Why not just construct a <code>std::mt19937</code> from that single integer and use <em>that</em> to produce seed values for other generators?</li>\n</ul>\n", "Title": "How to properly initialize a C++11 std::seed_seq", "CreationDate": "2014-03-20T03:22:21.047", "LastActivityDate": "2014-03-20T04:43:09.443", "CommentCount": "0", "FavoriteCount": "5", "PostTypeId": "1", "Id": "22522829", "Score": "10", "OwnerUserId": "226975", "Tags": "<c++><c++11><random>", "AnswerCount": "1"}});