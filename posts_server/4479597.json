post_cb({"4479670": {"ParentId": "4479597", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>From: <a href=\"http://msdn.microsoft.com/en-us/library/145yc477%28v=vs.80%29.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/145yc477%28v=vs.80%29.aspx</a> </p>\n<p>To declare the object pointed to by the pointer as const or volatile, use a declaration of the form:</p>\n<pre><code>const char *cpch;\nvolatile char *vpch;\n</code></pre>\n<p>To declare the value of the pointer \u2014 that is, the actual address stored in the pointer \u2014 as const or volatile, use a declaration of the form:</p>\n<pre><code>char * const pchc;\nchar * volatile pchv;\n</code></pre>\n", "OwnerUserId": "511571", "LastEditorUserId": "296460", "LastEditDate": "2015-06-18T15:55:53.333", "Id": "4479670", "Score": "0", "CreationDate": "2010-12-18T19:19:02.293", "LastActivityDate": "2015-06-18T15:55:53.333"}, "4479597": {"CommentCount": "2", "AcceptedAnswerId": "4479652", "CreationDate": "2010-12-18T19:06:34.417", "LastActivityDate": "2015-06-18T15:55:53.333", "PostTypeId": "1", "ViewCount": "11983", "FavoriteCount": "27", "Title": "Does making a struct volatile make all its members volatile?", "Id": "4479597", "Score": "72", "Body": "<p>If I have:\n<pre><code>struct whatever {\nint data;\n};<br>\nvolatile whatever test;</br></code></pre>\nwill <code>test.data</code> be volatile too?</p>\n", "Tags": "<c++>", "OwnerUserId": "382843", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_4479597_4479652_0": {"section_id": 5436, "quality": 0.9615384615384616, "length": 25}}, "n3337": {"so_4479597_4479652_0": {"section_id": 5231, "quality": 0.9615384615384616, "length": 25}}, "n4659": {"so_4479597_4479652_0": {"section_id": 6863, "quality": 0.9615384615384616, "length": 25}}}, "4479652": {"ParentId": "4479597", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Another question can be asked (or simply another way to look at the original question):</p>\n<h2>Does making a struct <code>const</code> make all its members <code>const</code>?</h2>\n<p>If I have:</p>\n<pre><code>struct whatever { int data; };\n\nconst whatever test;\n</code></pre>\n<p>Will test.data be <code>const</code> too?</p>\n<p>My answer is : Yes. If you declare an object of type <code>whatever</code> with <code>const</code> then all its members will be <code>const</code> too</p>\n<p>Similarly, if you declare an object of type <code>whatever</code> with <code>volatile</code> then all its members will be <code>volatile</code> too, just like if you declare the object with <code>const</code>, all it's member will be <code>const</code> too.</p>\n<p><code>const</code> and <code>volatile</code> are two faces of the same coin; they're so that the Standard often refers to them as <code>cv-qualifiers</code>.</p>\n<hr>\n<p>Quoting from the Standard ($7.1.5.1/8)</p>\n<blockquote>\n<p id=\"so_4479597_4479652_0\">[Note: volatile is <em>a hint to the\n  implementation</em> to avoid aggressive\n  optimization <strong>involving the object</strong>\n  because <strong>the value of the object</strong> might\n  be changed by means undetectable by an\n  implementation. See 1.9 for detailed\n  semantics. In general, the semantics\n  of volatile are intended to be the\n  same in C + + as they are in C. ]</p>\n</blockquote>\n<p>That means, if your object is an instance of a struct, then the compiler cannot <em>avoid aggressive optimization involving the object</em>, <strong>unless</strong> it avoids aggressive optimization of each of it's members. (Otherwise, how else it can avoid optimization involving the object?)</p>\n<hr>\n<p>Related topic:</p>\n<p><a href=\"https://stackoverflow.com/questions/4437527/why-do-we-use-volatile-keyword-in-c/4437555#4437555\">Why do we use volatile keyword in C++?</a></p>\n</hr></hr>", "OwnerUserId": "415784", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:54:48.027", "Id": "4479652", "Score": "85", "CreationDate": "2010-12-18T19:15:09.897", "LastActivityDate": "2014-02-06T10:29:10.327"}});