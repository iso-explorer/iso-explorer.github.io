post_cb({"8336230": {"ParentId": "8336220", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>This is called the <a href=\"http://en.wikipedia.org/wiki/Curiously_recurring_template_pattern\" rel=\"noreferrer\">Curiously Recurring Template Pattern</a>, or CRTP for short. It is used to achieve the effect of static polymorphism by taking advantage of the fact that by the time you get to <code>MyTemplate&lt;MyClass&gt;</code> in the line <code>class MyClass : public MyTemplate&lt;MyClass&gt;</code>, <code>MyClass</code> is semi-defined (it is an incomplete type) so you can store pointers to that type, etc, and do things with it that do not require a complete type.</p>\n", "OwnerUserId": "726361", "LastEditorUserId": "726361", "LastEditDate": "2011-12-01T04:05:27.163", "Id": "8336230", "Score": "8", "CreationDate": "2011-12-01T03:34:23.207", "LastActivityDate": "2011-12-01T04:05:27.163"}, "8336232": {"ParentId": "8336220", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_8336220_8336232_0\">Could you please explain how this works?</p>\n</blockquote>\n<p>Uhm... it just.. does? The standard specifically allows template parameters to be of incomplete type. And since no method in the <a href=\"http://en.wikipedia.org/wiki/Curiously_recurring_template_pattern\" rel=\"nofollow\">CRTP</a> base class needs a fully defined type, everything is fine.</p>\n<blockquote>\n<p id=\"so_8336220_8336232_1\">\u00a73.9.2 p3 [basic.compound]<br>\n  Pointers to incomplete types are allowed although there are restrictions on what can be done with them (3.11).</br></p>\n<p id=\"so_8336220_8336232_2\">\u00a714.3.1 p2 [temp.arg.type]<br>\n  [ Note: A template type argument may be an incomplete type (3.9). \u2014end note ]</br></p>\n</blockquote>\n", "OwnerUserId": "500104", "LastEditorUserId": "500104", "LastEditDate": "2011-12-01T03:43:09.457", "Id": "8336232", "Score": "2", "CreationDate": "2011-12-01T03:34:47.540", "LastActivityDate": "2011-12-01T03:43:09.457"}, "8336243": {"ParentId": "8336220", "CommentCount": "0", "Body": "<p>This is called CRTP. It is used for static polymorphism which can be faster than using virtual.</p>\n<pre><code>: public MyTemplate&lt;MyClass&gt;\n</code></pre>\n<p>Instantiates <code>MyTemplate&lt;MyClass&gt;</code>, although since MyClass is incomplete you can only use <code>T</code> in ways that don't require a complete type. Such as using a pointer or calling a member function.</p>\n<p>Anyway, just look at your snippet, it's essentially the same as this:</p>\n<pre><code>class MyClass\n{\n    MyClass* member;\n    MyClass* method();\n}\n</code></pre>\n<p>Which is perfectly legal and understandable.</p>\n", "OwnerUserId": "964135", "PostTypeId": "2", "Id": "8336243", "Score": "2", "CreationDate": "2011-12-01T03:35:53.980", "LastActivityDate": "2011-12-01T03:35:53.980"}, "8336220": {"CommentCount": "0", "AcceptedAnswerId": "8336230", "CreationDate": "2011-12-01T03:32:14.870", "LastActivityDate": "2011-12-01T04:05:27.163", "PostTypeId": "1", "ViewCount": "2111", "FavoriteCount": "2", "Title": "How can a class inherit from a template based on itself?", "Id": "8336220", "Score": "7", "Body": "<p>While reading an article, I came across the following syntax:</p>\n<pre><code>template &lt;typename T&gt;\nclass MyTemplate\n{\n    T* member;\n    T* method();\n    // ...\n}\n\nclass MyClass : public MyTemplate&lt;MyClass&gt;\n{\n    // ...\n}\n</code></pre>\n<p>I don't exactly understand how <code>MyClass</code> can inherit from a template that's based on itself. Could you please explain how this works?</p>\n", "Tags": "<c++><templates><generics>", "OwnerUserId": "598465", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_8336220_8336232_1": {"section_id": 7223, "quality": 0.7857142857142857, "length": 11}, "so_8336220_8336232_2": {"section_id": 85, "quality": 0.5454545454545454, "length": 6}}, "n3337": {"so_8336220_8336232_1": {"section_id": 6967, "quality": 0.7857142857142857, "length": 11}, "so_8336220_8336232_2": {"section_id": 80, "quality": 0.5454545454545454, "length": 6}}, "n4659": {"so_8336220_8336232_1": {"section_id": 8732, "quality": 0.7857142857142857, "length": 11}, "so_8336220_8336232_2": {"section_id": 88, "quality": 0.5454545454545454, "length": 6}}}});