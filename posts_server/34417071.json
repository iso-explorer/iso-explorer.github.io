post_cb({"34417330": {"ParentId": "34417071", "LastEditDate": "2015-12-23T04:06:38.510", "CommentCount": "5", "CreationDate": "2015-12-22T13:46:54.747", "OwnerUserId": "4672588", "LastEditorUserId": "4672588", "PostTypeId": "2", "Id": "34417330", "Score": "41", "Body": "<p><code>T(i_do_not_exist);</code> is an object declaration with the same meaning as <code>T i_do_not_exist;</code>.</p>\n<p>N4567 \u00a7 6.8[stmt.ambig]p1</p>\n<blockquote>\n<p id=\"so_34417071_34417330_0\">There is an ambiguity in the grammar involving <em>expression-statement</em>s and <em>declaration</em>s: An <em>expression-statement</em> with a function-style explicit type conversion (5.2.3) as its leftmost subexpression can be indistinguishable from a <em>declaration</em> where the \ufb01rst <em>declarator</em> starts with a <code>(</code>. In those cases the <em>statement</em> is a <em>declaration</em>.</p>\n</blockquote>\n<p>\u00a7 8.3[dcl.meaning]p6</p>\n<blockquote>\n<p id=\"so_34417071_34417330_1\">In a declaration <code>T D</code> where <code>D</code> has the form</p>\n<p id=\"so_34417071_34417330_2\"><code>( D1 )</code></p>\n<p id=\"so_34417071_34417330_3\">the type of the contained <em>declarator-id</em> is the same as that of the contained <em>declarator-id</em> in the declaration</p>\n<p id=\"so_34417071_34417330_4\"><code>T D1</code></p>\n<p id=\"so_34417071_34417330_5\">Parentheses do not alter the type of the embedded <em>declarator-id</em>, but they can alter the binding of complex declarators.</p>\n</blockquote>\n", "LastActivityDate": "2015-12-23T04:06:38.510"}, "34417360": {"ParentId": "34417071", "LastEditDate": "2015-12-22T19:54:30.353", "CommentCount": "0", "CreationDate": "2015-12-22T13:48:55.313", "OwnerUserId": "471160", "LastEditorUserId": "63550", "PostTypeId": "2", "Id": "34417360", "Score": "17", "Body": "<p>Because it defines a variable of type T:</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/d420870b1a6490d7\">http://coliru.stacked-crooked.com/a/d420870b1a6490d7</a></p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct T {\n    int t;\n    T() : t(0) {}\n};\n\nint main() {\n    T(i_do_not_exist);\n    i_do_not_exist.t = 120;\n    std::cout &lt;&lt; i_do_not_exist.t;\n    return 0;\n}\n</code></pre>\n<p>The above example looks silly, but this syntax is allowed for a reason. </p>\n<p>A better example is:</p>\n<pre><code>int func1();\nnamespace A\n{\n   void func1(int);\n   struct X {\n       friend int (::func1)();\n   };\n}\n</code></pre>\n<p>Probably other examples could be found.</p>\n", "LastActivityDate": "2015-12-22T19:54:30.353"}, "bq_ids": {"n4140": {"so_34417071_34417330_5": {"section_id": 3213, "quality": 1.0, "length": 12}, "so_34417071_34417330_3": {"section_id": 3213, "quality": 1.0, "length": 7}, "so_34417071_34417330_0": {"section_id": 3921, "quality": 0.9230769230769231, "length": 24}}, "n3337": {"so_34417071_34417330_5": {"section_id": 3087, "quality": 1.0, "length": 12}, "so_34417071_34417330_3": {"section_id": 3087, "quality": 1.0, "length": 7}, "so_34417071_34417330_0": {"section_id": 3781, "quality": 0.7307692307692307, "length": 19}}, "n4659": {"so_34417071_34417330_5": {"section_id": 3970, "quality": 1.0, "length": 12}, "so_34417071_34417330_3": {"section_id": 3970, "quality": 1.0, "length": 7}, "so_34417071_34417330_0": {"section_id": 4807, "quality": 0.9230769230769231, "length": 24}}}, "34417071": {"CommentCount": "6", "CreationDate": "2015-12-22T13:32:59.903", "PostTypeId": "1", "AcceptedAnswerId": "34417330", "LastEditorUserId": "1505939", "LastActivityDate": "2015-12-23T04:35:30.260", "LastEditDate": "2015-12-23T04:35:30.260", "ViewCount": "1092", "FavoriteCount": "6", "Title": "Visual Studio C++ compiler weird behaviour", "Id": "34417071", "Score": "34", "Body": "<p>I'm just curious to know why this small piece of code compiles correctly (and without warnings) in <em>Visual Studio</em>. Maybe the result is the same with <a href=\"http://en.wikipedia.org/wiki/GNU_Compiler_Collection\">GCC</a> and <a href=\"http://en.wikipedia.org/wiki/Clang\">Clang</a>, but unfortunately I can't test them now.</p>\n<pre><code>struct T {\n    int t;\n    T() : t(0) {}\n};\n\nint main() {\n    T(i_do_not_exist);\n    return 0;\n}\n</code></pre>\n", "Tags": "<c++><visual-studio-2012><most-vexing-parse>", "OwnerUserId": "3125556", "AnswerCount": "2"}});