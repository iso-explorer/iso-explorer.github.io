post_cb({"15378899": {"ParentId": "15374841", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_15374841_15378899_0\">14.5.5.3.1. The template parameter list of a member of a class template partial specialization shall match the template parameter list of the class template partial specialization. The template argument list of a member of a class template partial specialization shall match the template argument list of the class template partial specialization.</p>\n</blockquote>\n<p>In other words: no partially specialized member without partially specialized class.</p>\n", "OwnerUserId": "339249", "PostTypeId": "2", "Id": "15378899", "Score": "17", "CreationDate": "2013-03-13T07:02:02.750", "LastActivityDate": "2013-03-13T07:02:02.750"}, "42206166": {"ParentId": "15374841", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Unfortunately, you can't partially specialize member function of a template class. You may either partially specialize the whole class or use inheritance. You may also use both:</p>\n<pre><code>template &lt;typename T, int nValue&gt;\nclass Object {\nprotected:\n    T m_t;\npublic:\n    Object() = delete;\n    Object(T t): m_t(t) {}\n    T Get() { return m_t; }\n    Object&amp; Deform() {\n        m_t *= nValue; \n        return *this;\n    }\n};\n\ntemplate &lt;typename T&gt;\nclass Object&lt;T,0&gt; : public Object&lt;T,1&gt; {\npublic:\n    using Object&lt;T,1&gt;::Object;\n\n    Object&amp; Deform() {\n        this-&gt;m_t = -1;\n        return *this;\n    }\n};\n</code></pre>\n", "OwnerUserId": "737904", "LastEditorUserId": "737904", "LastEditDate": "2017-02-13T14:19:52.820", "Id": "42206166", "Score": "2", "CreationDate": "2017-02-13T14:13:57.390", "LastActivityDate": "2017-02-13T14:19:52.820"}, "15374841": {"CommentCount": "2", "AcceptedAnswerId": "15374950", "PostTypeId": "1", "LastEditorUserId": "2107632", "CreationDate": "2013-03-13T00:26:20.520", "LastActivityDate": "2017-02-13T14:19:52.820", "LastEditDate": "2013-03-13T00:36:51.030", "ViewCount": "16098", "FavoriteCount": "6", "Title": "c++ template partial specialization member function", "Id": "15374841", "Score": "27", "Body": "<p>I'm new to templates so maybe this is a trivial thing but I cannot get it to work. I'm trying to get partial specialization of a class member function. The shortest code would be:</p>\n<pre><code>template &lt;typename T, int nValue&gt; class Object{\nprivate:\n    T m_t;\n    Object();\npublic:\n    Object(T t): m_t(t) {}\n    T Get() { return m_t; } \n    Object&amp; Deform(){ \n        m_t*=nValue; \n        return *this;\n    }\n};\n\ntemplate &lt;typename T&gt;\nObject&lt;T,0&gt;&amp; Object&lt;T,0&gt;::Deform(){\n    this-&gt;m_t = -1;\n    return *this;\n}\n\nint main(){\n    Object&lt;int,7&gt; nObj(1);\n    nObj.Deform();\n    std::cout&lt;&lt;nObj.Get();\n}\n</code></pre>\n<p>I tried with nonmember functions and that's worked fine. What also works fine is full specialization of a member function.</p>\n<p>But, whenever I try with partial spec. of a member function I get error of the form: </p>\n<pre><code>PartialSpecification_MemberFu.cpp(17): error: template argument\nlist must match the parameter list Object&lt;T,0&gt;&amp; Object&lt;T,0&gt;::Deform().\n</code></pre>\n<p>Would appreciate any help :-)</p>\n", "Tags": "<c++><templates><specialization>", "OwnerUserId": "2107632", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_15374841_15378899_0": {"section_id": 149, "quality": 0.9142857142857143, "length": 32}}, "n3337": {"so_15374841_15378899_0": {"section_id": 143, "quality": 0.9142857142857143, "length": 32}}, "n4659": {"so_15374841_15378899_0": {"section_id": 153, "quality": 0.9142857142857143, "length": 32}}}, "15374950": {"ParentId": "15374841", "CommentCount": "0", "Body": "<p>You cannot partially specialize only a single member function, you must partially specialize the whole class. Hence you'll need something like:</p>\n<pre><code>template &lt;typename T&gt;\nclass Object&lt;T, 0&gt;\n{\nprivate:\n    T m_t;\n    Object();\npublic:\n    Object(T t): m_t(t) {}\n    T Get() { return m_t; } \n    Object&amp; Deform()\n    {\n        std::cout &lt;&lt; \"Spec\\n\";\n        m_t = -1;\n        return *this;\n    }\n};\n</code></pre>\n", "OwnerUserId": "1085573", "PostTypeId": "2", "Id": "15374950", "Score": "30", "CreationDate": "2013-03-13T00:36:35.137", "LastActivityDate": "2013-03-13T00:36:35.137"}});