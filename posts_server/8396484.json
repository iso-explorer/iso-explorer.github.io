post_cb({"8396581": {"ParentId": "8396484", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Actually <code>.end()</code> does not return the iterator to the <em>last</em> element, rather it returns iterator to <em>past-the-last-element</em>.  The iterator to the last element is just before it; that is, if <code>it</code> points to the last element, then <code>++it</code> makes <code>it</code> to point to past-the-last-element.</p>\n<p>The language specification calls it <em>past-the-end</em> iterator. </p>\n<p>\u00a724.1/5 (C++03) reads,</p>\n<blockquote>\n<p id=\"so_8396484_8396581_0\">Just as a regular pointer to an array guarantees that there is a pointer value pointing past the last element of the array, so for any iterator type there is an iterator value that points past the last element of a corresponding container. These values are called past-the-end values. Values of an iterator i for which the expression *i is defined are called dereferenceable. The library never assumes that past-the-end values are dereferenceable</p>\n</blockquote>\n<p>Also note that <em>dereferencing</em> the past-the-end iterator invokes undefined behavior:</p>\n<pre><code>auto it = students.end(); //ok\nit-&gt;someFunction();       //undefined behavior\n(*it).someFunction();     //undefined behavior\n</code></pre>\n", "OwnerUserId": "415784", "LastEditorUserId": "415784", "LastEditDate": "2011-12-06T07:35:47.257", "Id": "8396581", "Score": "1", "CreationDate": "2011-12-06T07:28:52.497", "LastActivityDate": "2011-12-06T07:35:47.257"}, "8396534": {"ParentId": "8396484", "CommentCount": "1", "Body": "<p><code>end()</code> returns a special value that means \"iteration ended, stop\". Usually that's an iterator to the element beyond the array end - you don't have to process it, you should stop once you reached it and that's what the loop does.</p>\n", "OwnerUserId": "57428", "PostTypeId": "2", "Id": "8396534", "Score": "3", "CreationDate": "2011-12-06T07:21:45.613", "LastActivityDate": "2011-12-06T07:21:45.613"}, "8396568": {"ParentId": "8396484", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>If I understood well what you asked,it is so because the last element of a vector is actually on the position v.end()-1. So to an element before the v.end() should the loop stop to access all the elements. Is that you asked?</p>\n", "OwnerUserId": "954724", "LastEditorUserId": "954724", "LastEditDate": "2011-12-06T08:08:22.223", "Id": "8396568", "Score": "2", "CreationDate": "2011-12-06T07:26:05.460", "LastActivityDate": "2011-12-06T08:08:22.223"}, "8396531": {"ParentId": "8396484", "CommentCount": "0", "Body": "<p><code>end()</code> points to somewhere past the end of the container. By convention, sequences in C++ are of the form <code>[begin, end)</code>, that is, the end is <em>not</em> part of the sequence. For arrays and vectors, <code>end()</code> points to the index equal to the size of the array (which is outside the array or vector).</p>\n<p>This convenient in many aspects. For an empty sequence, for instance, the begin and end of the container are the same element. Also, the value returned by <code>end()</code> is commonly used as an \"invalid\" iterator, as it does not point to a meaningful element.</p>\n", "OwnerUserId": "71141", "PostTypeId": "2", "Id": "8396531", "Score": "3", "CreationDate": "2011-12-06T07:21:25.937", "LastActivityDate": "2011-12-06T07:21:25.937"}, "8396509": {"ParentId": "8396484", "CommentCount": "0", "Body": "<p>The loop you have written is roughly equivalent to:</p>\n<pre><code>vector&lt;Student_info&gt;::const_iterator iter = students.begin();\nwhile (iter != students.end()) {\n    cout &lt;&lt; (*iter).name &lt;&lt; endl;\n    ++iter;\n}\n</code></pre>\n<p>This is the normal expansion of the <code>for</code> loop into its <code>while</code> equivalent<sup>1</sup>. Every time through the loop, the <code>iter</code> iterator is incremented (with <code>++iter</code>) to advance to the next element. When the end of the vector is reached, then <code>iter</code> will equal <code>students.end()</code> and the loop will exit.</p>\n<p><sup>1. Except for the scope of <code>iter</code> remains within the body of the <code>for</code> loop.</sup></p>\n", "OwnerUserId": "893", "PostTypeId": "2", "Id": "8396509", "Score": "3", "CreationDate": "2011-12-06T07:19:56.850", "LastActivityDate": "2011-12-06T07:19:56.850"}, "8396484": {"CommentCount": "3", "ViewCount": "1777", "PostTypeId": "1", "LastEditorUserId": "968454", "CreationDate": "2011-12-06T07:17:16.963", "LastActivityDate": "2011-12-06T09:28:27.100", "Title": "where does v.end() point to?", "AcceptedAnswerId": "8396568", "LastEditDate": "2011-12-06T09:28:27.100", "Id": "8396484", "Score": "1", "Body": "<pre><code>for (vector&lt;Student_info&gt;::const_iterator iter = students.begin();\n     iter != students.end(); ++iter)\n    cout &lt;&lt; (*iter).name &lt;&lt; endl;\n</code></pre>\n<p>In Accelerated C++, code above was told to output all of the data contain in the vector, but if the loop stop when <code>iter != students.end()</code> equal to <code>students.end()</code>, then how does it will proceed to the last element of the vector?</p>\n", "Tags": "<c++><for-loop><iterator><sequence>", "OwnerUserId": "1067844", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_8396484_8396581_0": {"section_id": 5559, "quality": 0.8809523809523809, "length": 37}}, "n3337": {"so_8396484_8396581_0": {"section_id": 5341, "quality": 0.8809523809523809, "length": 37}}, "n4659": {"so_8396484_8396581_0": {"section_id": 7006, "quality": 0.8809523809523809, "length": 37}}}});