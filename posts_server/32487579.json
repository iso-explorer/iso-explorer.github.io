post_cb({"32487668": {"ParentId": "32487579", "CommentCount": "0", "Body": "<p>Because quite often, we want to give the thread something to work on (or with, or off, or whatever). A very typical example is to pass in an instance of a class, so you can make calls to the class member functions.</p>\n<p>But it could be all sorts of other things - a struct, or a pointer to some simple data.</p>\n<p>Of course, using <code>std::thread</code> will hide most such things anyway, and you don't need to worry about it. I would strongly suggest using <code>std::thread</code> instead of <code>pthread</code> in general.</p>\n", "OwnerUserId": "1919155", "PostTypeId": "2", "Id": "32487668", "Score": "3", "CreationDate": "2015-09-09T19:25:22.203", "LastActivityDate": "2015-09-09T19:25:22.203"}, "32487682": {"ParentId": "32487579", "CommentCount": "0", "Body": "<p><code>void *SomeMethod(void* x)</code> is used as an entry point for the new thread.\nHow should you act if you want to pass to the new thread some data (struct, buffer, a regular integer, etc.)? Specially for this <em>entry point</em> method receives <code>void*</code> argument which can point to anything you want. Then inside the function body you can cast it back to the proper type and use it by the worker thread.</p>\n<p>In case your thread doesn't need any additional data you can pass <code>NULL</code> or <code>nullptr</code> (for C++11) to it.</p>\n", "OwnerUserId": "5218277", "PostTypeId": "2", "Id": "32487682", "Score": "2", "CreationDate": "2015-09-09T19:26:08.563", "LastActivityDate": "2015-09-09T19:26:08.563"}, "32487624": {"ParentId": "32487579", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Because the <code>pthread_create</code> function takes an argument of type <code>void* (*)(void*)</code> which is a function taking a <code>void*</code> and  returning a <code>void*</code>, so to create a thread using <code>pthread_create</code> that's what you need to use.</p>\n<p>The <code>pthread_create</code> API takes that to allow you to pass data to the new thread and get data back again. If you don't want to pass anything in you still have to meet that interface, but just pass it NULL.</p>\n<p>Just because <em>you</em> don't want to pass any arguments to your new thread right now doesn't mean the API should be designed to only support your current use case. It's much better to have an API written in terms of a function taking <code>void*</code> (which can optionally be passed NULL) than to have an API in terms of a function taking no arguments and requiring users to come up with their own solutions for passing data to the new thread.</p>\n<p>In C++ you can use any type of function for the new thread and pass it whatever arguments you need to:</p>\n<pre><code>std::thread t(&amp;SomeMethod);\n</code></pre>\n", "OwnerUserId": "981959", "LastEditorUserId": "981959", "LastEditDate": "2015-09-09T19:29:06.280", "Id": "32487624", "Score": "5", "CreationDate": "2015-09-09T19:23:00.730", "LastActivityDate": "2015-09-09T19:29:06.280"}, "32487696": {"ParentId": "32487579", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>No, the method signature you propose will not work as the start function for a pthreads thread.  If you  pass a pointer to such a function to <code>pthread_create()</code> then the compiler should warn.  If you run the resulting program then you invoke undefined behavior, because the pointer does not have the correct type.  As a practical matter, the pthreads library will try to pass an argument to to the start function, and will expect a return value from it; if you provide a pointer to a function that does not both consume an argument and return a value (both of appropriate type) then very likely the program will crash. </p>\n<p>As for <em>why</em> the start function is required to have the signature it does, a <code>void *</code> argument can be used to convey an actual argument of any type, including a composite type encompassing multiple distinct values, and similarly, a <code>void *</code> return type can be used to convey a return value of any type.  This is pretty much the most general function type possible.</p>\n", "OwnerUserId": "2402272", "LastEditorUserId": "2402272", "LastEditDate": "2015-09-09T19:32:32.703", "Id": "32487696", "Score": "2", "CreationDate": "2015-09-09T19:26:50.663", "LastActivityDate": "2015-09-09T19:32:32.703"}, "32487628": {"ParentId": "32487579", "CommentCount": "0", "Body": "<p>Because they wanted to write just the one function for creating threads - to take and return data.</p>\n<p>Otherwise they would have to write at least four possibilities.</p>\n<p>You are free you ignore the input parameter and the return value.</p>\n<p>Just a matter of simplicity</p>\n", "OwnerUserId": "892256", "PostTypeId": "2", "Id": "32487628", "Score": "3", "CreationDate": "2015-09-09T19:23:08.340", "LastActivityDate": "2015-09-09T19:23:08.340"}, "32487636": {"ParentId": "32487579", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>As per the <a href=\"http://linux.die.net/man/3/pthread_create\" rel=\"nofollow\">man page</a> of <code>pthread_create()</code>, we can see, the signature of the function is</p>\n<pre><code> int pthread_create(pthread_t *thread, const pthread_attr_t *attr,\n               void *(*start_routine) (void *), void *arg);\n</code></pre>\n<p>where the third argument is of type</p>\n<pre><code>void *(*start_routine) (void *)\n</code></pre>\n<p>which means, it expects a pointer to a function with return type <code>void *</code> and accepting a <code>void *</code> argument. So, we need to define the thread function accordingly.</p>\n<p>That said, regarding the usage of <code>void</code> pointer for argument passing, quoting <code>C11</code>, chapter \u00a76.3.2.3</p>\n<blockquote>\n<p id=\"so_32487579_32487636_0\">A pointer to <code>void</code> may be converted to or from a pointer to any object type. A pointer to any object type may be converted to a pointer to <code>void</code> and back again; the result shall compare equal to the original pointer.</p>\n</blockquote>\n<p>As we can see, the <code>void</code> pointer is used to pass <em>any</em> type of data to the thread function , provided, it is converted back to the actual type inside the function.</p>\n<p>Also, FWIW, do not try to deviate from the required signature of a function pointer, as the standard clearly mandates</p>\n<blockquote>\n<p id=\"so_32487579_32487636_1\">[....] If a converted pointer is used to call a function whose type is not  compatible with the referenced type, the behavior is undefined. In case you don't want (need) to pass any valid argument value, you can always pass <code>NULL</code>.</p>\n</blockquote>\n", "OwnerUserId": "2173917", "LastEditorUserId": "2173917", "LastEditDate": "2015-09-09T19:43:57.410", "Id": "32487636", "Score": "3", "CreationDate": "2015-09-09T19:23:23.630", "LastActivityDate": "2015-09-09T19:43:57.410"}, "bq_ids": {"n4140": {"so_32487579_32487636_0": {"section_id": 6039, "quality": 0.6190476190476191, "length": 13}}, "n3337": {"so_32487579_32487636_0": {"section_id": 5807, "quality": 0.6190476190476191, "length": 13}}, "n4659": {"so_32487579_32487636_0": {"section_id": 7548, "quality": 0.5238095238095238, "length": 11}}}, "32487579": {"CommentCount": "2", "ViewCount": "984", "PostTypeId": "1", "LastEditorUserId": "2173917", "CreationDate": "2015-09-09T19:20:05.270", "LastActivityDate": "2015-09-09T19:43:57.410", "Title": "Why does a function accept a void pointer?", "AcceptedAnswerId": "32487624", "LastEditDate": "2015-09-09T19:42:29.497", "Id": "32487579", "Score": "1", "Body": "<p>I am trying to understand pthread and I got a little progress. I am now using it without any problem.</p>\n<p>However It is required to create thread methods as follows:</p>\n<pre><code>void *SomeMethod(void* x)\n{\n    //Do Something\n}\n</code></pre>\n<p>Why is it necessary to create a function that accepts a <code>void</code> pointer? Can't we use pthread with a function like this?</p>\n<pre><code>void SomeMethod()\n{\n}\n</code></pre>\n", "Tags": "<c++><c><pthreads><parameter-passing><void-pointers>", "OwnerUserId": "5208889", "AnswerCount": "6"}});