post_cb({"31719660": {"ViewCount": "232", "Body": "<p>I was going through C Pointer arithmetic. I found that pointer addition is not allowed but <code>pointer + integer</code> is allowed.</p>\n<p>I thought <code>pointer + pointer</code> is not allowed due to security reason. But what if a pointer say <code>p1</code> holds <code>66400</code> and <code>p2</code> holds <code>66444</code>. now <code>p1+p2</code> is not allowed but <code>p1+66444</code> is allowed. Why so? </p>\n", "AcceptedAnswerId": "31719724", "Title": "Why Pointer+Pointer is not allowed but Pointer+integer allowed?", "CreationDate": "2015-07-30T09:12:19.613", "Id": "31719660", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-07-30T09:21:34.480", "LastEditorUserId": "2659313", "LastActivityDate": "2015-07-30T15:29:42.610", "ClosedDate": "2015-07-30T09:19:32.607", "Score": "-1", "OwnerUserId": "4221427", "Tags": "<c++><c><pointers>", "AnswerCount": "5"}, "31719723": {"Id": "31719723", "PostTypeId": "2", "Body": "<p>Just think of it logically.</p>\n<p>If you add two pointers, what will be the result? It is most likely to make no sense.</p>\n<p>OTOH, addition of an integer means <em>increment</em> (or decrement) the pointer location (with regards to the type of pointer). The pointer is the <em>location</em> and the <em>integer</em> is the <em>offset</em>. Logical and valid.</p>\n<p>Technically speaking, the addition <code>+</code> operator, from <code>C11</code>, chapter \u00a76.5.6, also mandates,</p>\n<blockquote>\n<p id=\"so_31719660_31719723_0\">For addition, either both operands shall have arithmetic type, or <strong>one operand shall be a\n  pointer to a complete object type and the other shall have integer type. (Incrementing is\n  equivalent to adding 1.)</strong></p>\n</blockquote>\n", "LastEditorUserId": "2173917", "LastActivityDate": "2015-07-30T09:18:45.477", "Score": "2", "CreationDate": "2015-07-30T09:15:20.577", "ParentId": "31719660", "CommentCount": "6", "OwnerUserId": "2173917", "LastEditDate": "2015-07-30T09:18:45.477"}, "31719724": {"Id": "31719724", "PostTypeId": "2", "Body": "<p>Think this way.</p>\n<pre><code>Address 1: 112, Bakers street\nAddress 2: 11, Nathan road\n</code></pre>\n<p>Why <code>Address1 + 3</code> is fine but <code>Address1 + Address2</code> is bad.</p>\n<p>(BTW by <code>Address1 + 3</code> I mean 115, Backers street)</p>\n<p>For the same reason multiplication of scalar or an address to another address doesn't make sense.</p>\n<pre><code>address1 * 2 // Invalid\naddress1 * address2 // Invalid\n</code></pre>\n<p>Logically it is possibly to take an offset from an address by adding/subtracting but adding 2 addresses doesn't make sense because addresses of same variables may be different in each run of program. Moreover the type and value of addition don't make any sense.</p>\n<blockquote>\n<p id=\"so_31719660_31719724_0\">I thought pointer + pointer is not allowed due to security reason.</p>\n</blockquote>\n<p>No it is not allowed because addition of pointers does not make any sense.</p>\n<blockquote>\n<p id=\"so_31719660_31719724_1\">if a pointer say <code>p1</code> holds <code>66400</code> and <code>p2</code> holds <code>66444</code>. now\n  <code>p1+p2</code> is not allowed but <code>p1+66444</code> is allowed.</p>\n</blockquote>\n<p>You are thinking only about values think of their types also. For example if <code>a</code> holds <code>2</code> kg, and <code>b</code> holds <code>3</code> meter, it does not make sense to add them.</p>\n<hr>\n<p>There is one more important thing to learn from address analogy:</p>\n<p>Let's say there are 80 houses on Nathan road (analogous to arrays in C) and if you add <code>70</code> to <code>Address 2</code> you may land in a house, a garbage bag, or in the sea. For the same reason, if you go more than 1 past the address in array or address before the  of array behaviour is undefined. If you dereference any address beyond the array, behaviour is undefined.</p>\n<pre><code>int NathanRoad[80] = {...};\nint *address1 = &amp;NathanRoad[11];\nint *q;\nint s;\nq = address1 + 3; /* OK */\ns = *(address1 + 3); /* OK */\nq = address1 + 75; /* Bad */\nq = address1 + 69; /* OK */\ns = *(address1 + 69); /* Bad */\n</code></pre>\n</hr>", "LastEditorUserId": "2659313", "LastActivityDate": "2015-07-30T15:29:42.610", "Score": "10", "CreationDate": "2015-07-30T09:15:21.167", "ParentId": "31719660", "CommentCount": "7", "OwnerUserId": "2659313", "LastEditDate": "2015-07-30T15:29:42.610"}, "31719713": {"Id": "31719713", "PostTypeId": "2", "Body": "<p>Pointers aren't integers. Pointer arithmetic works like this: If you have a pointer <code>p</code> to an array element <code>a[i]</code> and and integer <code>n</code>, then <code>p + n</code> is a pointer to <code>a[i + n]</code>. That's it.</p>\n", "LastActivityDate": "2015-07-30T09:15:02.893", "CommentCount": "0", "CreationDate": "2015-07-30T09:15:02.893", "ParentId": "31719660", "Score": "0", "OwnerUserId": "1848654"}, "bq_ids": {"n4140": {"so_31719660_31719723_0": {"length": 15, "quality": 0.7142857142857143, "section_id": 6138}}, "n3337": {"so_31719660_31719723_0": {"length": 15, "quality": 0.7142857142857143, "section_id": 5902}}, "n4659": {"so_31719660_31719723_0": {"length": 15, "quality": 0.7142857142857143, "section_id": 7635}}}, "31719741": {"Id": "31719741", "PostTypeId": "2", "Body": "<p>Adding pointer to pointer is pointless (pun intended) it just doesn't make sense.</p>\n<p>Adding a pointer to an integer can give a useful result. Depending on the usage of course. </p>\n<p>Subtraction of two pointers is supported because it can be useful for estimating sizes. How many elements would fit in between?</p>\n", "LastEditorUserId": "582829", "LastActivityDate": "2015-07-30T09:46:28.570", "Score": "0", "CreationDate": "2015-07-30T09:15:58.853", "ParentId": "31719660", "CommentCount": "4", "OwnerUserId": "582829", "LastEditDate": "2015-07-30T09:46:28.570"}, "31719714": {"Id": "31719714", "PostTypeId": "2", "Body": "<p>Sure, you could treat pointers as integers, but you really shouldn't. </p>\n<p>Pointer+integer means position+offset, which yields a new position. Pointer+pointer would mean position+position, which doesn't make sense.</p>\n<p>Similarly in maths, if that helps you. While a 2D vector and a 2D coordinate can both be expressed similarly, it only makes sense to add the vectors, not the coordinates.</p>\n", "LastActivityDate": "2015-07-30T09:15:06.167", "CommentCount": "0", "CreationDate": "2015-07-30T09:15:06.167", "ParentId": "31719660", "Score": "2", "OwnerUserId": "2971"}});