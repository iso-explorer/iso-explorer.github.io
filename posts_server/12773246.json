post_cb({"12773246": {"ViewCount": "260", "Body": "<p>In the C++ standard, <code>std::ios::openmode</code>, <code>std::ios::fmtflags</code> and <code>std::ios::iostate</code> are implementation defined. But <code>std::ios::goodbit</code> is standardized to be equal to zero. My question is : can these bitmask be casted to boolean values according to the standard. In other words, to test if an error flag is set, can we type :</p>\n<pre><code>inline void myFunction(std::ios::iostate x = std::ios::goodbit) \n{\n    if (x) { // &lt;- is it ok or do I have to type \"if (x != std::ios::goodbit)\" ?\n        /* SOMETHING */    \n    }\n}\n</code></pre>\n", "AcceptedAnswerId": "12773395", "Title": "C++ stream bitmask as bool?", "CreationDate": "2012-10-07T22:02:40.990", "Id": "12773246", "CommentCount": "0", "LastEditDate": "2012-10-07T22:23:33.430", "PostTypeId": "1", "LastEditorUserId": "85371", "LastActivityDate": "2012-10-07T22:31:30.490", "Score": "3", "OwnerUserId": "882932", "Tags": "<c++><boolean><standards-compliance><bitmask>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_12773246_12773395_0": {"length": 13, "quality": 1.0, "section_id": 6233}}, "n3337": {"so_12773246_12773395_0": {"length": 13, "quality": 1.0, "section_id": 5993}}, "n4659": {"so_12773246_12773395_0": {"length": 13, "quality": 1.0, "section_id": 7737}}}, "12773395": {"Id": "12773395", "PostTypeId": "2", "Body": "<p>No this is not portable code. <a href=\"http://en.cppreference.com/w/cpp/io/ios_base/iostate\" rel=\"nofollow\">std::ios::iostate</a> is a <a href=\"http://en.cppreference.com/w/cpp/concept/BitmaskType\" rel=\"nofollow\">Bitmask type</a> which, according to the C++ standard (17.5.2.1.3):</p>\n<blockquote>\n<p id=\"so_12773246_12773395_0\">Each bitmask type can be implemented as an enumerated type that overloads certain operators, as an integer type, or as a bitset</p>\n</blockquote>\n<p>If iostate is implemented in terms of the latter case, then your code will fail to compile as <a href=\"http://en.cppreference.com/w/cpp/utility/bitset\" rel=\"nofollow\">std::bitset</a> has neither an operator bool nor is it implicitly convertible to an integral type (as in your case).</p>\n<p>Note:\nThe following fails to compile:</p>\n<pre><code>  std::bitset&lt;8&gt; b;\n  return (b) ? 1 : 0;\n</code></pre>\n<p>while this works:</p>\n<pre><code>  std::bitset&lt;8&gt; b;\n  return (b != 0) ? 1 : 0;\n</code></pre>\n", "LastEditorUserId": "1094151", "LastActivityDate": "2012-10-07T22:31:30.490", "Score": "3", "CreationDate": "2012-10-07T22:23:28.453", "ParentId": "12773246", "CommentCount": "5", "OwnerUserId": "1094151", "LastEditDate": "2012-10-07T22:31:30.490"}});