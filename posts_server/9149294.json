post_cb({"bq_ids": {"n4140": {"so_9149294_9149308_1": {"length": 5, "quality": 0.625, "section_id": 6145}}, "n3337": {"so_9149294_9149308_1": {"length": 5, "quality": 0.625, "section_id": 5908}}}, "9149337": {"CommentCount": "1", "Body": "<p>It looks like you're doing the right thing.</p>\n<pre><code>last_value = value;  //copy pointer\n</code></pre>\n<p>but it isn't really what you want because it isn't the pointer you want to copy, it's the data inside. that's why the old pointer is updated along with the new pointer. I think what you need is a copy of the structure itself.</p>\n<p>If the pointer points to some class you write, add a copy constructor method to it, then copy the value of the pointer like so:</p>\n<pre><code>last_value = new MyClass(*value); //construct object, copy from what value points to\n//change value\n</code></pre>\n", "CreationDate": "2012-02-05T12:45:33.720", "ParentId": "9149294", "Id": "9149337", "LastActivityDate": "2012-02-05T12:45:33.720", "PostTypeId": "2", "Score": "0", "OwnerUserId": "25466"}, "9149294": {"CreationDate": "2012-02-05T12:38:11.407", "ViewCount": "1552", "Id": "9149294", "AcceptedAnswerId": "9162172", "Score": "4", "Title": "How to make a copy of a pointer", "LastEditorUserId": "560648", "CommentCount": "1", "Body": "<p>I'm trying to copy a pointers data to another pointer, so that if I change one, the value in the other doesn't change.</p>\n<p>I need this because I am coding a loop where I have two struct pointers, value, and lastValue. In each iteration of the loop I assign <code>value</code>'s content to <code>lastValue</code>, and I fill <code>value</code> with new content. The problem is that because both are struct pointers, when I change <code>value</code>, <code>lastValue</code> changes too, and that's not the behavior I want. The code would be something like this (the structs are <code>IplImages</code> from OpenCV):</p>\n<pre><code>IplImage *value;\nIplimage *lastValue;\nwhile(1)\n{\n   lastValue=value;\n   value=cvQueryFrame( capture );//This fills the struct with new information\n}\n</code></pre>\n<p>This would work if they where normal structs, but because they are pointers, both end up with the same value. Is there a way to get a copy of a pointer, with the same value, but different address?</p>\n", "Tags": "<c++><c>", "LastEditDate": "2012-02-05T12:44:02.260", "LastActivityDate": "2012-02-06T15:08:05.840", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "1190588"}, "9149308": {"LastActivityDate": "2012-02-05T12:47:08.447", "CommentCount": "3", "Body": "<blockquote>\n<pre><code>    value=cvQueryFrame( capture );\n</code></pre>\n<p id=\"so_9149294_9149308_0\">when I change value, lastValue changes too</p>\n</blockquote>\n<p>No, it doesn't. The pointer <code>value</code> gets overwritten, as you desire. It is impossible for this line of code to affect <code>lastValue</code>.</p>\n<blockquote>\n<p id=\"so_9149294_9149308_1\">but because they are pointers, both end up with the same value</p>\n</blockquote>\n<p>No, it doesn't matter that they are pointers. Pointers are still objects in and of themselves.</p>\n<hr>\n<p><strong>However</strong>, <code>cvQueryFrame</code> returns a pointer to a buffer which <a href=\"http://www.cs.iit.edu/~agam/cs512/lect-notes/opencv-intro/opencv-intro.html\" rel=\"nofollow\">you shall not modify or free</a> as this is done for you:</p>\n<blockquote>\n<p id=\"so_9149294_9149308_2\">Note that the image captured by the device is allocated/released by the capture function. There is no need to release it explicitly. </p>\n</blockquote>\n<p>Though <a href=\"http://opencv.jp/opencv-1.0.0_org/docs/ref/opencvref_highgui.htm\" rel=\"nofollow\">the documentation</a> is a little unclear, it seems likely to me that the buffer is only valid until the next call to <code>cvQueryFrame</code> (which will then re-use the allocated memory). So even though <code>lastValue</code> can't and doesn't change, it <em>happens</em> to end up pointing to the new frame anyway.</p>\n<p>To get around this, you can explicitly copy the object that <code>lastValue</code> points to:</p>\n<pre><code>lastValue = cvCloneImage(value);\n</code></pre>\n<p><em>Now</em> you probably take on responsibility for freeing it (but again it's not entirely clear from my cursory glance at the documentation):</p>\n<pre><code>cvReleaseImage(&amp;lastValue);\n</code></pre>\n</hr>", "CreationDate": "2012-02-05T12:40:21.437", "LastEditDate": "2012-02-05T12:47:08.447", "ParentId": "9149294", "Id": "9149308", "LastEditorUserId": "560648", "PostTypeId": "2", "Score": "2", "OwnerUserId": "560648"}, "9162172": {"CommentCount": "0", "Body": "<p>The function <code>cvQueryFrame</code> grabs a frame from camera or video file, decompresses and returns it.  It returns the pointer to internal OpenCV buffer having the last grabbed frame. That should be the reason why you get the same value. If you want 2 frames, you should create a copy of the image.</p>\n<pre><code>IplImage * previousFrame, *currentFrame ;\nCvCapture* video = cvCaptureFromAVI(\"video.avi\");   \ncurrentFrame = cvQueryFrame( video );\n\n // COPY IMAGE\npreviousFrame  = cvCloneImage( currentFrame );\n\nwhile(currentFrame = cvQueryFrame( video ))\n{\n   //...\n   cvCopy( currentFrame , previousFrame); \n} \n//...\n</code></pre>\n", "CreationDate": "2012-02-06T15:08:05.840", "ParentId": "9149294", "Id": "9162172", "LastActivityDate": "2012-02-06T15:08:05.840", "PostTypeId": "2", "Score": "1", "OwnerUserId": "1154908"}});