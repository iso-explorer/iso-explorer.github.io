post_cb({"bq_ids": {"n4140": {"so_17221668_17222148_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 3274}, "so_17221668_17222286_4": {"length": 8, "quality": 0.6153846153846154, "section_id": 3274}, "so_17221668_17222286_3": {"length": 12, "quality": 0.8571428571428571, "section_id": 458}}, "n3337": {"so_17221668_17222148_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 3145}, "so_17221668_17222286_4": {"length": 10, "quality": 0.7692307692307693, "section_id": 3145}, "so_17221668_17222286_3": {"length": 12, "quality": 0.8571428571428571, "section_id": 449}}, "n4659": {"so_17221668_17222148_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 4032}, "so_17221668_17222286_4": {"length": 8, "quality": 0.6153846153846154, "section_id": 4032}, "so_17221668_17222286_3": {"length": 12, "quality": 0.8571428571428571, "section_id": 481}}}, "17222286": {"Id": "17222286", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_17221668_17222286_0\">In this post <a href=\"https://stackoverflow.com/a/17204598/260127\">https://stackoverflow.com/a/17204598/260127</a>, I have the comment:</p>\n<p id=\"so_17221668_17222286_1\">In C++11 you'll actually want to do <code>virtual ~A() = default;</code> Otherwise, you'll lose the implict move constructors.</p>\n</blockquote>\n<p><strong>The comment is incorrect.</strong></p>\n<p>Even <code>default</code>ed, that destructor is \"<em>user-declared</em>\" (though note that it is not also \"<em>user-provided</em>\").</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Helper\n{\n    Helper() {}\n    Helper(const Helper&amp; src) { std::cout &lt;&lt; \"copy\\n\"; }\n    Helper(Helper&amp;&amp; src)      { std::cout &lt;&lt; \"move\\n\"; }\n};\n\nstruct A\n{\n    virtual ~A() {}\n    Helper h;\n};\n\nstruct B\n{\n    virtual ~B() = default;\n    Helper h;\n};\n\nstruct C\n{\n    Helper h;\n};\n\n\nint main()\n{\n    {\n        A x;\n        A y(std::move(x));   // outputs \"copy\", because no move possible\n    }\n\n    {\n        B x;\n        B y(std::move(x));   // outputs \"copy\", because still no move possible\n    }\n\n    {\n        C x;\n        C y(std::move(x));   // outputs \"move\", because no user-declared dtor\n    } \n}\n</code></pre>\n<h2><a href=\"http://coliru.stacked-crooked.com/view?id=019a2763bb14bea2b9450121331f0f04-7063104e283ed82d51a6fde7370c6e59\" rel=\"nofollow noreferrer\">Live demo</a>:</h2>\n<blockquote>\n<p id=\"so_17221668_17222286_2\">+ g++-4.8 -std=c++11 -O2 -Wall -pthread main.cpp<br>\n  + ./a.out<br>\n  copy<br>\n  copy<br>\n  move</br></br></br></br></p>\n</blockquote>\n<p>So you haven't \"lost\" anything \u2014 there was no move functionality there to begin with!</p>\n<p>Here is the standard passage that prohibits an implicit move constructor in <em>both</em> cases:</p>\n<blockquote>\n<p id=\"so_17221668_17222286_3\"><code>[C++11: 12.8/9]:</code> If the definition of a class <code>X</code> does not explicitly declare a move constructor, one will be implicitly declared as defaulted if and only if</p>\n<ul>\n<li><code>X</code> does not have a user-declared copy constructor,</li>\n<li><code>X</code> does not have a user-declared copy assignment operator,</li>\n<li><code>X</code> does not have a user-declared move assignment operator,</li>\n<li><strong><code>X</code> does not have a user-declared destructor</strong>, and</li>\n<li>the move constructor would not be implicitly defined as deleted.</li>\n</ul>\n</blockquote>\n<hr>\n<h3>Bootnote</h3>\n<p>It wouldn't hurt if a future version of the standard actually listed the precise meanings of terms such as \"user-declared\". There is, at least, this:</p>\n<blockquote>\n<p id=\"so_17221668_17222286_4\"><code>[C++11: 8.4.2/4]:</code> <em>[..]</em> A special member function is <em>user-provided</em> if it is user-declared and not explicitly defaulted or deleted on its first declaration. <em>[..]</em></p>\n</blockquote>\n<p>One may assume the distinction here by implication.</p>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2013-06-20T19:45:33.667", "Score": "27", "CreationDate": "2013-06-20T19:33:17.557", "ParentId": "17221668", "CommentCount": "5", "LastEditDate": "2017-05-23T12:14:02.060", "OwnerUserId": "560648"}, "17221668": {"ViewCount": "1743", "Body": "<p>In Stack Overflow post <em><a href=\"https://stackoverflow.com/a/17204598/260127\">Checking the object type in C++11</a></em>, I have the comment:</p>\n<blockquote>\n<p id=\"so_17221668_17221668_0\">In C++11 you'll actually want to do <code>virtual ~A() = default;</code> Otherwise, you'll lose the implict move constructors.</p>\n</blockquote>\n<p>What is <code>virtual ~A() = default;</code> for? How come implicit move constructors lost with <code>virtual ~A() {}</code>?</p>\n", "AcceptedAnswerId": "17222148", "Title": "Why do we need to use virtual ~A() = default; instead of virtual ~A() {} in C++11?", "CreationDate": "2013-06-20T19:00:34.903", "Id": "17221668", "CommentCount": "2", "FavoriteCount": "12", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:51:12.163", "LastEditorUserId": "-1", "LastActivityDate": "2015-07-28T12:52:14.170", "Score": "49", "OwnerUserId": "260127", "Tags": "<c++><c++11><destructor><virtual-functions>", "AnswerCount": "3"}, "17221752": {"Id": "17221752", "PostTypeId": "2", "Body": "<p>That comment is wrong.</p>\n<p>Instead of providing your own move constructor, if you want the compiler to provide one, one of the requirements is that it expects that the destructor is also provided by it i.e. a trivial destructor. However, the current standard is pretty strict on when an implicit implementation can be provided \u2014 in accepting how a destructor is given by the user. Anything declared by the user is considered that the user is taking the matter into their own hands and thus not only this</p>\n<pre><code>~A() { \u2026 }\n</code></pre>\n<p>but also this</p>\n<pre><code>~A() = default;\n</code></pre>\n<p>makes the compiler not provide an implicit destructor. First is a definition and thus a declaration too; second is just a declaration. In both cases the destructor is user-declared and thus prohibits the compiler from providing an implicit move constructor.</p>\n<p>I guess the rationale behind the requirement is that during <em>move</em> an object's resources are moved to another object leaving the original object in a state where it has no resources in dynamic-storage; but if your class doesn't have any such resources then it can be trivially moved, destroyed, etc. When you declare a non-trivial destructor it's a cue for the compiler that the resources you manage in the class are not something trivial and that you'd mostly have to provide non-trivial <em>move</em> too, so the compiler doesn't provide one.</p>\n", "LastEditorUserId": "183120", "LastActivityDate": "2015-07-28T12:52:14.170", "Score": "5", "CreationDate": "2013-06-20T19:05:46.240", "ParentId": "17221668", "CommentCount": "3", "LastEditDate": "2015-07-28T12:52:14.170", "OwnerUserId": "183120"}, "17222148": {"Id": "17222148", "PostTypeId": "2", "Body": "<p>The comment is not correct.</p>\n<p>Both:</p>\n<pre><code>virtual ~A() = default;\n</code></pre>\n<p>and</p>\n<pre><code>virtual ~A() {}\n</code></pre>\n<p>are user <strong>declared</strong>.  And the implicit move members are inhibited if the destructor is user declared.</p>\n<p>[dcl.fct.def.default]/p4 discusses <em>user-declared</em> and <em>user-provided</em> special members:</p>\n<blockquote>\n<p id=\"so_17221668_17222148_0\">A special member function is <em>user-provided</em> if it is user-declared and\n  not explicitly defaulted or deleted on its first declaration.</p>\n</blockquote>\n", "LastEditorUserId": "576911", "LastActivityDate": "2013-06-20T19:36:18.550", "Score": "42", "CreationDate": "2013-06-20T19:26:19.367", "ParentId": "17221668", "CommentCount": "6", "LastEditDate": "2013-06-20T19:36:18.550", "OwnerUserId": "576911"}});