post_cb({"34985675": {"ParentId": "34965820", "PostTypeId": "2", "CommentCount": "4", "Body": "<p><strong>Update</strong>: What I said below about Windows' permissions is true, but for some reason even the <code>FILE_ATTRIBUTE_READONLY</code> bit doesn't appear to be working. I'll file a bug :)</p>\n<p>As a workaround for now you can do a <code>status()</code> on the resulting path record, e.g.</p>\n<pre><code>#include &lt;filesystem&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nusing namespace std::tr2::sys;\n\nint main() {\n    path dir = canonical(\".\");\n    for (auto&amp; p : recursive_directory_iterator(dir)) {\n        if (is_regular_file(p))\n            cout &lt;&lt; file_size(p);\n        file_status stat = status(p); // Workaround bug in MSVC++2015\n        perms pe = stat.permissions();  // get authorizations\n        cout &lt;&lt;\"\\t\"&lt;&lt; ((pe &amp; perms::owner_read) != perms::none ? \"r\" : \"-\")\n            &lt;&lt; ((pe &amp; perms::owner_write) != perms::none ? \"w\" : \"-\");\n        cout &lt;&lt;\"\\t\" &lt;&lt; p &lt;&lt; endl;\n    }\n}\n</code></pre>\n<p>on my system produces:</p>\n<pre><code>PS C:\\Users\\bion\\Desktop\\test&gt; ..\\fs.exe\n68494859        r-      C:\\Users\\bion\\Desktop\\test\\read-only.mp3\n93805063        rw      C:\\Users\\bion\\Desktop\\test\\read-write.mp3\nPS C:\\Users\\bion\\Desktop\\test&gt;\n</code></pre>\n<hr>\n<blockquote>\n<p id=\"so_34965820_34985675_0\">Bitwise &amp; on the perms object: The compiler complains with a C2440 error about a missing conversion from perms to bool. But this should be allowed according to specs. Is this a bug or did I miss something ? </p>\n</blockquote>\n<p>Bitwise <code>&amp;</code> is supported through an overloaded <code>operator&amp;</code> and should work fine. There is no conversion to bool. If you want a conversion to bool, the right way to do that is to compare with a constant declared by that <code>enum class</code>, e.g.:</p>\n<pre><code>if ((permsVar &amp; perms::owner_read) != perms::none)\n</code></pre>\n<p>or with a direct-initialized instance of that enum class:</p>\n<pre><code>if ((permsVar &amp; perms::owner_read) != perms{})\n</code></pre>\n<p>[bitmask.types] only says:</p>\n<blockquote>\n<p id=\"so_34965820_34985675_1\">The value Y is set in the object X if the expression X &amp; Y is nonzero.</p>\n</blockquote>\n<p>not that there is some conversion from the literal <code>0</code> you can use to compare with the <code>enum class</code>.</p>\n<blockquote>\n<p id=\"so_34965820_34985675_2\">I cirumvented the issue by converting pe an unsigned. There I noted that the value is always 0xffff, for every files, including a file where I have intentionally withdrawn writing authorisations. Will a constant dummy value be returned for permissions on windows systematically or did I forget something to get the valid permissions ? </p>\n</blockquote>\n<p>Windows' permissions model really has no analogue to the Unix permissions model -- security descriptors do have owner and group owner values, but there's no generally accepted convention to map between Windows DACLs (which can express much finer-grained permission constructs than Unix permissions) and Unix permissions.</p>\n<p>As a result, at present we just look for the readonly attribute, or for one specific set of attributes, and if it isn't that we \"punt\" and say that the permissions are unknown. If you want to be portable, you need to do something with the unknown constant.</p>\n<pre><code>        // FILE STATUS FUNCTIONS\n_FS_DLL _File_type __CLRCALL_PURE_OR_CDECL _Stat(const TCHAR *_Fname, _Perms *_Pmode)\n    {   // get file status\n    WIN32_FILE_ATTRIBUTE_DATA _Data;\n\n    if (TFUN(GetFileAttributesEx)(_Fname, GetFileExInfoStandard, &amp;_Data))\n        {   // get file type and return permissions\n        // !!! Here's where we check\n        if (_Pmode != 0)\n            *_Pmode = _Data.dwFileAttributes &amp; FILE_ATTRIBUTE_READONLY\n                ? READONLY_PERMS : perms::all;\n        return (_Map_mode(_Data.dwFileAttributes));\n        }\n    else\n        {   // invalid, get error code\n        // error mapping code omitted\n        }\n    }\n</code></pre>\n<p>What would you expect us to do with a security descriptor like:</p>\n<pre><code>O:BAG:SYD:PAI(A;;WD;;;WD)(A;;FA;;;S-1-5-21-2127521184-1604012920-1887927527-9342113)(A;;0x4;;;BA)\n</code></pre>\n<p>which says:</p>\n<p><strong>O:BA</strong>: The owner is <code>BUILTIN\\ADMINISTRATORS</code>.<br>\n<strong>G:SY</strong>: The group owner is <code>NT AUTHORITY\\LOCAL SYSTEM</code>. Note that the group is not generally used at all in Windows permissions and exists only for compatibility with Interix, in which case Interix is the only one reading or writing the security descriptor and as such can do whatever it wants. :)<br>\n<strong>D:PAI</strong>: The DACL is <code>DACL_PROTECTED</code> (doesn't inherit permissions from parents) and <code>DACL_AUTO_INHERIT</code> (participates in the normal permissions inheritance system; e.g. children of this filesystem object will inherit permissions from this)</br></br></p>\n<ul>\n<li><strong>(A;;WD;;;WD)</strong>: Grant <code>WRITE_DAC</code> (permission to change the DACL part of the security descriptor) access to <code>WORLD\\EVERYONE</code>. Hmm, <code>WRITE_DAC</code> isn't read, write, or execute, so what would we do there?</li>\n<li><strong>(A;;FA;;;S-1-5-21-2127521184-1604012920-1887927527-9342113)</strong>: Grant <code>FILE_ALL_ACCESS</code> to <code>REDMOND\\bion</code>. Note that I am not the owner, the group owner, or \"others\" so how would you map this?</li>\n<li><strong>(A;;0x4;;;BA)</strong> Grant <code>FILE_APPEND_DATA</code> to <code>BUILTIN\\ADMINISTRATORS</code>. That's kind of like write, but doesn't allow you to change content already in the file...</li>\n</ul>\n<p>(And I'm leaving out a bunch of stuff like Mandatory Access Control....)</p>\n<p>I'm not saying that we couldn't try to do better at this mapping, but if you need to do nontrivial permissions work the <code>&lt;filesystem&gt;</code> TS can't really help you on systems that support access control lists.</p>\n</hr>", "OwnerUserId": "82320", "LastEditorUserId": "82320", "LastEditDate": "2016-01-25T21:47:25.830", "Id": "34985675", "Score": "3", "CreationDate": "2016-01-25T05:25:59.410", "LastActivityDate": "2016-01-25T21:47:25.830"}, "bq_ids": {"n4140": {"so_34965820_34985675_1": {"section_id": 6236, "quality": 0.8333333333333334, "length": 5}}, "n3337": {"so_34965820_34985675_1": {"section_id": 5996, "quality": 0.8333333333333334, "length": 5}}, "n4659": {"so_34965820_34985675_1": {"section_id": 7740, "quality": 0.8333333333333334, "length": 5}}}, "34965820": {"CommentCount": "4", "ViewCount": "861", "PostTypeId": "1", "LastEditorUserId": "636019", "CreationDate": "2016-01-23T16:21:58.033", "LastActivityDate": "2016-01-25T21:47:25.830", "Title": "Experimental C++17 filesystem on MSVC2015: inconsistencies with permissions", "FavoriteCount": "1", "LastEditDate": "2016-01-24T03:56:17.893", "Id": "34965820", "Score": "3", "Body": "<p>I'm trying to use the experimental <a href=\"http://en.cppreference.com/w/cpp/experimental/fs\" rel=\"nofollow\"><code>&lt;filesystem&gt;</code></a> library that should become part of C++17 (See draft technical spec <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf\" rel=\"nofollow\">N4100</a>) on <a href=\"https://msdn.microsoft.com/en-us/library/hh874694.aspx\" rel=\"nofollow\">MSVC2015</a> (update 1). </p>\n<p>I could manage to display full content of a directory recursively:  </p>\n<pre><code>    using namespace std::tr2::sys;\n    ...\n    path dir = canonical(\".\");\n    for (auto&amp; p : recursive_directory_iterator(dir)) {\n        if (is_regular_file(p))                \n            cout &lt;&lt; file_size(p);               \n        perms pe = p.status().permissions();  // get authorisations\n        cout &lt;&lt;\"\\t\"&lt;&lt; (pe &amp; perms::owner_read ? \"r\" : \"-\") // &lt;== error should be allowed\n            &lt;&lt; (pe &amp; perms::owner_write ? \"w\" : \"-\");\n        cout &lt;&lt;\"\\t\" &lt;&lt; p &lt;&lt; endl;     \n    }\n</code></pre>\n<p>Problems and questions: </p>\n<ol>\n<li><p>Bitwise <code>&amp;</code> on the <a href=\"http://en.cppreference.com/w/cpp/experimental/fs/perms\" rel=\"nofollow\"><code>perms</code></a> object: The compiler complains with a <a href=\"https://msdn.microsoft.com/en-us/library/sy5tsf8z.aspx\" rel=\"nofollow\">C2440 error</a> about a missing conversion from perms to bool.  But this should be allowed according to specs.  Is this a bug or did I miss something ?  </p></li>\n<li><p>I cirumvented the issue by converting <code>pe</code> an unsigned.  There I noted that the value is always <code>0xffff</code>, for every files, including a file where I have intentionally withdrawn writing authorisations. Will a constant dummy value be returned for permissions on windows systematically or did I forget something to get the valid permissions ?      </p></li>\n</ol>\n", "Tags": "<c++><visual-c++><visual-studio-2015><c++1z>", "OwnerUserId": "3723423", "AnswerCount": "1"}});