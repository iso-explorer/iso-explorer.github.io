post_cb({"25594644": {"ViewCount": "4022", "Body": "<p>With the following piece of code I get the warning:</p>\n<p><code>warning: specialization of \u2018template&lt;class _Iterator&gt; struct std::iterator_traits\u2019 in different namespace [-fpermissive]</code></p>\n<pre><code>template&lt;&gt; class std::iterator_traits&lt;Token_ptr&gt;{\npublic:\n    typedef Word difference_type;\n    typedef Word value_type;\n    typedef Token_ptr pointer;\n    typedef Word&amp; reference ;\n    typedef std::bidirectional_iterator_tag iterator_category ;\n};\n</code></pre>\n<p>While everything works correctly, does any body know what exactly means and why is issued the warning.\n( g++ issues the warning while clang++ doesn't ).</p>\n", "AcceptedAnswerId": "25594741", "Title": "warning: specialization of template in different namespace", "CreationDate": "2014-08-31T17:46:49.730", "Id": "25594644", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2014-08-31T18:16:06.423", "LastEditorUserId": "2756719", "LastActivityDate": "2014-08-31T18:16:06.423", "Score": "6", "OwnerUserId": "3127336", "Tags": "<c++>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_25594644_25594741_0": {"length": 35, "quality": 0.9459459459459459, "section_id": 264}}, "n3337": {"so_25594644_25594741_0": {"length": 35, "quality": 0.9459459459459459, "section_id": 255}}}, "25594681": {"PostTypeId": "2", "Body": "<p>There is one visible problem here, and one potentially invisible problem.  The visible problem is that this code is not in a <code>namespace std</code> block.  To specialize a template, you need to be within the namespace of the template you are specializing.  Providing the namespace name as part of the type doesn't actually work in this case.  So you need to do this:</p>\n<pre><code>namespace std\n{\n    template&lt;&gt; class iterator_traits&lt;Token_ptr&gt;{\n    public:\n        typedef Word difference_type;\n        typedef Word value_type;\n        typedef Token_ptr pointer;\n        typedef Word&amp; reference ;\n        typedef std::bidirectional_iterator_tag iterator_category ;\n    };\n}\n</code></pre>\n<p>The other potential problem is that this code may already be inside of another <code>namespace</code> block (I can't tell because this is presumably not the entire source file).  If it is, you need to close that namespace block first so that <code>namespace std</code> is not nested within any other namespace blocks.</p>\n<p>Further reading: <a href=\"https://stackoverflow.com/q/2282349/501250\">Specialization of 'template&lt;class _Tp&gt; struct std::less' in different namespace</a></p>\n", "LastActivityDate": "2014-08-31T17:51:53.010", "LastEditorUserId": "-1", "Id": "25594681", "CommentCount": "0", "CreationDate": "2014-08-31T17:51:53.010", "ParentId": "25594644", "Score": "4", "OwnerUserId": "501250", "LastEditDate": "2017-05-23T12:18:14.363"}, "25594741": {"PostTypeId": "2", "Body": "<p>Assuming that you are compiling this in C++11 mode (since clang gave no warning) and that this specialization is in the global namespace, then there's nothing wrong with your code. It's a g++ bug. \u00a714.7.3 [temp.expl.spec]/p2:</p>\n<blockquote>\n<p id=\"so_25594644_25594741_0\">An explicit specialization shall be declared in a namespace enclosing\n  the specialized template. An explicit specialization whose\n  <em>declarator-id</em> is not qualified shall be declared in the nearest enclosing namespace of the template, or, if the namespace is inline\n  (7.3.1), any namespace from its enclosing namespace set. Such a\n  declaration may also be a definition. If the declaration is not a\n  definition, the specialization may be defined later (7.3.1.2).</p>\n</blockquote>\n<p>The global namespace is a \"namespace enclosing the specialized template\", and your <em>declarator-id</em> is qualified with <code>std::</code>, so the second sentence doesn't apply. As a workaround, you can do what <a href=\"https://stackoverflow.com/a/25594681/2756719\">cdhowie</a>'s answer suggests - i.e., opening a <code>namespace std</code> block and putting the specialization there. </p>\n<p>See <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#374\" rel=\"nofollow noreferrer\">CWG issue 374</a> and <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56480\" rel=\"nofollow noreferrer\">GCC bug 56480</a>.</p>\n", "LastActivityDate": "2014-08-31T18:05:09.527", "LastEditorUserId": "-1", "Id": "25594741", "CommentCount": "1", "CreationDate": "2014-08-31T17:59:40.760", "ParentId": "25594644", "Score": "12", "OwnerUserId": "2756719", "LastEditDate": "2017-05-23T11:55:06.673"}});