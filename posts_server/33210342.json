post_cb({"33210413": {"ParentId": "33210342", "PostTypeId": "2", "CommentCount": "3", "Body": "<blockquote>\n<p id=\"so_33210342_33210413_0\">I belive when the parent destructor is called, the child has already been destructed</p>\n</blockquote>\n<p><strong>\u00a7 12.4.8</strong> is gonna become my favorite standard quote.</p>\n<blockquote>\n<p id=\"so_33210342_33210413_1\">After executing the body of the destructor and destroying any automatic objects allocated within the body, a destructor for class X calls the destructors for X's direct non-variant non-static data members(...)</p>\n</blockquote>\n<p>The destructors for members are executed <strong>after</strong> the body of the class dtor, so it's safe to call a member's member function.</p>\n<h1>that being said...</h1>\n<p>In your case, while <code>mp</code> is perfectly valid, the value it's pointing to is not. Since <code>parent</code> destructor runs after the <code>child</code> destructor, the value of which child was the owner is destroyed as well, leaving parent with a dangling pointer.</p>\n", "OwnerUserId": "752976", "LastEditorUserId": "752976", "LastEditDate": "2015-10-19T09:32:43.787", "Id": "33210413", "Score": "2", "CreationDate": "2015-10-19T08:59:43.407", "LastActivityDate": "2015-10-19T09:32:43.787"}, "33210945": {"ParentId": "33210342", "CommentCount": "0", "Body": "<p>It is not correct.</p>\n<p>The sequence of destructor calls:</p>\n<ol>\n<li><code>child</code> destructor</li>\n<li><code>object</code> destructor (as it is a member of <code>child</code> class)</li>\n<li><code>parent</code> destructor</li>\n</ol>\n<p>Look at this: parent keeps a pointer to <code>object</code> that is a member of <code>child</code> class.</p>\n<pre><code>child():m(\"hello\"){\n    parent::mp=&amp;m;\n}\n</code></pre>\n<p>So, <code>object</code> is already destructed when you try to access it through a pointer in <code>parent</code> destructor:</p>\n<pre><code>~parent(){\n    cout&lt;&lt;\"hello\"&lt;&lt;endl;\n    cout&lt;&lt;mp-&gt;get_name();  //!!!! this is incorrect\n}\n</code></pre>\n", "OwnerUserId": "194635", "PostTypeId": "2", "Id": "33210945", "Score": "1", "CreationDate": "2015-10-19T09:26:37.803", "LastActivityDate": "2015-10-19T09:26:37.803"}, "bq_ids": {"n4140": {"so_33210342_33210413_1": {"section_id": 404, "quality": 1.0, "length": 19}}, "n3337": {"so_33210342_33210413_1": {"section_id": 395, "quality": 1.0, "length": 19}}, "n4659": {"so_33210342_33210413_1": {"section_id": 422, "quality": 1.0, "length": 19}}}, "33210342": {"CommentCount": "1", "ViewCount": "77", "CreationDate": "2015-10-19T08:56:01.137", "LastActivityDate": "2015-10-19T09:32:43.787", "Title": "Parent hold pointer to child data member and used the data member function in destructor", "AcceptedAnswerId": "33210413", "PostTypeId": "1", "Id": "33210342", "Score": "0", "Body": "<p>I believe I found a bug for existing code but it actually works. Could you help to verify if my understand is correct?</p>\n<p>It is about a parent class holding an object pointer which points to its child class' data object. And in its(the parent) destructor, it uses the object pointer for function accessing. I belive when the parent destructor is called, the child has already been destructed so the object which the parent pointer pointing to is not valid any more. I make a example below:</p>\n<p>My question for code below is that if the parent destructor is correct?</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nclass object {\npublic:\n\n    object(string na):name(na){}\n\n    string get_name(){\n        return name;\n    }\n\nprivate:\n    string name;\n};\n\nclass parent {\n\npublic:\n\n    ~parent(){\n        cout&lt;&lt;\"hello\"&lt;&lt;endl;\n        cout&lt;&lt;mp-&gt;get_name();  **//!!!! (is this correct use mp here?)**\n    }\nprotected:\n    object* mp;\n\n};\n\n\nclass child:public parent {\n\npublic:\n\n    child():m(\"hello\"){\n        parent::mp=&amp;m;\n    }\n\n\nprivate:\n    object m;\n};\n\nint main()\n{\n\n child a;\n\n return 0;\n}\n</code></pre>\n", "Tags": "<c++><pointers><constructor><destructor>", "OwnerUserId": "2612857", "AnswerCount": "2"}});