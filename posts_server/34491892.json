post_cb({"bq_ids": {"n4140": {"so_34491892_34492744_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 6030}}, "n3337": {"so_34491892_34492744_0": {"length": 29, "quality": 0.9666666666666667, "section_id": 5798}}}, "34492744": {"CommentCount": "1", "Body": "<p>Your code is perfectly legal according to the clause 5.2.9/4 of C++ standard:</p>\n<blockquote>\n<p id=\"so_34491892_34492744_0\">An expression <code>e</code> can be explicitly converted to a type <code>T</code> using a\n  <code>static_cast</code> of the form <code>static_cast&lt;T&gt;(e)</code> if the declaration <code>T t(e);</code>\n  is well-formed, for some invented temporary variable t (8.5). The\n  effect of such an explicit conversion is the same as performing the\n  declaration and initialization and then using the temporary variable\n  as the result of the conversion.</p>\n</blockquote>\n<p>For your example <code>T</code> is <code>std::string</code>, <code>e</code> is <code>cp</code>. There is no casting away constness because of new object creation. Compare with this:</p>\n<pre><code>char* p = static_cast&lt;char*&gt;(cp); // error\n</code></pre>\n", "CreationDate": "2015-12-28T11:32:47.887", "ParentId": "34491892", "Id": "34492744", "LastActivityDate": "2015-12-28T11:32:47.887", "PostTypeId": "2", "Score": "1", "OwnerUserId": "3240681"}, "34491892": {"CreationDate": "2015-12-28T10:35:15.177", "ViewCount": "108", "Id": "34491892", "AcceptedAnswerId": "34491979", "Score": "1", "Title": "Is this casting away const?", "CommentCount": "3", "Body": "<pre><code>const char cp[]=\"jkasdkasjsad\";\nstring a=static_cast&lt;string&gt;(cp);//\"const string a\" also runs without any error\n</code></pre>\n<p>I have stuck at the above code for the whole afternoon. C++ Primer only give a code like </p>\n<pre><code>const char cp[]=\"jkasdkasjsad\";\nstatic_cast&lt;string&gt;(cp);\n</code></pre>\n<p>Could someone tell me is my code legal? Could I call it \"cast away const\" since no \"const\" before \"string a\"?  <br/></p>\n<blockquote>\n<p id=\"so_34491892_34491892_0\">Any well-defined type conversion, other than those involving low-level const, can be\n  requested using a <code>static_cast</code>. For example, we can force our expression to use\n  floating-point division by casting one of the operands to double:</p>\n</blockquote>\n<p>I was confused about the description above, what does \"those involing low-level const\" mean? Involving at left side or right side of an assignment? \nAnyone can save me.. Many thanks!</p>\n", "Tags": "<c++><casting>", "LastActivityDate": "2015-12-28T11:32:47.887", "PostTypeId": "1", "AnswerCount": "3", "OwnerUserId": "5405040"}, "34491979": {"CommentCount": "3", "Body": "<p>Your string from <code>cp</code> array is being copied, string variable is not const</p>\n<pre><code>const char cp[] = \"jkasdkasjsad\";\nstd::string a = static_cast&lt;std::string&gt;(cp);\n</code></pre>\n<p>is equivalent to:</p>\n<pre><code>std::string ab = cp;\n</code></pre>\n<p><code>cp</code> decays to pointer to first element of <code>cp</code> array</p>\n", "CreationDate": "2015-12-28T10:41:40.540", "ParentId": "34491892", "Id": "34491979", "LastActivityDate": "2015-12-28T10:41:40.540", "PostTypeId": "2", "Score": "2", "OwnerUserId": "471160"}, "34491921": {"LastActivityDate": "2015-12-28T10:45:55.287", "CommentCount": "4", "Body": "<p>There is no real casting at all in this case.</p>\n<pre><code>static_cast&lt;string&gt;(cp);\n</code></pre>\n<p>is equivalent to call to string constructor</p>\n<pre><code>string(cp);\n</code></pre>\n<p>Temporary variable of type <code>string</code> constructed from <code>cp</code> will be returned from <code>static_cast</code>. Since, I think we talk about <a href=\"http://en.cppreference.com/w/cpp/string/basic_string/basic_string\" rel=\"nofollow\">std::string</a>, than this constructor will be called</p>\n<pre><code>basic_string( const CharT* s,\n              const Allocator&amp; alloc = Allocator() );\n</code></pre>\n<blockquote>\n<p id=\"so_34491892_34491921_0\">Constructs the string with the contents initialized with a copy of the\n  null-terminated character string pointed to by s. The length of the\n  string is determined by the first null character.</p>\n</blockquote>\n", "CreationDate": "2015-12-28T10:37:14.237", "LastEditDate": "2015-12-28T10:45:55.287", "ParentId": "34491892", "Id": "34491921", "LastEditorUserId": "1498580", "PostTypeId": "2", "Score": "2", "OwnerUserId": "1498580"}});