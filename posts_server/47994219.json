post_cb({"47995734": {"Id": "47995734", "PostTypeId": "2", "Body": "<p>The anonymous nested struct declares a new class object, so any bitfields within it will be independent of any bitfields in the outer class.  Within a class, bitfields are \"packed into some addressable allocation unit\".  This packing does not span distinct objects within a class.</p>\n<p>Then there's this from [class.bit] in the language spec:</p>\n<blockquote>\n<p id=\"so_47994219_47995734_0\">Allocation of bit-fields within a class object is implementation-defined. Alignment of bit-fields is implementation-defined.</p>\n</blockquote>\n<p>which means the compiler is free to do with bitfields whatever it feels like (although this behavior does need to be documented).</p>\n", "LastActivityDate": "2017-12-27T16:45:51.117", "CommentCount": "0", "CreationDate": "2017-12-27T16:45:51.117", "ParentId": "47994219", "Score": "0", "OwnerUserId": "5231607"}, "bq_ids": {"n4140": {"so_47994219_47995734_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 5921}}, "n3337": {"so_47994219_47995734_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 5693}}, "n4659": {"so_47994219_47995734_0": {"length": 7, "quality": 0.7777777777777778, "section_id": 7395}}}, "47994219": {"ViewCount": "58", "Body": "<p>I'm using g++ (GCC) 4.7.2.20121109 and I'd like to have a nested struct aligned with bit boundary. Let me give an example:</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\ntypedef struct {\n   unsigned int a : 1;\n   unsigned int b : 7;\n} __attribute__( ( packed ) ) myType1;\n\ntypedef struct {\n   unsigned int a : 1;\n   struct {\n      unsigned int b : 7;\n   } __attribute__( ( packed ) );\n} __attribute__( ( packed ) ) myType2;\n\nint main(void)\n{\n   cout &lt;&lt; \"sizeof( myType1 ) = \" &lt;&lt; sizeof( myType1 ) &lt;&lt; endl;\n   cout &lt;&lt; \"sizeof( myType2 ) = \" &lt;&lt; sizeof( myType2 ) &lt;&lt; endl;\n}\n</code></pre>\n<p>Compiling with <em>\"g++ filename.cpp -o output\"</em>, gives me:</p>\n<pre><code>sizeof( myType1 ) = 1\nsizeof( myType2 ) = 2\n</code></pre>\n<p>myType1 has the size that I'm expecting but myType2 hasn't. I'd like that sizeof( myType2 ) were 1 instead of 2. Is it possible?</p>\n", "Title": "Nested struct bitfield alignment in GCC", "CreationDate": "2017-12-27T14:53:50.503", "LastActivityDate": "2017-12-27T16:45:51.117", "CommentCount": "5", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-12-27T15:08:23.257", "LastEditorUserId": "2666289", "Id": "47994219", "Score": "3", "OwnerUserId": "8396518", "Tags": "<c++><gcc>", "AnswerCount": "1"}});