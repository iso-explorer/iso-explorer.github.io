post_cb({"bq_ids": {"n4140": {"so_40445685_40445875_0": {"length": 6, "quality": 1.0, "section_id": 2465}, "so_40445685_40445875_2": {"length": 5, "quality": 1.0, "section_id": 2425}, "so_40445685_40445875_1": {"length": 16, "quality": 0.8421052631578947, "section_id": 2466}, "so_40445685_40445875_3": {"length": 9, "quality": 0.9, "section_id": 2426}}, "n3337": {"so_40445685_40445875_0": {"length": 6, "quality": 1.0, "section_id": 2450}, "so_40445685_40445875_2": {"length": 5, "quality": 1.0, "section_id": 2410}, "so_40445685_40445875_1": {"length": 16, "quality": 0.8421052631578947, "section_id": 2451}, "so_40445685_40445875_3": {"length": 9, "quality": 0.9, "section_id": 2411}}, "n4659": {"so_40445685_40445875_0": {"length": 6, "quality": 1.0, "section_id": 2741}, "so_40445685_40445875_2": {"length": 4, "quality": 0.8, "section_id": 2700}, "so_40445685_40445875_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 2742}, "so_40445685_40445875_3": {"length": 9, "quality": 0.9, "section_id": 2701}}}, "40445875": {"Id": "40445875", "PostTypeId": "2", "Body": "<p>First Bug: You are opening the input file twice. Per the C++ standard, regarding the behavior of your second open request (the direct call to the <code>open</code> member):</p>\n<p><strong>C++11 \u00a7 27.9.1.9 [ifstream.members/3]</strong></p>\n<blockquote>\n<p id=\"so_40445685_40445875_0\"><code>void open(const char* s, ios_base::openmode mode = ios_base::in);</code></p>\n<p id=\"so_40445685_40445875_1\">Effects: Calls <code>rdbuf()-&gt;open(s, mode | ios_base::in)</code>. If that function\n  does not return a null pointer calls clear(), <strong>otherwise calls\n  setstate(failbit)</strong> (which may throw ios_base::failure (27.5.5.4)).</p>\n</blockquote>\n<p>which therefore asks the question, what does <code>rdbuf()-&gt;open(...)</code> do ? Well, a <code>std::ifstream</code> uses a <code>filebuf</code> for it's buffering, and once again, per the standard:</p>\n<p><strong>C++11 \u00a727.9.1.4 [filebuf.members/2]</strong></p>\n<blockquote>\n<p id=\"so_40445685_40445875_2\"><code>basic_filebuf&lt;charT,traits&gt;* open(const char* s, ios_base::openmode mode);</code></p>\n<p id=\"so_40445685_40445875_3\">Effects: <strong>If <code>is_open()</code> != false, returns a null pointer</strong>. Otherwise, initializes the filebuf as required. ...</p>\n</blockquote>\n<p>In short, your double-open is putting your stream into a fail-state, which means all data-related operations with it are going to fail outright from that point on.</p>\n<hr>\n<p>Second Bug: Improper use of .eof in a loop conditional expression. you'll run into this once you fix the first bug. The reasons this is not being done correctly are explained in the following question far better than I can explain it here. </p>\n<p><a href=\"https://stackoverflow.com/questions/5605125/why-is-iostreameof-inside-a-loop-condition-considered-wrong\">Why is iostream::eof inside a loop condition considered wrong?</a></p>\n<p>Suffice it to say, check your IO operations, not just the eof-state of the stream. Get into that habit and stick with it.</p>\n<p>Fixing both, your code can literally be reduced to simply this:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n\nint main()\n{\n    std::ifstream inputFile(\"testfile1.txt\");\n    std::string str;\n    while (std::getline(inputFile, str))\n        std::cout &lt;&lt; str &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Obviously if you're shooting for more robust code, you probably want to perform some error handling in there, something like:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n#include &lt;cstdlib&gt;\n\nint main()\n{\n    std::ifstream inputFile(\"testfile1.txt\");\n    if (!inputFile)\n    {\n        std::cerr &lt;&lt; \"Failed to open file\\n\";\n        return EXIT_FAILURE;\n    }\n\n    std::string str;\n    while (std::getline(inputFile, str))\n        std::cout &lt;&lt; str &lt;&lt; std::endl;\n}\n</code></pre>\n</hr>", "LastEditorUserId": "1322972", "LastActivityDate": "2016-11-06T04:26:37.107", "Score": "1", "CreationDate": "2016-11-06T04:06:41.650", "ParentId": "40445685", "CommentCount": "0", "LastEditDate": "2016-11-06T04:26:37.107", "OwnerUserId": "1322972"}, "40445693": {"Id": "40445693", "PostTypeId": "2", "Body": "<p>Translate the while statement: \"While inputFile is at End Of File\" .. you want the negation of that.</p>\n", "LastActivityDate": "2016-11-06T03:27:10.537", "Score": "-1", "CreationDate": "2016-11-06T03:27:10.537", "ParentId": "40445685", "CommentCount": "1", "OwnerUserId": "3419129"}, "40445685": {"ViewCount": "95", "Body": "<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main()\n{\n    //reading the text file\n    ifstream inputFile(\"testfile1.txt\");\n    inputFile.open(\"testfile1.txt\");\n    while(!inputFile.eof())\n    //eof till end of file, reads the txt till end of file\n    {\n        string str;\n        getline(inputFile,str);\n        cout &lt;&lt;str&lt;&lt; endl;\n\n    }\n        inputFile.close();\n\n    return 0;\n}\n</code></pre>\n<p>// The problem that i am having is that it doesn not read the file or anything in it. Doing nothing it says Program ended with exit code: 0. Could anyone check the mistake in the code</p>\n", "Title": "Error in reading from a .txt file in c++", "CreationDate": "2016-11-06T03:24:34.860", "LastActivityDate": "2016-11-06T04:26:37.107", "CommentCount": "8", "LastEditDate": "2016-11-06T03:31:06.273", "PostTypeId": "1", "LastEditorUserId": "5648557", "Id": "40445685", "Score": "0", "OwnerUserId": "5648557", "Tags": "<c++><xcode><c++11>", "AnswerCount": "3"}, "40445830": {"Id": "40445830", "PostTypeId": "2", "Body": "<p>This is the correct way to read a file according to this <a href=\"https://gehrcke.de/2011/06/reading-files-in-c-using-ifstream-dealing-correctly-with-badbit-failbit-eofbit-and-perror/\" rel=\"nofollow noreferrer\" title=\"here\">article</a>!\nThe problem in your code it seems that you are using an IDE and it cannot find the path you are giving to ifstream so try to give a full path to the file. Hope it can help u.</p>\n<pre><code>string line;\nifstream f(\"/YOUPARTH/testfile1.txt\");\nif (!f.is_open())\n    perror(\"error while opening file\");\nwhile(getline(f, line)) {\n   cout &lt;&lt; line &lt;&lt; endl;\n}\nif (f.bad())\n    perror(\"error while reading file\");\nreturn 0;\n</code></pre>\n", "LastActivityDate": "2016-11-06T03:55:44.390", "Score": "0", "CreationDate": "2016-11-06T03:55:44.390", "ParentId": "40445685", "CommentCount": "0", "OwnerUserId": "5521708"}});