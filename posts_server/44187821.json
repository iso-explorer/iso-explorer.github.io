post_cb({"44187821": {"CommentCount": "5", "ViewCount": "69", "CreationDate": "2017-05-25T18:50:29.017", "LastActivityDate": "2017-05-25T19:26:15.693", "Title": "What will be the size of derived C++ class if base class has no members?", "AcceptedAnswerId": "44188162", "PostTypeId": "1", "Id": "44187821", "Score": "2", "Body": "<p>Consider the following inheritance:</p>\n<pre><code>class Base {\nprotected:\n  Base() { }\npublic:\n  double Multiply(double x);\n};\n\nclass Derived : public Base {\n  double _value;\npublic:\n  Derived(double init) : _value(init) { }\n  double Multiply(double x) { return x*_value; }\n};\n</code></pre>\n<p>This code piece is to be used in templated codebase. Polymorphism is not an option because it adds VTable pointer thus doubles the memory consumption.</p>\n<p>However, I suspect that because of C++ requirement for objects to have size at least 1 byte, the size of <code>Derived</code> would become 9 bytes and, consequently, because of padding/alignment it will further become 16 bytes.</p>\n<p>So is there a way in C++ to keep the size of <code>Derived</code> equal to the size of <code>double</code> (usually 8 bytes) ?\nWhat does the standard say about the size of <code>Derived</code>?\nParticularly, how does MSVC++ behave in this case?</p>\n", "Tags": "<c++><generics><inheritance><size><sizeof>", "OwnerUserId": "1915854", "AnswerCount": "1"}, "44188162": {"ParentId": "44187821", "LastEditDate": "2017-05-25T19:26:15.693", "CommentCount": "0", "CreationDate": "2017-05-25T19:12:57.693", "OwnerUserId": "7860670", "LastEditorUserId": "7860670", "PostTypeId": "2", "Id": "44188162", "Score": "6", "Body": "<p>This is called <em>Empty base optimization</em>, it is defined in standard as following:</p>\n<blockquote>\n<p id=\"so_44187821_44188162_0\">1.8 The C ++ object model [intro.object]</p>\n<p id=\"so_44187821_44188162_1\">7\n  Unless it is a bit-field (9.2.4), a most derived object shall have a nonzero size and shall occupy one or more bytes of storage. Base class subobjects may have zero size. An object of trivially copyable or standard-layout type (3.9) shall occupy contiguous bytes of storage.</p>\n<p id=\"so_44187821_44188162_2\">8\n  Unless an object is a bit-field or a base class subobject of zero size, the address of that object is the address\n  of the first byte it occupies. Two objects a and b with overlapping lifetimes that are not bit-fields may have\n  the same address if one is nested within the other, or if at least one is a base class subobject of zero size and\n  they are of different types; otherwise, they have distinct addresses.</p>\n</blockquote>\n<p>In your example inheriting <code>Base</code> class does not affect the size of the <code>Derived</code> class. However MSVC++ performs such optimization only for a first empty base class so inheriting from addition empty base classes will lead to growth of <code>Derived</code> class size. I believe this has been a point of critisim towards MSVC++ for a long time, as many other compilers don't have this issue. This can be really troublesome if you have a lot of small auxiliary classes. As a workaround a deriving template base class could be used to convert multiple inheritance into a chain of single inheritance:</p>\n<pre class=\"lang-c++ prettyprint-override\"><code>class Base1\n{};\n\ntemplate&lt; typename TBase &gt; class Base2: public TBase\n{};\n\ntemplate&lt; typename TBase &gt; class Base3: public TBase\n{};\n\nclass Derived: public Base3&lt; Base2&lt; Base1 &gt; &gt;\n{};\n</code></pre>\n<p><a href=\"http://www.beta.microsoft.com/VisualStudio/feedbackdetail/view/771716/empty-base-optimization-broken\" rel=\"nofollow noreferrer\">MS Connect bug page</a>. It looks like they aren't aiming to fix it after all.</p>\n", "LastActivityDate": "2017-05-25T19:26:15.693"}, "bq_ids": {"n4140": {"so_44187821_44188162_2": {"section_id": 5795, "quality": 0.8809523809523809, "length": 37}, "so_44187821_44188162_1": {"section_id": 5794, "quality": 0.9333333333333333, "length": 28}}, "n3337": {"so_44187821_44188162_2": {"section_id": 5568, "quality": 0.8809523809523809, "length": 37}, "so_44187821_44188162_1": {"section_id": 5567, "quality": 0.9333333333333333, "length": 28}}, "n4659": {"so_44187821_44188162_2": {"section_id": 7254, "quality": 0.9761904761904762, "length": 41}, "so_44187821_44188162_1": {"section_id": 7253, "quality": 0.9333333333333333, "length": 28}}}});