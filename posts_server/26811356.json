post_cb({"26811447": {"ParentId": "26811356", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2014-11-07T22:54:50.817", "Score": "8", "LastEditorUserId": "3647361", "LastEditDate": "2014-11-07T23:21:05.800", "Id": "26811447", "OwnerUserId": "3647361", "Body": "<blockquote>\n<p id=\"so_26811356_26811447_0\">Which compiler is correct, if any?</p>\n</blockquote>\n<p>They are both right. Your code is wrong, no diagnostic required. [class.virtual]/11</p>\n<blockquote>\n<p id=\"so_26811356_26811447_1\">A virtual function declared in a class shall be defined, or declared\n  pure (10.4) in that class, or both; but no diagnostic is required\n  (3.2).</p>\n</blockquote>\n<p>[intro.compliance]/2:</p>\n<blockquote>\n<p id=\"so_26811356_26811447_2\">If a program contains a violation of a rule for which no diagnostic is\n  required, this International Standard places no requirement on\n  implementations with respect to that program.</p>\n</blockquote>\n<p>Have a look at your optimization settings for GCC, they may influence the behavior.</p>\n<hr>\n<blockquote>\n<p id=\"so_26811356_26811447_3\">Are unused undefined methods always allowed?</p>\n</blockquote>\n<p>A member function must be defined if and only if it is odr-used. [basic.def.odr]/3:</p>\n<blockquote>\n<p id=\"so_26811356_26811447_4\">Every program shall contain exactly one definition of every non-inline\n  function or variable that is odr-used in that program; no diagnostic\n  required.</p>\n</blockquote>\n<p>Now consider [basic.def.odr]/2:</p>\n<blockquote>\n<p id=\"so_26811356_26811447_5\">An expression is <em>potentially evaluated</em> unless it is an unevaluated operand (Clause 5) or a subexpression thereof.<br>\n  [\u2026]<br>\n  A virtual member function is odr-used if it is not pure.<br>\n  A non-overloaded function whose name appears as a potentially-evaluated expression or a member of a set of candidate functions, if selected by overload resolution when referred to from a potentially-evaluated expression, is odr-used, unless it is a pure virtual function and its name is not explicitly qualified.</br></br></br></p>\n</blockquote>\n<p>You are still allowed to use undefined non-virtual member functions inside <code>decltype</code> or <code>sizeof</code>. But non-pure virtual functions are odr-used simply because they are not pure.</p>\n<hr>\n<blockquote>\n<p id=\"so_26811356_26811447_6\">Does Bar\u2019s declaration of g() count as overriding even when Bar\n  doesn't provide a definition?</p>\n</blockquote>\n<p>Yes.</p>\n</hr></hr>", "LastActivityDate": "2014-11-07T23:21:05.800"}, "26811356": {"CommentCount": "1", "ViewCount": "286", "PostTypeId": "1", "LastEditorUserId": "3647361", "CreationDate": "2014-11-07T22:45:04.310", "LastActivityDate": "2016-03-18T10:26:06.533", "Title": "Are all unused undefined methods allowed?", "AcceptedAnswerId": "26811447", "LastEditDate": "2016-03-18T10:26:06.533", "Id": "26811356", "Score": "8", "Body": "<p>Here\u2019s a class with an undefined method. It seems compilers allow instances of this class to be constructed, so long as the undefined member function is never called:</p>\n<pre><code>struct A {\n    void foo();\n};\n\nint main() {\n    A a;      // &lt;-- Works in both VC2013 and g++\n    a.foo();  // &lt;-- Error in both VC2013 and g++\n}\n</code></pre>\n<p>Here\u2019s a similar situation, but one that involves inheritance. Subclass <code>Bar</code> extends base class <code>Foo</code>. <code>Foo</code> defines a method <code>g()</code>. <code>Bar</code> declares the same-named method but does not define it:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Foo {\n    void g() { std::cout &lt;&lt; \"g\\n\"; }\n};\n\nstruct Bar : Foo {\n    void g();\n};\n\nint main() {\n    Bar b;      // Works in both VC2013 and g++\n    b.Foo::g(); // Works in both VC2013 and g++\n    b.g();      // Error in both VC2013 and g++\n}\n</code></pre>\n<p>Here's a variation of the above. The only difference here is that <code>g()</code> is <code>virtual</code> to both <code>Foo</code> and <code>Bar</code>:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct Foo {\n    virtual void g() { std::cout &lt;&lt; \"g\\n\"; }\n};\n\nstruct Bar : Foo {\n    virtual void g();\n};\n\nint main() {\n    Bar b;      // Works in g++. But not in VC2013, which gives\n                // 'fatal error LNK1120: 1 unresolved externals'\n\n    b.Foo::g(); // Works in g++, but VC2013 already failed on b's construction\n    b.g();      // Error in g++, but VC2013 already failed on b's construction\n}\n</code></pre>\n<p>See the code comments for contrast of different behavior between VC2013 and g++. </p>\n<ol>\n<li>Which compiler is correct, if any?</li>\n<li>Why does VC2013's compiler have some different complaints in its version with the <code>virtual</code> keyword compared to the one in its version without the <code>virtual</code> keyword?</li>\n<li>Are unused undefined methods always allowed? If not, what are all the cases in which they're\nnot allowed?</li>\n<li>Does <code>Bar</code>\u2019s declaration of <code>g()</code> count as overriding\neven when <code>Bar</code> doesn't provide a definition?</li>\n</ol>\n", "Tags": "<c++><language-lawyer><virtual-functions><undefined-function>", "OwnerUserId": "2090317", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_26811356_26811447_2": {"section_id": 5770, "quality": 0.9090909090909091, "length": 10}, "so_26811356_26811447_4": {"section_id": 7041, "quality": 1.0, "length": 12}, "so_26811356_26811447_5": {"section_id": 7040, "quality": 0.5641025641025641, "length": 22}, "so_26811356_26811447_1": {"section_id": 7012, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_26811356_26811447_2": {"section_id": 5543, "quality": 0.9090909090909091, "length": 10}, "so_26811356_26811447_4": {"section_id": 6786, "quality": 1.0, "length": 12}, "so_26811356_26811447_5": {"section_id": 6785, "quality": 0.9743589743589743, "length": 38}, "so_26811356_26811447_1": {"section_id": 6758, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_26811356_26811447_2": {"section_id": 7227, "quality": 0.9090909090909091, "length": 10}, "so_26811356_26811447_4": {"section_id": 8538, "quality": 1.0, "length": 12}, "so_26811356_26811447_1": {"section_id": 8509, "quality": 0.8461538461538461, "length": 11}, "so_26811356_26811447_5": {"section_id": 8537, "quality": 0.5641025641025641, "length": 22}}}});