post_cb({"bq_ids": {"n4140": {"so_12553359_12553405_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 5348}}, "n3337": {"so_12553359_12553405_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 5145}}, "n4659": {"so_12553359_12553405_0": {"length": 22, "quality": 0.9166666666666666, "section_id": 6773}}}, "12553359": {"ViewCount": "570", "Body": "<p>Consider this example of type inference:</p>\n<pre><code>auto var = 1.0 ;\n</code></pre>\n<p>Does this evaluate to a float or double under C++11 type inference?, can this behaviour be controlled?</p>\n", "AcceptedAnswerId": "12553405", "Title": "How does C++11 type inference decide between floats or doubles?", "CreationDate": "2012-09-23T14:54:56.883", "Id": "12553359", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2012-09-23T15:33:20.597", "LastEditorUserId": "300745", "LastActivityDate": "2012-09-23T15:33:20.597", "Score": "7", "OwnerUserId": "300745", "Tags": "<c++><c++11><type-inference>", "AnswerCount": "1"}, "12553405": {"Id": "12553405", "PostTypeId": "2", "Body": "<p>It will be evaluated as a <code>double</code> and yes, you can control it.</p>\n<p>In the standard <strong>ISO-14882:2011</strong>, <em>2.14.4 Floating literals</em>, point 1:</p>\n<blockquote>\n<p id=\"so_12553359_12553405_0\">The type of a floating literal is double unless explicitly specified by a suffix. The suffixes f and F specify float, the suffixes l and L specify long double. If the scaled value is not in the range of representable values for its type, the program is ill-formed.</p>\n</blockquote>\n", "LastActivityDate": "2012-09-23T15:00:30.383", "CommentCount": "4", "CreationDate": "2012-09-23T15:00:30.383", "ParentId": "12553359", "Score": "13", "OwnerUserId": "435800"}});