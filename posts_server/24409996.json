post_cb({"24409996": {"CommentCount": "0", "ViewCount": "67", "OwnerDisplayName": "user2953119", "CreationDate": "2014-06-25T13:25:06.087", "LastActivityDate": "2014-06-25T13:27:14.400", "PostTypeId": "1", "AcceptedAnswerId": "24410051", "Title": "Two unnamed namespaces, defined in the same declarative region", "Id": "24409996", "Score": "1", "Body": "<p>Consider the following code:</p>\n<pre><code>#include&lt;iostream&gt;\n\nnamespace\n{\n    int a = 5;\n}\n\nnamespace\n{\n    int a = 5;\n}\nint main()\n{ \n    int i=5;\n    {\n        std::cout &lt;&lt; i;\n    }\n}\n</code></pre>\n<p>This code is invalid. It is because redefinition of <code>a</code> is occurred. But I expected that this is valid. Actually, the sec. 3.3.6/1 said:</p>\n<blockquote>\n<p id=\"so_24409996_24409996_0\">[...]The potential scope denoted by an <strong>original-namespace-name</strong> is the\n  concatenation of the declarative regions established by each of the\n  namespace-definitions in the same declarative region with that\n  <strong>original-namespace-name</strong>.[...]</p>\n</blockquote>\n<p>But unnamed namespace definition is not original-namespace-definition and the sec. 7.3.1/1 said:</p>\n<pre><code>namespace-name:\n    original-namespace-name\n    namespace-alias\noriginal-namespace-name:\n    identifier\n</code></pre>\n<p>and</p>\n<pre><code>original-namespace-definition:\n    inline_opt namespace identifier { namespace-body }\n</code></pre>\n<p>Moreover, the sec. 7.3.1.1 said:</p>\n<blockquote>\n<p id=\"so_24409996_24409996_1\">An unnamed-namespace-definition behaves as if it were replaced by</p>\n<pre><code>inlineopt namespace unique { /* empty body */ }\nusing namespace unique ;\nnamespace unique { namespace-body }\n</code></pre>\n<p id=\"so_24409996_24409996_2\">where inline appears if and only if it appears in the\n  unnamed-namespace-definition, all occurrences of unique in a\n  translation unit are replaced by the same identifier, and this\n  identifier <strong>differs from all other identifiers in the entire program</strong>.</p>\n</blockquote>\n<p>This implies that two unnamed namespaces have the different <strong><em>unique</em></strong>.</p>\n<p>Can you explain behavior in the code which I cited?</p>\n", "Tags": "<c++><namespaces><unnamed-namespace>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_24409996_24410051_0": {"section_id": 5482, "quality": 0.875, "length": 7}, "so_24409996_24409996_1": {"section_id": 5482, "quality": 1.0, "length": 4}, "so_24409996_24409996_0": {"section_id": 7067, "quality": 0.9333333333333333, "length": 14}, "so_24409996_24409996_2": {"section_id": 5482, "quality": 0.9473684210526315, "length": 18}}, "n3337": {"so_24409996_24410051_0": {"section_id": 5268, "quality": 0.875, "length": 7}, "so_24409996_24409996_1": {"section_id": 5268, "quality": 1.0, "length": 4}, "so_24409996_24409996_0": {"section_id": 6811, "quality": 0.9333333333333333, "length": 14}, "so_24409996_24409996_2": {"section_id": 5268, "quality": 0.9473684210526315, "length": 18}}, "n4659": {"so_24409996_24410051_0": {"section_id": 6917, "quality": 0.875, "length": 7}, "so_24409996_24409996_1": {"section_id": 6917, "quality": 1.0, "length": 4}, "so_24409996_24409996_2": {"section_id": 6917, "quality": 0.8947368421052632, "length": 17}}}, "24410051": {"ParentId": "24409996", "CommentCount": "1", "Body": "<p>It's in the very piece you quote:</p>\n<blockquote>\n<p id=\"so_24409996_24410051_0\">all occurrences of <em>unique</em> in a translation unit are replaced by the same identifier</p>\n</blockquote>\n<p>So all unnamed namespaces in a translation unit are the same one.</p>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "24410051", "Score": "8", "CreationDate": "2014-06-25T13:27:14.400", "LastActivityDate": "2014-06-25T13:27:14.400"}});