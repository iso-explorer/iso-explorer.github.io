post_cb({"bq_ids": {"n4140": {"so_43892186_43892655_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 3348}}, "n3337": {"so_43892186_43892655_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 3218}}, "n4659": {"so_43892186_43892655_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 4115}}}, "43892655": {"Id": "43892655", "PostTypeId": "2", "Body": "<p>Clang is correct. References about that can be found in C++ standard reference draft n4296 (emphasize mine):</p>\n<blockquote>\n<p id=\"so_43892186_43892655_0\">15.3 Handling an exception [except.handle]</p>\n<p id=\"so_43892186_43892655_1\">...<br>3 A handler is a match for an exception object of type E if<br/>\n  (3.1) \u2014 The handler is of type cv T or cv T&amp; and E and T are the same type (<strong>ignoring the top-level cv-qualifiers</strong>),</br></p>\n</blockquote>\n<p>Here an <code>int</code> is thrown, and the handler declares a <code>const int</code>. There is a match and the handler shall be invoked.</p>\n", "LastActivityDate": "2017-05-10T12:33:39.937", "CommentCount": "0", "CreationDate": "2017-05-10T12:33:39.937", "ParentId": "43892186", "Score": "4", "OwnerUserId": "3545273"}, "43892186": {"ViewCount": "378", "Body": "<p>Given this code:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>struct A {\n    A(int e) { throw e; }\n};\n\nstruct B {\n    A a{42}; // Same with = 42; syntax\n};\n\nint main() {\n    try {\n        B b;\n    } catch (int const e) {\n        return e;\n    }\n}\n</code></pre>\n<p>When compiled with GCC (versions 4.7.4, 4.8.5, 4.9.3, 5.4.0, 6.3.0):</p>\n<pre class=\"lang-none prettyprint-override\"><code>$ g++ -std=c++11 test.cpp -o test; ./test ; echo $?\nterminate called after throwing an instance of 'int'\nAborted\n134\n</code></pre>\n<p>But when compiled with Clang (version 4.0.0):</p>\n<pre class=\"lang-none prettyprint-override\"><code>$ clang++ -std=c++11 test.cpp -o test; ./test ; echo $?\n42\n</code></pre>\n<p>Which behavior is correct?</p>\n", "AcceptedAnswerId": "43892501", "Title": "Should exceptions thrown from class member initializers call std::terminate()?", "CreationDate": "2017-05-10T12:13:15.117", "Id": "43892186", "CommentCount": "3", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-13T20:19:02.193", "LastEditorUserId": "15168", "LastActivityDate": "2017-05-14T00:57:41.787", "Score": "11", "OwnerUserId": "3919155", "Tags": "<c++><c++11><exception><exception-handling><compiler-bug>", "AnswerCount": "2"}, "43892501": {"Id": "43892501", "PostTypeId": "2", "Body": "<p>This is a bug in GCC (<a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80683\" rel=\"nofollow noreferrer\">Bug 80683</a>).</p>\n<p>If the constructor is the first op in the <code>try/catch</code> clause, then the compiler considered it as being outside of it although it should include it.</p>\n<p>For example, the following works just fine:</p>\n<pre><code>#include &lt;iostream&gt;\n\nstruct A {\n    A(int e) { throw e; }\n};\n\nstruct B {\n    A a{42}; // Same with = 42; syntax\n};\n\nint main() {\n    try {\n        // The following forces the compiler to put B's contructor inside the try/catch.\n        std::cout &lt;&lt; \"Welcome\" &lt;&lt; std::endl; \n        B b;\n    } catch (int e) {\n        std::cout &lt;&lt; \"ERROR: \" &lt;&lt; e &lt;&lt; std::endl; // This is just for debugging\n    }\n\n    return 0;\n}\n</code></pre>\n<p>Running:</p>\n<pre><code>g++ -std=c++11 test.cpp -DNDEBUG -o test; ./test ; echo $?\n</code></pre>\n<p>Outputs:</p>\n<pre><code>Welcome\nERROR: 42\n0\n</code></pre>\n<p>My guess is that is that due to compiler optimization, it moves the constructor to the beginning of the main function. It assumes that the <code>struct B</code> has no constructor, then it assumes that it would never throw an exception, thus it is safe to move it outside of the <code>try/catch</code> clause.</p>\n<p>If we will change the declaration of <code>struct B</code> to <strong>explicitly</strong> use <code>struct A</code> constructor:</p>\n<pre><code>struct B {\n    B():a(42) {}\n    A a;\n};\n</code></pre>\n<p>Then the result will be as expected and we will enter the <code>try/catch</code>, even when removing the \"Welcome\" printout:</p>\n<pre><code>ERROR: 42\n0\n</code></pre>\n", "LastEditorUserId": "2570677", "LastActivityDate": "2017-05-14T00:57:41.787", "Score": "10", "CreationDate": "2017-05-10T12:26:53.340", "ParentId": "43892186", "CommentCount": "0", "OwnerUserId": "2570677", "LastEditDate": "2017-05-14T00:57:41.787"}});