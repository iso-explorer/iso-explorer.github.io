post_cb({"3709123": {"ParentId": "3708626", "CommentCount": "0", "CreationDate": "2010-09-14T13:06:16.553", "OwnerUserId": "18901", "PostTypeId": "2", "Id": "3709123", "Score": "2", "Body": "<p>I believe it's a bug, per 7.3.4 para 1 of the C++03 standard:</p>\n<blockquote>\n<p id=\"so_3708626_3709123_0\">A using-directive specifies that the names in the nominated namespace can be used in the scope in which the using-directive appears after the using-directive.</p>\n</blockquote>\n<p>So your end-of-file using declaration should have no effect.</p>\n", "LastActivityDate": "2010-09-14T13:06:16.553"}, "3709346": {"ParentId": "3708626", "CommentCount": "1", "CreationDate": "2010-09-14T13:33:42.520", "OwnerUserId": "226318", "PostTypeId": "2", "Id": "3709346", "Score": "5", "Body": "<p>I agree that it is a bug, but some insight into what is going on can be obtianed by generating the assembly listing corresponding to your file (use the /Fa option of cl.exe).</p>\n<p>So, comment out the using declaration, generate the .asm file and open it in a text editor. Scan the file and you can see that the instantiation of the template is at the bottom of the file (it starts with <code>??$TemplatedFunction@H@Ambiguity@@YAXH@Z PROC</code>), and it is under the assembly generated for the main function (starts with <code>_main   PROC</code>). The error message said \"see reference to function template instantiation\", so it is referring to the instantiation of the template function, and the assembly listing makes clear this instantiation is at the bottom of the file.</p>\n<p>Now, edit the code to replace the template function with <code>NonTemplatedFunction(int a)</code> and compile, generating an assembly listing. View the assembly listing and you will see the assembly code generated for <code>NonTemplatedFunction(int a)</code> appears above <code>_main   PROC</code>.</p>\n<p>What does all this babble mean? When the Visual Studio 2008 compiler turns your templates into actual code, it is effectively appending some code to the end of your file after your using declaration. Your using declaration means the names in the automatically generated code are \"ambiguous\". The process gcc uses to instantiate templates obviously avoids this problem.</p>\n", "LastActivityDate": "2010-09-14T13:33:42.520"}, "bq_ids": {"n4140": {"so_3708626_3709123_0": {"section_id": 5510, "quality": 1.0, "length": 11}}, "n3337": {"so_3708626_3709123_0": {"section_id": 5296, "quality": 1.0, "length": 11}}, "n4659": {"so_3708626_3709123_0": {"section_id": 6945, "quality": 1.0, "length": 11}}}, "3708626": {"CommentCount": "5", "AcceptedAnswerId": "3709123", "PostTypeId": "1", "LastEditorUserId": "362376", "CreationDate": "2010-09-14T11:59:06.187", "LastActivityDate": "2010-09-14T16:20:23.763", "LastEditDate": "2010-09-14T16:20:23.763", "ViewCount": "199", "FavoriteCount": "2", "Title": "VS2008(+?) compiler bug with templated functions and 'using namespace'", "Id": "3708626", "Score": "5", "Body": "<p>I've found this odd case of some code (below) doesn't compile under Visual Studio 2008 and produces an \"error C2872: 'Ambiguity' : ambiguous symbol\" on line 12. </p>\n<p>Removing the using <code>namespace RequiredNamespace</code> on the last line fixes the error, but I'd expect that putting <code>using namespace</code> at the end of a file should have no effect. It also relies on <code>AnotherFunction</code> being a template function, so I expect the compiler is generating the templated functions in the wrong scope, or isn't resetting the list of namespaces being used before doing so.</p>\n<p>The same code compiles under GCC.</p>\n<p>Both compilers seem to generate the code for <code>TemplatedFunction</code> after the <code>using namespace Namespace</code> definition, at least as far as I can tell by introducing errors and looking at the order they're output.</p>\n<pre><code>namespace Ambiguity\n{\n    class cSomeClass\n    {\n    };\n\n    template&lt;class T&gt;\n    void TemplatedFunction(T a)\n    {\n        // this is where the error occurs, the compiler thinks Ambiguity\n        // might refer to the class in RequiredNamespace below\n        Ambiguity::cSomeClass(); \n    }\n}\n\nnamespace RequiredNamespace \n{\n    // without a namespace around this class, the Ambiguity class \n    // and namespace collide\n    class Ambiguity\n    {\n    };\n}\n\nint main()\n{\n    // to force the templated function to be generated\n    Ambiguity::TemplatedFunction(4); \n}\n\n// removing this removes the error, but it shouldn't really do anything\nusing namespace RequiredNamespace; \n</code></pre>\n<p>Obviously this is a manufactured example, but the original is extracted from a real case where the <code>using namespace</code> is in a auto-generated file produced by 3rd party code.</p>\n<p>Is this a bug in the compiler?</p>\n", "Tags": "<c++><templates><compiler-construction><namespaces>", "OwnerUserId": "362376", "AnswerCount": "2"}});