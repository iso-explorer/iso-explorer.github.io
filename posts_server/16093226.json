post_cb({"16093259": {"Id": "16093259", "PostTypeId": "2", "Body": "<p>Since you don't want to use scope resolution, then create some additional scope:</p>\n<pre><code>{\n    using namespace x;\n    int k = a(); //x::a is called\n}\n{\n    using namespace y;\n    int j = a(); //y::a is called\n}\n</code></pre>\n<p>I'm afraid this might turn to be worse than scope resolution, though :/</p>\n<p>Edit:</p>\n<p>One more thing (which I don't know if you're aware of) that might be helpful are namespace aliases. Say you've got a namespace with a disgustingly long name or multiple nested namespaces. You can shorten the name such as:</p>\n<pre><code>namespace x = very::weird::namespc::name;\nnamespace y = yabadabadoopdiedoo;\n</code></pre>\n", "LastEditorUserId": "947836", "LastActivityDate": "2013-04-18T21:31:46.570", "Score": "27", "CreationDate": "2013-04-18T21:18:10.937", "ParentId": "16093226", "CommentCount": "19", "OwnerUserId": "947836", "LastEditDate": "2013-04-18T21:31:46.570"}, "bq_ids": {"n4140": {"so_16093226_16093311_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 5510}}, "n3337": {"so_16093226_16093311_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 5296}}, "n4659": {"so_16093226_16093311_0": {"length": 34, "quality": 0.8947368421052632, "section_id": 6945}}}, "16093226": {"ViewCount": "555", "Body": "<p>the syntax:</p>\n<pre><code> using namespace x;\n</code></pre>\n<p>tells the compiler to find the symbols from namespace x. The situation becomes bad once you have a same symbol in two namespaces and you want to mutually use them. Is there a way to tell the compiler not to use a namespace? What I mean is something like this (namespaces x and y both have the function a)</p>\n<pre><code>using namespace x;\nint k = a(); //x::a is called\ndrop namespace x; //imaginary syntax that I am looking for\nusing namespace y;\nint j = a(); //y::a is called\n</code></pre>\n<p>\"You must use scope resolution symbol '::'\" is not the answer I am looking for. </p>\n", "AcceptedAnswerId": "16093259", "Title": "Telling the compiler that I am no longer using a namespace in C++", "CreationDate": "2013-04-18T21:16:05.257", "Id": "16093226", "CommentCount": "13", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2013-04-20T00:48:50.180", "LastEditorUserId": "207421", "LastActivityDate": "2013-04-20T00:48:50.180", "Score": "9", "OwnerUserId": "2308801", "Tags": "<c++><syntax><namespaces>", "AnswerCount": "3"}, "16093549": {"Id": "16093549", "PostTypeId": "2", "Body": "<p>You cannot \"drop\" a namespace, however, when using namespace composition you can resolve specific ambiguities as follows:</p>\n<pre><code>namespace composite {\n    using namespace x;\n    using namespace y;\n    using y::a; // use y::a in case of ambiguity\n\n    void foo() {\n        a(); // calls y::a\n    }\n}\n</code></pre>\n", "LastEditorUserId": "75889", "LastActivityDate": "2013-04-19T11:26:09.027", "Score": "7", "CreationDate": "2013-04-18T21:39:04.257", "ParentId": "16093226", "CommentCount": "12", "OwnerUserId": "75889", "LastEditDate": "2013-04-19T11:26:09.027"}, "16093311": {"Id": "16093311", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_16093226_16093311_0\">2 A using-directive specifies that the names in the nominated namespace <strong>can be used in the scope in which the\n  using-directive appears after the using-directive.</strong> During unqualified name lookup (3.4.1), the names appear\n  as if they were declared in the nearest enclosing namespace which contains both the using-directive and the\n  nominated namespace. [ Note: In this context, \u201ccontains\u201d means \u201ccontains directly or indirectly\u201d. \u2014end\n  note ]  </p>\n</blockquote>\n<p>Thus you have to use different scopes. There is no way to unuse, after using.</p>\n", "LastActivityDate": "2013-04-18T21:21:00.353", "CommentCount": "0", "CreationDate": "2013-04-18T21:21:00.353", "ParentId": "16093226", "Score": "6", "OwnerUserId": "2254782"}});