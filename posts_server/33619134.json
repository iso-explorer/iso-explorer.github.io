post_cb({"33621562": {"ParentId": "33619134", "CommentCount": "0", "Body": "<p>I think this is covered by [expr.static.cast]/4 in C++14:</p>\n<blockquote>\n<p id=\"so_33619134_33621562_0\">An expression <code>e</code> can be explicitly converted to a type <code>T</code> using a <code>static_cast</code> of the form <code>static_cast&lt;T&gt;(e)</code> if the declaration <code>T t(e);</code> is well-formed, for some invented temporary variable <code>t</code>. The effect of such an\n  explicit conversion is the same as performing the declaration and initialization and then using the temporary variable as the result of the conversion.</p>\n</blockquote>\n<p>This defines your code as being equivalent to:</p>\n<pre><code>constexpr unsigned char arr[sizeof(unsigned long long)]{ 1 };\n\nconst unsigned long long &amp;t (arr[0]);\n\nconstexpr bool value = (t == 1);\n</code></pre>\n<p>The second line is familiar now: initialization of a const reference from a value of different (non-reference-related) type is permitted under [dcl.init.ref]/5:</p>\n<blockquote>\n<p id=\"so_33619134_33621562_1\">If <code>T1</code> is a non-class type, a temporary of type <em>cv1 <code>T1</code></em> is created and copy-initialized from the initializer expression. The reference is then bound to the temporary.</p>\n</blockquote>\n", "OwnerUserId": "1505939", "PostTypeId": "2", "Id": "33621562", "Score": "1", "CreationDate": "2015-11-10T01:54:06.083", "LastActivityDate": "2015-11-10T01:54:06.083"}, "33619134": {"CommentCount": "0", "ViewCount": "78", "CreationDate": "2015-11-09T22:05:02.863", "LastActivityDate": "2015-11-10T01:54:06.083", "Title": "static_cast between primitive references", "AcceptedAnswerId": "33621562", "PostTypeId": "1", "Id": "33619134", "Score": "1", "Body": "<p>Is using <code>static_cast</code> to convert from <code>const unsigned char&amp;</code> to <code>const unsigned long long&amp;</code> defined?</p>\n<pre><code>constexpr unsigned char arr[sizeof(unsigned long long)]{ 1 };\nconstexpr bool value = static_cast&lt;const unsigned long long&amp;&gt;(arr[0]) == 1;\n</code></pre>\n<p>Throw in <code>int main(){}</code> and this compiles without error or warning on Coliru, Ideone, and VS2015. Is this actually safe, or is it unsafe but not required to give an error?</p>\n<p>BONUS: I didn't expect that <code>arr[0]</code> would be a constant expression, but using <code>value</code> as a constant expression works without error. Is it because <code>arr</code> is an array?</p>\n", "Tags": "<c++><static-cast>", "OwnerUserId": "4756309", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_33619134_33621562_0": {"section_id": 6030, "quality": 0.9666666666666667, "length": 29}, "so_33619134_33621562_1": {"section_id": 3321, "quality": 0.8571428571428571, "length": 12}}, "n3337": {"so_33619134_33621562_0": {"section_id": 5798, "quality": 0.9666666666666667, "length": 29}, "so_33619134_33621562_1": {"section_id": 3191, "quality": 0.7142857142857143, "length": 10}}, "n4659": {"so_33619134_33621562_1": {"section_id": 4087, "quality": 0.5714285714285714, "length": 8}}}, "33619350": {"ParentId": "33619134", "PostTypeId": "2", "CommentCount": "4", "Body": "<p><s>* It's undefined because you're using one type through a reference to another.\n* You used a cast, so the compiler is supposed to trust you if it can perform that cast.\n* It'll usually work the way you seem to expect except that I doubt value will be true on most architectures.</s></p>\n<p>And actually I think what happens here is that the const&amp; you cast to gets bound to a temporary, or would if it happened at run time.  So yeah, you should get <code>1</code> from the value.  The <code>char</code> 1 will be copied into an <code>unsigned long long</code> and the const&amp; will bind to that.  It won't bind to the array you made I don't think.  This would be totally safe and you can ignore most of the above.</p>\n<p>You could test this thought a bit, possibly, by trying to convert to an lvalue.  You'd have to not have your data be <code>constexpr</code> though.</p>\n<p><a href=\"http://ideone.com/TxYose\" rel=\"nofollow\">http://ideone.com/TxYose</a></p>\n", "OwnerUserId": "301883", "LastEditorUserId": "301883", "LastEditDate": "2015-11-09T23:01:49.943", "Id": "33619350", "Score": "2", "CreationDate": "2015-11-09T22:17:52.977", "LastActivityDate": "2015-11-09T23:01:49.943"}});