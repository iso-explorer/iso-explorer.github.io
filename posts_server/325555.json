post_cb({"325569": {"Body": "<p>static methods can be called also using an object of the class, just like it can be done in Java. Nevertheless, you shouldn't do this. Use the scope operator like <code>Test::DoCrash();</code> Maybe you think of namespaces:</p>\n<pre><code>namespace Test {\n    void DoCrash() {\n        std::cout &lt;&lt; \"Crashed!!\" &lt;&lt; std::endl;\n    }\n};\n</code></pre>\n<p>which can only be called by <code>Test::DoCrash();</code> from outside that namespace if the function is not imported explicitly using a <code>using directive/declaration</code> into the scope of the caller.</p>\n", "CreationDate": "2008-11-28T11:42:35.050", "ParentId": "325555", "CommentCount": "1", "LastEditDate": "2008-11-28T11:50:09.077", "PostTypeId": "2", "LastEditorDisplayName": "litb", "LastActivityDate": "2008-11-28T11:50:09.077", "LastEditorUserId": "34509", "Id": "325569", "OwnerDisplayName": "litb", "Score": "2", "OwnerUserId": "34509"}, "325555": {"ViewCount": "54119", "Body": "<p>Here is a little test program: </p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Test\n{\npublic:\n    static void DoCrash(){ std::cout&lt;&lt; \"TEST IT!\"&lt;&lt; std::endl; }\n};\n\nint main()\n{\n    Test k;\n    k.DoCrash(); // calling a static method like a member method...\n\n    std::system(\"pause\");\n\n    return 0;\n}\n</code></pre>\n<p>On VS2008 + SP1 (vc9) it compiles fine: the console just display \"TEST IT!\".</p>\n<p>As far as I know, static member methods shouldn't be called on instanced object.</p>\n<ol>\n<li>Am I wrong? Is this code correct from the standard point of view?</li>\n<li>If it's correct, why is that? I can't find why it would be allowed, or maybe it's to help using \"static or not\" method in templates?</li>\n</ol>\n", "AcceptedAnswerId": "325572", "Title": "C++ Static member method call on class instance", "CreationDate": "2008-11-28T11:33:44.660", "LastActivityDate": "2017-06-14T03:28:54.367", "CommentCount": "2", "FavoriteCount": "8", "PostTypeId": "1", "LastEditDate": "2017-03-02T12:27:27.487", "OwnerDisplayName": "Klaim", "LastEditorUserId": "711006", "Id": "325555", "Score": "29", "OwnerUserId": "2368", "Tags": "<c++><visual-c++><standards>", "AnswerCount": "4"}, "bq_ids": {"n4140": {"so_325555_325572_0": {"length": 28, "quality": 0.9333333333333333, "section_id": 5900}}, "n3337": {"so_325555_325572_0": {"length": 28, "quality": 0.9333333333333333, "section_id": 5672}}, "n4659": {"so_325555_325572_0": {"length": 28, "quality": 0.9333333333333333, "section_id": 7382}}}, "325572": {"Body": "<p>The standard states that it is not necessary to call the method through an instance, that does not mean that you cannot do it. There is even an example where it is used:</p>\n<p>C++03, 9.4 static members</p>\n<blockquote>\n<p id=\"so_325555_325572_0\">A static member s of class X may be referred to using the\n  qualified-id expression X::s; it is\n  not necessary to use the class member access syntax (5.2.5) to refer\n  to a static member. A static member\n  may\n             be referred to using the class member access syntax, in which\n  case the object-expression is\n  evaluated.</p>\n</blockquote>\n<pre><code>class process {\npublic:\n   static void reschedule();\n};\n\nprocess&amp; g();\n\nvoid f()\n{\n   process::reschedule(); // OK: no object necessary             \n   g().reschedule(); // g() is called\n}\n</code></pre>\n", "CreationDate": "2008-11-28T11:43:53.160", "ParentId": "325555", "CommentCount": "3", "LastEditDate": "2017-06-14T03:28:54.367", "PostTypeId": "2", "LastEditorDisplayName": "litb", "LastActivityDate": "2017-06-14T03:28:54.367", "LastEditorUserId": "4094366", "Id": "325572", "OwnerDisplayName": "dribeas", "Score": "53", "OwnerUserId": "36565"}, "325581": {"Id": "325581", "PostTypeId": "2", "Body": "<p>Static functions doesn\u00b4t need an instanciated object for being called, so</p>\n<pre><code>k.DoCrash();\n</code></pre>\n<p>behaves exactly the same as</p>\n<pre><code>Test::DoCrash();\n</code></pre>\n<p>using the scope resolution operator (::) to determine the static function inside the class.</p>\n<p><em>Notice that in both case the compiler doesn\u00b4t put the <code>this</code> pointer in the stack since the static function doesn't need it.</em></p>\n", "LastEditorUserId": "1870232", "LastActivityDate": "2014-07-24T10:11:17.337", "Score": "8", "CreationDate": "2008-11-28T11:49:10.670", "ParentId": "325555", "CommentCount": "2", "OwnerUserId": "20367", "LastEditDate": "2014-07-24T10:11:17.337"}, "31131333": {"Id": "31131333", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_325555_31131333_0\">2) If it's correct, why is that? I can't find why it would be allowed, or maybe it's to help using \"static or not\" method in templates?</p>\n</blockquote>\n<p>It's potentially useful in several scenarios:</p>\n<ul>\n<li><p><em>[the '\"static or not\" method in templates' you suggest:]</em> when many types could have been specified to a template, and the template then wants to invoke the member: the types providing a static function can be called using the same notation as a member function - the former may be more efficient (no <code>this</code> pointer to pass/bind), while the latter allows polymorphic (<code>virtual</code>) dispatch and use of member data</p></li>\n<li><p>minimising code maintenance</p>\n<ul>\n<li><p>if a function evolves from needing instance-specific data to not needing it - and is therefore made <code>static</code> to allow easy instance-free use and prevent accidental use of instance data - all the points of existing client usage don't need to be labouriously updated</p></li>\n<li><p>if the type's changed the <code>var.f()</code> invocation continues to use the <code>var</code> type's function, whereas <code>Type::f()</code> may need manual correction</p></li>\n</ul></li>\n<li><p>when you have an expression or function call returning a value and want to invoke the (potentially or always) <code>static</code> function, the <code>.</code> notation may prevent you needing to use <code>decltype</code> or a supporting template to get access to the type, just so you can use the <code>::</code> notation</p></li>\n<li><p>sometimes the variable name is just much shorter, more convenient, or named in a more self-documenting way</p></li>\n</ul>\n", "LastActivityDate": "2015-06-30T06:41:16.480", "CommentCount": "1", "CreationDate": "2015-06-30T06:41:16.480", "ParentId": "325555", "Score": "3", "OwnerUserId": "410767"}});