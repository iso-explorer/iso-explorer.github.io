post_cb({"34133658": {"ViewCount": "393", "Body": "<p>Here is the simple program (array sorting):</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;conio.h&gt;\n#include &lt;array&gt;\n#include &lt;algorithm&gt;\n#include &lt;chrono&gt;\n\ntypedef unsigned int myInt;\n\nstatic void shellSort(myInt arr[], const myInt length) {\n    if (length &lt; 2) {\n        return;\n    }\n    myInt i, j, step;\n    myInt tmp;\n    for (step = length / 2; step &gt; 0; step /= 2) {\n        for (i = step; i &lt; length; i++) {\n            tmp = arr[i];\n            for (j = i; j &gt;= step; j -= step) {\n                if (tmp &lt; arr[j - step]) {\n                    arr[j] = arr[j - step];\n                }\n                else {\n                    break;\n                }\n            }\n            arr[j] = tmp;\n        }\n    }\n}\n\nvoid main() {\n    const int arrSize = 2000;\n    std::array&lt;myInt, arrSize&gt; arr;\n    std::chrono::high_resolution_clock::time_point timeStart, timeEnd;\n\n    //Array filling and shuffling\n    for (int i = 0; i &lt; arrSize; i++) {\n        arr[i] = i + 1;\n    }\n    std::random_shuffle(arr.begin(), arr.end());\n\n    //Array sorting and time measurement\n    timeStart = std::chrono::high_resolution_clock::now();\n    shellSort(arr._Elems, arrSize);\n    timeEnd = std::chrono::high_resolution_clock::now();\n\n    printf(\"%llu\", std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(timeEnd - timeStart).count());\n    _getch();\n}\n</code></pre>\n<p>and it returns 0. 0 nanoseconds for sorting array of 2000 elements. Looks very strange. I noticed that it happens when function execution time is small, but 0 nanosecond - definitely a lie.</p>\n<p><a href=\"http://i.stack.imgur.com/SYH4U.png\" rel=\"nofollow\">Screenshot</a></p>\n<p><em>Visual Studio 2013, Build - Release, Platform x64, Win10 x64</em></p>\n<p>Please, tell me, why this can happen?</p>\n", "AcceptedAnswerId": "34133780", "Title": "std::chrono::duration_cast count() returns zero", "CreationDate": "2015-12-07T12:33:13.823", "Id": "34133658", "CommentCount": "1", "PostTypeId": "1", "LastActivityDate": "2015-12-07T12:39:42.123", "Score": "1", "OwnerUserId": "4513696", "Tags": "<c++><arrays><sorting><chrono>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_34133658_34133780_1": {"length": 12, "quality": 0.7058823529411765, "section_id": 4853}}, "n3337": {"so_34133658_34133780_1": {"length": 12, "quality": 0.7058823529411765, "section_id": 4648}}, "n4659": {"so_34133658_34133780_1": {"length": 12, "quality": 0.7058823529411765, "section_id": 6278}}}, "34133780": {"Id": "34133780", "PostTypeId": "2", "Body": "<p>The C++ standard does not require a minimum resolution for the <code>std::high_resolution_clock</code>.</p>\n<blockquote>\n<p id=\"so_34133658_34133780_0\">20.11.7.3</p>\n<p id=\"so_34133658_34133780_1\">Class high_resolution_clock [time.clock.hires] Objects of class\n  high_resolution_clock represent clocks with the shortest tick period.\n  high_resolution_- clock may be a synonym for system_clock or\n  steady_clock.</p>\n</blockquote>\n<p>Emphasis: <em>may be a synonym for system_clock or steady_clock</em></p>\n<p>You need to check your compiler's documentation. Your compiler's <code>std::high_resolution_clock</code>'s resolution is probably too coarse to measure such small intervals, so your measured starting and ending time is the same.</p>\n", "LastActivityDate": "2015-12-07T12:39:42.123", "CommentCount": "3", "CreationDate": "2015-12-07T12:39:42.123", "ParentId": "34133658", "Score": "4", "OwnerUserId": "3943312"}});