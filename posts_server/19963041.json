post_cb({"bq_ids": {"n4140": {"so_19963041_19976680_0": {"length": 19, "quality": 0.59375, "section_id": 5974}}, "n3337": {"so_19963041_19976680_0": {"length": 19, "quality": 0.59375, "section_id": 5742}}, "n4659": {"so_19963041_19976680_0": {"length": 18, "quality": 0.5625, "section_id": 7473}}}, "19963041": {"ViewCount": "382", "Body": "<p>I was wondering, if there's a way to get the types/values of the captured variables of a lambda? - The usage scenario would be something alike;</p>\n<pre><code>int a = 5;\nauto lamb = [a](){ return a; };\nstatic_assert(std::is_same&lt;typename get_capture_type&lt;0&gt;(lamb)::type, int&gt;::value, \"\");\nassert(get_capture_value&lt;0&gt;(lamb) == 5)\n</code></pre>\n<p>Note: <code>get_capture_*&lt;N&gt;(lambda)</code> should obviously result in a compiler error, when <code>N &gt; #captured_variables</code>. </p>\n<p>What I need is actually just a way to access the captures somehow, if possible. That is, I can do the template meta-programming myself.</p>\n", "AcceptedAnswerId": "19976680", "Title": "Get captured variables from lambda?", "CreationDate": "2013-11-13T19:51:31.793", "Id": "19963041", "CommentCount": "20", "PostTypeId": "1", "LastActivityDate": "2014-11-25T23:04:54.507", "Score": "6", "OwnerUserId": "480212", "Tags": "<c++><c++11><lambda><c++14>", "AnswerCount": "2"}, "19976680": {"Id": "19976680", "PostTypeId": "2", "Body": "<p>It's not possible <em>by design</em></p>\n<blockquote>\n<p id=\"so_19963041_19976680_0\"><strong>5.1.2 [expr.prim.lambda]</strong><br>\n  15 [...] For each entity captured by copy, an unnamed non-static data member is declared in the closure type. The declaration order of these members is unspecified. [...]<br>\n  16 [...] It is unspecified whether additional unnamed non-static data members are declared in the closure type for entities captured by reference.</br></br></p>\n</blockquote>\n<p>Captured variables are unnamed (or at least have names that are unspeakable by mortals) and their declaration order is deliberately unspecified. By-reference captures <em>may not even exist</em> in the closure type.</p>\n<p>You don't want to do this anyway. You may think you do, but you don't really.</p>\n", "LastActivityDate": "2013-11-14T11:38:53.137", "CommentCount": "1", "CreationDate": "2013-11-14T11:38:53.137", "ParentId": "19963041", "Score": "15", "OwnerUserId": "981959"}, "19967631": {"Id": "19967631", "PostTypeId": "2", "Body": "<p>No. C++ has no reflection, and that means it doesn't have reflection on lambda's either.</p>\n", "LastActivityDate": "2013-11-14T01:08:05.563", "CommentCount": "1", "CreationDate": "2013-11-14T01:08:05.563", "ParentId": "19963041", "Score": "5", "OwnerUserId": "15416"}});