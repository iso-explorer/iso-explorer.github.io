post_cb({"38456409": {"ParentId": "38456127", "CommentCount": "0", "Body": "<p>I don't really know why <code>__cplusplus</code> doesn't show up as a regular macro, but I'm guessing it's so you can't redefine it.  This is how I determine the its value.</p>\n<pre><code>#include &lt;iostream&gt;\nint main( int argc, char** argv )\n{\n  std::cout &lt;&lt; __cplusplus &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n<p>Then compilation shows the value.</p>\n<pre><code>$ g++-6 test.cpp &amp;&amp; ./a.out\n201402\n$ g++-6 -std=c++17 test.cpp &amp;&amp; ./a.out\n201500\n</code></pre>\n<p>I would check whether it's <code>&gt;= 201500</code> as opposed to checking for any specific value.</p>\n", "OwnerUserId": "382471", "PostTypeId": "2", "Id": "38456409", "Score": "2", "CreationDate": "2016-07-19T10:49:36.990", "LastActivityDate": "2016-07-19T10:49:36.990"}, "38456243": {"ParentId": "38456127", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_38456127_38456243_0\">What is the value of <code>__cplusplus</code> when using C++17?</p>\n</blockquote>\n<p>According to the draft standard <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/papers/2016/n4594.pdf\" rel=\"nofollow noreferrer\">N4594</a> <em>\u00a716.8/p1 Predefined macro names [cpp.predefined]</em> (<strong>Emphasis Mine</strong>):</p>\n<blockquote>\n<p id=\"so_38456127_38456243_1\">The following macro names shall be defined by the implementation:\n  <code>__cplusplus</code> The name <code>__cplusplus</code> is defined to the value\n  <strong>201402L</strong> when compiling a C++ translation unit.<sup>156</sup></p>\n<p id=\"so_38456127_38456243_2\"><sub>156) It is intended that future versions of this standard will\n  replace the value of this macro with a greater value. Non-conforming\n  compilers should use a value with at most five decimal digits.</sub></p>\n</blockquote>\n<p>However the same value is appointed for the C++14 standard. Apparently it seems so, that there's no official/standard <code>__cplusplus</code> value set yet for the C++17 standard. </p>\n<p>In GCC versions 6.1 and 7.0 the value is changed to <strong>201500</strong></p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/434f55846912a5ff\" rel=\"nofollow noreferrer\"><strong>Live Demo</strong></a></p>\n<p>In Clang version 3.8 and 3.9 the value is unchanged <strong>201406</strong>.</p>\n<p>Consequently, you'll have to wait a little bit for the standard value to come out.</p>\n<h2>--- Update ---</h2>\n<p>According to the C++ standard <em>\u00a719.8/p1 Predefined macro names [cpp.predefined]</em> (<strong>Emphasis Mine</strong>):</p>\n<blockquote>\n<p id=\"so_38456127_38456243_3\"><sub>1</sub> The following macro names shall be defined by the\n  implementation:</p>\n<p id=\"so_38456127_38456243_4\"><code>__cplusplus</code> The integer literal <strong>201703L</strong>.</p>\n</blockquote>\n<p>Thus, the value of <code>__cplusplus</code> when using C++17 shall be <strong>201703L</strong>.</p>\n", "OwnerUserId": "2352671", "LastEditorUserId": "2352671", "LastEditDate": "2017-08-22T06:28:57.633", "Id": "38456243", "Score": "9", "CreationDate": "2016-07-19T10:42:58.197", "LastActivityDate": "2017-08-22T06:28:57.633"}, "38493878": {"ParentId": "38456127", "CommentCount": "1", "Body": "<p>I would try</p>\n<pre><code>#if __cplusplus &gt; 201402L\n  // C__17 code here\n  ...\n#endif\n</code></pre>\n<p>In other words, testing for greater than C++14 should work as compilers add more features.\nAs someone mentioned above, gcc uses 201500L. It looks like clang uses 201406L (four months after C++14 I guess).</p>\n<p>Using the above should be cross-platform and will work even when C++17 comes out with a real value for __cplusplus.  For more details about evolving features try the <a href=\"https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations\" rel=\"noreferrer\">feature test macros</a>.</p>\n", "OwnerUserId": "680359", "PostTypeId": "2", "Id": "38493878", "Score": "7", "CreationDate": "2016-07-21T02:25:35.097", "LastActivityDate": "2016-07-21T02:25:35.097"}, "bq_ids": {"n4140": {"so_38456127_38456243_3": {"section_id": 550, "quality": 0.8333333333333334, "length": 5}, "so_38456127_38456243_1": {"section_id": 550, "quality": 0.6470588235294118, "length": 11}, "so_38456127_38456243_2": {"section_id": 550, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_38456127_38456243_3": {"section_id": 541, "quality": 0.8333333333333334, "length": 5}, "so_38456127_38456243_1": {"section_id": 541, "quality": 0.6470588235294118, "length": 11}, "so_38456127_38456243_2": {"section_id": 541, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_38456127_38456243_3": {"section_id": 571, "quality": 0.8333333333333334, "length": 5}, "so_38456127_38456243_2": {"section_id": 571, "quality": 0.9444444444444444, "length": 17}}}, "38456127": {"CommentCount": "8", "ViewCount": "3037", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-07-19T10:37:51.473", "LastActivityDate": "2017-08-22T06:28:57.633", "Title": "What is the value of __cplusplus for C++17?", "AcceptedAnswerId": "38456243", "LastEditDate": "2017-05-23T12:34:19.023", "Id": "38456127", "Score": "10", "Body": "<p>We are trying to test some code under C++17 and its <a href=\"https://stackoverflow.com/q/27741423/608639\">change to <code>std::uncaught_exception</code></a>. I can't seem to get GCC to provide the value of <code>__cplusplus</code>:</p>\n<pre class=\"lang-none prettyprint-override\"><code>$ /opt/local/bin/g++ -std=c++17 -dM -E - &lt;/dev/null | grep __cplusplus\ncc1: warning: command line option '-std=c++1z' is valid for C++/ObjC++ but not for C\n$\n</code></pre>\n<p>And:</p>\n<pre class=\"lang-none prettyprint-override\"><code>$ /opt/local/bin/g++ --version\ng++-mp-6 (MacPorts gcc6 6.1.0_0) 6.1.0\nCopyright (C) 2016 Free Software Foundation, Inc.\n</code></pre>\n<p>What is the value of <code>__cplusplus</code> when using C++17?</p>\n", "Tags": "<c++><macros><c++1z>", "OwnerUserId": "608639", "AnswerCount": "3"}});