post_cb({"11873939": {"CommentCount": "1", "AcceptedAnswerId": "11874337", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2012-08-08T22:10:01.233", "LastActivityDate": "2016-05-23T17:29:27.567", "LastEditDate": "2017-05-23T11:53:25.143", "ViewCount": "832", "FavoriteCount": "3", "Title": "Is there a difference between with braces or without when using extern \"C\"?", "Id": "11873939", "Score": "13", "Body": "<p>So, while being <a href=\"https://stackoverflow.com/a/11871465/315052\">schooled by James Kanze and Loki Astari about C linkage</a>, I was wondering about this:</p>\n<pre><code>extern \"C\" int foo1 (void (*)());\nextern \"C\" { int foo2 (void (*)()); }\n</code></pre>\n<p>After my schooling, I think it must be that <code>foo1</code> only takes a function pointer with C++ linkage, while <code>foo2</code> only takes a function pointer with C linkage. Is my understanding correct? Are there specific references in the C++ standard that explain the differences in my example above?</p>\n<p><strong>Edit:</strong> To make it easier for everyone to follow along <a href=\"http://pastebin.com/F3MP9wFv\" rel=\"nofollow noreferrer\">here's a pastebin with the relevant part from the C++ 11 draft standard</a>.</p>\n", "Tags": "<c++>", "OwnerUserId": "315052", "AnswerCount": "3"}, "11874554": {"ParentId": "11873939", "PostTypeId": "2", "CommentCount": "2", "Body": "<pre><code>extern \"C\" int foo1 (void (*)());\nextern \"C\" { int foo2 (void (*)()); }\n</code></pre>\n<p>Those are the same.  The main reason to use braces is if you have more than one function, e.g: </p>\n<pre><code>extern \"C\" int foo1 (void (*)());\nextern \"C\" int foo2 (void (*)());\nextern \"C\" int foo3 (void (*)());\nextern \"C\" int foo4 (void (*)());\n</code></pre>\n<p>that can be written more simply as:</p>\n<pre><code>extern \"C\" {\n    int foo1 (void (*)());\n    int foo2 (void (*)());\n    int foo3 (void (*)());\n    int foo4 (void (*)());\n}\n</code></pre>\n<p>Additionally, if you're trying to make one header file that works with both C and C++, you might want to write that as:</p>\n<pre><code>#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n    int foo1 (void (*)());\n    int foo2 (void (*)());\n    int foo3 (void (*)());\n    int foo4 (void (*)());\n\n#ifdef __cplusplus\n}\n#endif\n</code></pre>\n<p>P.S. I'm not aware of any compilers where there's a difference between \"C++ linkage\" or \"C linkage\" for function pointers.  When we talk about C or C++ linkage, we're talking about how the name gets mangled by the compiler.  For a function pointer, you're passing a pointer, so the name is irrelevant.  It's important that the <em>calling convention</em> is the same, but it usually is the same for C and C++, since people freely mix those languages.</p>\n", "OwnerUserId": "37386", "LastEditorUserId": "37386", "LastEditDate": "2012-08-09T11:42:04.893", "Id": "11874554", "Score": "1", "CreationDate": "2012-08-08T23:11:56.723", "LastActivityDate": "2012-08-09T11:42:04.893"}, "11874548": {"ParentId": "11873939", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>The braces are used when you have many declarations and definitions. Often you can see a start and end in header files for <code>C</code> code to be usable in <code>C++</code></p>\n<pre><code>#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n// C stuff here to be available for C++ code\n\n#ifdef __cplusplus\n}\n#endif\n</code></pre>\n<p>I can recommend reading about \"name mangling\" <a href=\"http://en.wikipedia.org/wiki/Name_mangling\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Name_mangling</a> The <code>extern \"C\"</code> is a key to fallback to <code>C</code> linkage name conventions.</p>\n", "OwnerUserId": "842", "LastEditorUserId": "842", "LastEditDate": "2012-08-08T23:19:32.563", "Id": "11874548", "Score": "1", "CreationDate": "2012-08-08T23:11:01.303", "LastActivityDate": "2012-08-08T23:19:32.563"}, "11874337": {"ParentId": "11873939", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>foo1 takes a pointer to a C function as shown in [dcl.link] 7.5p4</p>\n<blockquote>\n<p id=\"so_11873939_11874337_0\">In a <em>linkage-specification</em>, the specified language linkage applies to\n  the function types of <strong>all function declarators</strong>, function names with\n  external linkage, and variable names with external linkage declared\n  within the linkage-specification. <em>[Example:</em></p>\n<p id=\"so_11873939_11874337_1\"><code>extern \"C\" void f1(void(*pf)(int));</code><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>// the name f1 and its function type have C language</em><br>\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<em>// linkage; pf is a pointer to a C function</em></br></br></p>\n</blockquote>\n<p>The example applies directly to <code>foo1</code> and the added emphasis highlights what I think is the reason. The function's parameter lists contains a function declarator for a parameter, and all function declarators are affected by the linkage specification. This applies to both braced and non-braced linkage specifications.</p>\n<p>Some differences when not using braces are that names are automatically <code>extern</code> and explicit use of a storage specifier is prohibited.</p>\n<pre><code>extern \"C\" int i; // not a definition\n\nint main() {\n    i = 1; // error, no definition\n}\n\nextern \"C\" static void g(); // error\n</code></pre>\n<p>As an example of where this difference matters, consider a header containing the following:</p>\n<pre><code>extern \"C\" int a;\nextern \"C\" double b;\nextern \"C\" char c;\n</code></pre>\n<p>Someone might be tempted to change this to:</p>\n<pre><code>extern \"C\" {\n    int a;\n    double b;\n    char c;\n}\n</code></pre>\n<p>But that would be incorrect because that converts the declarations into definitions. Instead the correct code using <code>extern \"C\" {}</code> is:</p>\n<pre><code>extern \"C\" {\n    extern int a;\n    extern double b;\n    extern char c;\n}\n</code></pre>\n", "OwnerUserId": "365496", "LastEditorUserId": "365496", "LastEditDate": "2016-05-23T17:29:27.567", "Id": "11874337", "Score": "8", "CreationDate": "2012-08-08T22:48:41.400", "LastActivityDate": "2016-05-23T17:29:27.567"}, "bq_ids": {"n4140": {"so_11873939_11874337_0": {"section_id": 5520, "quality": 0.9545454545454546, "length": 21}}, "n3337": {"so_11873939_11874337_0": {"section_id": 5306, "quality": 0.9545454545454546, "length": 21}}, "n4659": {"so_11873939_11874337_0": {"section_id": 6955, "quality": 0.9545454545454546, "length": 21}, "so_11873939_11874337_1": {"section_id": 8647, "quality": 0.5833333333333334, "length": 7}}}});