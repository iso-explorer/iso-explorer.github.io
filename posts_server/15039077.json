post_cb({"bq_ids": {"n4140": {"so_15039077_15039190_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 6797}}, "n3337": {"so_15039077_15039190_1": {"length": 8, "quality": 0.8888888888888888, "section_id": 6552}}, "n4659": {"so_15039077_15039190_1": {"length": 6, "quality": 0.6666666666666666, "section_id": 8287}}}, "15039077": {"ViewCount": "1269", "Body": "<p>How &amp; where is it guaranteed that an <code>uint8_t</code> is 8-bits?</p>\n<p>Digging into N3242 - \"Working Draft, Standard for Programming Language C++\", section 18.4.1 \n&lt; cstdint &gt; synopsis says - </p>\n<pre><code>       `typedef unsigned integer type uint8_t; // optional`\n</code></pre>\n<p>So, in essence, a C++ standard conforming library is not needed to define <code>uint8_t</code> at all.</p>\n<p>Update: Probably am just asking, which line of the standard says that uintN_t types are N bits?</p>\n", "AcceptedAnswerId": "15039190", "Title": "uint8_t - 8 bits guarentee", "CreationDate": "2013-02-23T09:33:32.810", "Id": "15039077", "CommentCount": "2", "LastEditDate": "2013-02-23T09:51:46.737", "PostTypeId": "1", "LastEditorUserId": "1363471", "LastActivityDate": "2013-02-23T09:57:44.497", "Score": "1", "OwnerUserId": "1363471", "Tags": "<c++>", "AnswerCount": "3"}, "15039245": {"Id": "15039245", "PostTypeId": "2", "Body": "<p>The <code>&lt;stdint.h&gt;</code>  types are defined with reference to the C99 standard.</p>\n<blockquote>\n<p id=\"so_15039077_15039245_0\"><strong>C99 draft N869 \u00a77.17.1.1/2</strong>:<br>\n  \u201cThe typedef name <b><code>uint</code></b><i>N</i><code><b>_t</b></code> designates an unsigned integer type with width <i>N</i>. Thus,\n  <code><b>uint24_t</b></code> denotes an unsigned integer type with a width of exactly 24 bits.\u201d</br></p>\n</blockquote>\n<p>If a type is defined by <code>&lt;stdint.h&gt;</code>, then so are its associated macros, and if the type is not defined, then neither are its associated macros, by C99 \u00a77.18/4.</p>\n<p>Thus, you can use the existence or not of the macro <code>UINT8_MAX</code> (required by C99 \u00a77.18.2.1) to check for the presence or absence of the <code>uint8_t</code> type definition.</p>\n", "LastActivityDate": "2013-02-23T09:57:44.497", "CommentCount": "0", "CreationDate": "2013-02-23T09:57:44.497", "ParentId": "15039077", "Score": "2", "OwnerUserId": "464581"}, "15039190": {"Id": "15039190", "PostTypeId": "2", "Body": "<p>From C++:</p>\n<blockquote>\n<p id=\"so_15039077_15039190_0\">18.4.1 Header  synopsis</p>\n<p id=\"so_15039077_15039190_1\">...  The header defines all functions, types, and macros the same as 7.18 in the C standard.  ...</p>\n</blockquote>\n<p>From C:</p>\n<blockquote>\n<p id=\"so_15039077_15039190_2\">7.20.1.1 Exact-width integer types</p>\n<p id=\"so_15039077_15039190_3\">1 The typedef name intN_t designates a signed integer type with width\n  N , no padding bits, and a two\u2019s complement representation. Thus,\n  int8_t denotes such a signed integer type with a width of exactly 8\n  bits.</p>\n<p id=\"so_15039077_15039190_4\">2 The typedef name uintN_t designates an unsigned integer type with\n  width N and no padding bits. Thus, uint24_t denotes such an unsigned\n  integer type with a width of exactly 24 bits.</p>\n<p id=\"so_15039077_15039190_5\">3 These types are optional. However, if an implementation provides\n  integer types with widths of 8, 16, 32, or 64 bits, no padding bits,\n  and (for the signed types) that have a two\u2019s complement\n  representation, it shall define the corresponding typedef names.</p>\n</blockquote>\n<hr>\n<blockquote>\n<p id=\"so_15039077_15039190_6\">So, in essence, a C++ standard conforming library is not needed to define uint8_t at all.</p>\n</blockquote>\n<p>Correct. As Nikos mentioned (+1), you just need an alternative when/if the <code>typedef</code> is not present/declared.</p>\n</hr>", "LastActivityDate": "2013-02-23T09:51:05.710", "CommentCount": "0", "CreationDate": "2013-02-23T09:51:05.710", "ParentId": "15039077", "Score": "4", "OwnerUserId": "191596"}, "15039095": {"Id": "15039095", "PostTypeId": "2", "Body": "<p><code>uint8_t</code> is guaranteed to be 8 bits wide. If it doesn't exist, then obviously you can't use it. But if it's there, it's 8 bits. There's no possibility where it's provided but is not 8 bits.</p>\n", "LastActivityDate": "2013-02-23T09:36:14.133", "CommentCount": "0", "CreationDate": "2013-02-23T09:36:14.133", "ParentId": "15039077", "Score": "1", "OwnerUserId": "856199"}});