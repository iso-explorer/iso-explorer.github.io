post_cb({"bq_ids": {"n4140": {"so_33285103_33289327_0": {"length": 29, "quality": 0.90625, "section_id": 5966}, "so_33285103_33285103_3": {"length": 9, "quality": 0.8181818181818182, "section_id": 5969}, "so_33285103_33285103_4": {"length": 9, "quality": 0.8181818181818182, "section_id": 5969}, "so_33285103_33289327_1": {"length": 19, "quality": 1.0, "section_id": 5972}, "so_33285103_33289327_2": {"length": 29, "quality": 0.90625, "section_id": 5969}}, "n3337": {"so_33285103_33289327_1": {"length": 13, "quality": 0.6842105263157895, "section_id": 5740}, "so_33285103_33285103_3": {"length": 8, "quality": 0.7272727272727273, "section_id": 5738}, "so_33285103_33285103_4": {"length": 8, "quality": 0.7272727272727273, "section_id": 5738}, "so_33285103_33289327_0": {"length": 29, "quality": 0.90625, "section_id": 5735}, "so_33285103_33289327_2": {"length": 21, "quality": 0.65625, "section_id": 5738}}, "n4659": {"so_33285103_33289327_1": {"length": 19, "quality": 1.0, "section_id": 7471}, "so_33285103_33289327_0": {"length": 29, "quality": 0.90625, "section_id": 7460}, "so_33285103_33285103_4": {"length": 9, "quality": 0.8181818181818182, "section_id": 7467}, "so_33285103_33289327_2": {"length": 29, "quality": 0.90625, "section_id": 7467}, "so_33285103_33285103_3": {"length": 9, "quality": 0.8181818181818182, "section_id": 7467}}}, "33289327": {"Id": "33289327", "PostTypeId": "2", "Body": "<p>An Internal Compiler Error(<em>ICE</em>) is always a bug.</p>\n<p>We don't need to capture variables of static storage duration but we do need to capture automatic variables that are <a href=\"http://en.cppreference.com/w/cpp/language/definition#ODR-use\" rel=\"nofollow\">odr-used</a>. From the draft C++ standard section <code>5.1.2</code>:</p>\n<blockquote>\n<p id=\"so_33285103_33289327_0\">The lambda-expression\u2019s compound-statement yields the function-body (8.4) of the function call operator,\n  <strong>but for purposes of name lookup (3.4)</strong>, determining the type and value of this (9.3.2) and transforming idexpressions\n  referring to non-static class members into class member access expressions using (*this) (9.3.1),\n  <strong>the compound-statement is considered in the context of the lambda-expression.</strong></p>\n</blockquote>\n<p>so <code>row</code> should be visible within the inner lambda and:</p>\n<blockquote>\n<p id=\"so_33285103_33289327_1\">[...]If a lambda-expression\n  or an instantiation of the function call operator template of a generic lambda odr-uses (3.2) this or a\n  variable with automatic storage duration from its reaching scope, that entity shall be captured by the\n  lambda-expression.[...]</p>\n</blockquote>\n<p>Capture is only required for <code>this</code> and variables of automatic storage duration if they are odr-used and we can see that explicit capture is only defined for automatic variables or <em>this</em>:</p>\n<blockquote>\n<p id=\"so_33285103_33289327_2\">The identifier in a simple-capture is looked up using the usual rules for unqualified name lookup (3.4.1);\n  each such lookup shall find an entity. An entity that is designated by a simple-capture is said to be explicitly\n  captured, <strong>and shall be this or a variable with automatic storage duration declared in the reaching scope of\n  the local lambda expression.</strong></p>\n</blockquote>\n<p>For both Visual Studio and gcc to match the results of clang I can move <code>row</code> out to the global namespace, <a href=\"http://melpon.org/wandbox/permlink/eymPX8tI2KK2jQ09\" rel=\"nofollow\">see it live for gcc</a>. Also as Fozi points out changing <code>const auto&amp; /*j*/</code> to <code>const int&amp; /*j*/</code> makes it start working.</p>\n<p>It looks like gcc accepts explicit capture of non-automatic variables as an extension and even then explicitly capturing <code>row</code> for example <code>[&amp;, &amp;row](const auto &amp; )</code> still produces all zeros.</p>\n<p>Further for gcc if I move the definition for <code>row</code> to <code>main</code> then I see the following error (<em><a href=\"http://melpon.org/wandbox/permlink/oZ8cRGniPT0RG06i\" rel=\"nofollow\">see it live</a></em>):</p>\n<pre><code>/tmp/cchzwtQI.s: Assembler messages:\n/tmp/cchzwtQI.s:1572: Error: symbol `_ZL3row' is already defined\n</code></pre>\n<p>Which seems like a compiler error to me.</p>\n<p>I don't see any portion of the standard that would make the original program ill-formed. Nor should changing the <code>auto</code> to <code>int</code> make a difference and non of the changes introduced by <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3649.html\" rel=\"nofollow\">polymorphic lambda proposal</a> would seem to explain this difference either.</p>\n", "LastEditorUserId": "1708801", "LastActivityDate": "2015-10-23T03:32:15.883", "Score": "3", "CreationDate": "2015-10-22T19:39:41.160", "ParentId": "33285103", "CommentCount": "6", "LastEditDate": "2015-10-23T03:32:15.883", "OwnerUserId": "1708801"}, "33285103": {"ViewCount": "347", "Body": "<p>In <a href=\"https://stackoverflow.com/a/33282441/2642059\">this answer</a> I use this code:</p>\n<pre><code>std::vector&lt;std::vector&lt;int&gt;&gt; imat(3, std::vector&lt;int&gt;(10));\n\nstd::for_each(imat.begin(), imat.end(), [&amp;](auto&amp; i) {\n    static auto row = 0;\n    auto column = 0;\n    std::transform(i.begin(), i.end(), i.begin(), \n        [&amp;](const auto&amp; /*j*/) {\n            return row * column++; \n    }); \n\n    ++row; \n});\n</code></pre>\n<p>But I notice some misbehavior in capturing <code>static auto row</code> depending upon the compiler.</p>\n<p><a href=\"http://coliru.stacked-crooked.com/a/fe3ef266452f39fe\" rel=\"nofollow noreferrer\">Clang 3.7.0 yields</a>:</p>\n<blockquote>\n<p id=\"so_33285103_33285103_0\">0 0   0   0   0   0   0   0   0   0<br>\n  0   1   2   3   4   5   6   7   8   9<br>\n  0   2   4   6   8   10  12  14  16  18</br></br></p>\n</blockquote>\n<p><a href=\"http://ideone.com/NTLmV2\" rel=\"nofollow noreferrer\">gcc 5.1.0 yields</a>:</p>\n<blockquote>\n<p id=\"so_33285103_33285103_1\">0 0   0   0   0   0   0   0   0   0<br>\n  0   0   0   0   0   0   0   0   0   0<br>\n  0   0   0   0   0   0   0   0   0   0</br></br></p>\n</blockquote>\n<p>And Visual Studio 2015 gives me a compile time error:</p>\n<blockquote>\n<p id=\"so_33285103_33285103_2\">An internal error has occurred in the compiler.</p>\n</blockquote>\n<p>If I change the capture nested capture to capture <code>row</code> explicitly I get the compiler error:</p>\n<blockquote>\n<p id=\"so_33285103_33285103_3\">identifier in capture must be a variable with automatic storage duration declared in the reaching scope of the lambda</p>\n</blockquote>\n<p>Am I allowed to capture a <code>static</code> in a nested lambda? It seems legit, but there are so many problems!</p>\n<p><strong>EDIT:</strong></p>\n<p><a href=\"https://stackoverflow.com/questions/33285103/capturing-a-lambdas-static-in-a-nested-lambda?noredirect=1#comment54371126_33285103\">Fozi pointed out</a> that I <em>can</em> get Visual Studio 2015 to compile and give the same output as Clang 3.7.0 if I change the nested lambda's parameter type from <code>const auto&amp;</code> to <code>const int&amp;</code>. Which seems completely unrelated, but it works.</p>\n<p>This doesn't work if I try to capture <code>row</code> explicitly. In that case I still get the compiler error:</p>\n<blockquote>\n<p id=\"so_33285103_33285103_4\">identifier in capture must be a variable with automatic storage duration declared in the reaching scope of the lambda</p>\n</blockquote>\n<p>I've reported a Visual Studio 2015 bug here: <a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/1930409/capturing-a-lambdas-static-in-a-nested-lambda\" rel=\"nofollow noreferrer\">https://connect.microsoft.com/VisualStudio/feedback/details/1930409/capturing-a-lambdas-static-in-a-nested-lambda</a></p>\n", "AcceptedAnswerId": "33289327", "Title": "Capturing a Lambda's static in a Nested Lambda", "CreationDate": "2015-10-22T15:43:03.837", "Id": "33285103", "CommentCount": "11", "LastEditDate": "2017-05-23T12:23:10.117", "PostTypeId": "1", "LastEditorUserId": "-1", "LastActivityDate": "2015-10-23T03:32:15.883", "Score": "12", "OwnerUserId": "2642059", "Tags": "<c++><lambda><language-lawyer><c++14><capture>", "AnswerCount": "1"}});