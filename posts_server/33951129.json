post_cb({"33951171": {"ParentId": "33951129", "CommentCount": "2", "Body": "<p>The lifetime is only extended to the end of the compiler generator constructor for <code>B</code>.  When the constructor returns, the temporary string created to hold \"def\" will be destroyed leaving you with a dangling reference.</p>\n", "OwnerUserId": "5231607", "PostTypeId": "2", "Id": "33951171", "Score": "0", "CreationDate": "2015-11-27T06:05:58.950", "LastActivityDate": "2015-11-27T06:05:58.950"}, "33951261": {"ParentId": "33951129", "CommentCount": "5", "Body": "<p>In the article that you linked to, you will find:</p>\n<blockquote>\n<p id=\"so_33951129_33951261_0\">(Note this only applies to stack-based references. It doesn\u2019t work for references that are members of objects.)</p>\n</blockquote>\n<p>That's why the references in <code>a</code> and <code>b</code> are not valid. They don't extend the life of the temporaries.</p>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "33951261", "Score": "3", "CreationDate": "2015-11-27T06:14:05.657", "LastActivityDate": "2015-11-27T06:14:05.657"}, "33952280": {"ParentId": "33951129", "CommentCount": "0", "Body": "<p>From C++14 [class.temporary]/5:</p>\n<blockquote>\n<p id=\"so_33951129_33952280_0\">The temporary to which the reference is bound or the temporary that is the complete object of a subobject to which the reference is bound persists\n  for the lifetime of the reference <strong>except</strong>:</p>\n<ul>\n<li><p id=\"so_33951129_33952280_1\">A temporary bound to a reference member in a constructor\u2019s <em>ctor-initializer</em> persists until the constructor exits.</p></li>\n<li><p id=\"so_33951129_33952280_2\">[...]</p></li>\n</ul>\n</blockquote>\n", "OwnerUserId": "1505939", "PostTypeId": "2", "Id": "33952280", "Score": "3", "CreationDate": "2015-11-27T07:29:24.980", "LastActivityDate": "2015-11-27T07:29:24.980"}, "33951129": {"CommentCount": "2", "ViewCount": "133", "PostTypeId": "1", "LastEditorUserId": "3628160", "CreationDate": "2015-11-27T06:01:43.117", "LastActivityDate": "2015-11-27T23:30:04.877", "Title": "Lifetime of const reference variable not extended", "AcceptedAnswerId": "33951261", "LastEditDate": "2015-11-27T23:30:04.877", "Id": "33951129", "Score": "1", "Body": "<p>Binding a temporary to a const reference extends its lifetime; cf. <a href=\"http://herbsutter.com/2008/01/01/gotw-88-a-candidate-for-the-most-important-const/\" rel=\"nofollow\">GotW #88</a>.</p>\n<p>Why does not this work on this snippet? Live <a href=\"http://ideone.com/h1sx7V\" rel=\"nofollow\">here</a>.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nstruct A {\n    A() : s(\"abc\") {}\n    const std::string&amp; s;\n};\n\nstruct B {\n    const std::string&amp; s = \"def\";\n};\n\nint main() {\n    A a;\n    std::cout &lt;&lt; a.s &lt;&lt; std::endl;\n    B b;\n    std::cout &lt;&lt; b.s &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Bonus question: How to trigger a warning with gcc?</p>\n", "Tags": "<c++><reference><lifetime><string-literals>", "OwnerUserId": "3628160", "AnswerCount": "4"}, "33952333": {"ParentId": "33951129", "CommentCount": "2", "Body": "<p>cppreference.com says:</p>\n<blockquote>\n<p id=\"so_33951129_33952333_0\">a temporary bound to a reference member in a constructor initializer\n  list persists only until the constructor exits, not as long as the\n  object exists.</p>\n</blockquote>\n<p><a href=\"http://en.cppreference.com/w/cpp/language/reference_initialization\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/reference_initialization</a> </p>\n", "OwnerUserId": "5137315", "PostTypeId": "2", "Id": "33952333", "Score": "1", "CreationDate": "2015-11-27T07:33:00.770", "LastActivityDate": "2015-11-27T07:33:00.770"}, "bq_ids": {"n4140": {"so_33951129_33952280_1": {"section_id": 382, "quality": 1.0, "length": 10}, "so_33951129_33952333_0": {"section_id": 382, "quality": 0.6428571428571429, "length": 9}, "so_33951129_33952280_0": {"section_id": 382, "quality": 0.9285714285714286, "length": 13}}, "n3337": {"so_33951129_33952280_1": {"section_id": 373, "quality": 1.0, "length": 10}, "so_33951129_33952333_0": {"section_id": 373, "quality": 0.6428571428571429, "length": 9}, "so_33951129_33952280_0": {"section_id": 373, "quality": 0.9285714285714286, "length": 13}}, "n4659": {"so_33951129_33952280_0": {"section_id": 397, "quality": 0.9285714285714286, "length": 13}}}});