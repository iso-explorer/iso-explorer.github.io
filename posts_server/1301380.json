post_cb({"1301465": {"Id": "1301465", "PostTypeId": "2", "Body": "<p>As you found out T::size_type needs to be prefixed with typename. \nWhy?</p>\n<p>From  <a href=\"http://www.josuttis.com/tmplbook/\" rel=\"noreferrer\">\"C++ Templates: The Complete Guide\"</a></p>\n<blockquote>\n<p id=\"so_1301380_1301465_0\">The language definition resolves this problem by specifying that in general a dependent qualified name does <em>not</em> denote a type unless that name is prefixed with the keyword typename.</p>\n<p id=\"so_1301380_1301465_1\">... The typename prefix to a name is <em>required</em> when the name</p>\n<ol>\n<li>Appears in a template</li>\n<li>Is qualified</li>\n<li>Is not used as a list of base class specifications or in a list of member initializations introducing a constructor definition</li>\n<li>Is dependent on a template parameter</li>\n</ol>\n<p id=\"so_1301380_1301465_2\">Furthermore the typename prefix is <em>not allowed</em>  unless at least the first three previous conditions hold.</p>\n</blockquote>\n", "LastActivityDate": "2009-08-19T17:32:12.253", "CommentCount": "2", "CreationDate": "2009-08-19T17:32:12.253", "ParentId": "1301380", "Score": "7", "OwnerUserId": "4945"}, "1301380": {"ViewCount": "10051", "Body": "<p>Writing a templated function, I declared:</p>\n<pre><code>template &lt;typename T&gt;\nT invertible(T const&amp; container, T::size_type startIndex, T::size_type endIndex);\n</code></pre>\n<p>Compiling with g++ 4.0.1 I got the error:</p>\n<pre><code>error: 'T::size_type' is not a type\n</code></pre>\n", "AcceptedAnswerId": "1301465", "Title": "g++ \"is not a type\" error", "CreationDate": "2009-08-19T17:17:04.017", "Id": "1301380", "CommentCount": "0", "LastEditDate": "2009-08-19T17:28:17.580", "PostTypeId": "1", "LastEditorUserId": "25981", "LastActivityDate": "2009-08-19T17:32:12.253", "Score": "5", "OwnerUserId": "8835", "Tags": "<c++><gcc><templates>", "AnswerCount": "4"}, "1301420": {"Id": "1301420", "PostTypeId": "2", "Body": "<p>Because during parsing the template declaration, T is not known. So the compiler doesn't know if T::size_type exists at all. It may refer to a static variable, for example. When you later use the template, T is of course known, but the error happens earlier. And please use something less ancient than gcc 4.0.1 ;-)</p>\n<p>Edit: If you compile it with -fpermissive, the compiler probably chews your code, but he will give a warning.</p>\n", "LastEditorUserId": "154980", "LastActivityDate": "2009-08-19T17:29:30.683", "Score": "3", "CreationDate": "2009-08-19T17:23:40.727", "ParentId": "1301380", "CommentCount": "4", "OwnerUserId": "154980", "LastEditDate": "2009-08-19T17:29:30.683"}, "bq_ids": {"n4140": {"so_1301380_1301465_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 641}, "so_1301380_1301390_0": {"length": 19, "quality": 1.0, "section_id": 169}}, "n3337": {"so_1301380_1301465_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 631}, "so_1301380_1301390_0": {"length": 19, "quality": 1.0, "section_id": 163}}, "n4659": {"so_1301380_1301465_1": {"length": 4, "quality": 0.5714285714285714, "section_id": 669}, "so_1301380_1301390_0": {"length": 19, "quality": 1.0, "section_id": 174}}}, "1301395": {"Id": "1301395", "PostTypeId": "2", "Body": "<p>It turned out I needed to specify that T::size_type was a typename. Why is that?</p>\n<pre><code>template &lt;typename T&gt;\nT invertible(T const&amp; container, typename T::size_type startIndex, typename T::size_type endIndex);\n</code></pre>\n", "LastActivityDate": "2009-08-19T17:18:41.487", "CommentCount": "2", "CreationDate": "2009-08-19T17:18:41.487", "ParentId": "1301380", "Score": "0", "OwnerUserId": "8835"}, "1301390": {"Id": "1301390", "PostTypeId": "2", "Body": "<p>You need to add typename.</p>\n<p>I.e. </p>\n<pre><code>template &lt;typename T&gt;\nT invertible(T const&amp; container, typename T::size_type startIndex, typename T::size_type endIndex);\n</code></pre>\n<p>Without having any information on your type T, the compiler needs to know that T::size_type designates a type.</p>\n<p>From the standard, section 14.6.2:</p>\n<blockquote>\n<p id=\"so_1301380_1301390_0\">A name used in a template declaration or definition and that is dependent on a template-parameter is assumed not to name a type unless the applicable name lookup finds a type name or the name is qualified by the keyword <code>typename</code>. </p>\n</blockquote>\n", "LastEditorUserId": "118854", "LastActivityDate": "2009-08-19T17:26:13.000", "Score": "29", "CreationDate": "2009-08-19T17:18:09.130", "ParentId": "1301380", "CommentCount": "0", "OwnerUserId": "118854", "LastEditDate": "2009-08-19T17:26:13.000"}});