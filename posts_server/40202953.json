post_cb({"40202953": {"ViewCount": "35", "Body": "<p>I know since reading <a href=\"https://stackoverflow.com/questions/8123776/are-there-practical-uses-for-dynamic-casting-to-void-pointer\">this question</a> that a <code>dynamic_cast&lt;void*&gt;</code> is the best way to check an object pointer's true identity and ensure any base pointers will also compare eequally to the most derived (after the cast).</p>\n<p>What I'm not sure about is that this cast gives defined and useful results in the non-polymorphic case. If not, can I work around this or is this a hopeless situation?</p>\n<p>What I'm asking is if this is well-defined:</p>\n<pre><code>class A {};\nclass B : public A {};\n\nint main()\n{\n  A a;\n  B b;\n  A* base_ptr = &amp;b;\n\n  void* pointer = dynamic_cast&lt;void*&gt;(&amp;a); // is this value well-defined?\n\n  if(dynamic_cast&lt;void*&gt;(&amp;b) == dynamic_cast&lt;void*&gt;(base_ptr))\n    std::cout &lt;&lt; \"Is this undefined or not?\";\n}\n</code></pre>\n", "AcceptedAnswerId": "40203019", "Title": "Is a dynamic_cast<void*> guaranteed to work (i.e. be equal to static_cast<void*>) in the case of a non-polymorphic type?", "CreationDate": "2016-10-23T12:33:56.673", "Id": "40202953", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:24:50.323", "LastEditorUserId": "-1", "LastActivityDate": "2016-10-23T12:41:21.493", "Score": "2", "OwnerUserId": "256138", "Tags": "<c++11><polymorphism><dynamic-cast>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_40202953_40203019_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 6016}}, "n3337": {"so_40202953_40203019_0": {"length": 4, "quality": 0.6666666666666666, "section_id": 5784}}, "n4659": {"so_40202953_40203019_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 7515}}}, "40203019": {"Id": "40203019", "PostTypeId": "2", "Body": "<p>This code <a href=\"http://rextester.com/KGR4176\" rel=\"nofollow\">doesn't compile</a> and therefore doesn't produce any value, well-defined or otherwise. It runs afoul of</p>\n<blockquote>\n<p id=\"so_40202953_40203019_0\"><strong>[expr.dynamic.cast]/6</strong> Otherwise, <code>v</code> shall be a pointer to or a glvalue of a polymorphic type.</p>\n</blockquote>\n", "LastActivityDate": "2016-10-23T12:41:21.493", "CommentCount": "0", "CreationDate": "2016-10-23T12:41:21.493", "ParentId": "40202953", "Score": "3", "OwnerUserId": "1670129"}});