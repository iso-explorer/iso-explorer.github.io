post_cb({"18168460": {"Id": "18168460", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_18128648_18168460_0\">Is this a new feature of C++, or something specific to MSVC? </p>\n</blockquote>\n<p>No, as BoBtFish said, the 2003 C++ standard section <code>9.5 Unions</code> paragraph <code>1</code> says:</p>\n<blockquote>\n<p id=\"so_18128648_18168460_1\">[...] A union <strong>can have member functions (including constructors and destructors)</strong>, but not virtual (10.3) functions. A union shall not have base classes. A union shall not be used as a base class. An object of a class with a non-trivial constructor (12.1), a non-trivial copy constructor (12.8), a non-trivial destructor (12.4), or a non-trivial copy assignment operator (13.5.3, 12.8) cannot be a member of a union, nor can an array of such objects. If a union contains a static data member, or a member of reference type, the program is ill-formed.</p>\n</blockquote>\n<p><code>union</code>s do come under section <code>9 Classes</code> and the grammar for class-key is as follows:</p>\n<pre><code>class-key:\n   class\n   struct\n   union\n</code></pre>\n<p>So acts like a <code>class</code> but has many more restrictions. The key restriction being that <code>unions</code> can only have one active non-static member at a time, which is also covered in paragraph <code>1</code>:</p>\n<blockquote>\n<p id=\"so_18128648_18168460_2\">In a union, <strong>at most one of the non-static data members can be active at any time</strong>, that is, the value of at most one of the non-static data members can be stored in a union at any time. [...]</p>\n</blockquote>\n<p>The wording in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow noreferrer\"><code>C++11 draft standard</code></a> is similar so it has not changed too much since <code>2003</code>.</p>\n<p>As for the use of a <code>union</code>, there are two common reasons which are covered from different angles in this previous thread <a href=\"https://stackoverflow.com/questions/4788965/c-c-when-would-anyone-use-a-union-is-it-basically-a-remnant-from-the-c-only\">C/C++: When would anyone use a union? Is it basically a remnant from the C only days?</a> to summarize:</p>\n<ul>\n<li><p>To implement your own <a href=\"http://en.wikipedia.org/wiki/Variant_type\" rel=\"nofollow noreferrer\"><code>Variant type</code></a>, a <code>union</code> gives you the ability to represent all the varying types without wasting memory. <a href=\"https://stackoverflow.com/a/4789053\">This answer</a> to the thread gives a good example.</p></li>\n<li><p><a href=\"http://en.wikipedia.org/wiki/Type_punning\" rel=\"nofollow noreferrer\"><code>Type punning</code></a> but I would read <a href=\"http://cellperformance.beyond3d.com/articles/2006/06/understanding-strict-aliasing.html\" rel=\"nofollow noreferrer\"><code>Understanding Strict Aliasing</code></a> as well since there are many cases where <code>type punning</code> is <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow noreferrer\">undefined behavior</a>.</p></li>\n</ul>\n<p>This <a href=\"https://stackoverflow.com/a/4284119\">answer</a> to <a href=\"https://stackoverflow.com/questions/4075643/unions-as-base-class\"><code>Unions cannot be used as Base class</code></a> gives some really great insight into why <code>unions</code> are implemented as they are in <code>C++</code>.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2013-08-13T02:23:09.393", "Score": "2", "CreationDate": "2013-08-11T03:28:11.700", "ParentId": "18128648", "CommentCount": "0", "OwnerUserId": "1708801", "LastEditDate": "2017-05-23T12:28:54.233"}, "bq_ids": {"n4140": {"so_18128648_18168460_2": {"length": 19, "quality": 1.0, "section_id": 5913}}, "n3337": {"so_18128648_18168460_2": {"length": 19, "quality": 1.0, "section_id": 5685}}, "n4659": {"so_18128648_18168460_2": {"length": 19, "quality": 1.0, "section_id": 7404}}}, "18128648": {"ViewCount": "263", "Body": "<p>I was trying to learn more about unions and their usefulness, when I was surprised that the following code is perfectly valid and works exactly as expected:</p>\n<pre><code>template &lt;class T&gt;\nunion Foo\n{\n    T a;\n    float b;\n\n    Foo(const T&amp; value)\n        : a(value)\n    {\n    }\n\n    Foo(float f)\n        : b(f)\n    {\n    }\n\n    void bar()\n    {\n    }\n\n    ~Foo()\n    {\n    }\n};\n\nint main(int argc, char* argv[])\n{\n    Foo&lt;int&gt; foo1(12.0f);\n    Foo&lt;int&gt; foo2((int) 12);\n\n    foo1.bar();\n    foo2.bar();\n\n    int s = sizeof(foo1); // s = 4, correct\n\n    return 0;\n}\n</code></pre>\n<p>Until now, I had no idea that it is legal to declare unions with templates, constructors, destructor, and even member functions. In case it's relevant, I'm using Visual Studio 2012.</p>\n<p>When I searched the internet to find more about using unions in this manner, I found nothing. Is this a new feature of C++, or something specific to MSVC? If not, I'd like to learn more about unions, specifically examples of them used like classes (above). If someone could point me to a more detailed explanation of unions and their usage as data structures, it'd be much appreciated.</p>\n", "AcceptedAnswerId": "18168460", "Title": "Unions used like Classes/Structs", "CreationDate": "2013-08-08T14:27:13.290", "Id": "18128648", "CommentCount": "1", "LastEditDate": "2013-08-09T14:20:42.787", "PostTypeId": "1", "LastEditorUserId": "941915", "LastActivityDate": "2013-08-13T02:23:09.393", "Score": "4", "OwnerUserId": "941915", "Tags": "<c++><unions>", "AnswerCount": "1"}});