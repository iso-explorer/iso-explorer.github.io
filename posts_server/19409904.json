post_cb({"19409992": {"ParentId": "19409904", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>The type returned from <code>std::bind</code> is unspecified:</p>\n<blockquote>\n<h3>20.8.9.1.3 Function template bind [func.bind.bind]</h3>\n<p id=\"so_19409904_19409992_0\"><sup>1</sup> ...</p>\n<p id=\"so_19409904_19409992_1\"><code>template&lt;class F, class... BoundArgs&gt;</code><br>\n<code></code><em>unspecified</em> <code>bind(F&amp;&amp; f, BoundArgs&amp;&amp;... bound_args);</code></br></p>\n</blockquote>\n<p>You can use <code>std::function</code> to store them, e.g.</p>\n<pre><code>void f( int ) {}\nstd::function&lt; void(int) &gt; f2 = std::bind(&amp;f, _1);\n</code></pre>\n<p>In your case, this mean you could need to cast the type when you store the result from <code>std::bind</code>:</p>\n<pre><code>CallBackItems[] =\n{     \n    { 1, L\"OnReady\", std::function&lt; void() &gt;( std::bind(&amp;CPopunderDlg::OnReady, pDlg) ) },\n    { 2, L\"CustomFunction\", std::function&lt; void(int,int) &gt;( std::bind(&amp;CPopunderDlg::OnFSCommond, pDlg,_1,_2) ) },                  \n};\n</code></pre>\n<p>and then get it back with:</p>\n<pre><code>boost::any_cast&lt;std::function&lt;void()&gt;&gt;(CallBackItems[0].Func)();\n</code></pre>\n", "OwnerUserId": "2073257", "LastEditorUserId": "2073257", "LastEditDate": "2013-10-16T17:43:50.780", "Id": "19409992", "Score": "4", "CreationDate": "2013-10-16T17:32:22.553", "LastActivityDate": "2013-10-16T17:43:50.780"}, "bq_ids": {"n4140": {"so_19409904_19409992_1": {"section_id": 4632, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_19409904_19409992_1": {"section_id": 4443, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_19409904_19409992_1": {"section_id": 6002, "quality": 0.8571428571428571, "length": 6}}}, "19409904": {"CommentCount": "6", "ViewCount": "209", "PostTypeId": "1", "LastEditorUserId": "1394117", "CreationDate": "2013-10-16T17:28:39.243", "LastActivityDate": "2013-10-16T18:06:58.963", "Title": "What exactly is the returned data type for a particular std::bind?", "AcceptedAnswerId": "19409992", "LastEditDate": "2013-10-16T18:06:58.963", "Id": "19409904", "Score": "2", "Body": "<p>First I have to say I have to know the returned data type from std::bind.</p>\n<p>I have a struct which is defined as</p>\n<pre><code>typedef struct\n{\n  UINT ID;\n  CString NAME;\n  boost::any Func;// 'auto' doesn't work here\n} CALLBACK;\nCALLBACK CallBackItems[];\n</code></pre>\n<p>Func is a function holder, I want it to hold different kinds of callback function.</p>\n<p>Somewhere I initialize CallBackItems like this:</p>\n<pre><code>CallBackItems[] =\n{       \n    { 1,    L\"OnReady\",       std::bind(&amp;CPopunderDlg::OnReady, pDlg)           },\n    { 2,    L\"CustomFunction\",std::bind(&amp;CPopunderDlg::OnFSCommond, pDlg,_1,_2) }   \n   //...................    more items here         \n};\n</code></pre>\n<p>When I try to use the 'Func' in each CALLBACK I have to cast it first and then use it like a function. So far I tried:</p>\n<pre><code> //CallBackItems[0].Func is binded from pDlg-&gt;OnReady(), pDlg-&gt;OnReady() works here,\n   boost::any_cast&lt;function&lt;void()&gt;&gt;(CallBackItems[0].Func)();\n\n   ((std::function&lt;void()&gt;)(CallBackItems[0].Func))();\n</code></pre>\n<p>none of them work, anybody knows how to cast the returned variables from std::bind?</p>\n", "Tags": "<c++><boost><c++11><std>", "OwnerUserId": "1394117", "AnswerCount": "1"}});