post_cb({"45734427": {"Id": "45734427", "PostTypeId": "2", "Body": "<p>As already stated in <strong>many</strong> answers, this is the <em>comma operator</em>, so</p>\n<pre><code>argc--, argv++\n</code></pre>\n<p>is only <strong>one</strong> expression.</p>\n<p>The comma operator evaluates both sides, first left, then right. The result is that of the right side. So you could write some strange things like</p>\n<pre><code>int a = (x += 5, x + 2);\n</code></pre>\n<p>this would add 5 to x before assigning the result of <code>x + 2</code> to <code>a</code>. Such code is confusing and should be avoided. But it demonstrates an important property of the <em>comma operator</em>:</p>\n<p><strong>It acts as a sequence point</strong>: With the code above, you have the guarantee that 5 has already been added to x (the value of x <em>indeed</em> changed), before <code>x + 2</code> is evaluated.</p>\n<p>The main sensible usage of the comma operator is the one shown in your question. It comes handy in more complex <code>for</code> loops to have e.g. multiple side effects and a guaranteed sequencing.</p>\n<p>To clarify why sequencing <em>might</em> be important (it isn't in your example because the side effects don't depend on each other), look at this (artificial) example:</p>\n<pre><code>int i, j;\nfor (i = j = 0; i &lt; 10; ++i, j+=i)\n{\n    printf(\"%d\\n\", j);\n}\n</code></pre>\n<p>If the comma operator didn't introduce a sequence point here, you wouldn't know whether <code>j+=i</code> would add the incremented <code>i</code> or the not incremented one.</p>\n", "LastEditorUserId": "2371524", "LastActivityDate": "2017-08-17T12:22:53.560", "Score": "8", "CreationDate": "2017-08-17T11:53:48.047", "ParentId": "45734074", "CommentCount": "0", "OwnerUserId": "2371524", "LastEditDate": "2017-08-17T12:22:53.560"}, "45734074": {"ViewCount": "2139", "Body": "<p>I came across a for-loop in code that looks like this:</p>\n<pre><code>for ( argc--, argv++; argc &gt; 0; argc--, argv++ )\n</code></pre>\n<p>How does it work? Normally a <code>for</code> loop looks like this:  </p>\n<pre><code>for (initialization; condition; increment) {/*body of the loop*/}\n</code></pre>\n<p>But this doesn't contain any commas - what do the commas mean and do?</p>\n", "Title": "How do commas in the initialization and increment parts of a for-loop work?", "CreationDate": "2017-08-17T11:37:05.827", "LastActivityDate": "2017-08-17T18:33:38.990", "CommentCount": "4", "FavoriteCount": "4", "PostTypeId": "1", "LastEditDate": "2017-08-17T16:16:27.853", "LastEditorUserId": "1711796", "Id": "45734074", "Score": "12", "OwnerUserId": "3552519", "Tags": "<c++><c><for-loop><comma-operator>", "AnswerCount": "9"}, "45734273": {"Id": "45734273", "PostTypeId": "2", "Body": "<pre><code>for ( argc--, argv++; argc &gt; 0; argc--, argv++ )\n</code></pre>\n<p>can be read as </p>\n<pre><code>for ( (argc--), argv++; argc &gt; 0; (argc--), argv++ )\n</code></pre>\n<p>as the comma operator has the lowest possible precedence, the left-hand operator will be always evaluated first</p>\n", "LastActivityDate": "2017-08-17T11:45:44.640", "CommentCount": "0", "CreationDate": "2017-08-17T11:45:44.640", "ParentId": "45734074", "Score": "0", "OwnerUserId": "6419093"}, "45734176": {"Id": "45734176", "PostTypeId": "2", "Body": "<p>For multiple initialization and multiple updation/incremental,  we use <code>comma operator(,)</code>.\nWe separate each instances with a <code>comma(,)</code>.<br>\nIn this case, when the for loop is entered, both <code>argc--</code> and <code>argv++</code> expressions in the initialization part are executed.\nFrom then onward, every time the loop is iterated, both <code>argc--</code> and <code>argv++</code> expressions in the incremental part is executed. </br></p>\n", "LastEditorUserId": "3459185", "LastActivityDate": "2017-08-17T11:49:03.863", "Score": "4", "CreationDate": "2017-08-17T11:41:50.700", "ParentId": "45734074", "CommentCount": "0", "OwnerUserId": "3459185", "LastEditDate": "2017-08-17T11:49:03.863"}, "bq_ids": {"n4140": {"so_45734074_45734561_0": {"length": 5, "quality": 1.0, "section_id": 7146}, "so_45734074_45734548_0": {"length": 6, "quality": 0.6, "section_id": 5811}}, "n3337": {"so_45734074_45734561_0": {"length": 4, "quality": 0.8, "section_id": 6890}, "so_45734074_45734548_0": {"length": 6, "quality": 0.6, "section_id": 5584}}, "n4659": {"so_45734074_45734561_0": {"length": 5, "quality": 1.0, "section_id": 8647}}}, "45734197": {"Id": "45734197", "PostTypeId": "2", "Body": "<p><code>for ( argc--, argv++; argc &gt; 0; argc--, argv++ )</code> means the loop starts with the values of <code>argc</code>,<code>argv</code> set to minus 1 and plus 1 of their initial values correspondingly. Every iteration will decrease and increase their values, and it will stop once <code>argc</code> reaches 0 (meaning all input arguments were read).</p>\n", "LastEditorUserId": "4809113", "LastActivityDate": "2017-08-17T12:11:23.597", "Score": "0", "CreationDate": "2017-08-17T11:42:42.493", "ParentId": "45734074", "CommentCount": "6", "OwnerUserId": "4809113", "LastEditDate": "2017-08-17T12:11:23.597"}, "45734137": {"Id": "45734137", "PostTypeId": "2", "Body": "<p>argv owns command line arguments. However, the very first one is the name of the program.</p>\n<p>So, the loop begins at <code>argv[1]</code> and treat every arguments given by the command line without treating the name of the program </p>\n", "LastActivityDate": "2017-08-17T11:40:16.583", "CommentCount": "0", "CreationDate": "2017-08-17T11:40:16.583", "ParentId": "45734074", "Score": "0", "OwnerUserId": "4950448"}, "45734548": {"Id": "45734548", "PostTypeId": "2", "Body": "<p>In the C Standard (6.8.5.3 The for statement) the for statement is presented in the following form</p>\n<pre><code>for ( clause-1 ; expression-2 ; expression-3 ) statement\n</code></pre>\n<p>and according to the <em>clause-1</em> there is written</p>\n<blockquote>\n<p id=\"so_45734074_45734548_0\">If clause-1 is an expression, it is evaluated as a void expression\n  before the first evaluation of the controlling expression</p>\n</blockquote>\n<p>In this for statement</p>\n<pre><code>for ( argc--, argv++; argc &gt; 0; argc--, argv++ )  \n</code></pre>\n<p><em>clause-1</em> is the expression <code>argc--, argv++</code> based on the comma operator.\nFrom the C Standard (6.5.17 Comma operator)</p>\n<blockquote>\n<p id=\"so_45734074_45734548_1\">2 The left operand of a comma operator is evaluated as a void\n  expression; there is a sequence point between its evaluation and that\n  of the right operand. Then the right operand is evaluated; the result\n  has its type and value.</p>\n</blockquote>\n<p>The only peculiarity is that the result of the operator is not used in the for statement. The expression is used for its side effects.</p>\n<p>Usually the first parameter passed to a running program is its name. The expression in the <em>clause-1</em> skips this first parameter.</p>\n<p>Compare the output of these two programs. Let's assume that the user specified command line parameters</p>\n<pre><code>first second third\n</code></pre>\n<p>The program output of this program</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main( int argc, char * argv[] )\n{\n    for ( argc--, argv++; argc &gt; 0; argc--, argv++ )\n    {\n        puts( *argv );\n    }        \n\n    return 0;\n}\n</code></pre>\n<p>is</p>\n<pre><code>first \nsecond \nthird\n</code></pre>\n<p>and the program output of this program when the <em>clause-1</em> is empty (neither expression nor declaration)</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main( int argc, char * argv[] )\n{\n    for ( /*argc--, argv++*/; argc &gt; 0; argc--, argv++ )\n    {\n        puts( *argv );\n    }        \n\n    return 0;\n}\n</code></pre>\n<p>is</p>\n<pre><code>./prog.exe\nfirst \nsecond \nthird\n</code></pre>\n<p>To make the comma operator clear consider a program as the first demonstrative program where instead of the for loop there is used a while loop.</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main( int argc, char * argv[] )\n{\n    while ( argv++, --argc &gt; 0 )\n    {\n        puts( *argv );\n    }        \n\n    return 0;\n}\n</code></pre>\n<p>The output will be the same as in the first demonstrative program</p>\n<pre><code>first \nsecond \nthird\n</code></pre>\n<p>Here is in the while statement there is also used the comma operator. The difference is that in this case the value of the comma operator is used as the value of the condition.</p>\n<p>Pay attention to that the <em>expression-3</em> also represents by itself an expression with the comma operator.</p>\n<p>Also as the question is marked with the C++ tag then you should know that in C++ the second clause of the for statement (in C++ it is named as <em>condition</em>) can also be either an expression or declaration.</p>\n", "LastEditorUserId": "2877241", "LastActivityDate": "2017-08-17T12:30:06.393", "Score": "27", "CreationDate": "2017-08-17T11:59:00.057", "ParentId": "45734074", "CommentCount": "2", "OwnerUserId": "2877241", "LastEditDate": "2017-08-17T12:30:06.393"}, "45734561": {"Id": "45734561", "PostTypeId": "2", "Body": "<blockquote id=\"so_45734074_45734561_0\">\n<pre><code>for ( argc--, argv++; argc &gt; 0; argc--, argv++ )  \n{ ... }\n</code></pre>\n</blockquote>\n<p>Does the following:</p>\n<ol>\n<li>Execute \"<em>Initialisation</em>\" part: Decrement <code>argc</code> and increment <code>argv</code></li>\n<li>Check if <code>argv &gt; 0</code>, if this is not the case then exit the loop</li>\n<li>Execute <code>{ ... }</code></li>\n<li>Execute \"<em>Updation</em>\" part: Decrement <code>argc</code> and increment <code>argv</code></li>\n<li>Goto step 2. above</li>\n</ol>\n<hr>\n<p>As \"<em>Initialisation</em>\" and \"<em>Updation</em>\"  are the same this could also be written as</p>\n<pre><code>while (argc--, argv++, argc &gt; 0)\n{ ... }\n</code></pre>\n<p>This expression</p>\n<pre><code>(argc--, argv++, argc &gt; 0)\n</code></pre>\n<p>consists of three sub-expressions separated by <a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.5.17\" rel=\"nofollow noreferrer\">the comma-operator</a>.</p>\n<p>Those sub-expressions are executed from left to right. </p>\n<p>The whole expression evaluates to the result of the right most sub-expression.</p>\n</hr>", "LastEditorUserId": "694576", "LastActivityDate": "2017-08-17T12:05:35.783", "Score": "1", "CreationDate": "2017-08-17T11:59:51.977", "ParentId": "45734074", "CommentCount": "0", "OwnerUserId": "694576", "LastEditDate": "2017-08-17T12:05:35.783"}, "45734526": {"Id": "45734526", "PostTypeId": "2", "Body": "<p>The initialization parameter in for loop does not means only initializing a variable with particular value.</p>\n<p>It can also have one or more regular expressions separated by comma.</p>\n<p>Hope it will help !!</p>\n", "LastActivityDate": "2017-08-17T11:57:55.840", "CommentCount": "0", "CreationDate": "2017-08-17T11:57:55.840", "ParentId": "45734074", "Score": "0", "OwnerUserId": "6456149"}, "45734114": {"Id": "45734114", "PostTypeId": "2", "Body": "<p>In this <code>for</code> loop <a href=\"https://en.wikipedia.org/wiki/Comma_operator\" rel=\"nofollow noreferrer\">comma operator</a> is used in first and last expressions. So the <code>for</code> statement is like  </p>\n<pre><code>for(\n    (argc--, argv++);  // Expression 1\n    argc &gt; 0;          // Expression 2\n    (argc--, argv++)   // Expression 3\n  )  \n</code></pre>\n<p>There are only three expressions <code>(argc--, argv++)</code>,  <code>argc &gt; 0</code> and <code>(argc--, argv++)</code>.<br>\nExpression 1 should not necessarily be a declaration statement, it can be any valid expression or even it can be omitted  </br></p>\n<pre><code>for(;expression2; expression3)\n</code></pre>\n<p>or all expressions can be omitted  </p>\n<pre><code>for(;;)  \n</code></pre>\n<p>In the given for loop <code>(argc--, argv++)</code> is used as first expression to update variables <code>argc</code> and <code>argv</code> (<code>argc</code> will be decremented by 1 and pointer <code>argv</code> will be incremented by 1). Once the side-effect on these variables is done the program will enter the loop body after checking <code>argc &gt; 0</code> for <code>true</code>. This is what happen when you do  </p>\n<pre><code>for( i = 1; i &lt; 10; i++)\n</code></pre>\n<p><code>i = 1</code> update <code>i</code> to <code>1</code> and then condition is checked. This updation of <code>i</code> is done only once and then for the rest it is updated by the expression <code>i++</code>. </p>\n", "LastEditorUserId": "2455888", "LastActivityDate": "2017-08-17T18:33:38.990", "Score": "3", "CreationDate": "2017-08-17T11:39:22.430", "ParentId": "45734074", "CommentCount": "0", "OwnerUserId": "2455888", "LastEditDate": "2017-08-17T18:33:38.990"}});