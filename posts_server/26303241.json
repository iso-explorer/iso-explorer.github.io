post_cb({"bq_ids": {"n4140": {"so_26303241_26303533_0": {"length": 50, "quality": 1.0, "section_id": 268}}, "n3337": {"so_26303241_26303533_0": {"length": 50, "quality": 1.0, "section_id": 259}}, "n4659": {"so_26303241_26303533_0": {"length": 50, "quality": 1.0, "section_id": 275}}}, "26303241": {"ViewCount": "494", "Body": "<p>The authors of a <a href=\"http://sourceforge.net/p/cppunit\" rel=\"nofollow\">popular library</a> decided to implement <a href=\"http://sourceforge.net/p/cppunit/code/HEAD/tree/tags/REL_1_10_2/cppunit/include/cppunit/TestAssert.h#l36\" rel=\"nofollow\">the following design pattern</a>:</p>\n<pre><code>// my_traits.hpp\n#include &lt;stdio.h&gt;\n#include &lt;assert.h&gt;\n\ntemplate&lt;typename T&gt;\nstruct my_traits {\n        static bool equals(const T&amp; x, const T&amp; y) {\n                printf(\"base\\n\");\n                return x == y;\n        }\n};\n\ntemplate&lt;typename T&gt;\nvoid my_assert(const T&amp; x, const T&amp; y) {\n        assert(my_traits&lt;T&gt;::equals(x, y));\n}\n</code></pre>\n<p>Now assume that the library is used as follows:</p>\n<pre><code>// main.cpp\nvoid my_test1();\nvoid my_test2();\n\nint main() {\n        my_test1();\n        my_test2();\n        return 0;\n}\n</code></pre>\n<p>and</p>\n<pre><code>// my_test1.cpp\n#include \"my_traits.hpp\"\n\nvoid my_test1() {\n        my_assert(-1.0, -1.0);\n}\n</code></pre>\n<p>and</p>\n<pre><code>//my_test2.cpp\n#include \"my_traits.hpp\"\n\n#ifdef _WIN32\n#include &lt;float.h&gt;\n#define isnan _isnan\n#else\n#include &lt;math.h&gt;\n#endif\n\ntemplate&lt;&gt;\nstruct my_traits&lt;double&gt; {\n        static bool equals(const double&amp; x, const double&amp; y) {\n                printf(\"specialization\\n\");\n                return x == y || isnan(x) &amp;&amp; isnan(y);\n        }\n};\n\nvoid my_test2() {\n        my_assert(-1.0, -1.0);\n}\n</code></pre>\n<p>Now,</p>\n<pre><code>$ g++ main.cpp my_test1.cpp my_test2.cpp &amp;&amp; ./a.out\nbase\nbase\n</code></pre>\n<p>whereas</p>\n<pre><code>$ g++ main.cpp my_test2.cpp my_test1.cpp &amp;&amp; ./a.out\nspecialization\nspecialization\n</code></pre>\n<p>The user of the library would, of course, desire to obtain the following result irrespective of link order:</p>\n<pre><code>base\nspecialization\n</code></pre>\n<p>Short of specializing or overloading (inlined) <code>my_assert</code> instead of <code>my_traits</code>, and knowing that injecting the same specialization into every translation unit where <code>my_traits.hpp</code> is included is not acceptable (or maintainable), <strong>can anyone think of another trick that achieves the desired behaviour without modifying <code>my_traits.hpp</code> or specializing <code>my_assert</code></strong> (or using a kludgy wrapper class for <code>double</code> :) )?</p>\n", "Title": "One definition rule and template class specializations", "CreationDate": "2014-10-10T15:46:35.523", "LastActivityDate": "2014-10-12T01:25:33.463", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-10-12T01:25:33.463", "LastEditorUserId": "66516", "Id": "26303241", "Score": "3", "OwnerUserId": "66516", "Tags": "<c++><c++11><generic-programming><cppunit>", "AnswerCount": "1"}, "26303533": {"Id": "26303533", "PostTypeId": "2", "Body": "<p>\u00a714.7.3 [temp.expl.spec]/p6 (emphasis added):</p>\n<blockquote>\n<p id=\"so_26303241_26303533_0\">If a template, a member template or a member of a class template is\n  explicitly specialized then <strong>that specialization shall be declared\n  before the first use of that specialization that would cause an\n  implicit instantiation to take place, in every translation unit in\n  which such a use occurs</strong>; no diagnostic is required. If the program\n  does not provide a definition for an explicit specialization and\n  either the specialization is used in a way that would cause an\n  implicit instantiation to take place or the member is a virtual member\n  function, the program is ill-formed, no diagnostic required.</p>\n</blockquote>\n", "LastActivityDate": "2014-10-10T16:02:26.097", "CommentCount": "3", "CreationDate": "2014-10-10T16:02:26.097", "ParentId": "26303241", "Score": "5", "OwnerUserId": "2756719"}});