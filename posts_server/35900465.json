post_cb({"35900735": {"ParentId": "35900465", "CommentCount": "3", "CreationDate": "2016-03-09T19:21:59.083", "OwnerUserId": "1593860", "PostTypeId": "2", "Id": "35900735", "Score": "3", "Body": "<p>Those declarations and definitions are all the same! Top-level const is ignored in matching a declaration to a definition. So this combination is okay:</p>\n<pre><code>class C {\n    void f(int);\n};\n\nvoid C::f(const int) {\n}\n</code></pre>\n<p>because the <code>const</code> doesn't count, loosely speaking. Similarly,</p>\n<pre><code>class C {\n    void f(int) {\n    }\n    void f(const int) {\n    }\n};\n</code></pre>\n<p>is an error because it defines the <strong>same</strong> function twice.</p>\n", "LastActivityDate": "2016-03-09T19:21:59.083"}, "35901059": {"ParentId": "35900465", "CommentCount": "4", "CreationDate": "2016-03-09T19:39:15.303", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "35901059", "Score": "1", "Body": "<p>According to the standard ([dcl.fct]/5)</p>\n<blockquote>\n<p id=\"so_35900465_35901059_0\">All declarations for a function shall agree exactly in both the return type and the parameter-\n  type-list. ... After\n  determining the type of each parameter, any parameter of type \u201carray of <code>T</code>\u201d or \u201cfunction returning <code>T</code>\u201d is\n  adjusted to be \u201cpointer to <code>T</code>\u201d or \u201cpointer to function returning <code>T</code>,\u201d respectively. After producing the list\n  of parameter types, any top-level <em>cv-qualifiers</em> modifying a parameter type are deleted when forming the\n  function type. The resulting list of transformed parameter types and the presence or absence of the ellipsis\n  or a function parameter pack is the function\u2019s <em>parameter-type-list.</em></p>\n</blockquote>\n<p>So two declarations (note: a definition is a declaration) can agree even though one has <code>const int a</code> and the other has <code>int a</code>: the top-level <code>const</code> is ignored when matching declarations.</p>\n<p>However, top-level <code>const</code> matters in the definition. If the parameter is <code>const int a</code>, then the function body cannot modify <code>a</code>. It actually makes some sense to omit <code>const</code> in the header and include it in the definition, since the caller does not need to know that a parameter passed by value is not modified (it is an implementation detail). That's probably the reason why there isn't a warning for it. (It would be stranger to have <code>const</code> in the header and no <code>const</code> in the definition---maybe there should be a warning for that...)</p>\n", "LastActivityDate": "2016-03-09T19:39:15.303"}, "bq_ids": {"n4140": {"so_35900465_35901059_0": {"section_id": 3241, "quality": 0.9636363636363636, "length": 53}}, "n3337": {"so_35900465_35901059_0": {"section_id": 3114, "quality": 0.9636363636363636, "length": 53}}, "n4659": {"so_35900465_35901059_0": {"section_id": 3997, "quality": 0.8545454545454545, "length": 47}}}, "35900465": {"CommentCount": "7", "ViewCount": "112", "PostTypeId": "1", "LastEditorUserId": "207421", "CreationDate": "2016-03-09T19:08:09.977", "LastActivityDate": "2016-03-09T19:39:15.303", "Title": "How to make compiler give at least a warning when const is not used consistently", "AcceptedAnswerId": "35901059", "LastEditDate": "2016-03-09T19:21:02.030", "Id": "35900465", "Score": "2", "Body": "<p>Suppose I have a code with </p>\n<p>Test.h</p>\n<pre><code>class Test{\n public:\n  int Func(const int a);\n};\n</code></pre>\n<p>Test.cpp</p>\n<pre><code>int Test::Func(const int a){\n  // some code\n}\n</code></pre>\n<p>If I take out the const for one of them the compiler will still compiles and give zero warnings. Even when -Wall and -Wextra is enabled in GCC and  /W4 is enabled in Visual studio.</p>\n<p>For example Test.h</p>\n<pre><code>class Test{\n public:\n  int Func(int a);\n};\n</code></pre>\n<p>Test.cpp</p>\n<pre><code>int Test::Func(const int a){\n  // some code\n}\n</code></pre>\n<p>or Test.h</p>\n<pre><code>class Test{\n public:\n  int Func(const int a);\n};\n</code></pre>\n<p>Test.cpp both compiles fine.</p>\n<pre><code>int Test::Func(int a){\n  // some code\n}\n</code></pre>\n<p>How does one enable the compiler to detect when const is not use consistently between header files and source files?</p>\n", "Tags": "<c++><const><compiler-warnings>", "OwnerUserId": "3667089", "AnswerCount": "2"}});