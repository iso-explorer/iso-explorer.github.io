post_cb({"18479295": {"CommentCount": "5", "ViewCount": "21960", "ClosedDate": "2013-08-28T05:48:20.880", "CreationDate": "2013-08-28T04:08:15.653", "LastActivityDate": "2016-10-27T17:45:06.750", "PostTypeId": "1", "FavoriteCount": "5", "Title": "member initializer does not name a non-static data member or base class", "Id": "18479295", "Score": "16", "Body": "<p>I'm having a hard time finding hits on google for this.</p>\n<pre><code>struct a {\n    float m_x;\n    float m_z;\npublic:\n    a(float x): m_x(x) {}\n};\n\nclass b : public a {\n    b(float z): m_z(z) {}\n};\n</code></pre>\n<p>On clang 3.2:</p>\n<pre><code>error: member initializer 'm_z' does not name a non-static data member or base class\n    b(float z): m_z(z) {}\n</code></pre>\n", "Tags": "<c++><c++11><clang>", "OwnerUserId": "340947", "AnswerCount": "1"}, "18479406": {"ParentId": "18479295", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>No you cannot initialize base class members from initializer list directly. This is because order of initialization proceeds in this way</p>\n<p>C++ Standard n3337 <strong>\u00a7</strong> 12.6.2/10</p>\n<blockquote>\n<p id=\"so_18479295_18479406_0\">In a non-delegating constructor, initialization proceeds in the\n  following order: </p>\n<p id=\"so_18479295_18479406_1\">\u2014 First, and only for the constructor of the most\n  derived class (1.8), virtual base classes are initialized in the order\n  they appear on a depth-first left-to-right traversal of the directed\n  acyclic graph of base classes, where \u201cleft-to-right\u201d is the order of\n  appearance of the base classes in the derived class\n  base-specifier-list. </p>\n<p id=\"so_18479295_18479406_2\">\u2014 <strong>Then, direct base classes are initialized</strong> in\n  declaration order as they appear in the base-specifier-list\n  (regardless of the order of the mem-initializers). </p>\n<p id=\"so_18479295_18479406_3\">\u2014 <strong>Then, non-static\n  data members are initialized</strong> in the order they were declared in the\n  class definition (again regardless of the order of the\n  mem-initializers). </p>\n<p id=\"so_18479295_18479406_4\">\u2014 <strong>Finally, the compound-statement of the\n  constructor body is executed</strong>.</p>\n<p id=\"so_18479295_18479406_5\">[ Note: The declaration order is mandated to ensure that base and\n  member subobjects are destroyed in the reverse order of\n  initialization. \u2014 end note ]</p>\n</blockquote>\n<p>So you can specify a constructor in a base class (it can be protected) and use that one in initialization list of derived class (<a href=\"https://stackoverflow.com/a/23493639/1141471\">should be preferred</a>) or you can <em>assign</em> to a base class member in derived class ctor body (different behaviour, different effect and also less efficient - you are assigning to default initialized (already has value) member).</p>\n<p>In the former case you might write it this way:</p>\n<pre><code>struct A {\n    float m_x;\n    float m_z;\n    A(){}\nprotected:\n    A(float x): m_x(x) {}\n};\n\nclass B : public A {\npublic:\n    B(float z) : A(z) {}\n    // alternatively\n    // B(float z) {\n    //     m_x = z;\n    // }\n};\n\nint main(){\n    B b(1);\n    return 0;\n}\n</code></pre>\n", "OwnerUserId": "1141471", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:09:37.750", "Id": "18479406", "Score": "23", "CreationDate": "2013-08-28T04:22:30.067", "LastActivityDate": "2016-10-27T17:45:06.750"}, "bq_ids": {"n4140": {"so_18479295_18479406_4": {"section_id": 438, "quality": 1.0, "length": 5}, "so_18479295_18479406_3": {"section_id": 438, "quality": 1.0, "length": 15}, "so_18479295_18479406_0": {"section_id": 438, "quality": 1.0, "length": 6}, "so_18479295_18479406_1": {"section_id": 438, "quality": 1.0, "length": 29}, "so_18479295_18479406_2": {"section_id": 438, "quality": 1.0, "length": 13}, "so_18479295_18479406_5": {"section_id": 438, "quality": 0.7333333333333333, "length": 11}}, "n3337": {"so_18479295_18479406_4": {"section_id": 429, "quality": 1.0, "length": 5}, "so_18479295_18479406_3": {"section_id": 429, "quality": 1.0, "length": 15}, "so_18479295_18479406_0": {"section_id": 429, "quality": 1.0, "length": 6}, "so_18479295_18479406_1": {"section_id": 429, "quality": 1.0, "length": 29}, "so_18479295_18479406_2": {"section_id": 429, "quality": 1.0, "length": 13}, "so_18479295_18479406_5": {"section_id": 429, "quality": 0.7333333333333333, "length": 11}}, "n4659": {"so_18479295_18479406_4": {"section_id": 458, "quality": 1.0, "length": 5}, "so_18479295_18479406_3": {"section_id": 458, "quality": 1.0, "length": 15}, "so_18479295_18479406_0": {"section_id": 458, "quality": 1.0, "length": 6}, "so_18479295_18479406_1": {"section_id": 458, "quality": 1.0, "length": 29}, "so_18479295_18479406_2": {"section_id": 458, "quality": 1.0, "length": 13}, "so_18479295_18479406_5": {"section_id": 458, "quality": 0.7333333333333333, "length": 11}}}});