post_cb({"10687599": {"Id": "10687599", "PostTypeId": "2", "Body": "<p>It <strong>could</strong> be reduced when usage is below 1/4 of capacity (this will give amortized constant cost of reallocation). But STL implementation is not obligated to reduce vector anytime, when you use only methods you have listed.</p>\n", "LastActivityDate": "2012-05-21T14:52:15.187", "CommentCount": "13", "CreationDate": "2012-05-21T14:52:15.187", "ParentId": "10687549", "Score": "0", "OwnerUserId": "1316906"}, "10687608": {"Id": "10687608", "PostTypeId": "2", "Body": "<p>Nope, <code>pop_back()</code> doesn't do it. Others certainly don't. The only way is the way you mentioned. </p>\n<pre><code>template&lt; typename T, class Allocator &gt;\nvoid shrink_capacity(std::vector&lt;T,Allocator&gt;&amp; v)\n{\n   std::vector&lt;T,Allocator&gt;(v.begin(),v.end()).swap(v);\n}\n</code></pre>\n<p>And <code>shrink_to_fit()</code> in c++11</p>\n", "LastActivityDate": "2012-05-21T14:52:32.370", "CommentCount": "2", "CreationDate": "2012-05-21T14:52:32.370", "ParentId": "10687549", "Score": "5", "OwnerUserId": "661797"}, "bq_ids": {"n4140": {"so_10687549_10687928_1": {"length": 20, "quality": 0.9090909090909091, "section_id": 972}, "so_10687549_10687928_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 713}}, "n3337": {"so_10687549_10687928_1": {"length": 22, "quality": 1.0, "section_id": 961}, "so_10687549_10687928_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 702}}, "n4659": {"so_10687549_10687928_1": {"length": 20, "quality": 0.9090909090909091, "section_id": 1034}, "so_10687549_10687928_0": {"length": 25, "quality": 0.9615384615384616, "section_id": 742}}}, "10687928": {"Id": "10687928", "PostTypeId": "2", "Body": "<p>The standard guarantees that no references/iterators will be invalidated during e.g. <code>pop_back</code>.  From [container.requirements.general]:</p>\n<blockquote>\n<p id=\"so_10687549_10687928_0\">Unless otherwise specified (either explicitly or by defining a function in terms of other functions), invoking a\n  container member function or passing a container as an argument to a library function shall not invalidate\n  iterators to, or change the values of, objects within that container.</p>\n</blockquote>\n<p>And there is no specification otherwise for e.g. <code>pop_back</code>.</p>\n<p>So that implies that reallocation cannot occur.<sup>1</sup></p>\n<p><hr>\n<sub>1. It has been suggested in comments to another answer that perhaps the memory corresponding to a popped element could be freed, which wouldn't invalidate any references to \"live\" elements.</sub></hr></p>\n<p>But then that would prevent the array from regrowing, as the standard specifically says that insertions cannot provoke a reallocation until the size exceeds the capacity.  From [vector.capacity]:</p>\n<blockquote>\n<p id=\"so_10687549_10687928_1\">It is guaranteed that no reallocation takes place during insertions that happen after\n  a call to <code>reserve()</code> until the time when an insertion would make the size of the vector greater than\n  the value of <code>capacity()</code>.</p>\n</blockquote>\n<p></p>\n", "LastEditorUserId": "129570", "LastActivityDate": "2012-05-21T15:18:54.563", "Score": "9", "CreationDate": "2012-05-21T15:13:22.507", "ParentId": "10687549", "CommentCount": "1", "OwnerUserId": "129570", "LastEditDate": "2012-05-21T15:18:54.563"}, "10687549": {"ViewCount": "1704", "Body": "<p>(This question is not about the <code>shrink_to_fit</code> tricks (using <code>swap()</code> or <code>shrink_to_fit()</code> in C++11).)</p>\n<p>If I use a vector only through <code>insert()</code>, <code>erase()</code>, <code>push_back()</code>, <code>pop_back()</code>, <code>clear()</code>, when the capacity is not enough, it will increase and reallocation for the vector will occur. But under what circumstances will the capacity reduce? And will capacity reduction necessarily cause reallocation?</p>\n", "Title": "When will the capacity of a vector reduce?", "CreationDate": "2012-05-21T14:49:50.653", "LastActivityDate": "2012-11-03T14:12:57.270", "CommentCount": "0", "LastEditDate": "2012-11-03T14:12:57.270", "PostTypeId": "1", "LastEditorUserId": "851835", "Id": "10687549", "Score": "4", "OwnerUserId": "851835", "Tags": "<c++><stl>", "AnswerCount": "4"}, "10687634": {"Id": "10687634", "PostTypeId": "2", "Body": "<p>The C++ Standard doesn't need <code>std::vector</code> to reduce the <code>capacity()</code> at any point of time during its existence. This is strictly implementation dependent So Implementations might on their own but you shouldn't rely on that behavior.</p>\n", "LastActivityDate": "2012-05-21T14:54:16.787", "CommentCount": "15", "CreationDate": "2012-05-21T14:54:16.787", "ParentId": "10687549", "Score": "0", "OwnerUserId": "452307"}});