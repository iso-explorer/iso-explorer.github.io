post_cb({"bq_ids": {"n4140": {"so_20608662_20609313_1": {"length": 14, "quality": 0.875, "section_id": 460}, "so_20608662_20609313_3": {"length": 14, "quality": 0.875, "section_id": 460}, "so_20608662_20609313_4": {"length": 8, "quality": 0.8, "section_id": 460}, "so_20608662_20609313_2": {"length": 12, "quality": 1.0, "section_id": 458}, "so_20608662_20609313_0": {"length": 12, "quality": 1.0, "section_id": 458}}, "n3337": {"so_20608662_20609313_1": {"length": 14, "quality": 0.875, "section_id": 451}, "so_20608662_20609313_3": {"length": 14, "quality": 0.875, "section_id": 451}, "so_20608662_20609313_4": {"length": 6, "quality": 0.6, "section_id": 451}, "so_20608662_20609313_2": {"length": 12, "quality": 1.0, "section_id": 449}, "so_20608662_20609313_0": {"length": 12, "quality": 1.0, "section_id": 449}}, "n4659": {"so_20608662_20609313_1": {"length": 14, "quality": 0.875, "section_id": 483}, "so_20608662_20609313_3": {"length": 14, "quality": 0.875, "section_id": 483}, "so_20608662_20609313_4": {"length": 8, "quality": 0.8, "section_id": 483}, "so_20608662_20609313_2": {"length": 12, "quality": 1.0, "section_id": 481}, "so_20608662_20609313_0": {"length": 12, "quality": 1.0, "section_id": 481}}}, "20609313": {"Id": "20609313", "PostTypeId": "2", "Body": "<p>C++11, or rather n3485, [class.copy]/9:</p>\n<blockquote>\n<p id=\"so_20608662_20609313_0\">If the definition of a class <code>X</code> does not explicitly declare a move constructor, one will be implicitly declared\n  as defaulted if and only if</p>\n<ul>\n<li><code>X</code> does not have a user-declared copy constructor,</li>\n<li><code>X</code> does not have a user-declared copy assignment operator,</li>\n<li><code>X</code> does not have a user-declared move assignment operator,</li>\n<li><code>X</code> does not have a user-declared destructor, and</li>\n<li>the move constructor would not be implicitly defined as deleted.</li>\n</ul>\n</blockquote>\n<p>and /11:</p>\n<blockquote>\n<p id=\"so_20608662_20609313_1\">An implicitly-declared copy/move constructor is an <code>inline public</code> member of its class. A defaulted copy/\n  move constructor for a class <code>X</code> is defined as deleted (8.4.3) if <code>X</code> has:</p>\n<ul>\n<li>[...]</li>\n<li>for the copy constructor, a non-static data member of rvalue reference type, or</li>\n<li>for the move constructor, a non-static data member or direct or virtual base class with a type that\n  does not have a move constructor and is not trivially copyable.</li>\n</ul>\n</blockquote>\n<p>As <code>with_copy</code> is <em>not</em> trivially copyable, <code>foo</code> will have <em>no</em> move-constructor (it would be defined as deleted, therefore it won't be implicitly declared).</p>\n<hr>\n<p>C++1y, or rather github repo commit e31867c0 from 2013-11-12; incorporating <a href=\"http://www.open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#1402\">DR1402</a>:</p>\n<p>/9:</p>\n<blockquote>\n<p id=\"so_20608662_20609313_2\">If the definition of a class <code>X</code> does not explicitly declare a move\n  constructor, one will be implicitly declared as defaulted if and only\n  if</p>\n<ul>\n<li><code>X</code> does not have a user-declared copy constructor,</li>\n<li><code>X</code> does not have a user-declared copy assignment operator,</li>\n<li><code>X</code> does not have a user-declared move assignment operator, and</li>\n<li><code>X</code> does not have a user-declared destructor.</li>\n</ul>\n</blockquote>\n<p>and /11:</p>\n<blockquote>\n<p id=\"so_20608662_20609313_3\">An implicitly-declared copy/move constructor is an <code>inline public</code>\n  member of its class. A defaulted copy/ move constructor for a class <code>X</code>\n  is defined as deleted (8.4.3) if <code>X</code> has:</p>\n<ul>\n<li>[...]</li>\n<li>for the copy constructor, a non-static data member of rvalue reference type.</li>\n</ul>\n<p id=\"so_20608662_20609313_4\">A defaulted move constructor that is defined as deleted is ignored by\n  overload resolution (13.3, 13.4).</p>\n</blockquote>\n<p>Here, <code>foo</code> will have a move-constructor.</p>\n</hr>", "LastActivityDate": "2013-12-16T11:02:42.567", "CommentCount": "2", "CreationDate": "2013-12-16T11:02:42.567", "ParentId": "20608662", "Score": "8", "OwnerUserId": "420683"}, "20609057": {"Id": "20609057", "PostTypeId": "2", "Body": "<p>I'm not quite sure what you tested but it <code>foo</code> is surely both move assignable and move constructible. Admittedly, this doesn't say anything about a move constructor or a move assignment being accessible, just that construction or assignment from an rvalue works. Both <a href=\"http://clang.llvm.org/\" rel=\"nofollow noreferrer\">clang</a> (clang version 3.5 (trunk 196718)) and <a href=\"http://gcc.gnu.org/\" rel=\"nofollow noreferrer\">gcc</a> (gcc version 4.9.0 20131031 (experimental) (GCC)) agree with this assessment. This is the complete source I tried:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n#include &lt;memory&gt;\n\nstruct with_copy {\n    with_copy() = default;\n    with_copy(with_copy const&amp;) {}\n    with_copy&amp; operator=(with_copy const&amp;) { return *this; }\n};\n\nstruct foo {\n    with_copy c;\n    std::unique_ptr&lt;int&gt; p;\n};\n\nint main()\n{\n    std::cout &lt;&lt; \"move constructible: \"\n              &lt;&lt; std::is_move_constructible&lt;foo&gt;::value &lt;&lt; '\\n';\n    std::cout &lt;&lt; \"move assignable: \"\n              &lt;&lt; std::is_move_assignable&lt;foo&gt;::value &lt;&lt; '\\n';\n    foo f0;\n    foo f1 = std::move(f0);\n    f0 = std::move(f1);\n}\n</code></pre>\n", "LastEditorUserId": "1120273", "LastActivityDate": "2013-12-16T11:17:05.387", "Score": "7", "CreationDate": "2013-12-16T10:51:30.660", "ParentId": "20608662", "CommentCount": "0", "OwnerUserId": "1120273", "LastEditDate": "2013-12-16T11:17:05.387"}, "20608662": {"ViewCount": "1192", "Body": "<p>Consider the following classes.</p>\n<pre><code>struct with_copy {\n    with_copy() = default;\n    with_copy(with_copy const&amp;) {}\n    with_copy&amp; operator=(with_copy const&amp;) { return *this; }\n};\n\nstruct foo {\n    with_copy c;\n    std::unique_ptr&lt;int&gt; p;\n};\n</code></pre>\n<ul>\n<li>Does <code>with_copy</code> have a copy constructor? Yes. It was explicitly defined.</li>\n<li>Does <code>with_copy</code> have a move constructor? No. The explicit copy constructor prevents it from being generated.</li>\n<li>Does <code>with_copy</code> have a deleted move constructor? No. Not having a move constructor is not the same as having a deleted one. A deleted move constructor would make an attempt to move ill-formed instead of degenerating to a copy.</li>\n<li>Is <code>with_copy</code> copyable? Yes. Its copy constructor is used for copies.</li>\n<li>Is <code>with_copy</code> movable? Yes. Its copy constructor is used for moves.</li>\n</ul>\n<p>... and now the tricky ones.</p>\n<ul>\n<li>Does <code>foo</code> have a copy constructor? Yes. It has a deleted one, as its defaulted definition would be ill-formed due to invoking <code>unique_ptr</code>'s deleted copy constructor.</li>\n<li>Does <code>foo</code> have a move constructor? GCC says yes, clang says no.</li>\n<li>Does <code>foo</code> have a deleted move constructor? Both GCC and clang say no.</li>\n<li>Is <code>foo</code> copyable? No. Its copy constructor is deleted.</li>\n<li>Is <code>foo</code> movable? GCC says yes, clang says no.</li>\n</ul>\n<p>(The behaviour is similar when one considers assignment instead of construction.)</p>\n<p>As far as I can see, GCC is correct. <code>foo</code> should have a move constructor that performs a move on each member, which in <code>with_copy</code>'s case degenerates to a copy. Clang's behaviour seems quite ridiculous: I have an aggregate with two movable members, and yet my aggregate is an immovable brick.</p>\n<p>Who's right?</p>\n", "Title": "Why is the move constructor neither declared nor deleted with clang?", "CreationDate": "2013-12-16T10:33:52.957", "LastActivityDate": "2013-12-16T11:17:05.387", "CommentCount": "7", "FavoriteCount": "8", "PostTypeId": "1", "LastEditDate": "2013-12-16T10:47:13.987", "LastEditorUserId": "819272", "Id": "20608662", "Score": "16", "OwnerUserId": "46642", "Tags": "<c++><c++11><user-defined-functions><move-semantics><implicit-declaration>", "AnswerCount": "2"}});