post_cb({"15342557": {"ParentId": "15342410", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2013-03-11T15:34:23.260", "Score": "11", "LastEditorUserId": "50079", "LastEditDate": "2013-03-12T10:10:22.967", "Id": "15342557", "OwnerUserId": "50079", "Body": "<h2>Human talk</h2>\n<p>I 'll start by describing what happens here -- forgive me if you already know this, but it creates necessary context for the follow-up.</p>\n<p>The compiler resolves the unqualified <code>A</code> to <code>::C::A</code> (the result will be the same if you make the change at source level yourself). Since <code>::C::A</code> is inaccessible an error message is emitted.</p>\n<p>You are proposing that the compiler should detect that <code>::C::A</code> is inaccessible and the reference to <code>A</code> should then be considered a reference to <code>::A</code> as a fallback. However, <code>::C::A</code> and <code>::A</code> may easily be two <em>entirely different things</em>.</p>\n<p>Automatically guessing what should be done here is not only prone to introducing bugs and/or hair-pulling\u00b9, but also completely contrary to the spirit of C++.</p>\n<h2>Standardese</h2>\n<p>Confirmation that this behavior is conformant and by-design, directly from the C++11 standard.</p>\n<p>\u00a79/2 says:</p>\n<blockquote>\n<p id=\"so_15342410_15342557_0\">A <em>class-name</em> is inserted into the scope in which it is declared\n  immediately after the <em>class-name</em> is seen. The <em>class-name</em> is also\n  inserted into the scope of the class itself; this is known as the\n  <em>injected-class-name</em>.</p>\n</blockquote>\n<p>This means that inside the scope of class <code>C</code>, <code>A</code> is an <em>injected-class-name</em>.</p>\n<p>\u00a73.4/3 states that the <em>injected-class-name</em> is a candidate for name lookups:</p>\n<blockquote>\n<p id=\"so_15342410_15342557_1\">The injected-class-name of a class is also considered to be a member\n  of that class for the purposes of name hiding and lookup.</p>\n</blockquote>\n<p>\u00a73.4/1 clarifies that the inaccessibility of the base <code>A</code> does not prevent the <em>injected-class-name</em> <code>A</code> from being considered:</p>\n<blockquote>\n<p id=\"so_15342410_15342557_2\">The access rules are considered only once name lookup and function\n  overload resolution (if applicable) have succeeded.</p>\n</blockquote>\n<p>\u00a711.1/5 gives a direct explanation of the <em>exact</em> situation under discussion:</p>\n<blockquote>\n<p id=\"so_15342410_15342557_3\">[Note: In a derived class, the lookup of a base class name will find\n  the <em>injected-class-name</em> instead of the name of the base class in the\n  scope in which it was declared. The <em>injected-class-name</em> might be less\n  accessible than the name of the base class in the scope in which it\n  was declared. \u2014end note ]</p>\n</blockquote>\n<p>The standard also gives this example, which is equivalent to yours:</p>\n<pre><code>class A { };\nclass B : private A { };\nclass C : public B {\n    A *p;   // error: injected-class-name A is inaccessible\n    ::A *q; // OK\n};\n</code></pre>\n<hr>\n<p>\u00b9 Imagine what happens if <code>A</code> is initially a <code>public</code> base, then later becomes <code>private</code> during a refactoring. Also imagine that <code>::A</code> and <code>::C::A</code> are unrelated. You would expect that a call like <code>a-&gt;foo()</code> (which used to work) would fail because <code>foo</code> is no longer accessible, but instead of this the type of <code>a</code> has changed behind your back and you now get a \"there is no method <code>foo</code>\" error. Huh?!? And that's of course far from the worst that could happen.</p>\n</hr>", "LastActivityDate": "2013-03-12T10:10:22.967"}, "15342410": {"CommentCount": "0", "ViewCount": "221", "CreationDate": "2013-03-11T15:28:06.170", "LastActivityDate": "2013-03-12T10:10:22.967", "Title": "Passing a pointer of inaccessible private base type to the derived class method", "AcceptedAnswerId": "15342557", "PostTypeId": "1", "Id": "15342410", "Score": "13", "Body": "<p>This code example would describe the language feature I find non-intuitive.</p>\n<pre><code>class A {\npublic:\n  A() {}\n};\n\nclass B: private A\n{\npublic:\n  B() {}\n};\n\nclass C: public B\n{\npublic:\n  C() {}\n  void ProcessA(A* a) {\n  }\n};\n\nint main() {\n  C c;\n}\n</code></pre>\n<p>Compilation of this code with Apple LLVM version 4.2 on Mac produces an </p>\n<pre><code>test.cc:16: error: \u2018class A\u2019 is inaccessible\ntest.cc:16: error: within this context\n</code></pre>\n<p>Replacing <code>void ProcessA(A* a)</code> with <code>void ProcessA(::A* a)</code> would make it build but I don't understand why should I use absolute class name here.\nIs it a language feature that is there to avoid certain kind of errors or is it just a dark C++ grammar corner like requirement to put space between angle brackets (<code>&gt; &gt;</code>) in templates parametrized with other templates.\nThanks!</p>\n", "Tags": "<c++>", "OwnerUserId": "1803571", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_15342410_15342557_1": {"section_id": 7085, "quality": 0.9, "length": 9}, "so_15342410_15342557_0": {"section_id": 5846, "quality": 0.9473684210526315, "length": 18}, "so_15342410_15342557_3": {"section_id": 6677, "quality": 0.8709677419354839, "length": 27}, "so_15342410_15342557_2": {"section_id": 7083, "quality": 0.9166666666666666, "length": 11}}, "n3337": {"so_15342410_15342557_1": {"section_id": 6829, "quality": 0.9, "length": 9}, "so_15342410_15342557_0": {"section_id": 5616, "quality": 0.9473684210526315, "length": 18}, "so_15342410_15342557_2": {"section_id": 6827, "quality": 0.9166666666666666, "length": 11}, "so_15342410_15342557_3": {"section_id": 6432, "quality": 0.8709677419354839, "length": 27}}, "n4659": {"so_15342410_15342557_1": {"section_id": 8586, "quality": 0.9, "length": 9}, "so_15342410_15342557_0": {"section_id": 7325, "quality": 0.9473684210526315, "length": 18}, "so_15342410_15342557_3": {"section_id": 8152, "quality": 0.8709677419354839, "length": 27}, "so_15342410_15342557_2": {"section_id": 8584, "quality": 0.9166666666666666, "length": 11}}}});