post_cb({"bq_ids": {"n4140": {"so_32346143_32346399_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 1583}, "so_32346143_32346399_0": {"length": 39, "quality": 0.975, "section_id": 5768}}, "n3337": {"so_32346143_32346399_0": {"length": 39, "quality": 0.975, "section_id": 5541}, "so_32346143_32346399_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 1579}}, "n4659": {"so_32346143_32346399_0": {"length": 39, "quality": 0.975, "section_id": 7225}, "so_32346143_32347377_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 7709}, "so_32346143_32346399_1": {"length": 17, "quality": 0.8947368421052632, "section_id": 1734}}}, "32346399": {"Id": "32346399", "PostTypeId": "2", "Body": "<p>Undefined behavior just means</p>\n<blockquote>\n<p id=\"so_32346143_32346399_0\">behavior for which this International Standard imposes no requirements.\n  Permissible undefined behavior ranges from ignoring the situation\n  completely with unpredictable results, to behaving during translation\n  or program execution in a documented manner characteristic of the\n  environment (with or without the issuance of a diagnostic message), to\n  terminating a translation or execution (with the issuance of a\n  diagnostic message). Many erroneous program constructs do not engender\n  undefined behavior; they are required to be diagnosed.</p>\n</blockquote>\n<p>If you are interested, take a look at <a href=\"http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html\" rel=\"nofollow\">\"What every C programmer should know about undefined behavior\"</a>. It is really an eye-opener.</p>\n<p>In your case, it is not undefined behavior but unspecified state:\nIn 21.4.2.16, the C++ standard defines the move constructor's semantics:</p>\n<blockquote>\n<p id=\"so_32346143_32346399_1\">Constructs an object of class basic_string as indicated in Table 69. \n  The stored allocator is constructed from alloc. In the second form, str  is left in a valid state with an unspecified value.</p>\n</blockquote>\n<p>The \"second form\" is the move constructor, so the string is in an unspecified state.</p>\n<p>That means that the object must be in a state that invariants are met, but anything else is unspecified. For a string, any content would be ok.</p>\n", "LastEditorUserId": "2169853", "LastActivityDate": "2015-09-02T08:14:59.243", "Score": "0", "CreationDate": "2015-09-02T06:54:44.013", "ParentId": "32346143", "CommentCount": "3", "OwnerUserId": "2169853", "LastEditDate": "2015-09-02T08:14:59.243"}, "32347377": {"Id": "32347377", "PostTypeId": "2", "Body": "<p>Unspecified does not mean undefined.</p>\n<p>According to the C++11 standard, section 17.3.26:</p>\n<blockquote>\n<p id=\"so_32346143_32347377_0\"><strong>valid but unspecified state</strong>\n  an object state that is not specified except that the object\u2019s invariants are met and operations on the object behave as specified for its type</p>\n</blockquote>\n<p>As the object is in a valid state, you can stream it to an output, as streaming has no additional preconditions. However <em>what</em> is printed is unspecified, so it may just print nothing, or print that your father smells of elderberries. What you can not safely do is use a function with additional preconditions such as <code>back()</code> which additionally requires the string to be non-empty. Valid strings can be empty. </p>\n<p>Containing the old value is a perfectly acceptable option for the unspecified but valid state. In case of fundamental types such as <code>int</code> a simple copy is just the most efficient way to perform a move.</p>\n<p>It should also be noted that <code>int</code> is <em>not</em> a standard library object, but a fundamental type (as defined in section 3.9.1). Therefore your quote does not apply.</p>\n", "LastEditorUserId": "2361316", "LastActivityDate": "2015-09-02T09:21:12.110", "Score": "10", "CreationDate": "2015-09-02T07:46:15.613", "ParentId": "32346143", "CommentCount": "2", "OwnerUserId": "2361316", "LastEditDate": "2015-09-02T09:21:12.110"}, "32346143": {"ViewCount": "543", "Body": "<p>From the <a href=\"http://en.cppreference.com/w/cpp/utility/move\" rel=\"noreferrer\">move page</a> of the cppreference</p>\n<blockquote>\n<p id=\"so_32346143_32346143_0\">Unless otherwise specified, all standard library objects that have\n  been moved from are placed in a valid but unspecified state. That is,\n  only the functions without preconditions, such as the assignment\n  operator, can be safely used on the object after it was moved from</p>\n</blockquote>\n<p>So, from the example on the same page, this code below is considered undefined behaviour</p>\n<pre><code>vector&lt;string&gt; v_string;\nstring example = \"example\";\nv_string.push_back(move(example));\ncout &lt;&lt; example &lt;&lt; endl;\n</code></pre>\n<p>MSVC will output nothing on the console, but if I do this</p>\n<pre><code>vector&lt;int&gt; v_int;\nint number = 10;\nv_int.push_back(move(number));\ncout &lt;&lt; number &lt;&lt; endl;\n</code></pre>\n<p>will output 10. Is there a reason why this happens? Or is it always undefined behavior?</p>\n", "AcceptedAnswerId": "32347377", "Title": "Undefined behavior with std::move", "CreationDate": "2015-09-02T06:36:33.297", "Id": "32346143", "CommentCount": "14", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2015-09-02T10:48:32.637", "Score": "6", "OwnerUserId": "1492438", "Tags": "<c++><c++11>", "AnswerCount": "3"}, "32346344": {"Id": "32346344", "PostTypeId": "2", "Body": "<p>That is because a <code>string</code> can be efficiently <code>move</code>d from by stealing the pointer that points to the actual characters, so thats what compilers do, leaving the <code>move</code>d from <code>string</code> \"empty\". An <code>int</code> cannot be efficiently <code>move</code>d, you just make a copy. Therefore the old <code>int</code> is still there. But that is off the record. Just do not use objects that you <code>move</code>ed from and don't rely on unspecified behavior.</p>\n", "LastEditorUserId": "3484570", "LastActivityDate": "2015-09-02T10:48:32.637", "Score": "3", "CreationDate": "2015-09-02T06:50:53.277", "ParentId": "32346143", "CommentCount": "2", "OwnerUserId": "3484570", "LastEditDate": "2015-09-02T10:48:32.637"}});