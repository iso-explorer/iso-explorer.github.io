post_cb({"bq_ids": {"n4140": {"so_49084951_49085438_0": {"length": 31, "quality": 0.775, "section_id": 715}, "so_49084951_49085438_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 715}}, "n3337": {"so_49084951_49085438_2": {"length": 4, "quality": 0.6666666666666666, "section_id": 704}, "so_49084951_49085438_0": {"length": 22, "quality": 0.55, "section_id": 704}}, "n4659": {"so_49084951_49085438_0": {"length": 40, "quality": 1.0, "section_id": 745}, "so_49084951_49085438_2": {"length": 5, "quality": 0.8333333333333334, "section_id": 745}}}, "49085438": {"Id": "49085438", "PostTypeId": "2", "Body": "<p>No, it results in undefined behavior.</p>\n<p>The <code>value_type</code> of a container <a href=\"http://www.eel.is/c++draft/container.requirements.general#tab:containers.container.requirements\" rel=\"nofollow noreferrer\">must be <em>Erasable</em> from the container type</a>, where Erasable is defined in <a href=\"http://www.eel.is/c++draft/container.requirements.general#15\" rel=\"nofollow noreferrer\">[container.requirements.general] paragraph 15</a>:</p>\n<blockquote>\n<p id=\"so_49084951_49085438_0\">Given an allocator type <code>A</code> and given a container type <code>X</code> having a <code>value_\u00adtype</code> identical to <code>T</code> and an <code>allocator_\u00adtype</code> identical to <code>allocator_\u00adtraits&lt;A&gt;\u200b::\u200brebind_\u00adalloc&lt;T&gt;</code> and given an lvalue <code>m</code> of type <code>A</code>, a pointer <code>p</code> of type <code>T*</code>, an expression <code>v</code> of type (possibly <code>const</code>) <code>T</code>, and an rvalue <code>rv</code> of type <code>T</code>, the following terms are defined. If <code>X</code> is not allocator-aware, the terms below are defined as if A were <code>allocator&lt;T&gt;</code> \u2014 no allocator object needs to be created and user specializations of <code>allocator&lt;T&gt;</code> are not instantiated:</p>\n<ul>\n<li><p id=\"so_49084951_49085438_1\">...</p></li>\n<li><p id=\"so_49084951_49085438_2\"><code>T</code> is <em>Erasable from <code>X</code></em> means that the following expression is well-formed:\n  <code>allocator_traits&lt;A&gt;::destroy(m, p)</code></p></li>\n</ul>\n</blockquote>\n<p>Because <code>std::array</code> is not allocator-aware, we need to check if <code>allocator_traits&lt;allocator&lt;int[2][2]&gt;&gt;::destroy(m, p)</code> is welll formed.</p>\n<p>Since <a href=\"http://en.cppreference.com/w/cpp/memory/allocator\" rel=\"nofollow noreferrer\"><code>std::allocator</code></a> has no member function <code>destroy</code> (deprecated in C++17), <a href=\"http://en.cppreference.com/w/cpp/memory/allocator_traits/destroy\" rel=\"nofollow noreferrer\"><code>std::allocator_traits::destroy</code></a> would call the (pseudo) destrutor of <code>int[2][2]</code> directly. This <a href=\"http://www.eel.is/c++draft/expr.pseudo#2\" rel=\"nofollow noreferrer\">is ill-formed</a> because <code>int[2][2]</code> is not a <a href=\"http://www.eel.is/c++draft/basic.types#9\" rel=\"nofollow noreferrer\">scalar type</a>.</p>\n", "LastActivityDate": "2018-03-03T14:53:06.810", "CommentCount": "3", "CreationDate": "2018-03-03T14:53:06.810", "ParentId": "49084951", "Score": "2", "OwnerUserId": "5376789"}, "49084951": {"ViewCount": "165", "Body": "<p>Can I use something like <code>std::array&lt;int[2][2], 2&gt;</code> as a substitute for <code>int[2][2][2]</code>, just like <code>std::array&lt;int, 2&gt;</code> can be used instead of <code>int[2]</code>?</p>\n<p>What I really need is maybe a statically-sized multidimensional array that</p>\n<ol>\n<li>Have \"proper\" value semantics, and</li>\n<li>Is stored contiguously in memory.</li>\n</ol>\n<p>It seems that, unlike C-style arrays, <code>std::array</code> of <code>std::array</code> is not guaranteed to have fully compactified memory, as <code>std::array</code> may contain padding.</p>\n<p>What are possible issues I might have if I use something like <code>std::array&lt;int[2][2], 2&gt;</code>? Perhaps this is a too vague question, but it's hard to figure out why exactly I'm not comfortable and somewhat doubtful using it for my purpose.</p>\n", "AcceptedAnswerId": "49085438", "Title": "Is it legal to have an std::array of C-style array?", "CreationDate": "2018-03-03T14:02:29.913", "Id": "49084951", "CommentCount": "9", "FavoriteCount": "2", "PostTypeId": "1", "LastActivityDate": "2018-03-03T14:53:06.810", "Score": "7", "OwnerUserId": "4751858", "Tags": "<c++><arrays>", "AnswerCount": "1"}});