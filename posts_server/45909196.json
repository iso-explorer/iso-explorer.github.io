post_cb({"bq_ids": {"n4140": {"so_45909196_45910354_2": {"length": 32, "quality": 0.9142857142857143, "section_id": 5057}, "so_45909196_45910354_5": {"length": 7, "quality": 0.6363636363636364, "section_id": 5058}}, "n3337": {"so_45909196_45910354_2": {"length": 26, "quality": 0.7428571428571429, "section_id": 4854}, "so_45909196_45910354_5": {"length": 7, "quality": 0.6363636363636364, "section_id": 4855}}, "n4659": {"so_45909196_45910354_2": {"length": 31, "quality": 0.8857142857142857, "section_id": 6478}, "so_45909196_45910354_5": {"length": 11, "quality": 1.0, "section_id": 6478}}}, "45910354": {"Id": "45910354", "PostTypeId": "2", "Body": "<p>First, a simplified example:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;regex&gt;\n\nusing namespace std;\n\nint main() {\n    const string data = \"abc\\nXabc\";\n    regex re(\"^X\");\n    smatch match;\n    if (regex_search(data, match, re))\n        cout &lt;&lt; \"match: \" &lt;&lt; match.str() &lt;&lt; endl;\n    else\n        cout &lt;&lt; \"no match\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>Visual Studio 2015 outputs:</p>\n<blockquote>\n<p id=\"so_45909196_45910354_0\">match: X</p>\n</blockquote>\n<p>MinGW 7.1.0 outputs:</p>\n<blockquote>\n<p id=\"so_45909196_45910354_1\">no match</p>\n</blockquote>\n<hr>\n<p>So, the difference cuts down to whether <code>^</code> in the regular expression matches starts of lines or only the beginning of the string. In C++ 17 it is determined by the <code>regex::flag_type</code> argument passed to the <code>regex</code> constructor.</p>\n<p><a href=\"http://eel.is/c++draft/re.synopt\" rel=\"nofollow noreferrer\">31.5.1 Bitmask type syntax_\u00adoption_\u00adtype</a>:</p>\n<blockquote>\n<p id=\"so_45909196_45910354_2\">The type syntax_\u00adoption_\u00adtype is an implementation-defined bitmask type. Setting its elements has the effects listed in Table 130. A valid value of type syntax_\u00adoption_\u00adtype shall have at most one of the grammar elements ECMAScript, basic, extended, awk, grep, egrep, set. If no grammar element is set, the default grammar is ECMAScript.</p>\n<hr>\n<p id=\"so_45909196_45910354_3\">Table 130 \u2014 syntax_\u00adoption_\u00adtype effects</p>\n<p id=\"so_45909196_45910354_4\">...</p>\n<p id=\"so_45909196_45910354_5\">multiline \u2014 Specifies that ^ shall match the beginning of a line and $ shall match the end of a line, if the ECMAScript engine is selected.</p>\n</hr></blockquote>\n<p>In order for <code>^</code> to match starts of lines, the <code>regex</code> object needs to initialized like this:</p>\n<pre><code>regex re(\"^X\", regex_constants::multiline);\n</code></pre>\n<hr>\n<p>In conclusion, MinGW's behavior is correct under the C++ 17 Standard.</p>\n</hr></hr>", "LastActivityDate": "2017-08-27T23:59:49.903", "CommentCount": "2", "CreationDate": "2017-08-27T23:59:49.903", "ParentId": "45909196", "Score": "2", "OwnerUserId": "3290797"}, "45909196": {"ViewCount": "41", "Body": "<p>I was playing with regex in c++ when I noticed some irregularities between the g++ (MinGW) and the Visual Studio 14 2015 compiler (both on Windows). Here is the code I tried it with:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;regex&gt;\n\nstatic const std::string data = \"\\n    a = 10\\n    b = 20\\n\";\n\nint main(int argc, char* argv[])\n{\n    auto strIt = data.begin();\n\n    while (strIt != data.end())\n    {\n        std::regex e(\"^[ \\t\\n\\r]\");\n        std::smatch m;\n        std::string s(strIt, data.end());\n\n        if (std::regex_search(s, m, e))\n        {\n            strIt += m[0].str().size();\n        }\n        else\n        {\n            std::cout &lt;&lt; \"s = \\\"\" &lt;&lt; s &lt;&lt; \"\\\"\" &lt;&lt; '\\n';\n            break;\n        }\n    }\n}\n</code></pre>\n<p>When compiling with g++ I get the expected output of </p>\n<pre><code>s = \"a = 10\\n    b = 20\\n\"\n</code></pre>\n<p>but when using the visual studio compiler, it spits out </p>\n<pre><code>s = \"b = 20\\n\"\n</code></pre>\n<p>ignoring the whole \"a = 10\" part. After investigating further in visual studio via the debug functionality, I saw that the m variable was holding the space from after the \"a = 10\" part.</p>\n<p>Do you know why it behaves like that? Am I making a big mistake somewhere while not noticing it? Please help.</p>\n", "AcceptedAnswerId": "45910354", "Title": "different results when using g++ and visual studio 14 2015 compilers with regex in c++", "CreationDate": "2017-08-27T20:46:16.130", "Id": "45909196", "CommentCount": "2", "LastEditDate": "2017-08-27T23:12:30.850", "PostTypeId": "1", "LastEditorUserId": "8524644", "LastActivityDate": "2017-08-27T23:59:49.903", "Score": "2", "OwnerUserId": "8524644", "Tags": "<c++><visual-studio-2015><g++>", "AnswerCount": "1"}});