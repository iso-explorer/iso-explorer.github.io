post_cb({"27124621": {"Id": "27124621", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_27124159_27124621_0\">My first question is that how long can I use the temporary object reference which is created inside <code>setRasterImageURL</code> functioncall?</p>\n</blockquote>\n<p>It's not created inside the function call, it's created on the caller's stack <em>before</em> the function is called, and is destroyed after the function returns.</p>\n<blockquote>\n<p id=\"so_27124159_27124621_1\">Where exist that variable?(in the stack If I am not mistaken, but what if I call another function with that temporary reference.</p>\n</blockquote>\n<p>Yes, on the stack. It is destroyed at the <code>;</code> after the function call returns (at the end of the \"full expression\").</p>\n<blockquote>\n<p id=\"so_27124159_27124621_2\">That thing is kind of similar. How long can I use that temporary object?</p>\n</blockquote>\n<p>Until the end of the full expression that creates the temporary, which is the <code>return</code> statement, <em>so it goes out of scope immediately before the function has even finished returning</em>. That's why you get a warning - the returned reference is bound to an object which no longer exists, and is never safe to use.</p>\n<p>Both these cases are covered by 12.2 [class.temporary] paragraph 5 in the standard:</p>\n<blockquote>\n<p id=\"so_27124159_27124621_3\">\u2014 A temporary object bound to a reference parameter in a function call (5.2.2) persists until the completion of the full-expression containing the call.<br>\n  \u2014 The lifetime of a temporary bound to the returned value in a function return statement (6.6.3) is not extended; the temporary is destroyed at the end of the full-expression in the return statement.</br></p>\n</blockquote>\n", "LastEditorUserId": "981959", "LastActivityDate": "2014-11-25T11:22:01.673", "Score": "3", "CreationDate": "2014-11-25T10:48:22.140", "ParentId": "27124159", "CommentCount": "6", "OwnerUserId": "981959", "LastEditDate": "2014-11-25T11:22:01.673"}, "bq_ids": {"n4140": {"so_27124159_27124621_3": {"length": 28, "quality": 0.9032258064516129, "section_id": 382}}, "n3337": {"so_27124159_27124621_3": {"length": 28, "quality": 0.9032258064516129, "section_id": 373}}, "n4659": {"so_27124159_27124621_3": {"length": 28, "quality": 0.9032258064516129, "section_id": 397}}}, "27124295": {"Id": "27124295", "PostTypeId": "2", "Body": "<p>Q1: The temporary string exists as long as the temporary reference that is \"bound\" to it. That is - as long as you are \"inside\" <code>setRasterImageURL()</code> function. This - of course - includes all functions called \"within\" this function. Note that storing <em>another</em> reference to this temporary string does <em>NOT</em> prolong the lifetime of the temporary object.</p>\n<pre><code>complexGraphicalShape().setRasterImageURL(\"www.url.com/url.jpg\");\n// the temporary object is \"destroyed\" when it goes out of scope, and it's scope is just the called function\n</code></pre>\n<p>Q2: The problem with returning is that you use \"C string\" (array of characters) to create a temporary <code>QString</code> object (on stack, still inside the function) and return reference to that temporary. As this temporary object is destroyed right after this function returns, your reference is never valid and refers to a dead object. On the other hand - returning a reference to a member variable works, because this object is not destroyed, so the reference is valid as long as your main object lives.</p>\n<pre><code>const QString &amp;ShadowGram::rasterImageURL() const{\n    return \"www.url.com/shape_url.jpg\"\n    // the temporary object is destroyed here, before the function returns, reference is invalid\n}\n</code></pre>\n", "LastEditorUserId": "157344", "LastActivityDate": "2014-11-25T11:02:54.200", "Score": "3", "CreationDate": "2014-11-25T10:33:13.777", "ParentId": "27124159", "CommentCount": "2", "OwnerUserId": "157344", "LastEditDate": "2014-11-25T11:02:54.200"}, "27124416": {"Id": "27124416", "PostTypeId": "2", "Body": "<ol>\n<li><p>The temporary exists until <code>setRasterImageURL</code> returns, so you can safely pass a reference to it along, but you need to be careful not to save the reference for later. The temporary is stored wherever the compiler wants to. The reference is most likely passed either in a register or on the stack. </p></li>\n<li><p>It is a problem because you're returning a reference to a temporary <code>QString</code> object, and that object is destroyed when the function returns. You're not allowed to use the reference at all.</p></li>\n</ol>\n<p>Passing a reference \"inwards\" to a function is (usually) safe as long as you don't store it, while passing a reference \"outwards\" from a function requires you to make sure that the referenced object still exists when the function returns.</p>\n", "LastEditorUserId": "404970", "LastActivityDate": "2014-11-25T10:44:29.293", "Score": "3", "CreationDate": "2014-11-25T10:39:18.797", "ParentId": "27124159", "CommentCount": "1", "OwnerUserId": "404970", "LastEditDate": "2014-11-25T10:44:29.293"}, "27124159": {"ViewCount": "112", "Body": "<p>Only for curiosity and educating and clarification reasons I would like to ask that the way I use references and values are good practices or not.</p>\n<p>Theoretically:</p>\n<pre><code>class ComplexGraphicalShape {\n...\npublic:\n    void setRasterImageURL(const QString &amp;rasterImageURL);\n    const QString &amp;rasterImageURL() const;\n...\nprivate:\n    const QString *_rasterImageURL;\n};\n\n...\n\nvoid ShadowGram::setRasterImageURL(const QString &amp;rasterImageURL) {\n    safeDelete(_rasterImageURL); // handle deletion\n    _rasterImageURL = new QString(rasterImageURL);\n}\n\nconst QString &amp;ShadowGram::rasterImageURL() const{\n    // Question 2: Why is it a problem if I return \n              // return \"www.url.com/shape_url.jpg\"\n    return *_rasterImageURL; // that is the right way\n}\n\n...\n\ncomplexGraphicalShape().setRasterImageURL(kURLImagesToShare + imageName);\ncomplexGraphicalShape().setRasterImageURL(\"www.url.com/url.jpg\"); // Question 1.\n</code></pre>\n<p>My first question is that how long can I use the temporary object reference which is created inside <code>setRasterImageURL</code> functioncall? Where exist that variable?(in the stack If I am not mistaken, but what if I call another function with that temporary reference.</p>\n<p>My second question is that why I got a warning in Question 2 section if I would like to use this  <code>return \"www.url.com/shape_url.jpg\"</code>? That thing is kind of similar. How long can I use that temporary object?</p>\n<p>Thanks for your time for the answer and explanations</p>\n", "Title": "Best practices with references", "CreationDate": "2014-11-25T10:25:21.813", "LastActivityDate": "2014-11-25T11:22:01.673", "CommentCount": "2", "PostTypeId": "1", "Id": "27124159", "Score": "0", "OwnerUserId": "1015197", "Tags": "<c++><c++11><reference>", "AnswerCount": "3"}});