post_cb({"33197817": {"ViewCount": "383", "Body": "<p>I tried to forward-declare a <code>constexpr</code> variable template like this:</p>\n<pre><code>template&lt;typename&gt;\nconstexpr std::size_t iterator_category_value;\n</code></pre>\n<p>The goal was to document that every specialization should be <code>constexpr</code> but I have to admit that I never checked whether it was legal or not and g++ was happy with it. However, when I tried to compile this spinnet with clang++ instead, I got the following error:</p>\n<blockquote id=\"so_33197817_33197817_0\">\n<pre><code>error: default initialization of an object of const type 'const std::size_t' (aka 'const unsigned long')\n    constexpr std::size_t iterator_category_value;\n                          ^\n                                                  = 0\n</code></pre>\n</blockquote>\n<p>The error makes sense, and removing <code>constexpr</code> makes it disappear, so that's not a real problem. However, I am curious now: does the standard allow such a <code>constexpr</code> forward declaration for a variable template or is it illegal? g++ and clang++ seem to disagree and I would like to know where I should submit a bug report if needed.</p>\n<p>Both of them complain for a forward-declared <code>constepxr</code> variable which is not a variable template, so the variable template context seems to be what makes the compilers disagree.</p>\n", "AcceptedAnswerId": "33198169", "Title": "Forward declare a constexpr variable template", "CreationDate": "2015-10-18T12:15:44.910", "Id": "33197817", "CommentCount": "5", "LastEditDate": "2015-10-18T12:54:56.977", "PostTypeId": "1", "LastEditorUserId": "455322", "LastActivityDate": "2015-10-18T13:15:03.540", "Score": "9", "OwnerUserId": "1364752", "Tags": "<c++><language-lawyer><c++14><constexpr><variable-templates>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_33197817_33198182_0": {"length": 10, "quality": 1.0, "section_id": 5425}, "so_33197817_33198169_0": {"length": 13, "quality": 1.0, "section_id": 5425}, "so_33197817_33198169_1": {"length": 16, "quality": 1.0, "section_id": 5385}}, "n3337": {"so_33197817_33198182_0": {"length": 10, "quality": 1.0, "section_id": 5220}, "so_33197817_33198169_0": {"length": 13, "quality": 1.0, "section_id": 5220}, "so_33197817_33198169_1": {"length": 16, "quality": 1.0, "section_id": 5179}}, "n4659": {"so_33197817_33198182_0": {"length": 10, "quality": 1.0, "section_id": 6847}, "so_33197817_33198169_0": {"length": 13, "quality": 1.0, "section_id": 6847}, "so_33197817_33198169_1": {"length": 16, "quality": 1.0, "section_id": 6810}}}, "33198169": {"Id": "33198169", "PostTypeId": "2", "Body": "<p>In the C++14 standard, it seems pretty clear that initialization is required.  From section 7.5.1 paragraph 9,</p>\n<blockquote>\n<p id=\"so_33197817_33198169_0\">A <code>constexpr</code> specifier used in an object declaration\n    declares the object as const.  Such an object shall have\n    literal type and shall be initialized.</p>\n</blockquote>\n<p>As for the exact meaning of \"object declaration\", Section 7 paragraph 7 states:</p>\n<blockquote>\n<p id=\"so_33197817_33198169_1\">If the decl-specifier-seq contains no typedef specifier,\n    the declaration is called a function declaration if the\n    type associated with the name is a function type and\n    an object declaration otherwise.</p>\n</blockquote>\n", "LastEditorUserId": "1364752", "LastActivityDate": "2015-10-18T13:15:03.540", "Score": "8", "CreationDate": "2015-10-18T12:56:44.630", "ParentId": "33197817", "CommentCount": "0", "OwnerUserId": "951890", "LastEditDate": "2015-10-18T13:15:03.540"}, "33198182": {"Id": "33198182", "PostTypeId": "2", "Body": "<p>Clang is correct. The <em>declaration</em> of a variable template is an object declaration ([dcl.dcl]/9), hence it must provide an initializer as per [dcl.constexpr]/9:</p>\n<blockquote>\n<p id=\"so_33197817_33198182_0\">A <code>constexpr</code> specifier used in an object declaration declares the\n  object as <code>const</code>. <strong>Such an object [\u2026] shall be\n  initialized.</strong></p>\n</blockquote>\n<p>There is effectively no way of \"forward\" declaring an object as <code>constexpr</code> in the first place, though; If <code>constexpr</code> is applied to the declaration of a variable, it shall be a definition ([dcl.constexpr]/1).</p>\n", "LastActivityDate": "2015-10-18T12:58:53.840", "CommentCount": "5", "CreationDate": "2015-10-18T12:58:53.840", "ParentId": "33197817", "Score": "8", "OwnerUserId": "3647361"}});