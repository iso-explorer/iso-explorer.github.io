post_cb({"19792589": {"Id": "19792589", "PostTypeId": "2", "Body": "<p>It shouldn't be done this way.</p>\n<p>You can allocate the value on the stack and then call the function.</p>\n<p>Example in C:</p>\n<pre><code>int i = 42;\nfunc((void*) (&amp;i));\n</code></pre>\n<p>Example in C++:</p>\n<pre><code>int i = 42;\nfunc(reinterpret_cast&lt;void*&gt; (&amp;i));\n</code></pre>\n<p>Otherwise, if you are not sure about the life time of the variable, it can be allocated on the heap using <em>malloc()/free()</em> or <em>new/delete</em>.</p>\n", "LastActivityDate": "2013-11-05T15:30:06.920", "CommentCount": "2", "CreationDate": "2013-11-05T15:30:06.920", "ParentId": "19792536", "Score": "1", "OwnerUserId": "2214693"}, "bq_ids": {"n4140": {"so_19792536_19793083_1": {"length": 9, "quality": 1.0, "section_id": 6044}}, "n3337": {"so_19792536_19793083_1": {"length": 9, "quality": 1.0, "section_id": 5812}}, "n4659": {"so_19792536_19793083_1": {"length": 9, "quality": 1.0, "section_id": 7543}}}, "19793083": {"Id": "19793083", "PostTypeId": "2", "Body": "<p>Both C and C++ standards explicitly allow for such conversion.</p>\n<p>C99 6.3.2.3.5:</p>\n<blockquote>\n<p id=\"so_19792536_19793083_0\">An integer may be converted to any pointer type. Except as previously specified, the\n  result is implementation-defined, might not be correctly aligned, might not point to an\n  entity of the referenced type, and might be a trap representation.</p>\n</blockquote>\n<p>C++11 5.2.10.5</p>\n<blockquote>\n<p id=\"so_19792536_19793083_1\">A value of integral type or enumeration type can be explicitly converted to a pointer.</p>\n</blockquote>\n<p>Therefore, your call of <code>func((void*)42)</code> should work with all standard-compliant compilers.</p>\n<blockquote>\n<p id=\"so_19792536_19793083_2\">What is the, say, most correct way to pass a literal integer to an argument expecting a void pointer, and having the integer untouched in the function?</p>\n</blockquote>\n<p>This way of passing a literal integer as an argument to a function expecting a <code>void*</code> guarantees that the original integer would be untouched in the function, because the argument is passed by value.</p>\n", "LastEditorUserId": "335858", "LastActivityDate": "2013-11-05T16:02:30.683", "Score": "3", "CreationDate": "2013-11-05T15:52:17.763", "ParentId": "19792536", "CommentCount": "3", "OwnerUserId": "335858", "LastEditDate": "2013-11-05T16:02:30.683"}, "19792536": {"ViewCount": "1408", "Body": "<p>As an experiment:</p>\n<p>I have hypothetical function with signature: <code>void func(void *)</code>, where I have to pass an integer value, literally in the code: <code>func(42)</code>. <em>It must be done with a literal integer</em>.</p>\n<p>Is there a \u201cright\u201d way to pass a integer value, say, \u201chacked\u201d as an address in a pointer (to address 0x2A for example), and the somehow convert it back to an integer (42 for the 0x2A example). All of this without unexpected behavior?</p>\n<p>In short: being able to convert a pointer address into an integer which will hold the number of the address.</p>\n", "Title": "How do I correctly pass, as argument, a literal integer as a void pointer, using its address as the integer\u2019s actual value", "CreationDate": "2013-11-05T15:27:39.673", "LastActivityDate": "2015-03-14T20:00:01.020", "CommentCount": "25", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2015-03-14T20:00:01.020", "LastEditorUserId": "785241", "Id": "19792536", "Score": "-1", "OwnerUserId": "1598585", "Tags": "<c++><casting><void-pointers>", "AnswerCount": "2"}});