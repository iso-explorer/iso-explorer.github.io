post_cb({"bq_ids": {"n4140": {"so_21365490_21365587_1": {"length": 9, "quality": 0.8181818181818182, "section_id": 6066}}, "n3337": {"so_21365490_21365587_1": {"length": 9, "quality": 0.8181818181818182, "section_id": 5834}}, "n4659": {"so_21365490_21365587_1": {"length": 9, "quality": 0.8181818181818182, "section_id": 7562}}}, "21365490": {"ViewCount": "7052", "Body": "<p>No matter what I do, I always get the same error message. Maybe someone has an idea what I could change.</p>\n<p>This is my script: </p>\n<pre><code>    void SendInventoryCustom(Player* player, Creature* vendor, int guid)\n{\n    std::vector&lt;ItemList&gt; vendors = GetVendorList();\n    ItemList myVendor;\n    for(int i = 0; i &lt; vendors.size(); i++)\n    {\n        if(vendors[i].GetVendor().getGuid() == guid)\n        {\n            myVendor = ItemList(&amp;vendors[i].GetVendor(), &amp;vendors[i].GetVendor().items);\n            break;\n        }\n    }\n\n    SmsgListInventory inventory_packet(vendor-&gt;GetGUID(), player-&gt;GetSession(), &amp;myVendor.GetVendor().items, vendors);\n    inventory_packet.Send(vendor, player);\n}\n</code></pre>\n<p>During compilation I get the following error message:</p>\n<pre><code>1266:59: error: taking address of temporary [-fpermissive]\n</code></pre>\n<p>Line 1266 starts with:</p>\n<pre><code>myVendor = ItemList(&amp;vendors[i].GetVendor(), &amp;vendors[i].GetVendor().items);\n</code></pre>\n<p>And this ist the Full Script:<br>\n<a href=\"http://pastebin.com/DNnyjEeT\" rel=\"nofollow\">http://pastebin.com/DNnyjEeT</a></br></p>\n<p>I would be very grateful if someone could help me with my problem.<br>\nThanks in advance, Best regards!</br></p>\n", "AcceptedAnswerId": "21365587", "Title": "error: taking address of temporary [-fpermissive] - npc_multivendor", "CreationDate": "2014-01-26T15:45:12.983", "Id": "21365490", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2014-01-26T16:17:20.360", "LastEditorUserId": "3237801", "LastActivityDate": "2014-01-26T16:45:41.033", "Score": "4", "OwnerUserId": "3237801", "Tags": "<c++>", "AnswerCount": "2"}, "21365587": {"Id": "21365587", "PostTypeId": "2", "Body": "<p>In the code snipper</p>\n<pre><code>&amp;vendors[i].GetVendor()\n</code></pre>\n<p>Applying address-of operator to a non-lvalue object is not permissive as per standard. Some compilers might allow it with warnings or compiler override, but do remember, its ill-formed and should be avoided.</p>\n<p>Assign the return value of the function call to an object, a local/non-local <code>lvalue</code> and then take address of the object.</p>\n<p>Quoting Standard</p>\n<blockquote>\n<p id=\"so_21365490_21365587_0\">\u00a75.3.1 Unary operators, Section 3</p>\n<p id=\"so_21365490_21365587_1\">The result of the unary &amp; operator is a pointer to its operand. The\n  operand shall be an lvalue or a qualified-id.</p>\n</blockquote>\n", "LastEditorUserId": "977038", "LastActivityDate": "2014-01-26T16:18:40.490", "Score": "2", "CreationDate": "2014-01-26T15:52:55.933", "ParentId": "21365490", "CommentCount": "0", "OwnerUserId": "977038", "LastEditDate": "2014-01-26T16:18:40.490"}, "21366271": {"Id": "21366271", "PostTypeId": "2", "Body": "<p>When encountering a warning, you need to understand each term (which might require some research).</p>\n<p>In C++, a temporary is an unnamed object that appears when evaluating an expression, for example:</p>\n<pre><code>int a = 5 + 3 * 6;\n</code></pre>\n<p>Is equivalent to:</p>\n<pre><code>int a = operator+(5, operator*(3, 6));\n</code></pre>\n<p>The result of <code>operator*(3, 6)</code> is a temporary of type <code>int</code>, meaning that the compiler is rewriting the code to something like:</p>\n<pre><code>int __1 = 3 * 6;\nint a = 5 + __1;\n</code></pre>\n<p>This may happen in many situations, for example:</p>\n<pre><code>int foo();\n\nint a = 5 + foo(); // converted to `int __foo = foo(); int a = 5 + __foo;`\n</code></pre>\n<p>So, now getting to the warning, what is the issue with <em>taking the address of a temporary</em> ?</p>\n<p>The issue is that the language only guarantees that the temporary lives until the end of the full expression (basically, until <code>;</code>). Therefore, taking its address (or creating a reference to it), leaves you with a <strong>dangling pointer</strong>: a pointer which points into the nether.</p>\n<p>So, you may formally take the address, but you should never try to access its value afterward...</p>\n<p>Pragmatically, the compiler is allowed (and gcc introduced it in 4.7) to reuse the memory occupied by temporary objects from one expression to the other, since they never co-exist. If you use a previously \"captured\" address to temporary, you might thus accidentally overwrite another object!</p>\n<p>Consider:</p>\n<pre><code>void foo(int* a, int b) { std::cout &lt;&lt; (*a + b) &lt;&lt; \"\\n\"; }\n\nint* i = &amp;(5 + 3);\nfoo(i, 7 + 6);\n</code></pre>\n<p>It <em>can</em> be translated into:</p>\n<pre><code>int __1 = 5 + 3;\nint* i = &amp;__1;\n\n__1 = 7 + 6;\nfoo(i, __1); // equivalent to `foo(&amp;__1, __1);`\n</code></pre>\n", "LastActivityDate": "2014-01-26T16:45:41.033", "CommentCount": "0", "CreationDate": "2014-01-26T16:45:41.033", "ParentId": "21365490", "Score": "5", "OwnerUserId": "147192"}});