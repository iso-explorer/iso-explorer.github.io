post_cb({"27557450": {"ParentId": "27557369", "PostTypeId": "2", "CommentCount": "10", "CreationDate": "2014-12-18T23:22:04.177", "Score": "28", "LastEditorUserId": "981959", "LastEditDate": "2014-12-18T23:29:44.780", "Id": "27557450", "OwnerUserId": "981959", "Body": "<p>7.1.6.2 [dcl.type.simple]</p>\n<blockquote id=\"so_27557369_27557450_0\">\n<ol start=\"4\">\n<li>For an expression e, the type denoted by decltype(e) is defined as follows:<br>\n  \u2014 if e is an unparenthesized id-expression or an unparenthesized class member access (5.2.5), decltype(e) is the type of the entity named by e. If there is no such entity, or if e names a set of overloaded functions, the program is ill-formed;<br>\n  \u2014 otherwise, if e is an xvalue, decltype(e) is T&amp;&amp;, where T is the type of e;<br>\n  \u2014 otherwise, if e is an lvalue, decltype(e) is T&amp;, where T is the type of e;<br>\n  \u2014 otherwise, decltype(e) is the type of e.  </br></br></br></br></li>\n</ol>\n</blockquote>\n<p>In your example you have <code>return (m)</code> so <code>e</code> is <code>(m)</code>. That is not an unparenthesized id-expression or class member access, so we go to the second bullet. It is not an xvalue so we go to the third bullet. It is an lvalue, so the type is <code>T&amp;</code> where <code>T</code> is <code>int</code>.</p>\n", "LastActivityDate": "2014-12-18T23:29:44.780"}, "bq_ids": {"n4140": {"so_27557369_27557450_0": {"section_id": 5440, "quality": 0.9487179487179487, "length": 37}}, "n3337": {"so_27557369_27557450_0": {"section_id": 5235, "quality": 0.9230769230769231, "length": 36}}, "n4659": {"so_27557369_27557450_0": {"section_id": 6867, "quality": 0.9487179487179487, "length": 37}}}, "27557369": {"CommentCount": "6", "AcceptedAnswerId": "27557450", "PostTypeId": "1", "LastEditorUserId": "3093378", "CreationDate": "2014-12-18T23:15:29.790", "LastActivityDate": "2014-12-18T23:29:44.780", "LastEditDate": "2014-12-18T23:18:52.007", "ViewCount": "2904", "FavoriteCount": "8", "Title": "Why does decltype(auto) return a reference here?", "Id": "27557369", "Score": "23", "Body": "<p>I think (thought) I understand <code>auto</code>. Same about <code>decltype</code>. However, in C++14, one can have some diabolic thing like <code>decltype(auto)</code> as the return type of a function. Consider the following:</p>\n<pre><code>decltype(auto) foo()\n{\n    int m = 1;\n    return m;\n}\n</code></pre>\n<p>The return type is <code>int</code>, everything makes sense.</p>\n<p>However,</p>\n<pre><code>decltype(auto) foo()\n{\n    int m = 1;\n    return (m);\n}\n</code></pre>\n<p>returns <code>int&amp;</code> (i.e. reference to <code>int</code>).</p>\n<p>I have absolutely NO IDEA why this happens, why do these parentheses make any difference at all!? Hope someone can shed some light on this.</p>\n<p>PS: I've also tagged with <code>C++</code> as there are many more people that check the <code>C++</code> tag than <code>C++14</code>.</p>\n", "Tags": "<c++><auto><c++14><decltype>", "OwnerUserId": "3093378", "AnswerCount": "1"}});