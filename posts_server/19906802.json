post_cb({"19906882": {"ParentId": "19906802", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>Character constants are <code>int</code>s not <code>char</code>s. So <code>'a'</code> is stored in 4 bytes, than when stored in <code>c</code>, it is shortened to 1 to become a <code>char</code>.</p>\n<p>Note that technically this size of <code>int</code>s are implementation dependent.</p>\n", "OwnerUserId": "784338", "LastEditorUserId": "916657", "LastEditDate": "2013-11-11T12:55:28.307", "Id": "19906882", "Score": "4", "CreationDate": "2013-11-11T12:53:11.973", "LastActivityDate": "2013-11-11T12:55:28.307"}, "19906869": {"ParentId": "19906802", "PostTypeId": "2", "CommentCount": "0", "Body": "<p><em>Character constants</em> in <em>C</em> are of type <em>int</em>, although this is not the case in <em>C++</em>. From the <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\" rel=\"nofollow\">draft C99 standard</a> section <code>6.4.4.4</code> <em>Character constants</em> paragraph <em>10</em> says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_19906802_19906869_0\">An integer character constant <strong>has type int</strong>. The value of an integer character constant\n  containing a single character that maps to a single-byte execution character is the\n  numerical value of the representation of the mapped character interpreted as an integer.\n  The value of an integer character constant containing more than one character (e.g.,\n  'ab')[...]</p>\n</blockquote>\n<p>from the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow\">draft C++ standard</a> section <code>2.14.3</code> <em>Character literals</em> paragraph <em>1</em> says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_19906802_19906869_1\">[...]An <strong>ordinary character literal</strong> that contains a single c-char representable in the execution character set <strong>has type char</strong>,[...] An ordinary character literal that <strong>contains more than one c-char is a multicharacter literal</strong>. A multicharacter\n  literal, or an ordinary character literal containing a single c-char not representable in the execution character set, is conditionally-supported, <strong>has type int</strong>, and has an implementation-defined value.</p>\n</blockquote>\n<p>So <code>av</code> is a <em>multicharacter literal</em> and will have size of <em>int</em>.</p>\n<p>For the second part of the question, <code>sizeof(main)</code> is not valid code, although compiler may choose to still produce a result it will be <em>implementation defined</em>, from the draft C99 standard section <code>6.5.3.4</code> <em>The sizeof operator</em> paragraph <em>1</em> says:</p>\n<blockquote>\n<p id=\"so_19906802_19906869_2\">The sizeof operator shall not be applied to an expression that has function type or an\n  incomplete type, [...]</p>\n</blockquote>\n<p>the draft C++ standard has similar wording and both <code>gcc</code> and <code>clang</code> warn about this code when using the <code>-pedantic</code> flag, with an error like this:</p>\n<blockquote>\n<p id=\"so_19906802_19906869_3\">warning: invalid application of 'sizeof' to a function type [-pedantic]</p>\n</blockquote>\n<p>for <code>sizeof(main())</code> since <code>sizeof</code> is a compile time operator and does not evaluate it's arguments except in the case of variable length arrays the result is the size of the return type which is <em>int</em> in this case. For example we can see <a href=\"http://coliru.stacked-crooked.com/a/1cde26df053c923d\" rel=\"nofollow\">live example</a>:</p>\n<pre><code>long double func()\n{\n    return 1.0 ;\n}\n</code></pre>\n<p>that <code>sizeof(func())</code> returns <code>16</code>.</p>\n<p><b>Note</b></p>\n<p>On your platform <code>sizeof(int)</code> is <code>4</code> but the size is <em>implementation defined</em>.</p>\n<p><b>Note 2</b></p>\n<p>Since the result of <code>sizeof</code> is <em>size_t</em> a more portable format specifier for <code>printf</code> would be <code>%zu</code>.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "1708801", "LastEditDate": "2013-11-11T14:12:09.327", "Id": "19906869", "Score": "8", "CreationDate": "2013-11-11T12:52:53.863", "LastActivityDate": "2013-11-11T14:12:09.327"}, "bq_ids": {"n4140": {"so_19906802_19906869_2": {"section_id": 6076, "quality": 0.7777777777777778, "length": 7}, "so_19906802_19906869_1": {"section_id": 5343, "quality": 0.9487179487179487, "length": 37}}, "n3337": {"so_19906802_19906869_2": {"section_id": 5844, "quality": 0.7777777777777778, "length": 7}, "so_19906802_19906869_1": {"section_id": 5140, "quality": 0.5897435897435898, "length": 23}}, "n4659": {"so_19906802_19906869_2": {"section_id": 7572, "quality": 0.7777777777777778, "length": 7}, "so_19906802_19906869_1": {"section_id": 6765, "quality": 0.9487179487179487, "length": 37}}}, "19906802": {"CommentCount": "2", "AcceptedAnswerId": "19906869", "PostTypeId": "1", "ClosedDate": "2013-11-11T12:53:51.263", "LastEditorUserId": "1708801", "CreationDate": "2013-11-11T12:49:46.253", "LastActivityDate": "2014-02-21T14:47:35.357", "LastEditDate": "2014-02-21T14:47:35.357", "ViewCount": "305", "FavoriteCount": "0", "Title": "Logic behind sizeof() for character constants and function names", "Id": "19906802", "Score": "4", "Body": "<p>In <em>C</em> the following code:</p>\n<pre><code>#include&lt;stdio.h&gt;\nint main()\n{\n   char c='a';\n   printf(\"%d %d\",sizeof(c),sizeof('a'));\n   return 0;\n}\n</code></pre>\n<p>produces the result <code>1</code> and <code>4</code>? Please explain the logic?</p>\n<p>Also, why does <code>sizeof(main())</code> result in <code>4</code> but <code>sizeof(main)</code> results in <code>1</code>:</p>\n<pre><code>#include&lt;stdio.h&gt;\n\nint main()\n{\n\n   printf(\"%d %d\\n\",sizeof(main), sizeof(main()));\n   return 0;\n}\n</code></pre>\n<p>And in <em>C++</em> why does <code>sizeof('a')</code> result in 1 but sizeof('av') results in 4?</p>\n", "Tags": "<c++><c><sizeof>", "OwnerUserId": "2979190", "AnswerCount": "2"}});