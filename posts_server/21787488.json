post_cb({"21787488": {"CommentCount": "0", "AcceptedAnswerId": "21787700", "PostTypeId": "1", "LastEditorUserId": "2542308", "CreationDate": "2014-02-14T19:03:20.407", "LastActivityDate": "2017-06-25T18:30:30.967", "LastEditDate": "2014-02-14T19:28:49.107", "ViewCount": "5797", "FavoriteCount": "1", "Title": "can have definition variable of non-literal type in constexpr function body c++14?", "Id": "21787488", "Score": "4", "Body": "<p>I think that in C++14 more restrictives are removed from constexpr. But according N3797 7.1.5 3-punct:</p>\n<hr>\n<p>The definition of a contexpr function shal satisfy the following constraints:</p>\n<ul>\n<li>it shall not be virtual</li>\n<li>its return type shall be a literal type;</li>\n<li>each of its parameters types shall be a literal type;</li>\n<li>its <em>function-body</em> shall be = <strong>delete</strong>, = <strong>default</strong>, or a <em>compound-statement</em> that does not contain: \n<ul>\n<li>an <em>asm-definition</em>,</li>\n<li>a <strong>goto</strong> statement,</li>\n<li>a <em>try-block</em>, or</li>\n<li>a definition of a variable of non-literal type or of static or thread storage duration or for which no initialization is\nperformed.\n<hr/></li>\n</ul></li>\n</ul>\n<p>I know why static, thread storage duration variables are disallowed, but I don't see any reason, why ONLY allowed definition of a variable of  literal type ?</p>\n<p>Or I'm not understand the standard. </p>\n<p>I'm not sure, but according standard following errors should be created even C++14:</p>\n<pre><code>struct point{\nconstexpr point(): x(0), y(0){}\nconstexpr point(int x_, int y_): x(x_),y(y_){}\nconstexpr int hypot()const { return x*x + y*y; }\nint x,y;\n};\n\nconstexpr int hypot(int x, int y) {  \n   point p{x,y}; //error, because p - is not literal type.\n   return p.hypot();\n}\n\n// error, because return type is not literal.\nconstexpr point  getPoint(int x, int y) { return {x,y}; }\n\n// error, because parameter is not literal.\nconstexpr int hypot(point p) { return p.hypot(); }\n</code></pre>\n<p><strong>Q: If really above errors would happen, why these restrics are not removed?</strong></p>\n</hr>", "Tags": "<c++><c++11><language-lawyer><constexpr><c++14>", "OwnerUserId": "2542308", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_21787488_21787700_7": {"section_id": 7208, "quality": 0.9166666666666666, "length": 11}, "so_21787488_21787700_5": {"section_id": 7208, "quality": 1.0, "length": 6}, "so_21787488_21787700_8": {"section_id": 7208, "quality": 1.0, "length": 10}}, "n3337": {"so_21787488_21787700_7": {"section_id": 6952, "quality": 0.9166666666666666, "length": 11}, "so_21787488_21787700_5": {"section_id": 6952, "quality": 1.0, "length": 6}, "so_21787488_21787700_8": {"section_id": 6952, "quality": 0.9, "length": 9}}, "n4659": {"so_21787488_21787700_7": {"section_id": 8717, "quality": 0.9166666666666666, "length": 11}, "so_21787488_21787700_5": {"section_id": 8717, "quality": 1.0, "length": 6}, "so_21787488_21787700_8": {"section_id": 8717, "quality": 1.0, "length": 10}}}, "21787700": {"ParentId": "21787488", "PostTypeId": "2", "CommentCount": "1", "Body": "<p><em>literal type</em> is defined in 3.9/10:</p>\n<blockquote>\n<p id=\"so_21787488_21787700_0\">A type is a <em>literal type</em> if it is:</p>\n<ul>\n<li><p id=\"so_21787488_21787700_1\"><code>void</code>; or</p></li>\n<li><p id=\"so_21787488_21787700_2\">a scalar type; or</p></li>\n<li><p id=\"so_21787488_21787700_3\">a reference type; or</p></li>\n<li><p id=\"so_21787488_21787700_4\">an array of literal type; or</p></li>\n<li><p id=\"so_21787488_21787700_5\">a class type (Clause 9) that has all of the following properties:</p>\n<ul>\n<li><p id=\"so_21787488_21787700_6\">it has a trivial destructor,</p></li>\n<li><p id=\"so_21787488_21787700_7\">it is an aggregate type (8.5.1) or has at least one <code>constexpr</code> constructor or constructor template that is not a copy or move constructor, and</p></li>\n<li><p id=\"so_21787488_21787700_8\">all of its non-static data members and base classes are of non-volatile literal types</p></li>\n</ul></li>\n</ul>\n</blockquote>\n<p>So your struct <code>point</code> <em>is</em> a literal type and your sample code is valid C++1y.</p>\n<p>As to why <code>constexpr</code> functions are restricted to variables of literal type, they are the only types that are guaranteed to be interpretable at compile time.</p>\n", "OwnerUserId": "923854", "LastEditorUserId": "923854", "LastEditDate": "2014-02-14T19:35:30.443", "Id": "21787700", "Score": "9", "CreationDate": "2014-02-14T19:15:17.717", "LastActivityDate": "2014-02-14T19:35:30.443"}});