post_cb({"24169125": {"ParentId": "24168460", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2014-06-11T17:32:42.077", "Score": "2", "LastEditorUserId": "1090079", "LastEditDate": "2014-06-11T17:45:26.197", "Id": "24169125", "OwnerUserId": "1090079", "Body": "<h3>Solution</h3>\n<p>Using multiplication for two operands of type <em>bool</em> is well-defined, it is however normally frowned upon since it doesn't make sense from a theoretical view. Instead of multiplying the two operands, use <em>bitwise-and</em> or <em>logical-and</em>, as can be seen in the below example:</p>\n<pre><code>bool a = true;\nbool b = true;\n\nbool c = a &amp;&amp; b;  // c = true  (using logical-and, RECOMMENDED)\nbool d = a &amp; !b;  // d = false (using bitwise-and)\n</code></pre>\n<p><sup></sup></p>\n<pre><code>Y[i] = a &amp;&amp; X[i]; // fix\n</code></pre>\n<hr>\n<h3>What about the warning?</h3>\n<p>The warning issued is completely useless, since both operands involved in the multiplications are of type <em>bool</em> the <em>usual arithmetic conversion</em> rules states that the result will also be of type <em>bool</em>. </p>\n<p>It is probably so that the warning was introduced to protect cases where an implicit conversion to <em>bool</em> happens when calculating the multiplication of two operands where the resulting type is <strong>not</strong> <em>bool</em>.</p>\n<p>The compiler you are using is inaccurately assuming that two arithmetic values multiplied might lead to a value that is not representable by the destination type, if that is <em>bool</em>, and decides to issue the diagnostic.</p>\n<p><br/></p>\n<p>In the below example the result yield by <code>x * y</code> will be <code>int</code> following the rules of <em>usual arithmetic conversion</em>, this means that the result of the expression will be stored in an <em>int</em>, and then truncated to fit inside <em>bool</em>.</p>\n<pre><code>int  x = 10;\nbool y = false;\n\nbool z = x * y; // (1), semantically equivalent of `bool x = (int)(x * (int)y)`\n</code></pre>\n<hr>\n<h3>Standard references (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf\" rel=\"nofollow\">n3337</a>)</h3>\n<blockquote>\n<p id=\"so_24168460_24169125_0\"><code>5.6p2</code> <strong>Multiplicative operators</strong> <code>[expr.mul]</code></p>\n<blockquote>\n<p id=\"so_24168460_24169125_2\">The operands of <code>*</code> and <code>/</code> shall have arithmetic or unscoepd enumeration type; the operands of <code>%</code> shall have integral or unscoped enumeration type. The usual arithmetic conversions are performed on the operands and determine the type of the result.</p>\n</blockquote>\n</blockquote>\n<p><sup></sup></p>\n<blockquote>\n<p id=\"so_24168460_24169125_3\"><code>5p9</code> <strong>Expressions</strong> <code>[expr]</code></p>\n<blockquote>\n<p id=\"so_24168460_24169125_6\">Many binary operators that expect operands of arithmetic or enumeration type cause conversions and yield result types in a similar way. The purpose is to yield a common type, which is also the type of the result. The pattern is called <em>usual arithmetic conversions</em>, which are defined as follows:</p>\n<ul>\n<li><p id=\"so_24168460_24169125_7\">...</p>\n<ul>\n<li>If both operands are of the same type, no further conversion is needed.</li>\n<li>...</li>\n</ul></li>\n</ul>\n</blockquote>\n</blockquote>\n</hr></hr>", "LastActivityDate": "2014-06-11T17:45:26.197"}, "24169132": {"ParentId": "24168460", "CommentCount": "0", "CreationDate": "2014-06-11T17:32:56.697", "OwnerUserId": "1165590", "PostTypeId": "2", "Id": "24169132", "Score": "1", "Body": "<p>Why not replace it with:</p>\n<pre><code> template &lt;&gt; inline void cblas_axpy&lt;bool&gt;( INTT n,  bool a,  bool* X,\n   INTT incX, bool* Y,  INTT incY) {\n  for (int i = 0; i&lt;n; ++i)\n  Y[i] = a &amp;&amp; X[i];\n };\n</code></pre>\n<p>I think that compiler is complaining because multiplying two bools requires to convert the result from int to bool and is more costly then to just multiply two integers. This warning happens each time when converting int to bool. If Y was int the warning would not be raised. </p>\n", "LastActivityDate": "2014-06-11T17:32:56.697"}, "24169114": {"ParentId": "24168460", "PostTypeId": "2", "CommentCount": "4", "CreationDate": "2014-06-11T17:32:23.813", "Score": "0", "LastEditorUserId": "924727", "LastEditDate": "2014-06-11T17:37:26.000", "Id": "24169114", "OwnerUserId": "924727", "Body": "<p>It is a nonsense turning inadvertently into another nonsense that makes some sense...</p>\n<p>In term of c++ spec this explanation can be not rigorous, but it may help in understanding what is going on.</p>\n<p>bool binary operation are just <code>&amp;&amp;</code> and <code>||</code>.</p>\n<p>But bool convert implicitly into int, having false=1 and true=1.</p>\n<p>and since <code>*</code> is an int multiplication, your <code>bool * bool --&gt; nonsense</code> becomes <code>int * int --&gt; int</code>. (that actually make sense, but is probably not what you though about)</p>\n<p>Now you have and int (something with a 16 or 32 bit signer range) returned by the multiplication you assign to a bool (that needs to be truncated to one bit only)</p>\n<p>The warning is about this truncation.</p>\n<hr>\n<p>Note: in term of C++ spec, bool*bool is defined, but thinking the way I suggest can help more in abstract reasoning, where conversion between generic types happens or conversion to and from integrals of different types (or implicitly converting as such) <em>can</em> be around.</p>\n</hr>", "LastActivityDate": "2014-06-11T17:37:26.000"}, "24168460": {"CommentCount": "15", "ViewCount": "723", "PostTypeId": "1", "LastEditorUserId": "1090079", "CreationDate": "2014-06-11T16:55:40.717", "LastActivityDate": "2014-06-11T17:50:16.937", "Title": "Warning about \"C4800: 'int' : forcing value to bool 'true' or false'\", why?", "LastEditDate": "2014-06-11T17:50:16.937", "Id": "24168460", "Score": "2", "Body": "<pre><code>// Implementation of the INTTerface for cblas_saxpy\ntemplate &lt;&gt; inline void cblas_axpy&lt;bool&gt;( INTT n,  bool a,  bool* X,\n       INTT incX, bool* Y,  INTT incY) {\n   for (int i = 0; i&lt;n; ++i)\n      Y[i] = a*X[i];\n};\n</code></pre>\n<blockquote>\n<p id=\"so_24168460_24168460_0\"><code>warning C4800: 'int' : forcing value to bool 'true' or 'false' (performance warning)</code></p>\n</blockquote>\n<p>This is part of the code that makes the warning happen. I do not know how to fix it. Please \nanyone give me some advice. Thank you so so much!</p>\n", "Tags": "<c++>", "OwnerUserId": "3618186", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_24168460_24169125_1": {"section_id": 6135, "quality": 0.7272727272727273, "length": 16}, "so_24168460_24169125_2": {"section_id": 6135, "quality": 0.7272727272727273, "length": 16}, "so_24168460_24169125_6": {"section_id": 5943, "quality": 0.9032258064516129, "length": 28}, "so_24168460_24169125_4": {"section_id": 5943, "quality": 0.9032258064516129, "length": 28}}, "n3337": {"so_24168460_24169125_1": {"section_id": 5899, "quality": 0.7272727272727273, "length": 16}, "so_24168460_24169125_2": {"section_id": 5899, "quality": 0.7272727272727273, "length": 16}, "so_24168460_24169125_4": {"section_id": 5714, "quality": 0.9032258064516129, "length": 28}, "so_24168460_24169125_6": {"section_id": 5714, "quality": 0.9032258064516129, "length": 28}}, "n4659": {"so_24168460_24169125_1": {"section_id": 7632, "quality": 0.7272727272727273, "length": 16}, "so_24168460_24169125_2": {"section_id": 7632, "quality": 0.7272727272727273, "length": 16}, "so_24168460_24169125_6": {"section_id": 7428, "quality": 0.9032258064516129, "length": 28}, "so_24168460_24169125_4": {"section_id": 7428, "quality": 0.9032258064516129, "length": 28}}}});