post_cb({"34085221": {"ParentId": "34085147", "CommentCount": "0", "CreationDate": "2015-12-04T09:44:29.120", "OwnerUserId": "201706", "PostTypeId": "2", "Id": "34085221", "Score": "1", "Body": "<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Sampleclass\n{\npublic:\n    Sampleclass();\n};\n\nSampleclass::Sampleclass(){\n\n}\n\nint main() {\n    cout &lt;&lt; \"!!!Hello World!!!\" &lt;&lt; endl; // prints !!!Hello World!!!\n    Sampleclass *qs = new Sampleclass::Sampleclass();\n    return 0;\n}\n</code></pre>\n<p>You tried to reference the constructor as a type when instantiating your class.</p>\n", "LastActivityDate": "2015-12-04T09:44:29.120"}, "34085147": {"CommentCount": "3", "ViewCount": "5800", "CreationDate": "2015-12-04T09:41:16.207", "LastActivityDate": "2015-12-04T09:47:15.477", "Title": "C++ Cannot call constructor directly in small example", "PostTypeId": "1", "Id": "34085147", "Score": "5", "Body": "<p>I was wondering, why I cannot call a constructor. Even this small example fails to compile with the message: </p>\n<pre><code>Klassentest.cpp:24:27: error: cannot call constructor 'Sampleclass::Sampleclass' directly [-fpermissive]\n</code></pre>\n<p>Code:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Sampleclass\n{\n   public:\n    Sampleclass();\n};\n\nSampleclass::Sampleclass(){\n\n}\n\nint main() {\n    cout &lt;&lt; \"!!!Hello World!!!\" &lt;&lt; endl; // prints !!!Hello World!!!\n    Sampleclass::Sampleclass() *qs = new Sampleclass::Sampleclass();\n    return 0;\n}\n</code></pre>\n<p>I used the Cygwin g++ compiler in version 4.9.3-1.</p>\n<p>Thank you for your help.</p>\n", "Tags": "<c++><constructor>", "OwnerUserId": "5626842", "AnswerCount": "4"}, "34085281": {"ParentId": "34085147", "CommentCount": "0", "CreationDate": "2015-12-04T09:47:15.477", "OwnerUserId": "2995495", "PostTypeId": "2", "Id": "34085281", "Score": "0", "Body": "<p>In C++ a constructor is called automatically if you define a new variable/instance of that class.</p>\n<p>Follow the link below to see some simple examples, how the constructor can be used:\n<a href=\"http://www.tutorialspoint.com/cplusplus/cpp_constructor_destructor.htm\" rel=\"nofollow\">http://www.tutorialspoint.com/cplusplus/cpp_constructor_destructor.htm</a></p>\n", "LastActivityDate": "2015-12-04T09:47:15.477"}, "34085246": {"ParentId": "34085147", "CommentCount": "0", "CreationDate": "2015-12-04T09:45:40.057", "OwnerUserId": "3309790", "PostTypeId": "2", "Id": "34085246", "Score": "3", "Body": "<p>Yes, you can't call ctor directly.</p>\n<p>From the standard, $12.1/2 Constructors [class.ctor]</p>\n<blockquote>\n<p id=\"so_34085147_34085246_0\">Because constructors do not have names, they are never found during\n  name lookup;</p>\n</blockquote>\n<p>You might want</p>\n<pre><code>Sampleclass *qs = new Sampleclass;\n</code></pre>\n<p>Then the ctor will be called.</p>\n", "LastActivityDate": "2015-12-04T09:45:40.057"}, "34085187": {"ParentId": "34085147", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-12-04T09:43:15.780", "Score": "5", "LastEditorUserId": "3494013", "LastEditDate": "2015-12-04T09:45:05.687", "Id": "34085187", "OwnerUserId": "3494013", "Body": "<pre><code>Sampleclass::Sampleclass() *qs = new Sampleclass::Sampleclass();\n</code></pre>\n<p>is wrong. <code>Sampleclass</code> is a <strong>type</strong> while <code>Sampleclass::Sampleclass</code> is a <strong>constructor</strong>. Since the correct syntax is</p>\n<pre><code>type identifier = new type();\n</code></pre>\n<p>you need to specify the <strong>type</strong> here.</p>\n<p>Therefore, use</p>\n<pre><code>Sampleclass *qs = new Sampleclass();\n</code></pre>\n<p>instead.</p>\n<hr>\n<p>Notes:</p>\n<ul>\n<li><p>If you didn't know: since C++11 you can simply do</p>\n<pre><code>Sampleclass() = default;\n</code></pre>\n<p>in the class definition and the default constructor will be defined.</p></li>\n</ul>\n</hr>", "LastActivityDate": "2015-12-04T09:45:05.687"}, "bq_ids": {"n4140": {"so_34085147_34085246_0": {"section_id": 367, "quality": 1.0, "length": 10}}, "n3337": {"so_34085147_34085246_0": {"section_id": 356, "quality": 1.0, "length": 10}}, "n4659": {"so_34085147_34085246_0": {"section_id": 379, "quality": 1.0, "length": 10}}}});