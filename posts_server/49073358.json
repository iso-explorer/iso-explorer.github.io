post_cb({"bq_ids": {"n4140": {"so_49073358_49076096_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 735}, "so_49073358_49076096_1": {"length": 37, "quality": 0.9736842105263158, "section_id": 986}}, "n3337": {"so_49073358_49076096_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 724}, "so_49073358_49076096_1": {"length": 24, "quality": 0.631578947368421, "section_id": 971}}, "n4659": {"so_49073358_49076096_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 764}, "so_49073358_49076096_1": {"length": 36, "quality": 0.9473684210526315, "section_id": 1049}}}, "49076096": {"Id": "49076096", "PostTypeId": "2", "Body": "<p>The standard doesn't require a <code>noexcept</code> move constructor for <code>T</code> in order to use it when calling <code>std::vector&lt;T&gt;::push_back(T&amp;&amp;)</code></p>\n<p>Here's what the standard has to say about <code>push_back(T&amp;&amp; rv)</code> (see [sequence.reqmts]):</p>\n<blockquote>\n<p id=\"so_49073358_49076096_0\">Appends a copy of <code>rv</code>. <br/>\n<em>Requires</em>: T shall be\n  <code>MoveInsertable</code> into [the <code>vector</code>].</p>\n</blockquote>\n<p><code>MoveInsertible</code> is a fancy concept that just means it's possible to construct your type with an rvalue reference*. E.g. via a move constructor, but via copy construction is not out of the equation.</p>\n<p>I think you're mixing this up with the fact that, depending on whether the move constructor is declared <code>noexcept</code> or not, <code>std::vector</code> can make different exception guarantees. See the \"Remarks\" for the rvalue reference<code>push_back</code> ([vector.modifiers]):</p>\n<blockquote>\n<p id=\"so_49073358_49076096_1\"><em>Remarks</em>: ... If an exception is thrown other\n  than by the copy constructor, move constructor, assignment operator, or move assignment operator of\n  <code>T</code> or by any <code>InputIterator</code> operation there are no effects. If an exception is thrown while inserting a\n  single element at the end and <code>T</code> is <code>CopyInsertable</code> or <code>is_nothrow_move_constructible&lt;T&gt;::value</code>\n  is <code>true</code>, there are no effects. Otherwise, if an exception is thrown by the move constructor of a\n  non-<code>CopyInsertable T</code>, the effects are unspecified.</p>\n</blockquote>\n<hr>\n<p>*To be more specific, whether your type is <code>MoveInsertible</code> into a <code>vector</code> or not is <em>allocator-dependent</em>. That is, for allocator <code>A</code> of your <code>vector</code>, the following must well-formed:</p>\n<pre><code>allocator_traits&lt;A&gt;::construct(m, p, rv)\n</code></pre>\n<ul>\n<li><code>m</code> is an instance of your allocator <code>A</code></li>\n<li><code>p</code> is a pointer to your type (<code>T*</code>) (more accurate to say it is aligned storage that can hold a <code>T</code>)</li>\n<li><code>rv</code> is our rvalue that we're attempting to insert (<code>T&amp;&amp;</code>)</li>\n</ul>\n</hr>", "LastEditorUserId": "27678", "LastActivityDate": "2018-03-02T19:36:09.577", "Score": "1", "CreationDate": "2018-03-02T19:30:33.513", "ParentId": "49073358", "CommentCount": "0", "OwnerUserId": "27678", "LastEditDate": "2018-03-02T19:36:09.577"}, "49073358": {"ViewCount": "54", "Body": "<p>Technically, noexcept specified move c'tor is requirement of vector to use move instead of copy c'tor.</p>\n<p>I found that this is not the case with GCC 7.</p>\n<pre><code>std::vector&lt;A&gt; v;\nv.push_back(A(\"555\"));   //triggers move c'tor\n</code></pre>\n<p>The above works as long as A implements move c'tor and specifying the move c'tor as noexcept is not necessary.  </p>\n<p>I'd like to know if this is a GCC issue or is normal across compilers?<br>\nOr is it the case that I'm misunderstanding something?</br></p>\n", "Title": "noexcept requirement of vector not upheld", "CreationDate": "2018-03-02T16:31:07.107", "LastActivityDate": "2018-03-02T19:36:17.900", "CommentCount": "1", "LastEditDate": "2018-03-02T19:36:17.900", "PostTypeId": "1", "LastEditorUserId": "3204551", "Id": "49073358", "Score": "1", "OwnerUserId": "5570210", "Tags": "<c++><c++11><c++14><move><noexcept>", "AnswerCount": "1"}});