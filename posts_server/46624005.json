post_cb({"46624005": {"ViewCount": "242", "Body": "<h3>Background</h3>\n<p>Yesterday I asked a question about the <a href=\"https://stackoverflow.com/questions/46610383/is-it-guaranteed-that-template-template-parameter-invoke-user-provided-deduction\">guarantees of deduction guides usage in case of template template parameters</a>. I was really surprised when Barry changed his answer to the confirmation of standard complianceness of the code. My surprise doesn't actually come from the fact  deduction guides  can be applied for template template parameters, but more from the standard part which conforms this compliance, namely <a href=\"http://eel.is/c++draft/temp.param#3\" rel=\"nofollow noreferrer\">[temp.param]/3</a>:</p>\n<blockquote>\n<p id=\"so_46624005_46624005_0\">A <em>type-parameter</em> whose identifier does not follow an ellipsis defines its identifier to be a <em>typedef-name</em> (if declared without <code>template</code>) or <em>template-name</em> (if declared with <code>template</code>) in the scope of the template declaration.</p>\n</blockquote>\n<p>This plus <a href=\"http://eel.is/c++draft/temp.deduct.guide#1\" rel=\"nofollow noreferrer\">[temp.deduct.guide]/1</a> and the rule for <a href=\"http://eel.is/c++draft/temp.names#nt:simple-template-id\" rel=\"nofollow noreferrer\">simple-template-id</a> would allow one to create a generic deduction guide accepting any template.</p>\n<h3>Example</h3>\n<pre><code>#include &lt;string&gt;\n\ntemplate &lt;class T&gt;\nstruct Foo {\n   Foo(T) { }\n};\n\ntemplate &lt;template &lt;class&gt; class TT&gt;\nTT(const char *) -&gt; TT&lt;std::string&gt;;\n\nint main() {\n    Foo foo(\"abc\");\n}\n</code></pre>\n<h3>The question</h3>\n<p>The code causes <a href=\"https://wandbox.org/permlink/76GFORvhhg3FSIkw\" rel=\"nofollow noreferrer\">gcc</a> to crash with internal error and results in compilation error in <a href=\"https://wandbox.org/permlink/mz6kmebEFcLuOak7\" rel=\"nofollow noreferrer\">clang</a>. To be straight, I am <strong>not</strong> saying the code should be actually allowed in C++ but think the current wording does make it conformant. Am I missing some important rule that disallows the code?</p>\n", "AcceptedAnswerId": "47250175", "Title": "Are user defined deduction guides involving template template parameter as a template for guidance standard compliant", "CreationDate": "2017-10-07T18:59:20.883", "Id": "46624005", "CommentCount": "4", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2017-11-01T15:11:58.570", "LastEditorUserId": "27678", "LastActivityDate": "2017-11-12T15:05:51.037", "Score": "11", "OwnerUserId": "4324224", "Tags": "<c++><language-lawyer><c++1z><template-templates><deduction-guide>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_46624005_47250175_2": {"length": 5, "quality": 0.5555555555555556, "section_id": 5768}, "so_46624005_47250175_4": {"length": 9, "quality": 1.0, "section_id": 230}, "so_46624005_47250175_8": {"length": 5, "quality": 0.5555555555555556, "section_id": 648}, "so_46624005_47250175_7": {"length": 7, "quality": 0.875, "section_id": 175}, "so_46624005_46624005_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 56}, "so_46624005_47250175_6": {"length": 9, "quality": 1.0, "section_id": 230}, "so_46624005_47250175_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 49}, "so_46624005_47250175_5": {"length": 4, "quality": 0.6666666666666666, "section_id": 49}}, "n3337": {"so_46624005_47250175_2": {"length": 5, "quality": 0.5555555555555556, "section_id": 5541}, "so_46624005_47250175_4": {"length": 9, "quality": 1.0, "section_id": 223}, "so_46624005_47250175_8": {"length": 5, "quality": 0.5555555555555556, "section_id": 638}, "so_46624005_47250175_7": {"length": 7, "quality": 0.875, "section_id": 169}, "so_46624005_47250175_5": {"length": 4, "quality": 0.6666666666666666, "section_id": 44}, "so_46624005_47250175_6": {"length": 9, "quality": 1.0, "section_id": 223}, "so_46624005_47250175_1": {"length": 4, "quality": 0.6666666666666666, "section_id": 44}, "so_46624005_46624005_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 51}}, "n4659": {"so_46624005_47250175_2": {"length": 5, "quality": 0.5555555555555556, "section_id": 176}, "so_46624005_47250175_4": {"length": 9, "quality": 1.0, "section_id": 238}, "so_46624005_47250175_8": {"length": 7, "quality": 0.7777777777777778, "section_id": 623}, "so_46624005_47250175_7": {"length": 8, "quality": 1.0, "section_id": 180}, "so_46624005_46624005_0": {"length": 18, "quality": 1.0, "section_id": 58}, "so_46624005_47250175_6": {"length": 9, "quality": 1.0, "section_id": 238}, "so_46624005_47250175_1": {"length": 5, "quality": 0.8333333333333334, "section_id": 372}, "so_46624005_47250175_5": {"length": 5, "quality": 0.8333333333333334, "section_id": 372}}}, "47250175": {"Id": "47250175", "PostTypeId": "2", "Body": "<h2>Your example</h2>\n<p>At the risk of being wrong, I would cite a now-deleted answer</p>\n<blockquote>\n<p id=\"so_46624005_47250175_0\">If I'm not mistaken this goes afoul of [temp.deduct.guide]p3:</p>\n<blockquote>\n<p id=\"so_46624005_47250175_5\">The simple-template-id shall name a class template specialization.</p>\n</blockquote>\n<p id=\"so_46624005_47250175_2\"><code>TT&lt;std::string&gt;</code> does not name a class template specialization, and your code is ill-formed.</p>\n<p id=\"so_46624005_47250175_3\">There is also this in [temp.spec]p4:</p>\n<blockquote>\n<p id=\"so_46624005_47250175_6\">A specialization is a class, function, or class member that is either instantiated or explicitly specialized.</p>\n</blockquote>\n</blockquote>\n<p><code>TT</code> is a template <em>type-parameter</em> technically. And the construct <code>TT&lt;std::string&gt;</code> is a type-dependent <em>type-name</em>. If the deduction-guide would be an actual function template and we would instantiate it, <code>TT&lt;std::string&gt;</code> could be instantiated as <em>class-name</em> that referred to a class template specialization. It could also refer to <code>int</code> if <code>TT</code> is instantiated to refer to a suitably defined alias-template. But as-is, in the deduction-guide declaration, it does not yet name a class template specialization. </p>\n<p>There is a rule at [temp.res]p8.5.5 that says</p>\n<blockquote>\n<p id=\"so_46624005_47250175_7\">Otherwise, no diagnostic shall be issued for a template for which a valid specialization can be generated. </p>\n</blockquote>\n<p>So, can a specialization of a deduction-guide happen <em>at all</em>? I argue with <em>no</em>. First of all, it's not a \"templated entity\" (c.f. [temp]p8) that could be instantiated. What is specialized in class template argument deduction is a set of templates that are <em>formed based on the deduction guides</em>, but not the guides themselfs. See [over.match.class.deduct]p1.4</p>\n<blockquote>\n<p id=\"so_46624005_47250175_8\">[...] For each deduction-guide, a function or function template with the following properties [is formed]: [...]</p>\n</blockquote>\n<p>It's those function templates that are specialized further in the process of overload-resolution. The deduction guides themselfs are never specialized, therefore, we can generate a diagnostic message for violation of the rule that the <em>simple-template-id</em> in the deduction-guide does not name a class template specialization. </p>\n<h2>Naming by an alias template (Richard's example)</h2>\n<p>Richard gave a different example</p>\n<pre><code>template&lt;typename T&gt; class X { T t; };\ntemplate&lt;typename T&gt; using Y = X&lt;T*&gt;;\ntemplate&lt;typename T&gt; Y(T) -&gt; Y&lt;T&gt;;\n</code></pre>\n<p>In this case, it's more complicated and I think this might be allowed by the wording, as <code>Y&lt;T&gt;</code> is actually a class template specialization. You can now argue about whether it actually <em>names</em> the specialization or merely <em>denotes</em> it, after rewriting rules are applied. The fact that it could allow for arguments would appear to be enough to warrant a defect report, IMO.</p>\n", "LastEditorUserId": "34509", "LastActivityDate": "2017-11-12T15:05:51.037", "Score": "1", "CreationDate": "2017-11-12T14:51:55.760", "ParentId": "46624005", "CommentCount": "3", "OwnerUserId": "34509", "LastEditDate": "2017-11-12T15:05:51.037"}});