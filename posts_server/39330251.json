post_cb({"39330368": {"ParentId": "39330251", "PostTypeId": "2", "CommentCount": "11", "Body": "<p>In the current C++ standard (C++14, as well as in the previous versions C++11 and C++03), it is unspecified whether memory is allocated before or after <code>f()</code> is evaluated, but in any case memory will be freed if it has been allocated; <strong>[expr.new]</strong>:</p>\n<blockquote>\n<p id=\"so_39330251_39330368_0\">20 - If any part of the object initialization described above<sup>79</sup> terminates by throwing an exception, storage has\n  been obtained for the object, and a suitable deallocation function can be found, the deallocation function is\n  called to free the memory [...]</p>\n<p id=\"so_39330251_39330368_1\">79) This may include evaluating a <em>new-initializer</em> and/or calling a constructor.</p>\n</blockquote>\n<p>Here the <em>new-initializer</em> is <code>f()</code>, so if the evaluation of <code>f()</code> throws an exception, the deallocation function will be called (if found).</p>\n<p>Since C++17, the allocation of memory is sequenced <em>before</em> the evaluation of <code>f()</code>, so the memory will always be deallocated:</p>\n<blockquote>\n<p id=\"so_39330251_39330368_2\">21 - If any part of the object initialization described above<sup>79</sup> terminates by throwing an exception and a suitable\n  deallocation function can be found, the deallocation function is called [...]</p>\n</blockquote>\n<p>Note though that since memory allocation is elidable, the implementation is in practice free to omit the allocation if it can predict that an exception will be thrown.</p>\n", "OwnerUserId": "567292", "LastEditorUserId": "567292", "LastEditDate": "2016-09-05T12:27:17.993", "Id": "39330368", "Score": "4", "CreationDate": "2016-09-05T12:12:56.890", "LastActivityDate": "2016-09-05T12:27:17.993"}, "39330251": {"CommentCount": "1", "ViewCount": "96", "CreationDate": "2016-09-05T12:06:23.517", "LastActivityDate": "2016-09-05T12:27:17.993", "Title": "What an implementation should do in case of operator new and \"nested\" initialization", "AcceptedAnswerId": "39330368", "PostTypeId": "1", "Id": "39330251", "Score": "8", "Body": "<p>I know that an implementation should free any allocated memory if the constructor of an object throws an exception in situation like this:</p>\n<pre><code>new T(); // Suppose that T() throws an exception\n</code></pre>\n<p>but what about the following code?</p>\n<pre><code>new T(f()); // Suppose that T() does NOT throw any exception, but f() does\n</code></pre>\n<p>What should implementation do in this case? Should it free any allocated memory then?</p>\n", "Tags": "<c++>", "OwnerUserId": "1608835", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_39330251_39330368_1": {"section_id": 6101, "quality": 0.875, "length": 7}, "so_39330251_39330368_0": {"section_id": 6101, "quality": 0.9545454545454546, "length": 21}, "so_39330251_39330368_2": {"section_id": 6101, "quality": 0.9375, "length": 15}}, "n3337": {"so_39330251_39330368_1": {"section_id": 5867, "quality": 0.875, "length": 7}, "so_39330251_39330368_0": {"section_id": 5867, "quality": 0.7727272727272727, "length": 17}, "so_39330251_39330368_2": {"section_id": 5867, "quality": 0.9375, "length": 15}}, "n4659": {"so_39330251_39330368_1": {"section_id": 7598, "quality": 0.875, "length": 7}, "so_39330251_39330368_0": {"section_id": 7598, "quality": 0.7727272727272727, "length": 17}, "so_39330251_39330368_2": {"section_id": 7598, "quality": 0.9375, "length": 15}}}});