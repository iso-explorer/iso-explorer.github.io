post_cb({"17213933": {"Id": "17213933", "PostTypeId": "2", "Body": "<p>The <a href=\"http://www.openmp.org/mp-documents/OpenMP3.1.pdf\" rel=\"nofollow\">OpenMP 3.1 standard</a>, section 2.1,  says that (emphasis mine):</p>\n<blockquote>\n<p id=\"so_17213327_17213933_0\">OpenMP directives for C/C++ are specified with the pragma\n  <strong>preprocessing directive</strong>.</p>\n</blockquote>\n<p>Now, both in C and in C++, you <strong>are not allowed</strong> to introduce new preprocessor macros during the macro expansion phase, and that's why you get an error.</p>\n<p>For instance in the latest <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"nofollow\">C++ standard draft</a> (section 16) you will find the following:</p>\n<blockquote>\n<p id=\"so_17213327_17213933_1\">The preprocessing tokens within a preprocessing directive are not\n  subject to macro expansion unless otherwise stated</p>\n</blockquote>\n<p>followed by an example that closely resembles your snippet:</p>\n<blockquote>\n<p id=\"so_17213327_17213933_2\">In:</p>\n<pre><code>#define EMPTY\nEMPTY #include &lt;file.h&gt;\n</code></pre>\n<p id=\"so_17213327_17213933_3\">the sequence of preprocessing tokens on the second line is not a\n  preprocessing directive, because it does not begin with a <code>#</code> at the start of translation phase 4, even though it will do so after the macro <code>EMPTY</code> has been replaced.</p>\n</blockquote>\n<p>Anyhow, as correctly stated in other answers, you can obtain the same effect as the one you are seeking using the <code>_Pragma</code> operator since C99 and C++11. An example from section 16.9 of the same C++ standard draft:</p>\n<blockquote>\n<p id=\"so_17213327_17213933_4\">#pragma listing on \"..\\listing.dir\"</p>\n<p id=\"so_17213327_17213933_5\">can also be expressed as:</p>\n<pre><code>_Pragma ( \"listing on \\\"..\\\\listing.dir\\\"\" )\n</code></pre>\n<p id=\"so_17213327_17213933_6\">The latter form is processed in the same way whether it appears\n  literally as shown, or results from macro replacement, as in:</p>\n<pre><code>#define LISTING(x) PRAGMA(listing on #x)\n#define PRAGMA(x) _Pragma(#x)\nLISTING( ..\\listing.dir )\n</code></pre>\n</blockquote>\n<p>Finally, pay attention at the <em>choice of your names</em>, as <code>_X_</code> is potentially a name reserved to the implementation (section 17.6.4.3.2):</p>\n<blockquote>\n<p id=\"so_17213327_17213933_7\">Certain sets of names and function signatures are always reserved to\n  the implementation:  </p>\n<ul>\n<li>Each name that contains a double underscore <code>__</code> or begins with an    underscore followed by an uppercase letter (2.12) is reserved to the  implementation for any use</li>\n<li>Each name that begins with an underscore is reserved to the    implementation for use as a name in the global namespace</li>\n</ul>\n</blockquote>\n", "LastEditorUserId": "771663", "LastActivityDate": "2013-06-21T06:12:27.263", "Score": "1", "CreationDate": "2013-06-20T12:42:43.433", "ParentId": "17213327", "CommentCount": "1", "OwnerUserId": "771663", "LastEditDate": "2013-06-21T06:12:27.263"}, "bq_ids": {"n4140": {"so_17213327_17213933_7": {"length": 8, "quality": 1.0, "section_id": 6307}, "so_17213327_17213933_3": {"length": 21, "quality": 1.0, "section_id": 496}, "so_17213327_17213933_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 496}}, "n3337": {"so_17213327_17213933_7": {"length": 8, "quality": 1.0, "section_id": 6064}, "so_17213327_17213933_3": {"length": 21, "quality": 1.0, "section_id": 487}, "so_17213327_17213933_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 487}}, "n4659": {"so_17213327_17213933_6": {"length": 12, "quality": 0.9230769230769231, "section_id": 576}, "so_17213327_17213933_7": {"length": 5, "quality": 0.625, "section_id": 7844}, "so_17213327_17213933_3": {"length": 21, "quality": 1.0, "section_id": 511}, "so_17213327_17213933_1": {"length": 10, "quality": 0.9090909090909091, "section_id": 511}}}, "17216289": {"Id": "17216289", "PostTypeId": "2", "Body": "<p>In C, since C99, you have the <code>_Pragma</code> operator that allows you to place pragmas inside macros, e.g.</p>\n<pre><code>#define SUM(_X_)                         \\\nsum=0.0;                                 \\\n_Pragma(\"parallel for reduction(+:sum)\") \\\nfor (i = 0 ; i &lt; 10 ; i++)               \\\n    sum += _X_[i]\n</code></pre>\n<p>BTW, be careful, never place a terminating <code>;</code> at the end of a macro definition.</p>\n", "LastEditorUserId": "366377", "LastActivityDate": "2013-06-20T22:36:47.807", "Score": "2", "CreationDate": "2013-06-20T14:27:37.167", "ParentId": "17213327", "CommentCount": "2", "OwnerUserId": "366377", "LastEditDate": "2013-06-20T22:36:47.807"}, "17213327": {"ViewCount": "160", "Body": "<p>I am trying to use OpenMP code in preprocessor directives but I am getting error while compiling the code. \nI am trying to do something like below.</p>\n<pre><code> #include&lt;stdio.h&gt;\n #include&lt;omp.h&gt;\n #define SUM(_X_)\n sum=0.0                            \\\n /*I want to put openmp     \n  parallel for directive here       \\   \n i.e., #parallel for reduction(+:sum)\\\n  */                                 \\\n for (i = 0 ; i &lt; 10 ; i++)          \\  \n    sum += _X_[i];              \\\nint main()\n{\n   int i=0,x[10];\n   float sum=0;\n   for(i=0;i&lt;10;i++)\n      x[i]=i;\n   SUM(x);\n}       \n</code></pre>\n<p>Does anyone knows how to achieve this? </p>\n", "Title": "Getting error while using openmp in preprocessor directives", "CreationDate": "2013-06-20T12:10:19.287", "LastActivityDate": "2013-06-21T09:54:18.853", "CommentCount": "1", "LastEditDate": "2013-06-21T09:54:18.853", "PostTypeId": "1", "LastEditorUserId": "771663", "Id": "17213327", "Score": "0", "OwnerUserId": "2134529", "Tags": "<c++><c><parallel-processing><openmp>", "AnswerCount": "2"}});