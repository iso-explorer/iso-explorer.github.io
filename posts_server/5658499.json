post_cb({"5658514": {"Id": "5658514", "PostTypeId": "2", "Body": "<p>There is only one copy of the 'static' function for the class in which it is defined... i.e. all the objects of that class share the same 'static' function.</p>\n<p>The constructor is only called when the object of that class is created. In case of c++, the constructor is called when you create an object of that class with the <code>new</code> operator.</p>\n<p>To call a static method you need to use the Scope Resolution operator (::) and qualify the method name with the class name... However, in case of the constructor, it gets automatically invoked with the \"new\" operator.</p>\n<p>Hope this helps.</p>\n", "LastEditorUserId": "562073", "LastActivityDate": "2011-04-14T07:08:08.113", "Score": "1", "CreationDate": "2011-04-14T04:25:28.143", "ParentId": "5658499", "CommentCount": "4", "OwnerUserId": "562073", "LastEditDate": "2011-04-14T07:08:08.113"}, "5658519": {"Id": "5658519", "PostTypeId": "2", "Body": "<p>Constructors are called when the object is created.</p>\n<p>static methods of a class are basically instant independent. In other words, the method does not keep values for individual objects they are shared amongst all the objects</p>\n", "LastActivityDate": "2011-04-14T04:25:57.700", "CommentCount": "0", "CreationDate": "2011-04-14T04:25:57.700", "ParentId": "5658499", "Score": "1", "OwnerUserId": "667648"}, "5658636": {"Id": "5658636", "PostTypeId": "2", "Body": "<h2>Background on static member functions</h2>\n<p><code>static</code> member functions can be called at any time, even if you haven't created an object instance of the class.  When they're called:</p>\n<ul>\n<li>they do not receive an implicit <code>this</code> pointer the way non-static member functions do\n<ul>\n<li>so, they're not implicitly automatically aware if there are any instances of the class, let alone where in memory instances are.</li>\n</ul></li>\n<li>they can work on the static member variables, which are likewise independent of object instances.</li>\n</ul>\n<p>To understand the above, it may help to imagine that the static members of a class or struct are similar to freestanding non-members except that:</p>\n<ul>\n<li>static members effectively have friendship with the class</li>\n<li>static members are inside the class's scope for the purposes of looking up the identifiers to match function calls or find the variable</li>\n<li>static members can be protected or private within that scope</li>\n</ul>\n<p>So, they're a hybrid of non-member and member behaviours.</p>\n<h2>How object construction relates to static/non-static members and threading</h2>\n<p>The constructor of objects can utilise static members of the class, either calling functions or using variables.  But, remember that the static member variable is like a single global variable except that it's in the class's naming scope: any code using the variable - whether that code's a static or non-static member function or a non-member function - must cooperate with other code using the variable because the value is shared.  If you write multi-threaded code, you'll need to use a mutex or similar to protect it exactly as you would for a non-member variable.</p>\n<h2>Construction of static member variables</h2>\n<p>There is one crucial issue that I think you may intend by the question: when is the constructor for the static member variables called?  According to the Standard 9.4.2 (I'm referencing the C++98 final draft here):</p>\n<blockquote>\n<p id=\"so_5658499_5658636_0\">-7- Static data members are initialized and destroyed exactly like non-local objects (basic.start.init, basic.start.term). </p>\n</blockquote>\n<p>Crucially, the worst/latest-case scenario is described in 3.6.2:</p>\n<p>-3- It is implementation-defined whether or not the dynamic initialization (dcl.init, class.static, class.ctor, class.expl.init) of an object of namespace scope is done before the first statement of main. If the initialization is deferred to some point in time after the first statement of main, it shall occur before the first use of any function or object defined in the same translation unit as the object to be initialized.* </p>\n", "LastEditorUserId": "410767", "LastActivityDate": "2011-04-14T04:57:19.507", "Score": "1", "CreationDate": "2011-04-14T04:41:52.727", "ParentId": "5658499", "CommentCount": "0", "OwnerUserId": "410767", "LastEditDate": "2011-04-14T04:57:19.507"}, "5658610": {"Id": "5658610", "PostTypeId": "2", "Body": "<p>There is no dependency relationship, that is, you can call the static method without constructing an instance with the syntax \"Class::method()\"</p>\n<pre><code>class someclass\n{\npublic:\n    someclass()\n    {\n        std::cout &lt;&lt; \"someclass constructor\" &lt;&lt; std::endl;\n    }\n\n    static void staticmethod()\n    {\n        std::cout &lt;&lt; \"someclass staticmethod\" &lt;&lt; std::endl;\n    }\n};\n</code></pre>\n<p>and then</p>\n<pre><code>int main(int argc, char** argv)\n{\n    someclass::staticmethod();\n    return 0;\n}\n</code></pre>\n<p>you will see printed out \"someclass staticmethod\" with no mention or need for invoking the constructor.</p>\n", "LastActivityDate": "2011-04-14T04:37:59.717", "CommentCount": "3", "CreationDate": "2011-04-14T04:37:59.717", "ParentId": "5658499", "Score": "2", "OwnerUserId": "679637"}, "bq_ids": {"n4140": {"so_5658499_5658636_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 5911}}, "n3337": {"so_5658499_5658636_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 5683}}, "n4659": {"so_5658499_5658636_0": {"length": 8, "quality": 0.7272727272727273, "section_id": 7393}}}, "5658499": {"ViewCount": "347", "Body": "<p>What happens every time a static function is called on the class? When is the constructor executed?</p>\n", "AcceptedAnswerId": "5658610", "Title": "What is the relationship between a static function of a class and the constructor of the class?", "CreationDate": "2011-04-14T04:22:08.287", "Id": "5658499", "CommentCount": "2", "FavoriteCount": "0", "PostTypeId": "1", "LastActivityDate": "2011-04-14T07:08:08.113", "Score": "1", "OwnerUserId": "381699", "Tags": "<c++><class><constructor><static-methods>", "AnswerCount": "6"}, "5658523": {"Id": "5658523", "PostTypeId": "2", "Body": "<ul>\n<li>For class methods, static means that this method can be called on the class itself, no instance of that class is necessary to use the method</li>\n<li>For functions in a basic C/C++ program, static functions are functions that are only visible to other functions in the same file</li>\n</ul>\n", "LastActivityDate": "2011-04-14T04:26:31.327", "CommentCount": "0", "CreationDate": "2011-04-14T04:26:31.327", "ParentId": "5658499", "Score": "0", "OwnerUserId": "693820"}, "5658516": {"Id": "5658516", "PostTypeId": "2", "Body": "<p>The constructor is executed when an object is instantiated.</p>\n", "LastActivityDate": "2011-04-14T04:25:46.350", "CommentCount": "0", "CreationDate": "2011-04-14T04:25:46.350", "ParentId": "5658499", "Score": "0", "OwnerUserId": "194725"}});