post_cb({"38033124": {"CommentCount": "1", "AcceptedAnswerId": "38033748", "CreationDate": "2016-06-25T21:28:10.383", "LastActivityDate": "2016-07-07T19:54:54.237", "PostTypeId": "1", "ViewCount": "165", "FavoriteCount": "1", "Title": "Templated function not called", "Id": "38033124", "Score": "6", "Body": "<p>I have overloaded a function in my string class, however, it never gets called. Why?</p>\n<pre><code>template &lt;class T&gt;\nclass StringT {\npublic:\n    void assign(const T* ptr);\n    template &lt;size_t N&gt; void assign(const T(&amp;ptr)[N]);\n};\n\nint main() {\n    StringT&lt;char&gt; str;\n    str.assign(\"Hello World\"); //calls \"void assign(const T* ptr)\" although type is (const char[12])\n}\n</code></pre>\n", "Tags": "<c++><templates><function-overloading>", "OwnerUserId": "4388083", "AnswerCount": "2"}, "38033217": {"ParentId": "38033124", "PostTypeId": "2", "CommentCount": "10", "Body": "<p>When there is a choice compiler chooses most specialized function. When there is a non-template function than it is treated as more specialized than any template function</p>\n<p>Details <a href=\"http://www.linuxtopia.org/online_books/programming_books/c++_practical_programming/c++_practical_programming_117.html\" rel=\"nofollow\">here</a></p>\n<p>If you want to keep non-template function but forcibly call template one try </p>\n<pre><code>str.template assign(\"Hello World\");\n</code></pre>\n", "OwnerUserId": "1468415", "LastEditorUserId": "1468415", "LastEditDate": "2016-07-07T19:54:54.237", "Id": "38033217", "Score": "3", "CreationDate": "2016-06-25T21:41:49.000", "LastActivityDate": "2016-07-07T19:54:54.237"}, "38033748": {"ParentId": "38033124", "CommentCount": "4", "Body": "<p>For more reference, some specific references to the Standard are:</p>\n<blockquote>\n<p id=\"so_38033124_38033748_0\"><strong>13.3.3 Best viable function</strong></p>\n<p id=\"so_38033124_38033748_1\">Given these definitions, a viable function F1 is defined to be a better function than another viable function F2 if for all arguments i, ICSi(F1) is not a worse conversion sequence than ICSi(F2), and then...</p>\n<ul>\n<li>F1 is not a function template specialization and F2 is a function template specialization...</li>\n</ul>\n</blockquote>\n<p>In this case, the non-templated function is (obviously) not a function template specialization and the conversion of <code>\"Hello World\"</code> to <code>char const*</code> is not worse than to <code>const char[N]</code>, per the ranking rules defined in the Table in the \"Standard conversion sequences\" section.  According to that Table, both <code>No conversions required</code> and <code>Array-to-pointer conversion</code> are considered an exact match in the context of overload resolution.  Likewise, if the templated overloads are changed to a non-template overload (i.e., as <code>void assign(const T(&amp;ptr)[12]);</code>), then compilation of <code>str.assign(\"Hello World\");</code> will fail due to an ambiguous call.</p>\n<p>To make sure the non-template function isn't considered for overload, there is the following note under the \"Explicit template argument specification\" section:</p>\n<blockquote>\n<p id=\"so_38033124_38033748_2\">Note: An empty template argument list can be used to indicate that a given use refers to a specialization of a function template even when a non-template function (8.3.5) is visible that would otherwise be used.</p>\n</blockquote>\n<p>So, you can use <code>str.assign&lt;&gt;(\"Hello World\");</code> for that.</p>\n", "OwnerUserId": "6492077", "PostTypeId": "2", "Id": "38033748", "Score": "6", "CreationDate": "2016-06-25T23:13:00.493", "LastActivityDate": "2016-06-25T23:13:00.493"}, "bq_ids": {"n4140": {"so_38033124_38033748_1": {"section_id": 603, "quality": 0.85, "length": 17}, "so_38033124_38033748_2": {"section_id": 287, "quality": 0.9047619047619048, "length": 19}}, "n3337": {"so_38033124_38033748_1": {"section_id": 593, "quality": 0.85, "length": 17}, "so_38033124_38033748_2": {"section_id": 278, "quality": 0.9047619047619048, "length": 19}}, "n4659": {"so_38033124_38033748_1": {"section_id": 629, "quality": 0.85, "length": 17}, "so_38033124_38033748_2": {"section_id": 294, "quality": 0.9047619047619048, "length": 19}}}});