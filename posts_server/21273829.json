post_cb({"21273829": {"CommentCount": "6", "AcceptedAnswerId": "21273849", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2014-01-22T03:52:16.480", "LastActivityDate": "2014-04-02T18:03:50.887", "LastEditDate": "2014-01-23T00:14:14.163", "ViewCount": "955", "FavoriteCount": "2", "Title": "Does \"int size = 10;\" yield a constant expression?", "Id": "21273829", "Score": "13", "Body": "<p>The following code compiles under gcc 4.8 and Clang 3.2:</p>\n<pre><code>int main()\n{\n  int size = 10;\n  int arr[size];\n}\n</code></pre>\n<p>8.3.4/1 of the C++ Standard says that the size of an array must be an integral constant expression, which <code>size</code> does not seem to be. Is this a bug in both compilers, or am I missing something?</p>\n<p>The latest VC++ CTP rejects the code with this interesting message:</p>\n<pre><code>error C2466: cannot allocate an array of constant size 0\n</code></pre>\n<p>The interesting part is how it seems to think that <code>size</code> is zero. But at least it rejects the code. Shouldn't gcc and Clang do the same?</p>\n", "Tags": "<c++><arrays><c++11><compile-time-constant><variable-length-array>", "OwnerUserId": "1426649", "AnswerCount": "1"}, "21273849": {"ParentId": "21273829", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>This is <a href=\"http://en.wikipedia.org/wiki/Variable-length_array\" rel=\"nofollow noreferrer\">variable length arrays</a> or <em>VLA</em> which is a <em>C99</em> feature but <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html\" rel=\"nofollow noreferrer\">gcc</a> and <a href=\"http://clang.llvm.org/compatibility.html#vla\" rel=\"nofollow noreferrer\">clang</a> support it as an extension in <em>C++</em> while Visual Studio <a href=\"http://msdn.microsoft.com/en-us/library/zb1574zs.aspx\" rel=\"nofollow noreferrer\">does not</a>. So <code>Visual Studio</code> is adhering to the standard in this case and is technically correct. Not to say that extensions are bad, the <a href=\"http://www.ibm.com/developerworks/library/l-gcc-hacks/\" rel=\"nofollow noreferrer\">Linux kernel depends on many gcc extensions</a>, so they can be useful in certain contexts.</p>\n<p>If you add the <code>-pedantic</code> flag both <code>gcc</code> and <code>clang</code> will warn you about this, for example <code>gcc</code> says (<em><a href=\"http://coliru.stacked-crooked.com/a/67bafb84ad611631\" rel=\"nofollow noreferrer\">see it live</a></em>):</p>\n<pre><code>warning: ISO C++ forbids variable length array 'arr' [-Wvla]\n  int arr[size];\n              ^\n</code></pre>\n<p>Using the <code>-pedantic-errors</code> flag will make this an error. You can read more about extensions in these documents <a href=\"http://gcc.gnu.org/onlinedocs/gcc/Standards.html#Standards\" rel=\"nofollow noreferrer\">Language Standards Supported by GCC</a> and <a href=\"http://clang.llvm.org/compatibility.html\" rel=\"nofollow noreferrer\">clangs Language Compatibility section</a>.</p>\n<p><b>Update</b></p>\n<p>The <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow noreferrer\">draft C++ standard</a> covers what is a <em>integral constant expression</em> in section <code>5.19</code> <em>Constant expressions</em> paragraph <em>3</em> and says:</p>\n<blockquote>\n<p id=\"so_21273829_21273849_0\">An integral constant expression is an expression of integral or unscoped enumeration type, implicitly converted to a prvalue, where the converted expression is a core constant expression. [...]</p>\n</blockquote>\n<p>It is not intuitively obvious from reading this what all the possibilities are but <a href=\"http://www.boost.org/development/int_const_guidelines.html\" rel=\"nofollow noreferrer\">Boost's Coding Guidelines for Integral Constant Expressions</a> does a great job of that .</p>\n<p>In this case since you are initializing <code>size</code> with a <em>literal</em> using <em>const</em> would suffice to make it an <em>integral constant expression</em> and also bring the code back to being standard <em>C++</em>:</p>\n<pre><code>const int size = 10;\n</code></pre>\n<p>using <em>constexpr</em> would work too:</p>\n<pre><code>constexpr int size = 10;\n</code></pre>\n<p>It would probably help to read <a href=\"https://stackoverflow.com/questions/14116003/difference-between-constexpr-and-const\">Difference between <code>constexpr</code> and <code>const</code></a>.</p>\n<p>For reference the equivalent section to <code>8.3.4</code> paragraph <em>1</em> in the <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\" rel=\"nofollow noreferrer\">C99 draft standard</a> would be section <code>6.7.5.2</code> <em>Array declarators</em> paragraph <em>4</em> which says (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_21273829_21273849_1\">If the size is not present, the array type is an incomplete type. If the size is * instead of being an expression, the array type is a variable length array type of unspecified size, which can only be used in declarations with function prototype scope;<sup>124)</sup> such arrays are nonetheless complete types. If the size is an integer constant expression and the element type has a known constant size, the array type is not a variable length array type; <strong>otherwise, the array type is a variable length array type</strong>.</p>\n</blockquote>\n", "OwnerUserId": "1708801", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:34:12.980", "Id": "21273849", "Score": "31", "CreationDate": "2014-01-22T03:54:29.893", "LastActivityDate": "2014-04-02T18:03:50.887"}, "bq_ids": {"n4140": {"so_21273829_21273849_0": {"section_id": 6186, "quality": 0.9411764705882353, "length": 16}}, "n3337": {"so_21273829_21273849_0": {"section_id": 5947, "quality": 0.8235294117647058, "length": 14}}, "n4659": {"so_21273829_21273849_0": {"section_id": 7688, "quality": 0.8823529411764706, "length": 15}}}});