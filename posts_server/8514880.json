post_cb({"8514893": {"ParentId": "8514880", "LastEditDate": "2011-12-15T10:54:53.260", "CommentCount": "9", "CreationDate": "2011-12-15T03:50:02.017", "OwnerUserId": "1090079", "LastEditorUserId": "1090079", "PostTypeId": "2", "Id": "8514893", "Score": "7", "Body": "<p>To make it explicit that it's that function you want to be-<code>friend</code> prepend the function name with <code>::</code> to say that it's in the global namespace.</p>\n<p>Snippet that compiles and does what you want:</p>\n<pre><code>template&lt;class T&gt; void foo() {}\n\ntemplate&lt;typename T&gt;\nclass A {\n   void foo();\n   friend void ::foo&lt;T&gt;();\n};\n\nint main()\n{\n   foo&lt;int&gt;();\n}\n</code></pre>\n<hr>\n<h2><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1905.pdf\" rel=\"nofollow\">n1905.pdf</a></h2>\n<blockquote>\n<p id=\"so_8514880_8514893_0\"><strong>3.4/9 Name Lookup</strong></p>\n<p id=\"so_8514880_8514893_1\">Name lookup for a name used in the de\ufb01nition of a friend function\n  (11.4) de\ufb01ned inline in the class granting friendship shall proceed as\n  described for lookup in member function de\ufb01nitions. If the friend\n  function is not de\ufb01ned in the class granting friendship, name lookup\n  in the friend function de\ufb01nition shall proceed as described for lookup\n  in namespace member function de\ufb01nitions</p>\n</blockquote>\n<p>Your snippet fails to compile because of the same reason as the code below fails to compile.</p>\n<pre><code>template&lt;class T&gt; void foo () {}\n\ntemplate&lt;typename T&gt;\nstruct A { \n\n  void foo (); \n\n  void func () {\n    foo&lt;T&gt; (); // when performing the name lookup A::foo is\n               // found before ::foo&lt;T&gt;\n  }\n};\n</code></pre>\n<p>...</p>\n<blockquote>\n<p id=\"so_8514880_8514893_2\"><strong>14.5.3 Friends [temp.friend]</strong>\n  1</p>\n<p id=\"so_8514880_8514893_3\">A friend of a class or class template can be a function template or class template, a specialization of a\n  function template or class template, or an ordinary (non-template)\n  function or class. For a friend function declaration that is not a\n  template declaration:</p>\n<p id=\"so_8514880_8514893_4\">\u2014 if the name of the friend is a quali\ufb01ed or\n  unquali\ufb01ed template-id, the friend declaration refers to a\n  specialization of a function template, otherwise</p>\n<p id=\"so_8514880_8514893_5\">\u2014 if the name of the\n  friend is a quali\ufb01ed-id and a matching non-template function is found\n  in the speci\ufb01ed class or namespace, the friend declaration refers to\n  that function, otherwise,</p>\n<p id=\"so_8514880_8514893_6\">\u2014 if the name of the friend is a quali\ufb01ed-id\n  and a matching specialization of a function template is found in the\n  speci\ufb01ed class or namespace, the friend declaration refers to that\n  function template specialization, otherwise,</p>\n<p id=\"so_8514880_8514893_7\">\u2014 the name shall be an\n  unquali\ufb01ed-id that declares (or redeclares) an ordinary (non-template)\n  function.</p>\n</blockquote>\n</hr>", "LastActivityDate": "2011-12-15T10:54:53.260"}, "8514880": {"CommentCount": "0", "ViewCount": "1699", "PostTypeId": "1", "LastEditorUserId": "963864", "LastActivityDate": "2011-12-23T07:22:49.277", "Body": "<p>The following code containing friend declaration fails with indicated error (see <a href=\"http://ideone.com/Kq5dy\" rel=\"nofollow noreferrer\">http://ideone.com/Kq5dy</a>):</p>\n<pre><code>template&lt;class T&gt; void foo() {}\n\ntemplate&lt;typename T&gt;\nclass A {\n   void foo();\n   friend void foo&lt;T&gt;(); // error: variable or field 'foo' declared void\n};\n\nint main()\n{\n   foo&lt;int&gt;();\n}\n</code></pre>\n<p>If the order of friend declaration and member function declaration reversed, then the code compiles without problems (see <a href=\"http://ideone.com/y3hiK\" rel=\"nofollow noreferrer\">http://ideone.com/y3hiK</a>):</p>\n<pre><code>template&lt;class T&gt; void foo() {}\n\ntemplate&lt;typename T&gt;\nclass A {\n   friend void foo&lt;T&gt;();\n   void foo();\n};\n\nint main()\n{\n   foo&lt;int&gt;();\n}\n</code></pre>\n<p>This doesn't happen if the friend declaration doesn't contain template specialization: non-template friends are ok, as well as a template friends. Also using qualified name in template specialization allows code to compile.\nMy question is why does the first example fail? It seems compiler looking up names in class scope at the point of friend declaration and only for template specialization? Where in the Standard this behavior is specified?</p>\n", "Title": "friend declaration of template specialization fails", "FavoriteCount": "2", "LastEditDate": "2011-12-23T07:22:49.277", "Id": "8514880", "Score": "8", "CreationDate": "2011-12-15T03:48:15.670", "Tags": "<c++><templates><friend><language-lawyer><name-lookup>", "OwnerUserId": "491591", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_8514880_8514893_5": {"section_id": 126, "quality": 0.8666666666666667, "length": 13}, "so_8514880_8514893_1": {"section_id": 7095, "quality": 0.8055555555555556, "length": 29}, "so_8514880_8514893_3": {"section_id": 126, "quality": 0.9166666666666666, "length": 22}, "so_8514880_8514893_4": {"section_id": 126, "quality": 0.8333333333333334, "length": 10}, "so_8514880_8514893_7": {"section_id": 126, "quality": 0.7142857142857143, "length": 5}, "so_8514880_8514893_6": {"section_id": 126, "quality": 0.8333333333333334, "length": 15}}, "n3337": {"so_8514880_8514893_5": {"section_id": 120, "quality": 0.8666666666666667, "length": 13}, "so_8514880_8514893_1": {"section_id": 6839, "quality": 0.8055555555555556, "length": 29}, "so_8514880_8514893_3": {"section_id": 120, "quality": 0.9583333333333334, "length": 23}, "so_8514880_8514893_4": {"section_id": 120, "quality": 0.8333333333333334, "length": 10}, "so_8514880_8514893_7": {"section_id": 120, "quality": 0.8571428571428571, "length": 6}, "so_8514880_8514893_6": {"section_id": 120, "quality": 0.8333333333333334, "length": 15}}, "n4659": {"so_8514880_8514893_5": {"section_id": 131, "quality": 0.8666666666666667, "length": 13}, "so_8514880_8514893_1": {"section_id": 8596, "quality": 0.8055555555555556, "length": 29}, "so_8514880_8514893_3": {"section_id": 131, "quality": 0.9166666666666666, "length": 22}, "so_8514880_8514893_4": {"section_id": 131, "quality": 0.8333333333333334, "length": 10}, "so_8514880_8514893_6": {"section_id": 131, "quality": 0.8333333333333334, "length": 15}, "so_8514880_8514893_7": {"section_id": 131, "quality": 0.7142857142857143, "length": 5}}}});