post_cb({"13442909": {"CommentCount": "0", "AcceptedAnswerId": "13442948", "CreationDate": "2012-11-18T18:00:46.280", "LastActivityDate": "2012-11-18T18:09:27.033", "PostTypeId": "1", "ViewCount": "10903", "FavoriteCount": "0", "Title": "modify a static member variable in C++", "Id": "13442909", "Score": "2", "Body": "<p>I am trying to define a class Util with a static member variable MAX_DIST, in the following sense,</p>\n<pre><code>class Util{\n\n public:\n    static double MAX_DIST;\n    Util():MAX_DIST(400.0){}\n};\n</code></pre>\n<p>and be able to update it in some other class, e.g.</p>\n<pre><code>Util::MAX_DIST = 387.98;\n</code></pre>\n<p>This gives me an error:</p>\n<pre><code>\u2018double Util::MAX_DIST\u2019 is a static data member; it can only be initialized at its definition\n</code></pre>\n<p>However, if I initialize MAX_DIST at its definition, such as </p>\n<pre><code>class Util{\n\n public:\n    static const double MAX_DIST = 400;\n    Util();\n};\n</code></pre>\n<p>(I have to add the 'const' as instructed by the compiler, otherwise I will get an \"ISO C++ forbids in-class initialization of non-const static member\" error) \nNow I can not modify MAX_DIST in other places since it is now ready only:</p>\n<pre><code>error: assignment of read-only variable \u2018Util::MAX_DIST\u2019\n</code></pre>\n<p>After fruitless search on the internet, I can not find a solution to this paradox. Can someone help me out?</p>\n", "Tags": "<c++><static-members>", "OwnerUserId": "908131", "AnswerCount": "4"}, "13442926": {"ParentId": "13442909", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Put this in your <code>Util.cpp</code> (or whatever the filename is) file:</p>\n<pre><code>double Util::MAX_DIST = 0;\n</code></pre>\n<p>Static variables need to be initialized.</p>\n<p>Long answer, quoting the standard <code>9.4.2 $2</code>:</p>\n<blockquote>\n<p id=\"so_13442909_13442926_0\">The declaration of a static data member in its class definition is not\n  a definition and may be of an incomplete type other than cv-qualified\n  void. The definition for a static data member shall appear in a\n  namespace scope enclosing the member\u2019s class definition. In the\n  definition at namespace scope, the name of the static data member\n  shall be qualified by its class name using the :: operator. The\n  initializer expression in the definition of a static data member is in\n  the scope of its class (3.3.7).</p>\n</blockquote>\n", "OwnerUserId": "528313", "LastEditorUserId": "528313", "LastEditDate": "2012-11-18T18:09:27.033", "Id": "13442926", "Score": "5", "CreationDate": "2012-11-18T18:02:50.070", "LastActivityDate": "2012-11-18T18:09:27.033"}, "13442935": {"ParentId": "13442909", "CommentCount": "1", "Body": "<p>In the first case, you are trying to initialize a static variable from within a non-static context, i.e. from within a constructor. You are correct that this is wrong.</p>\n<p>In the second case, you do not want your variable to be const. Instead, you need to declare it outside of the class, using a statement like:</p>\n<pre><code>double Util::MAX_DIST = 400;\n</code></pre>\n", "OwnerUserId": "57318", "PostTypeId": "2", "Id": "13442935", "Score": "2", "CreationDate": "2012-11-18T18:03:26.747", "LastActivityDate": "2012-11-18T18:03:26.747"}, "13442925": {"ParentId": "13442909", "CommentCount": "0", "Body": "<p>You cannot initialize a non-const static class member at the point of declaration, so you need to provide the definition outside of the class declaration. You can use the definition to initialize the variable to a given value.</p>\n<pre><code>// declaration in the .h file\nclass Util{\n\n public:\n    static double MAX_DIST;\n};\n\n// definition in the .cpp file:\ndouble Util::MAX_DIST=400;\n</code></pre>\n", "OwnerUserId": "661519", "PostTypeId": "2", "Id": "13442925", "Score": "2", "CreationDate": "2012-11-18T18:02:41.863", "LastActivityDate": "2012-11-18T18:02:41.863"}, "13442948": {"ParentId": "13442909", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_13442909_13442948_0\">However, if I initialize MAX_DIST at its definition</p>\n</blockquote>\n<p>You\u2019re confusing definition and  <em>declaration</em>. You are trying to initialise in the latter \u2013 C++ forbids that. The other answers have shown you how the <em>definition</em> looks like: it has to be <em>outside</em> the class declaration, and in its own compilation unit (otherwise you\u2019ll violate the One Definition Rule when you try including the header in several source files).</p>\n<p>A word on why the original code didn\u2019t work: you tried putting the initialisation into the initialiser list of the <em>constructor</em>. However, this constructor is called <em>for every instance</em>. Even if that code compiled, it would always reset your static variable \u2013 not what you want.</p>\n", "OwnerUserId": "1968", "PostTypeId": "2", "Id": "13442948", "Score": "2", "CreationDate": "2012-11-18T18:04:35.730", "LastActivityDate": "2012-11-18T18:04:35.730"}, "bq_ids": {"n4140": {"so_13442909_13442926_0": {"section_id": 5907, "quality": 0.9230769230769231, "length": 48}}, "n3337": {"so_13442909_13442926_0": {"section_id": 5679, "quality": 0.9230769230769231, "length": 48}}, "n4659": {"so_13442909_13442926_0": {"section_id": 7389, "quality": 0.8846153846153846, "length": 46}}}});