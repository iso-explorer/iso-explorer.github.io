post_cb({"bq_ids": {"n4140": {"so_30369357_30369357_0": {"length": 21, "quality": 1.0, "section_id": 6142}}, "n3337": {"so_30369357_30369357_0": {"length": 21, "quality": 1.0, "section_id": 5906}}, "n4659": {"so_30369357_30369357_0": {"length": 11, "quality": 0.5238095238095238, "section_id": 7638}}}, "30369357": {"ViewCount": "149", "Body": "<p><em>ISO IEC 14882-2011 \u00a75.7/5</em> States:</p>\n<blockquote>\n<p id=\"so_30369357_30369357_0\">If both the pointer operand and the result point to elements of the same array object, or one past the last element of the array object, the evaluation shall not produce an overflow; otherwise, the behavior is undefined.</p>\n</blockquote>\n<p>This section is used here on stackoverflow from time to time. For instance to argue why the increment of a pointer to <code>nullptr</code> is UB like <a href=\"https://stackoverflow.com/questions/29825352/is-incrementing-a-null-pointer-well-defined\">here</a>. It is then interpreted as, having a pointer that does not point to an element of an array object. Is undefined behaviour. </p>\n<p>However, when I read this I understood it to refer to the evaluation of the pointer being UB. Which would mean that having such a pointer is well defined behaviour. And the behaviour becomes undefined when one tries to dereference it. </p>\n<p>Which would mean that for example, incrementing a valid pointer beyond the array boundary is legal. Decrementing it again afterwards is legal. And since the pointer will then be the same value as before the increment, the evaluation is legal too. </p>\n<p>Which of the two is the case?</p>\n", "AcceptedAnswerId": "30370486", "Title": "Ambiguity in the standard on undefined behaviour of out of range pointer", "CreationDate": "2015-05-21T09:11:37.427", "Id": "30369357", "CommentCount": "2", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2017-05-23T11:46:31.413", "LastEditorUserId": "-1", "LastActivityDate": "2015-05-21T10:00:35.917", "Score": "2", "OwnerUserId": "3243563", "Tags": "<c++><c++11><language-lawyer><semantics><undefined-behavior>", "AnswerCount": "3"}, "30369591": {"Id": "30369591", "PostTypeId": "2", "Body": "<p>\"The evaluation\" means the evaluation of the additive operation; thus UB would not occur for (say) <code>static_cast&lt;int*&gt;(nullptr) + 1</code> within a non-evaluated context (<code>sizeof</code>, <code>decltype</code>, etc).</p>\n<p>It does not mean \"the evaluation of the pointer\", and certainly not dereferencing it; if the standard had intended that interpretation, it would have said so.</p>\n", "LastEditorUserId": "567292", "LastActivityDate": "2015-05-21T09:59:48.553", "Score": "3", "CreationDate": "2015-05-21T09:21:26.870", "ParentId": "30369357", "CommentCount": "0", "OwnerUserId": "567292", "LastEditDate": "2015-05-21T09:59:48.553"}, "30370486": {"Id": "30370486", "PostTypeId": "2", "Body": "<p>The paragraph you're quoting refers to pointer arithmetic, not to evaluation of pointers.  </p>\n<p>It states that the only time pointer addition <code>p + i</code> is defined is if<br>\n(treating subtraction of <code>i</code> as equivalent to addition of <code>-i</code>)</br></p>\n<ol>\n<li><code>p</code> points to an element of an array object or one past the last element, and</li>\n<li><code>p + i</code> points to an element of the same array object, or one past the last element   </li>\n</ol>\n<p>If <code>p</code> <em>isn't</em> a pointer to an array element or \"one past the end\" - for instance if it is the null pointer or \"two past the end\" - the behaviour is undefined.<br>\nYou don't need to dereference the result to cause undefined behaviour - the effect of the addition itself is undefined.</br></p>\n<p>That is to say</p>\n<pre><code>int p[1] = {0};\nint *q = p;  // OK\nq = q + 1;   // OK - one past the end\nint *r = q + 1;   // Undefined behaviour\nr = r - 1;   // Doesn't make r valid or the program un-undefined\n</code></pre>\n<p>and likewise</p>\n<pre><code>int *p = nullptr;\np++; // Undefined\np--; // Still undefined\n</code></pre>\n", "LastActivityDate": "2015-05-21T10:00:35.917", "CommentCount": "2", "CreationDate": "2015-05-21T10:00:35.917", "ParentId": "30369357", "Score": "4", "OwnerUserId": "404970"}, "30369644": {"Id": "30369644", "PostTypeId": "2", "Body": "<p>Incrementing then decrementing a null pointer is still undefined behaviour. When UB occurs, anything can happen, so this would be a valid sequence of an events:</p>\n<ol>\n<li>Increment null pointer. Undefined behaviour, so we'll set the pointer to <code>0xDEADBEEF</code> because we can.</li>\n<li>Decrement pointer. Also undefined behaviour unless <code>0xDEADBEEF</code> happens to be in a valid array after the first element.</li>\n<li>Dereference pointer. Issue forth nasal demons.</li>\n</ol>\n", "LastActivityDate": "2015-05-21T09:23:15.150", "CommentCount": "0", "CreationDate": "2015-05-21T09:23:15.150", "ParentId": "30369357", "Score": "0", "OwnerUserId": "496161"}});