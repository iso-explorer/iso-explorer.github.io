post_cb({"38345585": {"Id": "38345585", "PostTypeId": "2", "Body": "<p>Your string is not destroyed until the end of the program, as <code>s1</code> is a reference to it (so, it is not destroyed in <code>func</code>). There is no pass-by-value or return-by-value in <code>Func</code>. No problem in this code.</p>\n", "LastEditorUserId": "63550", "LastActivityDate": "2016-07-13T10:22:41.387", "Score": "-6", "CreationDate": "2016-07-13T07:46:40.833", "ParentId": "38345484", "CommentCount": "2", "OwnerUserId": "6137423", "LastEditDate": "2016-07-13T10:22:41.387"}, "bq_ids": {"n4140": {"so_38345484_38345852_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 380}, "so_38345484_38345852_2": {"length": 13, "quality": 0.9285714285714286, "section_id": 382}}, "n3337": {"so_38345484_38345852_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 371}, "so_38345484_38345852_2": {"length": 13, "quality": 0.9285714285714286, "section_id": 373}}, "n4659": {"so_38345484_38345852_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 395}, "so_38345484_38345852_2": {"length": 13, "quality": 0.9285714285714286, "section_id": 397}}}, "38345852": {"Id": "38345852", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_38345484_38345852_0\">Can <code>string</code> destructor of temporary object be executed before calling <code>printPointer</code>?</p>\n</blockquote>\n<p>No, because temporary objects will be destroyed as the last step in evaluating the <strong>full-expression</strong> which contains the point where they were created, which means it will persist until the invoking of <code>printPointer()</code> ends.</p>\n<p>From the standard <a href=\"http://eel.is/c++draft/class.temporary#4\" rel=\"nofollow\">#12.2/4 Temporary objects\n[class.temporary]</a>:</p>\n<blockquote>\n<p id=\"so_38345484_38345852_1\">Temporary objects are destroyed as the last step in evaluating the full-expression ([intro.execution]) that (lexically) contains the point where they were created. </p>\n</blockquote>\n<p>And <a href=\"http://eel.is/c++draft/class.temporary#6\" rel=\"nofollow\">#12.2/6 Temporary objects\n[class.temporary]</a>:</p>\n<blockquote>\n<p id=\"so_38345484_38345852_2\">A temporary object bound to a reference parameter in a function call ([expr.call]) persists until the completion of the full-expression containing the call.</p>\n</blockquote>\n<p><kbd><a href=\"http://coliru.stacked-crooked.com/a/911deaaf35927e6d\" rel=\"nofollow\">explanatory demo</a></kbd></p>\n", "LastEditorUserId": "3309790", "LastActivityDate": "2016-07-13T08:29:20.160", "Score": "9", "CreationDate": "2016-07-13T08:01:33.710", "ParentId": "38345484", "CommentCount": "0", "OwnerUserId": "3309790", "LastEditDate": "2016-07-13T08:29:20.160"}, "38345484": {"ViewCount": "153", "Body": "<p>I'm wondering what the standard says about the following piece of code. Can <code>string</code> destructor of temporary object be executed before calling <code>printPointer</code>?</p>\n<p>p.s. VS2010 compiler doesn't complain about this code and works correctly.</p>\n<pre><code>void printPointer(const string* pointer)\n{\n    cout &lt;&lt; *pointer &lt;&lt; endl;\n}\n\nconst string* func(const string&amp; s1)\n{\n    return &amp;s1;\n}\n\nint main()\n{\n    printPointer(func(\"Hello, World!!!\"));\n}\n</code></pre>\n", "AcceptedAnswerId": "38345852", "Title": "Implicit destructor execution in function calling", "CreationDate": "2016-07-13T07:41:15.377", "Id": "38345484", "CommentCount": "1", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2016-07-13T08:12:23.177", "LastEditorUserId": "3309790", "LastActivityDate": "2016-07-13T10:22:41.387", "Score": "8", "OwnerUserId": "3315622", "Tags": "<c++><language-lawyer><destructor><temporary><object-lifetime>", "AnswerCount": "2"}});