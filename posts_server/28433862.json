post_cb({"28433932": {"ParentId": "28433862", "CommentCount": "2", "Body": "<p>Because \"Hello\" is 6 <code>char</code>s long and g++ without <code>-fpermissive</code>  won't initialise a 5 <code>char</code> array with it, but gcc will.</p>\n", "OwnerUserId": "1312406", "PostTypeId": "2", "Id": "28433932", "Score": "3", "CreationDate": "2015-02-10T14:19:09.187", "LastActivityDate": "2015-02-10T14:19:09.187"}, "28433862": {"CommentCount": "5", "AcceptedAnswerId": "28434100", "PostTypeId": "1", "LastEditorUserId": "3777958", "CreationDate": "2015-02-10T14:15:29.163", "LastActivityDate": "2017-03-10T12:38:13.523", "LastEditDate": "2017-03-10T12:38:13.523", "ViewCount": "4590", "FavoriteCount": "3", "Title": "Why \"initializer-string for array of chars is too long\" compiles fine in C & not in C++?", "Id": "28433862", "Score": "3", "Body": "<p>Following program compiles fine in C with  warnings but fails in compilation in C++. Why? What is the reason?</p>\n<pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\n    char a[5]=\"Hello\";\n    a[0]='y';\n    puts(a);\n    for(int i=0;i&lt;5;i++)\n        printf(\"%c\",a[i]);\n    return 0;\n}\n</code></pre>\n<p>The warning:</p>\n<pre><code>Warning:[Error] initializer-string for array of chars is too long [-fpermissive] enabled by default\n</code></pre>\n<p>But if the program is compiled as C++ program then C++ compiler gives following error:</p>\n<pre><code>[Error] initializer-string for array of chars is too long [-fpermissive]\n</code></pre>\n<p>I am using GCC 4.8.1 compiler.</p>\n", "Tags": "<c++><c><string><gcc><g++>", "OwnerUserId": "3777958", "AnswerCount": "4"}, "28434100": {"ParentId": "28433862", "CommentCount": "0", "Body": "<p>Short answer: Because C and C++ are different languages with different rules.</p>\n<p>Long answer: In both cases the reason is that the array is too small for the string literal. The literal consists of the five visible characters, with a zero terminator on the end, so the total size is 6.</p>\n<p>In C, you're allowed to initialise an array with a string that's too long; extra characters are simply ignored:</p>\n<blockquote>\n<p id=\"so_28433862_28434100_0\">C99 6.7.8/14: An array of character type may be initialized by a character string literal, optionally enclosed in braces. Successive characters of the character string literal (including the terminating null character if there is room or if the array is of unknown size) initialize the elements of the array.</p>\n</blockquote>\n<p>The compiler helpfully warns that the string is too large, since it almost certainly indicates an error; but it can't reject the code unless you tell it to treat warnings as errors.</p>\n<p>In C++, the initialiser isn't allowed to be larger than the array:</p>\n<blockquote>\n<p id=\"so_28433862_28434100_1\">C++11 8.5.2/2: There shall not be more initializers than there are array elements.</p>\n</blockquote>\n<p>so, for that language, the compiler should give an error.</p>\n<p>In both languages, when you want a character array to be the right size for a string literal initialiser, you can leave the size out and the compiler will do the right thing.</p>\n<pre><code>char a[] = \"hello\";  // size deduced to be 6\n</code></pre>\n", "OwnerUserId": "204847", "PostTypeId": "2", "Id": "28434100", "Score": "20", "CreationDate": "2015-02-10T14:26:33.530", "LastActivityDate": "2015-02-10T14:26:33.530"}, "28433905": {"ParentId": "28433862", "CommentCount": "0", "Body": "<p>A valid string in C and C++ should have a <code>\\0</code> terminator and in</p>\n<pre><code>char a[5]=\"Hello\";\n</code></pre>\n<p>There is no space for null terminator and a is not a valid string.</p>\n<p>So this might not be a error in C but you are bound to hit with issues when using in-built string functions like <code>strlen()</code> and family.</p>\n", "OwnerUserId": "3883560", "PostTypeId": "2", "Id": "28433905", "Score": "5", "CreationDate": "2015-02-10T14:17:30.647", "LastActivityDate": "2015-02-10T14:17:30.647"}, "28433885": {"ParentId": "28433862", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>The problem is in below line</p>\n<pre><code>char a[5]=\"Hello\";\n</code></pre>\n<p>There is no space left to store the terminating null.</p>\n<p>By default, <code>gcc</code> does not produce any errors for this case with <code>-fpermissive</code> option enabled. So, it <em>compiles fine</em> in <code>C</code>.</p>\n<p>As per the requirement from the language standards,</p>\n<ul>\n<li>For<code>C99</code> standard, chapter 6.7.9, paragraph 14,</li>\n</ul>\n<blockquote>\n<p id=\"so_28433862_28433885_0\">An array of character type may be initialized by a character string literal or UTF\u22128 string literal, optionally enclosed in braces. Successive bytes of the string literal (including the terminating null character if there is room or if the array is of unknown size) initialize the elements of the array.</p>\n</blockquote>\n<ul>\n<li>For <code>C++11</code>, chapter 8.5.2, paragraph 2</li>\n</ul>\n<blockquote>\n<p id=\"so_28433862_28433885_1\">There shall not be more initializers than there are array elements.</p>\n</blockquote>\n<p>So, the code compiles (with warnings) with <code>gcc</code>, produces error with <code>g++</code>.</p>\n", "OwnerUserId": "2173917", "LastEditorUserId": "2173917", "LastEditDate": "2015-02-10T14:40:15.897", "Id": "28433885", "Score": "10", "CreationDate": "2015-02-10T14:16:22.953", "LastActivityDate": "2015-02-10T14:40:15.897"}, "bq_ids": {"n4140": {"so_28433862_28433885_0": {"section_id": 3314, "quality": 0.5333333333333333, "length": 16}, "so_28433862_28434100_1": {"section_id": 3315, "quality": 0.7777777777777778, "length": 7}, "so_28433862_28433885_1": {"section_id": 3315, "quality": 1.0, "length": 7}}, "n3337": {"so_28433862_28434100_1": {"section_id": 3185, "quality": 0.7777777777777778, "length": 7}, "so_28433862_28433885_1": {"section_id": 3185, "quality": 1.0, "length": 7}}, "n4659": {"so_28433862_28433885_0": {"section_id": 4080, "quality": 0.5333333333333333, "length": 16}, "so_28433862_28434100_1": {"section_id": 4081, "quality": 0.7777777777777778, "length": 7}, "so_28433862_28433885_1": {"section_id": 4081, "quality": 1.0, "length": 7}}}});