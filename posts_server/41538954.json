post_cb({"41538954": {"CommentCount": "0", "ViewCount": "41", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2017-01-08T23:15:20.657", "LastActivityDate": "2017-01-08T23:54:20.467", "Title": "type of pointer to base's data member due to standard", "AcceptedAnswerId": "41539043", "LastEditDate": "2017-05-23T12:07:18.940", "Id": "41538954", "Score": "2", "Body": "<p>type of <code>&amp;Derived::member</code> expression from following snippet is not <code>int Derived:: *</code>, but <code>int Base:: *</code> (with g++5) :</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n\nstruct Base { int member ; } ;\nstruct Derived : Base {} ;\n\nint main ( )\n{   \n    std::cerr &lt;&lt; typeid( &amp;Derived::member ).name() ;       \n    return 0 ;\n}\n</code></pre>\n<p><em>according to standard, is it expected behavior.?</em> \ncan't find nothing, that can clarify this example.  </p>\n<p>there are at least <a href=\"https://stackoverflow.com/questions/3859517/type-of-pointer-to-member-from-base-class\">t</a>w<a href=\"https://stackoverflow.com/questions/15519855/address-of-c-pointer-to-class-data-member-in-visual-studio\">o</a> similar questions, but none of them has needed answer.</p>\n", "Tags": "<c++><standards><pointer-to-member>", "OwnerUserId": "4625005", "AnswerCount": "2"}, "41539043": {"ParentId": "41538954", "CommentCount": "0", "Body": "<p>g++ is right.</p>\n<p>From the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_41538954_41539043_0\"><strong>5.3.1 Unary operators</strong></p>\n<p id=\"so_41538954_41539043_1\">3 The result of the unary &amp; operator is a pointer to its operand. </p>\n<p id=\"so_41538954_41539043_2\">...</p>\n<pre><code> struct A { int i; };\n struct B : A { };\n ... &amp;B::i ... // has type int A::*\n</code></pre>\n</blockquote>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "41539043", "Score": "1", "CreationDate": "2017-01-08T23:26:47.550", "LastActivityDate": "2017-01-08T23:26:47.550"}, "41539225": {"ParentId": "41538954", "CommentCount": "0", "Body": "<p>The reason you are seeing that is the scope of of int member is within Base and not Derived. </p>\n<p>With inheritance, the int member can be accessed, but it is still in Base's scope. </p>\n", "OwnerUserId": "5609063", "PostTypeId": "2", "Id": "41539225", "Score": "0", "CreationDate": "2017-01-08T23:54:20.467", "LastActivityDate": "2017-01-08T23:54:20.467"}, "bq_ids": {"n4140": {"so_41538954_41539043_1": {"section_id": 6066, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_41538954_41539043_1": {"section_id": 5834, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_41538954_41539043_1": {"section_id": 7562, "quality": 0.8571428571428571, "length": 6}}}});