post_cb({"bq_ids": {"n4140": {"so_38043588_38043643_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 3913}}, "n3337": {"so_38043588_38043643_0": {"length": 12, "quality": 0.8571428571428571, "section_id": 3773}}}, "38043643": {"PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_38043588_38043643_0\"><strong>[stmt.return]/1</strong> ... A return statement with a <em>braced-init-list</em> initializes the object or reference to be returned from the function by copy-list-initialization (8.5.4) from the specified initializer list...</p>\n</blockquote>\n", "LastActivityDate": "2016-06-26T22:05:52.187", "Id": "38043643", "CommentCount": "1", "CreationDate": "2016-06-26T22:05:52.187", "ParentId": "38043588", "Score": "4", "OwnerUserId": "1670129"}, "38043588": {"ViewCount": "33", "Body": "<p>The test function is returning a value without using a copy/move constructor, copy/move assignment operator or copy elision (disabled in g++ 4.8.4 via -fno-elide-constructors)</p>\n<pre><code>struct Test\n{\n    Test() {}\n    Test(const Test&amp;) = delete;\n    Test(Test&amp;&amp;) = delete;\n    Test&amp; operator = (const Test&amp;) = delete;\n    Test&amp; operator = (Test&amp;&amp;) = delete;\n    void fn(){}\n};\n\nTest test() {\n    // error: use of deleted function \u2018Test::Test(Test&amp;&amp;)\u2019\n    // return Test{};\n\n    // However, this compiles (g++ 4.8.4 and g++ 6.1.0)\n    return {};\n}\n\nint main() {\n    test().fn();\n\n    // In any case\n    // error: use of deleted function \u2018Test::Test(Test&amp;&amp;)\u2019\n    // Test t{test()};\n}\n</code></pre>\n<p>Is the code valid and if so, what are the effects of <code>return {}</code>?</p>\n", "AcceptedAnswerId": "38043643", "Title": "Function returning a value not using copy/move or copy elision", "CreationDate": "2016-06-26T21:58:22.077", "Id": "38043588", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2016-06-26T22:05:52.187", "Score": "2", "OwnerUserId": "2249683", "Tags": "<c++>", "AnswerCount": "1"}});