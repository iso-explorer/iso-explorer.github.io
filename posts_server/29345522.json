post_cb({"bq_ids": {"n4140": {"so_29345522_29345946_0": {"section_id": 3321, "quality": 0.9166666666666666, "length": 11}, "so_29345522_29345946_2": {"section_id": 3321, "quality": 1.0, "length": 8}}, "n3337": {"so_29345522_29345946_0": {"section_id": 3191, "quality": 0.9166666666666666, "length": 11}, "so_29345522_29345946_2": {"section_id": 3191, "quality": 1.0, "length": 8}}, "n4659": {"so_29345522_29345946_0": {"section_id": 4087, "quality": 0.9166666666666666, "length": 11}, "so_29345522_29345946_2": {"section_id": 4087, "quality": 1.0, "length": 8}}}, "29345946": {"ParentId": "29345522", "CommentCount": "1", "Body": "<p>Per C++11 3.10/1, a function is always an lvalue. So the expression <code>fn</code> is an lvalue.</p>\n<p>According to 8.5.3/5, correctly typed functions can be used to initialise rvalue references:</p>\n<blockquote>\n<ul>\n<li><p id=\"so_29345522_29345946_0\">Otherwise, the reference shall be an lvalue reference to a non-volatile const type (i.e., <em>cv1</em> shall be <code>const</code>), <strong>or the\n  reference shall be an rvalue reference.</strong></p>\n<ul>\n<li><p id=\"so_29345522_29345946_1\">If the initializer expression</p>\n<ul>\n<li>is an xvalue, class prvalue, array prvalue or <strong>function lvalue</strong> and \u201c<em>cv1</em> <code>T1</code>\u201d is reference-compatible with \u201c<em>cv2</em> <code>T2</code>\u201d,\n  or</li>\n<li>...</li>\n</ul>\n<p id=\"so_29345522_29345946_2\">then the reference is bound to the value of the initializer expression in the first case ...</p></li>\n</ul></li>\n</ul>\n</blockquote>\n<p>(Shortened, emphasis mine)</p>\n", "OwnerUserId": "1782465", "PostTypeId": "2", "Id": "29345946", "Score": "4", "CreationDate": "2015-03-30T12:12:57.497", "LastActivityDate": "2015-03-30T12:12:57.497"}, "29345522": {"CommentCount": "4", "ViewCount": "170", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2015-03-30T11:50:34.463", "LastActivityDate": "2015-03-30T12:50:31.497", "Title": "Is an expression involving function type an lvalue or an rvalue?", "AcceptedAnswerId": "29345946", "LastEditDate": "2015-03-30T12:50:31.497", "Id": "29345522", "Score": "4", "Body": "<pre><code>void fn() {}\nvoid (&amp;lref)() = fn;\nvoid (&amp;&amp;rref)() = fn;\n\nint main() {}\n</code></pre>\n<p>Compiles well under g++ 4.8.1.</p>\n<p>So, <code>fn</code> is an expression, and an expression must have a category according to the ISO standard.</p>\n<p>Which <strong>category</strong> does the expression belong to before any automatic type promotion is performed (since both references can accept the result of evaluating the expression <code>fn</code>)?</p>\n", "Tags": "<c++><c++11><language-lawyer>", "OwnerUserId": "285352", "AnswerCount": "1"}});