post_cb({"2128727": {"Body": "<p><strong>TLDR</strong>: Calling <code>main</code> results in undefined behavior.</p>\n<hr>\n<p>There seems to be confusion about the terminology used in the standard, and the implications that has for the programmer and compiler.</p>\n<p>Firstly, <em>the standard alone</em> determines everything about the C++ language. If your particular version of a particular compiler allows some particular action, that has no bearing on whether or not that action is legal. For the remainder of the post, I'm referring to the ISO03 standard.</p>\n<p>So to quote once again, the standard says in \u00a73.6.1.3:</p>\n<blockquote>\n<p id=\"so_2128321_2128727_0\">The function main shall not be used within a program.</p>\n</blockquote>\n<p>Additionally, \u00a73.2 defines \"used\" as:</p>\n<blockquote>\n<p id=\"so_2128321_2128727_1\">An object or non-overloaded function is used if its name appears in a potentially-evaluated expression.</p>\n</blockquote>\n<p>This means that once the program begins executing, <code>main</code> should <strong>never be entered again</strong>. That means programmers cannot call <code>main</code>, that means the compiler cannot insert another call to <code>main</code> (why it would, who knows), you cannot take the address of main and call that, etc. You cannot even have the potential of calling <code>main</code>.</p>\n<p>The only call to <code>main</code> should be by the run-time library the program is running on; all other calls invoke undefined behavior. (Which means anything could happen!)</p>\n<hr>\n<p>Now onto compiler behavior:</p>\n<p>A diagnosable rule is defined as (\u00a71.4.1):</p>\n<blockquote>\n<p id=\"so_2128321_2128727_2\">The set of diagnosable rules consists of all syntactic and semantic rules in this International Standard except for those rules containing an explicit notation that \u201cno diagnostic is required\u201d or which are described as resulting in \u201cundefined behavior.\u201d</p>\n</blockquote>\n<p>In our case, \u00a73.6.1.3 defines a diagnosable rule. Here's what compilers should do according to \u00a71.4.2:</p>\n<blockquote>\n<p id=\"so_2128321_2128727_3\">\u2014 If a program contains no violations of the rules in this International Standard, a conforming implementation shall, within its resource limits, accept and correctly execute3) that program.<br>\n  \u2014 If a program contains a violation of any diagnosable rule, a conforming implementation shall issue at least one diagnostic message, except that<br>\n  \u2014 If a program contains a violation of a rule for which no diagnostic is required, this International Standard places no requirement on implementations with respect to that program.</br></br></p>\n</blockquote>\n<p>So compilers are <em>not</em> required to enforce rules. All compilers have to do is take <em>well-formed programs</em> (\u00a71.3.14) and turn them into an executable program. A compiler is free to warn, error, etc. however it likes, as long as it does not conflict with the language. It is <em>required</em> to display a message in our particular case, according to the second clause.</p>\n<p>For this particular problem, on gcc the <code>-pedantic</code> option will warn about the illegality of calling <code>main</code> within the program. Visual Studio will not warn about calling <code>main</code>, but on any warning level (greater than 0) it will warn about the recursive nature of the program.</p>\n<hr>\n<p>What does all this mean in terms of the answers you should expect? It means it's completely meaningless to try and define with certainty what the code snippet posted will do. Calling <code>main</code> results in undefined behavior, and trying to define undefined behavior is obviously a lost cause. The only honest answer anyone can give to \"what happens when I call <code>main</code>?\" is \"Anything.\"</p>\n<p>I hope this clears things up.</p>\n</hr></hr></hr>", "CreationDate": "2010-01-24T20:43:00.647", "ParentId": "2128321", "CommentCount": "10", "LastEditDate": "2015-01-06T22:28:10.030", "Id": "2128727", "PostTypeId": "2", "LastActivityDate": "2015-01-06T22:28:10.030", "LastEditorUserId": "608639", "CommunityOwnedDate": "2010-01-24T20:43:00.647", "Score": "36", "OwnerUserId": "87234"}, "2128341": {"Id": "2128341", "PostTypeId": "2", "Body": "<p>When you write recursive code, you need to make sure that at some point you <em>stop</em> recursing, otherwise you've just written an infinite loop.  </p>\n<p>Which you have. </p>\n<p>You should expect this code to go away for a <em>long</em> time and then finally crash with a stack overflow.</p>\n", "LastActivityDate": "2010-01-24T19:14:19.320", "CommentCount": "30", "CreationDate": "2010-01-24T19:14:19.320", "ParentId": "2128321", "Score": "1", "OwnerUserId": "234815"}, "2128332": {"Id": "2128332", "PostTypeId": "2", "Body": "<p>The question is, why would you want to?</p>\n<p>main is supposed to be a single entrypoint for your program. Calling it again essentially restarts your program, but without a new process instance; no new stack, no new heap, etc. </p>\n<p>If you really need recursion, call a separate function recursively. </p>\n", "LastActivityDate": "2010-01-24T19:12:34.723", "CommentCount": "0", "CreationDate": "2010-01-24T19:12:34.723", "ParentId": "2128321", "Score": "4", "OwnerUserId": "12716"}, "2128526": {"Id": "2128526", "PostTypeId": "2", "Body": "<p>It's like being a drug-dealer. Pretty illegal, but compiles and even works out good for some time...</p>\n", "LastActivityDate": "2010-01-24T19:54:22.030", "CommentCount": "1", "CreationDate": "2010-01-24T19:54:22.030", "ParentId": "2128321", "Score": "8", "OwnerUserId": "231224"}, "2128321": {"ViewCount": "11950", "Body": "<p>Can anybody tell what's the problem of the code below? </p>\n<pre><code>int main () { \n    return main(); \n}\n</code></pre>\n<p>I tested, it compiles correctly. It's running forever. Anymore trick behind the scene?</p>\n", "AcceptedAnswerId": "2128727", "Title": "Can main function call itself in C++?", "CreationDate": "2010-01-24T19:09:35.040", "Id": "2128321", "CommentCount": "7", "FavoriteCount": "9", "PostTypeId": "1", "LastEditDate": "2015-01-06T22:26:57.680", "LastEditorUserId": "608639", "LastActivityDate": "2015-01-06T22:28:10.030", "Score": "14", "OwnerUserId": "233254", "Tags": "<c++>", "AnswerCount": "9"}, "bq_ids": {"n4140": {"so_2128321_2128727_3": {"length": 33, "quality": 0.8918918918918919, "section_id": 5770}, "so_2128321_2128727_1": {"length": 6, "quality": 0.75, "section_id": 7040}, "so_2128321_2128727_2": {"length": 20, "quality": 0.8695652173913043, "section_id": 5769}}, "n3337": {"so_2128321_2128727_3": {"length": 33, "quality": 0.8918918918918919, "section_id": 5543}, "so_2128321_2128727_2": {"length": 20, "quality": 0.8695652173913043, "section_id": 5542}, "so_2128321_2128727_1": {"length": 5, "quality": 0.625, "section_id": 6785}}, "n4659": {"so_2128321_2128727_3": {"length": 33, "quality": 0.8918918918918919, "section_id": 7227}, "so_2128321_2128727_2": {"length": 20, "quality": 0.8695652173913043, "section_id": 7226}, "so_2128321_2128727_1": {"length": 6, "quality": 0.75, "section_id": 8537}}}, "2128382": {"Id": "2128382", "PostTypeId": "2", "Body": "<p>The C++ standard, in section 3.6.1 it says:</p>\n<blockquote>\n<p id=\"so_2128321_2128382_0\">The function main shall not be used (3.2) within a program.</p>\n</blockquote>\n<p>It specifies, you are not supposed to call it from within your program.</p>\n", "LastActivityDate": "2010-01-24T19:21:02.187", "CommentCount": "0", "CreationDate": "2010-01-24T19:21:02.187", "ParentId": "2128321", "Score": "4", "OwnerUserId": "151641"}, "2128605": {"Id": "2128605", "PostTypeId": "2", "Body": "<p>You have two issues.  The first is calling main which, as has been pointed out both violates the standard and the intent of the standard.</p>\n<p>The bigger problem is you've written a recursive call without any closing point.  You question seems to assume that the version of main called by the initial one will just return.  However, most languages (in fact all I can think of) allowed unlimited recursion: if a function calls itself then that version will as well.  The only limit is system resources.</p>\n<p>So you need to wrap the call in a conditional and only continue to call when needed.  In your example, adding a global integer set to the number of levels you want to recurse would work.  Something like this:</p>\n<p>`</p>\n<pre><code>int levels = 3;\n int main() {\n    if(levels) {\n       cout &lt;&lt; \"Recursing another level...\\n\";\n       levels--;\n       main();\n    }\n    else {\n       cout &lt;&lt; \"Reached the bottom.\\n\";\n    }\n    return levels;\n }\n</code></pre>\n<p>`</p>\n<p>Will exit.</p>\n", "LastActivityDate": "2010-01-24T20:16:35.477", "CommentCount": "0", "CreationDate": "2010-01-24T20:16:35.477", "ParentId": "2128321", "Score": "1", "OwnerUserId": "204275"}, "2129158": {"Id": "2129158", "PostTypeId": "2", "Body": "<p>Of course if you really want call your main function recursively, and sometimes there are good reasons, you should just do this</p>\n<pre><code>int mymain()\n{\n  return mymain();\n}\n\nint main()\n{\n   return mymain();\n}\n</code></pre>\n", "LastEditorUserId": "221955", "LastActivityDate": "2013-03-14T14:45:34.103", "Score": "4", "CreationDate": "2010-01-24T22:27:06.797", "ParentId": "2128321", "CommentCount": "0", "OwnerUserId": "221955", "LastEditDate": "2013-03-14T14:45:34.103"}, "25762214": {"Id": "25762214", "PostTypeId": "2", "Body": "<p>Whilst your program obviously makes no sense as it loops forever it might look feasible to do something like:</p>\n<pre><code>int main( int argc, char* argv[] )\n{\n   if( argc )\n   {\n      // do something with argv[0]\n      main( argc - 1, &amp;argv[1] );\n   }\n   else\n   {\n       // rest of application having loaded your arguments\n   }\n}\n</code></pre>\n<p>However the standard disallows it. (See other answers)</p>\n<p>Of course you can implement that by doing this</p>\n<pre><code>int myFunc( int argc, char * argv[] )\n{\n     // I can recurse this if I like and just get main to forward straight to here\n}\n</code></pre>\n", "LastActivityDate": "2014-09-10T09:45:23.380", "CommentCount": "0", "CreationDate": "2014-09-10T09:45:23.380", "ParentId": "2128321", "Score": "0", "OwnerUserId": "442284"}, "2128326": {"Id": "2128326", "PostTypeId": "2", "Body": "<p>Calling <code>main</code> in C++ is illegal (\u00a73.6.1.3):</p>\n<blockquote>\n<p id=\"so_2128321_2128326_0\">The function main shall not be used within a program.</p>\n</blockquote>\n<p>Your compiler is allowing illegal behavior.</p>\n<p>It loops forever because, well, <code>main</code> calls <code>main</code>, who calls <code>main</code>, who calls <code>main</code>, and so on.</p>\n", "LastEditorUserId": "87234", "LastActivityDate": "2010-01-24T19:42:33.297", "Score": "24", "CreationDate": "2010-01-24T19:11:00.047", "ParentId": "2128321", "CommentCount": "12", "OwnerUserId": "87234", "LastEditDate": "2010-01-24T19:42:33.297"}});