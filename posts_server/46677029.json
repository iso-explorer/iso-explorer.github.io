post_cb({"46677339": {"ParentId": "46677029", "CommentCount": "2", "Body": "<blockquote>\n<p id=\"so_46677029_46677339_0\"><strong>[basic.lookup.argdep]/2</strong>  For each argument type <code>T</code> in the function call, there is a set of zero or more associated namespaces and a\n  set of zero or more associated classes to be considered...</p>\n<p id=\"so_46677029_46677339_1\">(2.1) \u2014 If <code>T</code> is a fundamental type, its associated sets of namespaces and classes are both empty...</p>\n<p id=\"so_46677029_46677339_2\">(2.4) \u2014 If <code>T</code> is a pointer to <code>U</code> or an array of <code>U</code>, its associated namespaces and classes are those associated with <code>U</code>...</p>\n</blockquote>\n<p>From these, a set of namespaces asscociated with <code>char const*</code> is empty, so there's nothing for ADL to look at.</p>\n", "OwnerUserId": "1670129", "PostTypeId": "2", "Id": "46677339", "Score": "2", "CreationDate": "2017-10-10T23:09:49.440", "LastActivityDate": "2017-10-10T23:09:49.440"}, "46677330": {"ParentId": "46677029", "CommentCount": "0", "Body": "<p>The issue is this part:</p>\n<blockquote>\n<p id=\"so_46677029_46677330_0\">non-ADL lookup is not performed</p>\n</blockquote>\n<p><code>begin</code> and <code>end</code> in this context would be found by non-ADL lookup, rather than ADL since pointers aren't \"defined in the global namespace\".</p>\n", "OwnerUserId": "2968284", "PostTypeId": "2", "Id": "46677330", "Score": "0", "CreationDate": "2017-10-10T23:09:06.393", "LastActivityDate": "2017-10-10T23:09:06.393"}, "bq_ids": {"n4140": {"so_46677029_46677339_0": {"section_id": 7104, "quality": 0.8888888888888888, "length": 16}, "so_46677029_46677339_1": {"section_id": 7104, "quality": 1.0, "length": 9}, "so_46677029_46677339_2": {"section_id": 7104, "quality": 1.0, "length": 8}}, "n3337": {"so_46677029_46677339_1": {"section_id": 6848, "quality": 1.0, "length": 9}, "so_46677029_46677339_0": {"section_id": 6848, "quality": 0.8888888888888888, "length": 16}, "so_46677029_46677339_2": {"section_id": 6848, "quality": 1.0, "length": 8}}, "n4659": {"so_46677029_46677339_0": {"section_id": 8605, "quality": 0.6666666666666666, "length": 12}, "so_46677029_46677339_1": {"section_id": 8605, "quality": 1.0, "length": 9}, "so_46677029_46677339_2": {"section_id": 8605, "quality": 1.0, "length": 8}}}, "46677029": {"CommentCount": "0", "ViewCount": "38", "PostTypeId": "1", "LastEditorUserId": "1366368", "CreationDate": "2017-10-10T22:33:41.227", "LastActivityDate": "2017-10-11T14:27:22.100", "Title": "Range based for loop doesn't work with pointer even when begin()/end() defined for it?", "AcceptedAnswerId": "46677339", "LastEditDate": "2017-10-11T14:27:22.100", "Id": "46677029", "Score": "1", "Body": "<p>According to range based for loop documentation <a href=\"http://en.cppreference.com/w/cpp/language/range-for\" rel=\"nofollow noreferrer\">here</a>:</p>\n<blockquote>\n<p id=\"so_46677029_46677029_0\"><i><code>begin_expr</code></i> and <i><code>end_expr</code></i> are defined as follows:</p>\n<ul><li> If range_expression is an expression of array type, then <i><code>begin_expr</code></i> is <code>__range</code> and <i><code>end_expr</code></i> is <code>(__range + __bound)</code>, where <code>__bound</code> is the number of elements in the array (if the array has unknown size or is of an incomplete type, the program is ill-formed)\n  </li><li> If <code>range_expression</code> is an expression of a class type <code>C</code> that has a member named <code>begin</code> and/or a member named <code>end</code> (regardless of the type or accessibility of such member), then <i><code>begin_expr</code></i> is <code>__range.begin</code>) and <i><code>end_expr</code></i> is <code>__range.end()</code>;\n  </li><li> Otherwise, <i><code>begin_expr</code></i> is <code>begin(__range)</code> and <i><code>end_expr</code></i> is <code>end(__range)</code>, which are found via <a href=\"http://en.cppreference.com/w/cpp/language/adl\" rel=\"nofollow noreferrer\" title=\"cpp/language/adl\">argument-dependent lookup</a> (non-ADL lookup is not performed).\n  </li></ul>\n</blockquote>\n<p>However, if I define <code>begin()</code> and <code>end()</code> for a pointer type, it fails to work.  </p>\n<h1>Example</h1>\n<pre><code>#include &lt;iostream&gt;\n\nusing LPCSTR = char const*;\n\nLPCSTR begin(LPCSTR str)\n{\n    return str;\n}\n\nLPCSTR end(LPCSTR str)\n{\n    return str + strlen(str);\n}\n\nint main()\n{\n    LPCSTR text = \"Hello, world!\\n\";\n    for (auto c : text)\n    {\n        std::cout &lt;&lt; c;\n    }\n}\n</code></pre>\n<p>Error(s):</p>\n<pre><code>source_file.cpp:18:17: error: invalid range expression of type 'const char *'; no viable 'begin' function available\n    for (auto c : text)\n                ^ ~~~~\n1 error generated.\n</code></pre>\n<p><a href=\"http://rextester.com/BXK17523\" rel=\"nofollow noreferrer\"><kbd>Demo</kbd></a></p>\n<p>I don't see any reference that pointers are excluded from the ADL, so what reason would there be as to why this isn't working?  </p>\n", "Tags": "<c++11><for-loop>", "OwnerUserId": "1366368", "AnswerCount": "2"}});