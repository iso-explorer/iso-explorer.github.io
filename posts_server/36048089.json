post_cb({"36048089": {"CommentCount": "5", "ViewCount": "83", "PostTypeId": "1", "LastEditorUserId": "1666237", "CreationDate": "2016-03-16T22:22:50.620", "LastActivityDate": "2016-03-17T17:02:03.273", "Title": "Local(Block) function decln vs. defn return type mismatch; Diagnostic in C++?", "AcceptedAnswerId": "36048365", "LastEditDate": "2016-03-17T17:02:03.273", "Id": "36048089", "Score": "0", "Body": "<p>This program is in the file called localFunc.c:</p>\n<pre><code>#include &lt;stdio.h&gt;\n\n// int f(int);  // Global forward declaration.\n\nint main() {\n   int f(int);  // Local forward declaration.\n   printf(\"%d\\n\", f(1));\n}\n\ndouble f(int i) {\n   return 1.0;\n}\n</code></pre>\n<p>Compiling via <code>gcc localFunc.c</code> gives:</p>\n<pre><code>localFunc.c:10:8: error: conflicting types for \u2018f\u2019\n double f(int i) {\n        ^\nlocalFunc.c:6:7: note: previous declaration of \u2018f\u2019 was here\n    int f(int);  // Local forward declaration.\n</code></pre>\n<p>But compiled via <code>g++ localFunc.c</code>, there is no error and the result of running the executable is: <code>4195638</code>.</p>\n<p>Commenting out the Local forward declaration, and turning on the Global forward declaration of: <code>int f(int);</code>, both gcc and g++ give errors similar to the above, as expected(by me).</p>\n<p>So my question is, why does it appear that g++ is not seeing the conflicting types(ambiguous declaration) on locally declared functions?</p>\n<pre><code>don@HAL:~/UNIX/CS213$ gcc --version\ngcc (Ubuntu 5.2.1-22ubuntu2) 5.2.1 20151010\n</code></pre>\n", "Tags": "<c++><c><gcc>", "OwnerUserId": "1666237", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_36048089_36048365_0": {"section_id": 7140, "quality": 1.0, "length": 27}, "so_36048089_36048365_1": {"section_id": 7143, "quality": 0.9512195121951219, "length": 39}}, "n3337": {"so_36048089_36048365_0": {"section_id": 6884, "quality": 1.0, "length": 27}, "so_36048089_36048365_1": {"section_id": 6887, "quality": 0.9512195121951219, "length": 39}}, "n4659": {"so_36048089_36048365_0": {"section_id": 8641, "quality": 1.0, "length": 27}, "so_36048089_36048365_1": {"section_id": 8644, "quality": 0.9512195121951219, "length": 39}}}, "36048365": {"ParentId": "36048089", "LastEditDate": "2016-03-17T16:44:37.083", "CommentCount": "3", "CreationDate": "2016-03-16T22:43:16.497", "OwnerUserId": "768469", "LastEditorUserId": "768469", "PostTypeId": "2", "Id": "36048365", "Score": "5", "Body": "<p>I can explain this behavior for C++.</p>\n<p>From the C++11 spec, section 3.5 [basic.link], paragraph (7):</p>\n<blockquote>\n<p id=\"so_36048089_36048365_0\">When a block scope declaration of an entity with linkage is not found to refer to some other declaration, then that entity is a member of the innermost enclosing namespace. However such a declaration does not introduce the member name in its namespace scope.</p>\n</blockquote>\n<p>So the <code>int f(int)</code> declaration has global linkage, but does not introduce the name into the global namespace. This might explain why GCC does not notice the conflict.</p>\n<p>More importantly, paragraph (10) says:</p>\n<blockquote>\n<p id=\"so_36048089_36048365_1\">After all adjustments of types (during which typedefs (7.1.3) are replaced by their definitions), the types specified by all declarations referring to a given variable or function shall be identical, except that declarations for an array object can specify array types that differ by the presence or absence of a major array bound (8.3.4). A violation of this rule on type identity does not require a diagnostic.</p>\n</blockquote>\n<p>Your program violates the \"shall\" portion of this paragraph, so its behavior is undefined. That means anything GCC does whatsoever -- such as calling the <code>double foo(int)</code> function and treating its return value as an int -- is permitted by the spec. Moreover, no diagnostic is required.</p>\n<p>I do not know what C says about this case; in particular, whether the diagnostic is required.</p>\n", "LastActivityDate": "2016-03-17T16:44:37.083"}});