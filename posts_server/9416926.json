post_cb({"bq_ids": {"n4140": {"so_9416926_9416946_0": {"length": 19, "quality": 1.0, "section_id": 5316}, "so_9416926_9416926_1": {"length": 11, "quality": 0.6875, "section_id": 6430}, "so_9416926_9416926_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 5314}}, "n3337": {"so_9416926_9416946_0": {"length": 19, "quality": 1.0, "section_id": 5113}, "so_9416926_9416926_1": {"length": 11, "quality": 0.6875, "section_id": 6187}, "so_9416926_9416926_0": {"length": 22, "quality": 0.9565217391304348, "section_id": 5111}}, "n4659": {"so_9416926_9416946_0": {"length": 19, "quality": 1.0, "section_id": 6740}, "so_9416926_9416926_1": {"length": 11, "quality": 0.6875, "section_id": 7942}, "so_9416926_9416926_0": {"length": 20, "quality": 0.8695652173913043, "section_id": 6738}}}, "9416926": {"ViewCount": "906", "Body": "<p>Must a C++ implementation set the chars '0'-'9' to have contiguous numeric values, i.e. so that:</p>\n<pre><code>'0' -&gt; 0+n\n'1' -&gt; 1+n\n m  -&gt; m+n\n'9' -&gt; 9+n\n</code></pre>\n<p>I cannot find it mentioned in the documentation of <code>isdigit</code> ([classification] (22.3.3.1 Character classification)) <sup>*</sup>,\nnor can I find it in the locale documentation (but maybe I did not look hard enough).</p>\n<p>In 2.3 Character sets, we find that</p>\n<blockquote>\n<p id=\"so_9416926_9416926_0\">The basic source character set consists of 96 characters: the space character, the control characters representing\n  horizontal tab, vertical tab, form feed, and new-line, plus the following 91 graphical characters</p>\n</blockquote>\n<p>But it doesn't mention any ordering (but maybe I did not look hard enough).</p>\n<hr>\n<p><sup>*</sup>: Interesting footnote there:</p>\n<blockquote>\n<p id=\"so_9416926_9416926_1\">When used in a loop, it is faster to cache the ctype&lt;&gt; facet and use it directly [instead of isdigit() et al, end comment], or use the vector form of ctype&lt;&gt;::is.</p>\n</blockquote>\n</hr>", "AcceptedAnswerId": "9416946", "Title": "Are the character digits ['0'..'9'] required to have contiguous numeric values?", "CreationDate": "2012-02-23T16:20:51.317", "Id": "9416926", "CommentCount": "2", "LastEditDate": "2012-02-24T09:53:40.060", "PostTypeId": "1", "LastEditorUserId": "1155650", "LastActivityDate": "2012-02-24T09:53:40.060", "Score": "18", "OwnerUserId": "76722", "Tags": "<c++><numbers><ascii><numerical><digits>", "AnswerCount": "1"}, "9416946": {"Id": "9416946", "PostTypeId": "2", "Body": "<p>Indeed not looked hard enough: In 2.3. Character sets, item 3:</p>\n<blockquote>\n<p id=\"so_9416926_9416946_0\">In both the source and execution basic character sets, <em>the value of each character after 0 in the\n  above <strong>list of decimal digits</strong> shall be <strong>one greater than</strong> the value of <strong>the previous</strong>.</em></p>\n</blockquote>\n<p>And this is above list of decimal digits:</p>\n<pre><code>0 1 2 3 4 5 6 7 8 9\n</code></pre>\n<p>Therefore, an implementation must use a character set where the decimal digits have a contiguous representation. Thus, optimizations where you rely on this property are safe; however, optimizations where you rely on the coniguity of other digits (e.g. 'a'..'z') are <em>not</em> portable w.r.t. to the standard (see also header <code>&lt;cctype&gt;</code>). If you do this, make sure to assert that property. </p>\n", "LastEditorUserId": "76722", "LastActivityDate": "2012-02-24T06:44:06.950", "Score": "22", "CreationDate": "2012-02-23T16:22:00.007", "ParentId": "9416926", "CommentCount": "6", "OwnerUserId": "76722", "LastEditDate": "2012-02-24T06:44:06.950"}});