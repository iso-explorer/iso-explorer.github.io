post_cb({"31759360": {"ParentId": "31759210", "LastEditDate": "2017-05-23T11:43:54.217", "CommentCount": "5", "CreationDate": "2015-08-01T07:21:25.460", "OwnerUserId": "1938163", "LastEditorUserId": "-1", "PostTypeId": "2", "Id": "31759360", "Score": "5", "Body": "<p>You are allowed to write:</p>\n<pre><code>test chk = chk;\n</code></pre>\n<p><em>[basic.scope.declarative]/p1</em></p>\n<blockquote>\n<p id=\"so_31759210_31759360_0\">The potential scope of the first <code>j</code> begins immediately after that <code>j</code></p>\n</blockquote>\n<p>An <a href=\"http://en.cppreference.com/w/cpp/language/copy_constructor\" rel=\"nofollow noreferrer\">implicit copy constructor</a> is thus invoked. You might have used your own to perform some additional initialization:</p>\n<pre><code>test(const test&amp;) {\n  cout &lt;&lt; endl &lt;&lt; \"copy ctor\";\n}\n</code></pre>\n<p>Keep in mind that this isn't a good practice and it might even lead to <a href=\"https://stackoverflow.com/q/981714/1938163\">undefined behavior</a> under some circumstances and Clang always issues a <code>-Wuninitialized</code> warning.</p>\n", "LastActivityDate": "2015-08-01T08:51:32.083"}, "31760282": {"ParentId": "31759210", "CommentCount": "0", "Body": "<p>I modified your code a bit and hope you can catch the point:</p>\n<pre><code>class test{\n    public:\n        test(){ cout&lt;&lt;endl&lt;&lt;\"TEST\"; }\n\n        test(const test&amp; in)\n        {   \n            if ( this == &amp;in)\n            {   \n                cout&lt;&lt;endl&lt;&lt;\"Self init\";\n            }\n            cout&lt;&lt;endl&lt;&lt;\"Copy ctor\";\n        }\n\n        void another(){ cout&lt;&lt;endl&lt;&lt;\"Another\"; }\n};  \n\nint main(){\n    test chk = chk;\n    chk.another();\n    cout&lt;&lt;endl;\n}  \n</code></pre>\n<p>If you now call your code you will get the following output:</p>\n<pre><code>Self init\nCopy ctor\nAnother\n</code></pre>\n<p>One remark to your <code>cout&lt;&lt;endl</code> statements. You last output are hidden because there is no <code>endl</code> after the last output. <code>cout</code> is buffered which means here that it will only write to your console after the next <code>endl</code> or the buffer is full. So it is even better to write: <code>cout&lt;&lt;\"something\"&lt;&lt;endl;</code></p>\n<p>To the code and the init:</p>\n<p>If you take the address of the input object in your copy constructor you can check if you do a copy to yourself. That is good practice, because you need a own copy constructor if you have allocated memory which can't be copied with the default constructor. As you can see from my example, the address of <code>this</code> and <code>in</code> is the same which means the copy constructor want to copy to itself which is typically wrong if not handled in a special way!</p>\n<p>For your testcase the behaviour is simply that your object is not initialized, because you copy an uninitialzed object to itself which ends up in a uninitialized object. This is never what you want and clang reports a warning.</p>\n", "OwnerUserId": "878532", "PostTypeId": "2", "Id": "31760282", "Score": "1", "CreationDate": "2015-08-01T09:23:13.037", "LastActivityDate": "2015-08-01T09:23:13.037"}, "bq_ids": {"n4140": {"so_31759210_31759360_0": {"section_id": 7045, "quality": 0.8571428571428571, "length": 6}}, "n3337": {"so_31759210_31759360_0": {"section_id": 6790, "quality": 0.8571428571428571, "length": 6}}, "n4659": {"so_31759210_31759360_0": {"section_id": 8542, "quality": 0.8571428571428571, "length": 6}}}, "31759210": {"CommentCount": "2", "ViewCount": "477", "PostTypeId": "1", "LastEditorUserId": "2776146", "CreationDate": "2015-08-01T06:57:13.240", "LastActivityDate": "2015-08-01T09:23:13.037", "Title": "Object that initializes to itself in C++", "AcceptedAnswerId": "31760282", "LastEditDate": "2015-08-01T08:51:32.027", "Id": "31759210", "Score": "3", "Body": "<p>For example, I've the code:</p>\n<pre><code>class test{\n    public:\n\n    test(){\n        cout&lt;&lt;endl&lt;&lt;\"TEST\";\n    }\n\n    void another(){\n        cout&lt;&lt;endl&lt;&lt;\"Another\";\n    }\n\n};\n\nint main(){\n    test chk = chk;\n    chk.another();\n}\n</code></pre>\n<p>Here, I've done an initialization of newly created object of type <code>test</code> to itself.</p>\n<p>Does such initialization serve special purpose, does such initialization do anything otherwise than initializing <code>test chk;</code> instead of <code>test chk = chk;</code>?</p>\n<p>I understand that the constructor cannot be called if the object is initialized to itself, but why?</p>\n<p>I would like to know more about such initialization of an object to itself.</p>\n", "Tags": "<c++><class><object><initialization><self>", "OwnerUserId": "5151876", "AnswerCount": "2"}});