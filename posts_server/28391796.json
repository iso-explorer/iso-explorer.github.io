post_cb({"28391896": {"ParentId": "28391796", "CommentCount": "1", "Body": "<p>If your compiler is doing this, it's broken.</p>\n<p>[dcl.init.list]/p3 (all quotes are from N4140):</p>\n<blockquote>\n<p id=\"so_28391796_28391896_0\">List-initialization of an object or reference of type <code>T</code> is defined\n  as follows:</p>\n<ul>\n<li>If <code>T</code> is an aggregate, aggregate initialization is performed (8.5.1).</li>\n<li>Otherwise, if the initializer list has no elements and <code>T</code> is a class type with a default constructor, the object is\n  value-initialized.</li>\n<li>[...]</li>\n</ul>\n</blockquote>\n<p>[dcl.init]/p8:</p>\n<blockquote>\n<p id=\"so_28391796_28391896_1\">To value-initialize an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a (possibly cv-qualified) class type (Clause 9) with either no default constructor (12.1) or a default constructor that is\n  user-provided or deleted, then the object is default-initialized;</li>\n<li>if <code>T</code> is a (possibly cv-qualified) class type without a user-provided or deleted default constructor, then the object is\n  zero-initialized and the semantic constraints for\n  default-initialization are checked, and if T has a non-trivial default\n  constructor, the object is default-initialized;</li>\n<li>if T is an array type, then each element is value-initialized;</li>\n<li>otherwise, the object is zero-initialized.</li>\n</ul>\n</blockquote>\n<p><code>Test_2</code> is not an aggregate, so <code>t2</code> should have been value-initialized. In turn, since <code>Test_2</code>'s default constructor is not user-provided, <code>t2</code> is supposed to be first zero-initialized (causing <code>t2.i</code> to be initialized to 0), and then the default constructor is run. </p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "28391896", "Score": "4", "CreationDate": "2015-02-08T08:07:20.027", "LastActivityDate": "2015-02-08T08:07:20.027"}, "28391796": {"CommentCount": "2", "ViewCount": "173", "PostTypeId": "1", "LastEditorUserId": "2070640", "CreationDate": "2015-02-08T07:50:24.027", "LastActivityDate": "2015-02-08T08:56:03.973", "Title": "C++14 Uniform Initialization on a Non-Aggregate", "AcceptedAnswerId": "28391896", "LastEditDate": "2015-02-08T08:56:03.973", "Id": "28391796", "Score": "5", "Body": "<p>I'm using Visual C++ 2013. When the class is an aggregate it is zero-initialized. When it's a non-aggregate it seems to be default-initialized and left indeterminate. Why is that?</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass Test_1\n{\npublic:\n    int i;\n    void f(){};\n};\n\nclass Test_2\n{\npublic:\n    int i;\n    virtual void f(){};\n};\n\nint main()\n{\n    Test_1 t1{};\n    Test_2 t2{};\n\n    cout&lt;&lt;t1.i&lt;&lt;endl; //0\n    cout&lt;&lt;t2.i&lt;&lt;endl; //-858993460\n\n    getchar();\n}\n</code></pre>\n", "Tags": "<c++><c++14><uniform-initialization>", "OwnerUserId": "2070640", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_28391796_28391896_1": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_28391796_28391896_0": {"section_id": 3325, "quality": 1.0, "length": 6}}, "n3337": {"so_28391796_28391896_1": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_28391796_28391896_0": {"section_id": 3195, "quality": 1.0, "length": 6}}, "n4659": {"so_28391796_28391896_0": {"section_id": 4091, "quality": 1.0, "length": 6}}}});