post_cb({"bq_ids": {"n4140": {"so_43224984_43225060_0": {"length": 23, "quality": 0.92, "section_id": 3241}}, "n3337": {"so_43224984_43225060_0": {"length": 23, "quality": 0.92, "section_id": 3114}}, "n4659": {"so_43224984_43225060_0": {"length": 24, "quality": 0.96, "section_id": 3997}}}, "43224984": {"ViewCount": "134", "Body": "<p>Size of <code>char[]</code> is <code>number of char times sizeof(char)</code>, \nsize of <code>char*</code> is <code>sizeof(pointer)</code> - Pointer to first element.</p>\n<p><code>sizeof(char[])</code> prints <code>number of char times sizeof(char)</code> in <code>main()</code>, where it's declared, but if I pass this array to function, it function converts <code>char[]</code> to <code>char*</code> and it's imposibble to get size of array using <code>sizeof()</code>, </p>\n<pre><code>\"void pr(char chr[])\" is changed to \"void pr(char chr*)\"\n</code></pre>\n<p>Code example:</p>\n<pre><code>using namespace std;\nvoid pr(char chr[])\n{\n    std::cout &lt;&lt; \"in pr(): \" &lt;&lt; sizeof(chr)&lt;&lt;\"\\n\";\n}\nint main()\n{\n    char* c;\n    char z[] = { 1,2,3,4,5,6,7,8,9};\n    c = z;\n    std::cout &lt;&lt; \"sizeof char* c in main(): \" &lt;&lt; sizeof(c) &lt;&lt; \"\\n\";\n    std::cout &lt;&lt; \"sizeof char* c \"; pr(c); std::cout &lt;&lt; \"\\n\";\n    std::cout &lt;&lt; \"sizeof char z[] in main(): \" &lt;&lt; sizeof(z) &lt;&lt; \"\\n\";\n    std::cout &lt;&lt; \"sizeof char z[] \"; pr(z); std::cout &lt;&lt; \"\\n\";\n\n    getchar();\n    return 0;\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>sizeof char* c in main(): 4 // pointer size\nsizeof char* c in pr(): 4   // pointer size\n\nsizeof char z[] in main(): 9  // elements*sizeof(char)\nsizeof char z[] in pr(): 4    // pointer s\n</code></pre>\n<p>Is this behavior standardized or its implementation based?</p>\n", "AcceptedAnswerId": "43225060", "Title": "Implicit conversion char[] to char* in C++", "CreationDate": "2017-04-05T07:47:15.043", "Id": "43224984", "CommentCount": "4", "LastEditDate": "2017-04-05T07:47:35.583", "PostTypeId": "1", "LastEditorUserId": "971127", "LastActivityDate": "2017-04-05T08:05:08.333", "Score": "3", "OwnerUserId": "3910193", "Tags": "<c++><arrays><pointers>", "AnswerCount": "2"}, "43225060": {"Id": "43225060", "PostTypeId": "2", "Body": "<p>This is standard behavior since there's a function call involved and <code>[dcl.fct]/5</code> says:</p>\n<blockquote>\n<p id=\"so_43224984_43225060_0\">The type of each parameter (including\n  function parameter packs) is determined from its own decl-specifier-seq and declarator. After determining\n  the type of each parameter, any parameter of type \u201carray of T\u201d or of function type T is adjusted to be\n  \u201cpointer to T\u201d. </p>\n</blockquote>\n<p>so you are printing the size of <code>char*</code>.</p>\n<p>Using a reference instead:</p>\n<pre><code>void pr(char (&amp;chr)[9])\n{\n    std::cout &lt;&lt; \"in pr(): \" &lt;&lt; sizeof(chr)&lt;&lt;\"\\n\";\n}\n</code></pre>\n<p>would again output <code>9</code> in your second case.</p>\n<p>Other suggestions if you're interested in the size of the array:</p>\n<ul>\n<li>Use <a href=\"http://en.cppreference.com/w/cpp/container/array\" rel=\"nofollow noreferrer\"><code>std::array</code></a> or another container (preferred and <em>do read the documentation first</em> in order to avoid pitfalls like wasting stack space)</li>\n<li>Pass a pointer and the size of the array</li>\n</ul>\n", "LastEditorUserId": "1938163", "LastActivityDate": "2017-04-05T08:05:08.333", "Score": "5", "CreationDate": "2017-04-05T07:50:50.820", "ParentId": "43224984", "CommentCount": "2", "OwnerUserId": "1938163", "LastEditDate": "2017-04-05T08:05:08.333"}, "43225214": {"Id": "43225214", "PostTypeId": "2", "Body": "<p>You are passing the array as a pointer in both cases (char [] and char *) Inside the function there is not possible to get extra info about the allocated memory for the array. You can use extra parameter about the size or your own typedef of struct or class or you can use STD library. </p>\n", "LastActivityDate": "2017-04-05T07:57:23.737", "CommentCount": "2", "CreationDate": "2017-04-05T07:57:23.737", "ParentId": "43224984", "Score": "1", "OwnerUserId": "7779394"}});