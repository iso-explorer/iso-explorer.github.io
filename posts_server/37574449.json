post_cb({"37574580": {"ParentId": "37574449", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>GCC is correct, the behavior is defined by the standard.</p>\n<p><code>$5.3.4/7 New [expr.new]</code></p>\n<blockquote>\n<p id=\"so_37574449_37574580_0\">The expression in a noptr-new-declarator is erroneous if:</p>\n<p id=\"so_37574449_37574580_1\">...</p>\n<p id=\"so_37574449_37574580_2\">(7.4) \u2014 the new-initializer is a braced-init-list and the number of\n  array elements for which initializers are provided (including the\n  terminating \u2019\\0\u2019 in a string literal (2.13.5)) exceeds the number of\n  elements to initialize.</p>\n<p id=\"so_37574449_37574580_3\">...</p>\n<p id=\"so_37574449_37574580_4\">a new-expression with an erroneous expression does not call an\n  allocation function and terminates by throwing an exception of a type\n  that would match a handler (15.3) of type <code>std::bad_array_new_length</code>\n  (18.6.2.2).</p>\n</blockquote>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2016-06-01T16:59:26.903", "Id": "37574580", "Score": "3", "CreationDate": "2016-06-01T16:52:05.413", "LastActivityDate": "2016-06-01T16:59:26.903"}, "37574449": {"CommentCount": "0", "ViewCount": "91", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2016-06-01T16:45:38.527", "LastActivityDate": "2016-06-01T16:59:26.903", "Title": "Visual Studio and Clang do not throw std::bad_array_new_length", "AcceptedAnswerId": "37574580", "LastEditDate": "2017-05-23T10:28:58.633", "Id": "37574449", "Score": "3", "Body": "<p>This is a follow up to to a <a href=\"https://stackoverflow.com/q/37573209/1460794\">prior question</a>.</p>\n<p>In the following program Visual Studio 2015 <a href=\"http://coliru.stacked-crooked.com/a/143c79643f16035e\" rel=\"nofollow noreferrer\">and Clang</a> both do not throw <code>std::bad_array_new_length</code>. <a href=\"http://coliru.stacked-crooked.com/a/f9f9f132cb41d151\" rel=\"nofollow noreferrer\">gcc does</a>.</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;random&gt;\n#include &lt;exception&gt;\n#include &lt;new&gt;\n\nint main()\n{\n    std::random_device rd;\n    std::uniform_int_distribution&lt;int&gt; dist(2,2);\n    try {\n\n        auto arr = new int[dist(rd)][4][2]{{{1}},{{2}},{{3}}}; // may write to unallocated memory\n\n        auto val1 = arr[0][0][0];\n        auto val2 = arr[1][0][0];\n        auto val3 = arr[2][0][0];\n        auto result = val1 + val2 + val3;\n        std::cout &lt;&lt; result;\n    }\n    catch (std::exception const&amp; e) {\n        std::cerr &lt;&lt; e.what() &lt;&lt; '\\n';\n    }\n    return 0;\n}\n</code></pre>\n<p>In Visual Studio the program crashes without any message. In Clang there is no error (perhaps because it <a href=\"https://stackoverflow.com/a/22455263/1460794\">avoided the allocation</a> as mentioned in <a href=\"https://stackoverflow.com/a/37573446/1460794\">this answer</a>). </p>\n<p>Three compilers, three results. Is this undefined behavior or is this is a bug in Visual Studio?</p>\n", "Tags": "<c++><gcc><visual-c++><clang><language-lawyer>", "OwnerUserId": "1460794", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_37574449_37574580_2": {"section_id": 6088, "quality": 0.9375, "length": 15}, "so_37574449_37574580_4": {"section_id": 6088, "quality": 0.8888888888888888, "length": 16}}, "n3337": {"so_37574449_37574580_4": {"section_id": 5856, "quality": 0.6666666666666666, "length": 12}}, "n4659": {"so_37574449_37574580_2": {"section_id": 7584, "quality": 0.9375, "length": 15}, "so_37574449_37574580_4": {"section_id": 7584, "quality": 0.7222222222222222, "length": 13}}}});