post_cb({"10615016": {"Id": "10615016", "PostTypeId": "2", "Body": "<p>In C++03 the right side is an <em>initializer-list</em>. It does not have any type, it just serves the purpose of providing a means to initialize values for identifiers.</p>\n<p>This is defined in:</p>\n<p><strong>C++03 8.5.1 Initializers [dcl.init]</strong> </p>\n<blockquote>\n<p id=\"so_10614728_10615016_0\">A declarator can specify an initial value for the identifier being declared. The identifier designates an object or reference being initialized. The process of initialization described in the remainder of 8.5 applies also to initializations specified by other syntactic contexts, such as the initialization of function parameters with argument expressions (5.2.2) or the initialization of return values (6.6.3).</p>\n</blockquote>\n<pre><code>initializer:\n         = initializer-clause\n         ( expression-list )\ninitializer-clause:\n         assignment-expression\n         { initializer-list ,opt }\n         { }\ninitializer-list:\n         initializer-clause\n         initializer-list , initializer-clause\n</code></pre>\n", "LastActivityDate": "2012-05-16T08:48:35.383", "CommentCount": "0", "CreationDate": "2012-05-16T08:48:35.383", "ParentId": "10614728", "Score": "4", "OwnerUserId": "452307"}, "10614728": {"ViewCount": "251", "Body": "<p>Code like this can work fine:</p>\n<pre><code>char str[] = {'a', 'b', '\\0'};\n</code></pre>\n<p>The left is an auto variable(array).</p>\n<p>Code like this can <strong>NOT</strong> work:</p>\n<pre><code>char *str = {'a', 'b', '\\0'};\n</code></pre>\n<p>The left side is a pointer. The pointer points to an unknown space, so this will fail.</p>\n<p>My question is, what is the type of the right side?</p>\n<p>In C++ 11, an initialize list becomes <code>std::initializer_list</code>. But what about old C++ 03?</p>\n", "AcceptedAnswerId": "10614987", "Title": "what is the type of initialize list in C++ array?", "CreationDate": "2012-05-16T08:30:15.620", "Id": "10614728", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2013-07-01T17:17:13.670", "Score": "8", "OwnerUserId": "802650", "Tags": "<c++><c>", "AnswerCount": "4"}, "10614987": {"Id": "10614987", "PostTypeId": "2", "Body": "<p>In C++03 a brace-enclosed initializer is just a syntactic device that can be used to initialize aggregates (such as arrays or certain types of classes or structs).  It does not have a 'type' and can only be used for those specific kinds of initializers.</p>\n<blockquote>\n<p id=\"so_10614728_10614987_0\">8.5.1/2 \"Aggregates\":</p>\n<p id=\"so_10614728_10614987_1\">When an aggregate is initialized the initializer can contain an\n  initializer-clause consisting of a brace- enclosed, comma-separated\n  list of initializer-clauses for the members of the aggregate, written\n  in increasing subscript or member order.</p>\n</blockquote>\n", "LastActivityDate": "2012-05-16T08:47:02.217", "CommentCount": "0", "CreationDate": "2012-05-16T08:47:02.217", "ParentId": "10614728", "Score": "8", "OwnerUserId": "12711"}, "bq_ids": {"n4140": {"so_10614728_10614894_1": {"length": 20, "quality": 0.7142857142857143, "section_id": 3296}, "so_10614728_10615016_0": {"length": 32, "quality": 0.8421052631578947, "section_id": 3280}}, "n3337": {"so_10614728_10614894_1": {"length": 20, "quality": 0.7142857142857143, "section_id": 3166}, "so_10614728_10615016_0": {"length": 32, "quality": 0.8421052631578947, "section_id": 3151}}, "n4659": {"so_10614728_10614894_1": {"length": 20, "quality": 0.7142857142857143, "section_id": 4058}, "so_10614728_10615016_0": {"length": 30, "quality": 0.7894736842105263, "section_id": 4042}}}, "10614894": {"Id": "10614894", "PostTypeId": "2", "Body": "<p>From the draft of C++11:</p>\n<blockquote>\n<p id=\"so_10614728_10614894_0\"><strong>8.5 Initializers</strong></p>\n<p id=\"so_10614728_10614894_1\">16 The semantics of initializers are as follows. The destination type is\n  the type of the object or reference being initialized and the source\n  type is the type of the initializer expression. The source type is not\n  defined when the initializer is a braced-init-list or when it is a\n  parenthesized list of expressions.</p>\n</blockquote>\n", "LastActivityDate": "2012-05-16T08:41:00.623", "CommentCount": "1", "CreationDate": "2012-05-16T08:41:00.623", "ParentId": "10614728", "Score": "0", "OwnerUserId": "66692"}, "17409764": {"Id": "17409764", "PostTypeId": "2", "Body": "<pre><code>int num [3] = {1,2,3} ;\n\nint num [0]= 1 ;\nnum [1]= 2 ;\nnum [2] = 3 ;\n</code></pre>\n", "LastEditorUserId": "537031", "LastActivityDate": "2013-07-01T17:17:13.670", "Score": "0", "CreationDate": "2013-07-01T16:56:15.377", "ParentId": "10614728", "CommentCount": "0", "OwnerUserId": "2539821", "LastEditDate": "2013-07-01T17:17:13.670"}});