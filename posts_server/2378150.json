post_cb({"2378207": {"Id": "2378207", "PostTypeId": "2", "Body": "<p>As <a href=\"https://stackoverflow.com/questions/2378150/c-scope-of-inline-functions/2383096#2383096\">litb</a> and AndreyT point out, this answer doesn't address the actual problem - see litbs answer for details.</p>\n<hr>\n<p>While <code>static</code>, as <a href=\"https://stackoverflow.com/questions/2378150/c-scope-of-inline-functions/2378170#2378170\">Ofir said</a>, gives you internal linkage, the <em>\"C++ way\"</em> is to use unnamed namespaces:</p>\n<pre><code>namespace\n{\n     inline Boolean IsPointInRect(/*...*/) { /*...*/ }\n}\n</code></pre>\n<p><em>\u00a77.3.1.1/1</em>:</p>\n<blockquote>\n<p id=\"so_2378150_2378207_0\">An unnamed-namespace-definition behaves as if it were replaced by</p>\n</blockquote>\n<pre><code> namespace unique { /* empty body */ }\n using namespace unique; \n namespace unique { namespace-body }\n</code></pre>\n<blockquote>\n<p id=\"so_2378150_2378207_1\">where all occurrences of unique in a translation unit are replaced by the same identifier and this identifier differs from all other identifiers in the entire program.</p>\n</blockquote>\n<p><em>\u00a77.3.1.1/2</em> adds:</p>\n<blockquote>\n<p id=\"so_2378150_2378207_2\">The use of the static keyword is deprecated when declaring objects in a namespace scope (see annex D); the unnamed-namespace provides a superior alternative.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2010-03-04T22:35:14.403", "Score": "14", "CreationDate": "2010-03-04T09:51:18.503", "ParentId": "2378150", "CommentCount": "3", "OwnerUserId": "168225", "LastEditDate": "2017-05-23T12:22:58.367"}, "2378150": {"ViewCount": "3701", "Body": "<p>i am getting the compile error:</p>\n<blockquote>\n<p id=\"so_2378150_2378150_0\">Error 7   error C2084: function 'Boolean\n  IsPointInRect(...)' already has a body</p>\n</blockquote>\n<p>on my inline function, which is declared like this in a cpp file:</p>\n<pre><code>inline Boolean IsPointInRect(...) \n{\n...\n}\n</code></pre>\n<p>i have exactly the same function in another cpp file. might this be causing the problem? how can i solve it?</p>\n", "AcceptedAnswerId": "2378207", "Title": "C++ scope of inline functions", "CreationDate": "2010-03-04T09:40:47.027", "Id": "2378150", "CommentCount": "2", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2010-03-04T09:44:36.567", "LastEditorUserId": "266159", "LastActivityDate": "2010-03-04T22:35:14.403", "Score": "4", "OwnerUserId": "97688", "Tags": "<c++><inline>", "AnswerCount": "11"}, "2383096": {"Id": "2383096", "PostTypeId": "2", "Body": "<p>You got some wrong answers in this thread. The problem in your code is that you define your inline function twice in your code:</p>\n<pre><code>inline Boolean IsPointInRect(...) { ... }   \ninline Boolean IsPointInRect(...) { ... }\n</code></pre>\n<p><code>inline</code> will, as someone else said correctly, already protect you from having an error risen by defining the function twice. You don't need <code>static</code>, nor will you need unnamed namespaces. Also notice that you shouldn't define inline functions that are supposed to be used by other translation units <sup>(a file where all #include and #if etc... are processed and expanded)</sup> within the <code>.cpp</code> file. Their definition have to be known by all translation units that use them - so put their definition <em>only</em> in the header file in that case - not in both the <code>.cpp</code> and the header file - that will yield to the error you get. </p>\n<p>You also need header guards to avoid the above problem in each of your headers</p>\n<pre><code>// file foo.h\n#ifndef POINTS_H_INCLUDED\n#define POINTS_H_INCLUDED\n\ninline Boolean IsPointInRect(...) { ... }\n\n#endif\n\n\n// file bar.cpp\n#include \"foo.h\"\n// does not include the content a second time anymore - the guards aboid it:\n#include \"foo.h\" \n</code></pre>\n<p>And you should make sure <em>not</em> to include a <code>.cpp</code> file into another <code>.cpp</code> file (<code>.cpp</code> files are not supposed to be included). You are supposed to include the header files into the <code>.cpp</code> files. </p>\n", "LastEditorUserId": "34509", "LastActivityDate": "2010-03-04T22:13:37.753", "Score": "10", "CreationDate": "2010-03-04T22:08:28.827", "ParentId": "2378150", "CommentCount": "0", "OwnerUserId": "34509", "LastEditDate": "2010-03-04T22:13:37.753"}, "2379148": {"Id": "2379148", "PostTypeId": "2", "Body": "<p><i>I have exactly the same function</i></p>\n<p>Do you mean a function with the same name and type, or do you mean a function with the same name, type and body? There is nothing wrong with the latter, in fact that's what <code>inline</code> does - it lets you define the same function identically in different translation units. For the former you must ensure the function has file scope. <code>inline</code> does not give a function file scope, <code>static</code> and unnamed namespaces both do. An unnamed namespace is the preferred way of doing it in C++, at least according to the standard: <code>static</code> is deprecated.</p>\n", "LastEditorUserId": "13005", "LastActivityDate": "2010-03-04T12:24:41.050", "Score": "1", "CreationDate": "2010-03-04T12:18:36.603", "ParentId": "2378150", "CommentCount": "0", "OwnerUserId": "13005", "LastEditDate": "2010-03-04T12:24:41.050"}, "2378192": {"Id": "2378192", "PostTypeId": "2", "Body": "<p>Keep your inline functions in a header file, and use include guards to make sure the file isn't included twice.</p>\n", "LastActivityDate": "2010-03-04T09:48:15.573", "CommentCount": "0", "CreationDate": "2010-03-04T09:48:15.573", "ParentId": "2378150", "Score": "1", "OwnerUserId": "430360"}, "bq_ids": {"n4140": {"so_2378150_2378207_0": {"length": 4, "quality": 1.0, "section_id": 5482}, "so_2378150_2378207_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 5482}}, "n3337": {"so_2378150_2378207_0": {"length": 4, "quality": 1.0, "section_id": 5268}, "so_2378150_2378207_1": {"length": 14, "quality": 0.9333333333333333, "section_id": 5268}}, "n4659": {"so_2378150_2378207_0": {"length": 4, "quality": 1.0, "section_id": 6917}, "so_2378150_2378207_1": {"length": 13, "quality": 0.8666666666666667, "section_id": 6917}}}, "2378231": {"Id": "2378231", "PostTypeId": "2", "Body": "<p>As others have said, if you really want to limit the scope of the function to the cpp file then you should put it in a namespace, eg</p>\n<pre><code>namespace // anonymous\n{\n    inline bool IsPointInRect(...)\n    {\n        ...\n    }\n}\n</code></pre>\n<p>However it would seem like a maintenance issue to have the same function with the same body (ie they both do the same thing) in two different places - copy/paste style.  If the two different functions have the same name but different bodies, then that too is a problem waiting to happen.</p>\n<p>Obviously you have performance concerns (hence the inline), but it would really be best to only have the function written in one place!  At a minimum put it in a header file (in an anonymous namespace) that is included where you need it.  In reality you should do this 'cleanly' and then only revert to performance specific approaches when your profiler tells you to.</p>\n<p>Cheers,</p>\n<pre><code>Michael\n</code></pre>\n", "LastActivityDate": "2010-03-04T09:56:41.757", "CommentCount": "0", "CreationDate": "2010-03-04T09:56:41.757", "ParentId": "2378150", "Score": "3", "OwnerUserId": "242207"}, "2378186": {"Id": "2378186", "PostTypeId": "2", "Body": "<p>If you move them both into a single header file that should solve it.  Or declare one or both of them <code>static</code>.  Or, if you are using MSVC, declare them <code>__declspec(selectany)</code>. </p>\n", "LastActivityDate": "2010-03-04T09:47:16.653", "CommentCount": "0", "CreationDate": "2010-03-04T09:47:16.653", "ParentId": "2378150", "Score": "2", "OwnerUserId": "234815"}, "2380190": {"Id": "2380190", "PostTypeId": "2", "Body": "<p>1.use extern and static keyword</p>\n<p>2.declare it inside a namespace</p>\n", "LastActivityDate": "2010-03-04T14:55:02.683", "CommentCount": "0", "CreationDate": "2010-03-04T14:55:02.683", "ParentId": "2378150", "Score": "0", "OwnerUserId": "4709692"}, "2378316": {"Id": "2378316", "PostTypeId": "2", "Body": "<p>There are 2 ways of declaring inline functions:</p>\n<ol>\n<li><p>Inside the class: Any function defined inside the class is an inline function.</p></li>\n<li><p>Outside the class: If you define it outside the class then you need to use the keyword 'inline' along with the function signature.</p></li>\n</ol>\n<p>If you have another function with the same name defined in a different class then it won't throw any exception as long as you are using the scope resolution operator(::) and dot(.)  properly with the object name.   </p>\n", "LastActivityDate": "2010-03-04T10:09:16.670", "CommentCount": "0", "CreationDate": "2010-03-04T10:09:16.670", "ParentId": "2378150", "Score": "0", "OwnerUserId": "2355649"}, "2378173": {"Id": "2378173", "PostTypeId": "2", "Body": "<p>You can add \"static\" or \"extern\" in front of \"inline\" i think (I Know you can when using GCC), e.g:</p>\n<pre><code>static inline Boolean IsPointInRect(...) { ... }\n</code></pre>\n", "LastActivityDate": "2010-03-04T09:44:41.883", "CommentCount": "0", "CreationDate": "2010-03-04T09:44:41.883", "ParentId": "2378150", "Score": "0", "OwnerUserId": "102715"}, "2378168": {"Id": "2378168", "PostTypeId": "2", "Body": "<p>putting them in appropriate namespaces makes simple solution. Even Anonymous will work.</p>\n", "LastActivityDate": "2010-03-04T09:42:52.107", "CommentCount": "1", "CreationDate": "2010-03-04T09:42:52.107", "ParentId": "2378150", "Score": "6", "OwnerUserId": "285550"}, "2378166": {"Id": "2378166", "PostTypeId": "2", "Body": "<p>Get rid of one of them? What did you expect?</p>\n<p>Perhaps you should explain why you need two versions...</p>\n", "LastActivityDate": "2010-03-04T09:42:45.683", "CommentCount": "3", "CreationDate": "2010-03-04T09:42:45.683", "ParentId": "2378150", "Score": "0", "OwnerUserId": "129655"}});