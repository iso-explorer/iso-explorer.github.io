post_cb({"27045136": {"CommentCount": "3", "ViewCount": "91", "PostTypeId": "1", "LastEditorUserId": "3204551", "CreationDate": "2014-11-20T16:52:04.820", "LastActivityDate": "2014-12-21T19:32:30.127", "Title": "Why does the returned value need to be the first declared local for NRVO?", "AcceptedAnswerId": "27046690", "LastEditDate": "2014-12-21T19:32:30.127", "Id": "27045136", "Score": "0", "Body": "<p>It is my understanding that for the compiler to be able to do Named Return Value Optimization (NRVO) the return value must be declared before any others in the function body. I suspect this may be due to the order of stack unwinding in the event of an exception but im not sure. What is the reason that the named return value must be the first declared in the function body?</p>\n<pre><code>class C{};\nC f(){\n    C ret; //NRVO possible\n    return ret;\n}\nC g(){\n    int i;\n    C ret;  //NRVO not possible?\n    return ret;\n}\n</code></pre>\n<p>use case:</p>\n<pre><code>auto c = f();\nauto c2 = g();\n</code></pre>\n<p><strong>Edit:</strong> \nThank you all answerers for helping me understand this, I am beginning to suspect that Chandler Carruth's statement here:<a href=\"http://www.youtube.com/watch?v=fHNmRkzxHWs\" rel=\"nofollow\">http://www.youtube.com/watch?v=fHNmRkzxHWs</a> minute 32:30 may be misleading and/or I just misunderstand it. It does not seem to be important that the return variable be declaired first.</p>\n", "Tags": "<c++><optimization><rvo>", "OwnerUserId": "893819", "AnswerCount": "1"}, "27046690": {"ParentId": "27045136", "CommentCount": "0", "Body": "<p>The standard imposes no requirements on the order of declarations/definitions for variables in regards to copy elision. Note that the standard says \"an implementation is <strong>allowed</strong>\", not that it should, shall, etc. We can see that copy elision occurs for <a href=\"http://coliru.stacked-crooked.com/a/3454fc8f6d8f9c62\" rel=\"nofollow\"><code>clang</code> and <code>gcc</code></a>, but not <a href=\"http://rextester.com/live/CSK6631\" rel=\"nofollow\"><code>MSVC</code></a>, further cementing that this is an implementation-defined optimization.</p>\n<p>\u00a712.8/31 describes copy elision:</p>\n<blockquote>\n<p id=\"so_27045136_27046690_0\"><em>[..]</em> This elision of copy/move operations, called <em>copy elision</em>, is permitted in the following circumstances (which may be combined to\n  eliminate multiple copies):</p>\n<blockquote>\n<p id=\"so_27045136_27046690_3\">\u2014 in a return statement in a function with a class return type, when\n    the expression is the name of a non-volatile automatic object (other\n    than a function or catch-clause parameter) with the same\n    cv-unqualified type as the function return type, the copy/move\n    operation can be omitted by constructing the automatic object directly\n    into the function\u2019s return value</p>\n<p id=\"so_27045136_27046690_4\">\u2014 <em>[..]</em></p>\n</blockquote>\n</blockquote>\n", "Id": "27046690", "PostTypeId": "2", "OwnerDisplayName": "user3920237", "Score": "0", "CreationDate": "2014-11-20T18:17:58.177", "LastActivityDate": "2014-11-20T18:17:58.177"}, "bq_ids": {"n4140": {"so_27045136_27046690_3": {"section_id": 480, "quality": 1.0, "length": 35}, "so_27045136_27046690_0": {"section_id": 480, "quality": 0.9333333333333333, "length": 14}, "so_27045136_27046690_1": {"section_id": 480, "quality": 1.0, "length": 35}}, "n3337": {"so_27045136_27046690_3": {"section_id": 471, "quality": 1.0, "length": 35}, "so_27045136_27046690_0": {"section_id": 471, "quality": 0.9333333333333333, "length": 14}, "so_27045136_27046690_1": {"section_id": 471, "quality": 1.0, "length": 35}}, "n4659": {"so_27045136_27046690_3": {"section_id": 502, "quality": 0.8857142857142857, "length": 31}, "so_27045136_27046690_0": {"section_id": 502, "quality": 0.9333333333333333, "length": 14}, "so_27045136_27046690_1": {"section_id": 502, "quality": 0.8857142857142857, "length": 31}}}});