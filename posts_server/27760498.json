post_cb({"38396441": {"ParentId": "27760498", "CommentCount": "0", "Body": "<p>The question should be asked: Are you attempting to write code that is absolutely positively not compiler specific or are you ok with writing some code knowing that it will require some specific compiler or compiler family?</p>\n<p>The standard is there to tell you how to do the former.</p>\n<p>While it is a good rule of thumb to write code to work on all compilers (at least on those compilers that follow the standard well enough) sometimes this will mean that you'll be reimplementing some things that are already implemented by the implementation of the specific compiler/library.</p>\n", "OwnerUserId": "2893496", "PostTypeId": "2", "Id": "38396441", "Score": "0", "CreationDate": "2016-07-15T12:43:10.713", "LastActivityDate": "2016-07-15T12:43:10.713"}, "27760498": {"CommentCount": "1", "ViewCount": "517", "PostTypeId": "1", "LastEditorUserId": "420683", "CreationDate": "2015-01-03T23:03:14.933", "LastActivityDate": "2016-07-15T12:43:10.713", "Title": "std::generic_category() is useless?", "FavoriteCount": "3", "LastEditDate": "2015-01-03T23:33:10.170", "Id": "27760498", "Score": "7", "Body": "<p>A quote from C++11 standard:</p>\n<blockquote>\n<p id=\"so_27760498_27760498_0\">19.5.1.5 Error category objects [syserr.errcat.objects]</p>\n<pre><code> const error_category&amp; system_category() noexcept;\n</code></pre>\n<p id=\"so_27760498_27760498_1\">4 <em>Remarks</em>: The object\u2019s <code>equivalent</code> virtual functions shall behave as\n  specified for class <code>error_category</code>. The object\u2019s <code>name</code> virtual\n  function shall return a pointer to the string <code>\"system\"</code>. The object\u2019s\n  <code>default_error_condition</code> virtual function shall behave as follows:</p>\n<p id=\"so_27760498_27760498_2\">If the argument <code>ev</code> corresponds to a POSIX <code>errno</code> value <code>posv</code>, the\n  function shall return <code>error_condition(posv, generic_category())</code>.\n  <strong>Otherwise, the function shall return <code>error_condition(ev, system_category())</code>. \n  What constitutes correspondence for any given\n  operating system is unspecified.</strong> [ <em>Note</em>: The number of potential\n  system error codes is large and unbounded, and some may not correspond\n  to any POSIX errno value. Thus implementations are given latitude in\n  determining correspondence. \u2014<em>end note</em> ]</p>\n</blockquote>\n<p>In other words the code below on some OSes may not work because the <code>system_category().default_error_condition()</code> did not do the proper mapping to <code>generic_category()</code> condition (which is fully allowed by the standard):</p>\n<pre><code>try\n{\n    // do some file IO\n}\ncatch(const std::system_error&amp; e)\n{\n    if(e.code() == std::errc::permission_denied) //...\n}\n</code></pre>\n<p>The only solution would be to implement your own custom replacement for <code>generic_category()</code> with mapping for all the OS codes you require (for all the OSes you need).</p>\n<pre><code>enum my_errc { /*...*/, access_denied };\nclass my_generic_category : public std::error_category\n{\n    virtual bool equivalent(const error_code&amp; code, int condition) const noexcept\n    {\n#ifdef _WIN32\n        if(code == std::error_code(ERROR_ACCESS_DENIED, std::system_category())\n            return condition == my_errc::access_denied;\n#elseif SOME_OTHER_OS // ...\n    }\n// ...\n</code></pre>\n<p>And then use your own category instead of <code>generic_category</code>:</p>\n<pre><code>catch(const std::system_error&amp; e)\n{\n    if(e.code() == my_errc::access_denied) //...\n}\n</code></pre>\n<p>So what's the point in having <code>std::generic_category()</code> at all then?</p>\n", "Tags": "<c++><c++11>", "OwnerUserId": "1997715", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_27760498_27760498_2": {"section_id": 2596, "quality": 0.9111111111111111, "length": 41}, "so_27760498_27760498_1": {"section_id": 2596, "quality": 0.8461538461538461, "length": 22}}, "n3337": {"so_27760498_27760498_2": {"section_id": 2559, "quality": 0.9111111111111111, "length": 41}, "so_27760498_27760498_1": {"section_id": 2559, "quality": 0.8461538461538461, "length": 22}}, "n4659": {"so_27760498_27760498_2": {"section_id": 3334, "quality": 0.9111111111111111, "length": 41}, "so_27760498_27760498_1": {"section_id": 3334, "quality": 0.8461538461538461, "length": 22}}}});