post_cb({"10166328": {"CommentCount": "5", "ViewCount": "1627", "ClosedDate": "2015-01-10T06:34:53.830", "CreationDate": "2012-04-15T21:36:51.753", "LastActivityDate": "2012-04-15T21:59:48.680", "Title": "Overloading type cast operator, to cast to a pointer to function", "PostTypeId": "1", "Id": "10166328", "Score": "3", "Body": "<p>I'm having some difficulty, overloading the cast to pointer to function operator of a class. In code, what I want is this:</p>\n<pre><code>typedef int(*funcptrtype)(int);\n\nstruct castable {\n   operator funcptrtype() {return NULL;}\n};\n</code></pre>\n<p>but I want to be able to do it without using the <code>typedef</code>. If you're curious, I need this, because pre-c++11 template aliases aren't available (so the <code>typedef</code> trick is not an option in templated contexts...)</p>\n<p>I would normally expect this to work:</p>\n<pre><code>operator int(*)(int)() {return NULL;}\n</code></pre>\n<p>But it doesn't. The compiler (g++ 4.6.1) says:</p>\n<pre><code>error: \u2018&lt;invalid operator&gt;\u2019 declared as function returning a function\n</code></pre>\n<p>This works:</p>\n<pre><code>int (* operator()())(int){return 0;}\n</code></pre>\n<p>But you're actually overloading the <code>operator()</code> to return a function pointer :)</p>\n<p>The standard says:</p>\n<blockquote>\n<p id=\"so_10166328_10166328_0\">The conversion-type-id shall not represent a function type nor an\n  array type</p>\n</blockquote>\n<p>But it doesn't say function pointer type (The first code snipplet works anyway...).</p>\n<p>Does anyone know the right syntax w/o <code>typedef</code>?</p>\n", "Tags": "<c++><casting><function-pointers>", "OwnerUserId": "1103705", "AnswerCount": "1"}, "10166518": {"ParentId": "10166328", "CommentCount": "1", "Body": "<p>The grammar doesn't allow this: the type in a conversion operator declaration is a <em>type-specifier</em>, not a <em>type-id</em>. You have to use a typedef or alias; in a template context, use the usual replacement:</p>\n<pre><code>template&lt;typename T&gt;\nstruct something {\n  typedef T (*type)(int);\n};\n</code></pre>\n", "OwnerUserId": "178761", "PostTypeId": "2", "Id": "10166518", "Score": "3", "CreationDate": "2012-04-15T21:59:48.680", "LastActivityDate": "2012-04-15T21:59:48.680"}, "bq_ids": {"n4140": {"so_10166328_10166328_0": {"section_id": 393, "quality": 0.875, "length": 7}}, "n3337": {"so_10166328_10166328_0": {"section_id": 384, "quality": 0.875, "length": 7}}, "n4659": {"so_10166328_10166328_0": {"section_id": 410, "quality": 0.875, "length": 7}}}});