post_cb({"29237475": {"ParentId": "29222319", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-03-24T16:04:55.580", "Score": "2", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:06:27.337", "Id": "29237475", "OwnerUserId": "1708801", "Body": "<p>The reason why:</p>\n<pre><code>Test&lt;10,0&gt; test1 ;\n</code></pre>\n<p>fails is because you have <a href=\"http://en.wikipedia.org/wiki/Undefined_behavior\" rel=\"nofollow noreferrer\">undefined behavior</a> due to division by zero. This is covered in the draft C++ standard section <code>5.6</code> <em>[expr.mul]</em> which says:</p>\n<blockquote>\n<p id=\"so_29222319_29237475_0\">If the second operand of / or % is zero the behavior is undefined</p>\n</blockquote>\n<p>and <a href=\"https://stackoverflow.com/q/21319413/1708801\">constant expressions specifically exclude undefined behavior</a>.  I am not sure what version of <code>clang</code> you are using but the versions I have available online do provide a divide by zero warning (<em><a href=\"http://melpon.org/wandbox/permlink/b72iwZPheg7mxicv\" rel=\"nofollow noreferrer\">see it live</a></em>):</p>\n<pre><code>note: division by zero\nstatic constexpr double c = a / b;\n                              ^\n</code></pre>\n", "LastActivityDate": "2015-04-06T12:03:33.797"}, "29231278": {"ParentId": "29222319", "CommentCount": "1", "CreationDate": "2015-03-24T11:21:50.120", "OwnerUserId": "4705267", "PostTypeId": "2", "Id": "29231278", "Score": "1", "Body": "<p>Solved. One of the template instance had <code>b=0</code>.\nSomehow, Clang didn't warn me I was dividing by zero.\nAnd <code>+Inf</code> is not a constant expression.</p>\n", "LastActivityDate": "2015-03-24T11:21:50.120"}, "bq_ids": {"n4140": {"so_29222319_29237475_0": {"section_id": 6106, "quality": 0.8, "length": 4}}, "n3337": {"so_29222319_29237475_0": {"section_id": 5872, "quality": 0.8, "length": 4}}, "n4659": {"so_29222319_29237475_0": {"section_id": 7603, "quality": 0.8, "length": 4}}}, "29222319": {"CommentCount": "6", "ViewCount": "286", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2015-03-23T23:27:44.687", "LastActivityDate": "2015-04-06T12:03:33.797", "Title": "Constexpr variable and division", "AcceptedAnswerId": "29237475", "LastEditDate": "2015-03-24T16:04:52.090", "Id": "29222319", "Score": "1", "Body": "<p>I'm trying to evaluate this simple expression at compile time using C++11 new constexpr feature:</p>\n<pre><code>template &lt;int a, int b&gt;\nclass Test\n{\n   static constexpr double c = a / b;\n};\n</code></pre>\n<p>But here's what Clang keeps telling me:</p>\n<pre><code>Constexpr variable 'c' must be initialized by a constant expression\n</code></pre>\n<p>The weird thing is that the following compiles well:</p>\n<pre><code>template &lt;int a, int b&gt;\nclass Test\n{\n   static constexpr double c = a / 2.f;\n};\n</code></pre>\n<p>Do you guys have any idea on why a/b is not a constant expression, and how could I evaluate this at compile time?</p>\n<p>Using Clang compiler with -std=c++1y and -stdlib=libc++</p>\n<p><b>Update</b></p>\n<p>The following example causes the error with the original code:</p>\n<pre><code>Test&lt;10,0&gt; test1 ;\n</code></pre>\n<p>while:</p>\n<pre><code>Test&lt;10,1&gt; test1 ;\n</code></pre>\n<p>does not.</p>\n", "Tags": "<c++><templates><c++11><constexpr>", "OwnerUserId": "4705267", "AnswerCount": "2"}});