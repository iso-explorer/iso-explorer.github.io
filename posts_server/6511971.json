post_cb({"bq_ids": {"n4140": {"so_6511971_6512058_3": {"length": 4, "quality": 1.0, "section_id": 3286}, "so_6511971_6512058_1": {"length": 4, "quality": 1.0, "section_id": 3287}, "so_6511971_6512058_0": {"length": 7, "quality": 1.0, "section_id": 3290}, "so_6511971_6512058_2": {"length": 4, "quality": 1.0, "section_id": 3285}}, "n3337": {"so_6511971_6512058_3": {"length": 4, "quality": 1.0, "section_id": 3156}, "so_6511971_6512058_1": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_6511971_6512058_0": {"length": 7, "quality": 1.0, "section_id": 3160}, "so_6511971_6512058_2": {"length": 4, "quality": 1.0, "section_id": 3155}}, "n4659": {"so_6511971_6512058_0": {"length": 7, "quality": 1.0, "section_id": 4052}}}, "6511997": {"Id": "6511997", "PostTypeId": "2", "Body": "<p>Basically, this is a (relatively) simple WTF in the language, where primitive types will not be initialized by default. The first syntax explicitly initializes them- the second doesn't. User-defined types will always be initialized, so it's only meaningful if you don't initialize it in the constructor, and it will be an error if you don't call the init functions of UDTs that need them.</p>\n<p>UDTs that do not do anything insane should not require the first syntax and it's normal to use the second.</p>\n", "LastActivityDate": "2011-06-28T19:23:10.110", "CommentCount": "1", "CreationDate": "2011-06-28T19:23:10.110", "ParentId": "6511971", "Score": "-1", "OwnerUserId": "298661"}, "6512058": {"Id": "6512058", "PostTypeId": "2", "Body": "<p>In the first, you <em>copy-initialize</em> <code>a</code> from a <em>value-initialized</em> instance of <code>MyClass</code>. From the C++03 standard, \u00a78.5/7:</p>\n<blockquote>\n<p id=\"so_6511971_6512058_0\">An object whose initializer is an empty set of parentheses, i.e., (), shall be value-initialized.</p>\n</blockquote>\n<p>And from \u00a78.5/5:</p>\n<blockquote>\n<p id=\"so_6511971_6512058_1\">To <em>value-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li>if <code>T</code> is a class type with a user-declared constructor, then the default constructor for <code>T</code> is called (and the initialization is ill-formed if <code>T</code> has no accessible default constructor);</li>\n<li><strong>if <code>T</code> is a non-union class type without a user-declared constructor, then every non-static data member and base-class component of <code>T</code> is value-initialized;</strong></li>\n<li>if <code>T</code> is an array type, then each element is value-initialized;</li>\n<li><strong>otherwise, the object is zero-initialized</strong></li>\n</ul>\n<p id=\"so_6511971_6512058_2\">To <em>zero-initialize</em> an object of type <code>T</code> means:</p>\n<ul>\n<li><strong>if <code>T</code> is a scalar type, the object is set to the value of <code>0</code> (zero) converted to <code>T</code>;</strong></li>\n<li>if <code>T</code> is a non-union class type, each nonstatic data member and each base-class subobject is zero-initialized;</li>\n<li>if <code>T</code> is a union type, the object\u2019s first named data member) is zero-initialized;</li>\n<li>if <code>T</code> is an array type, each element is zero-initialized;</li>\n<li>if <code>T</code> is a reference type, no initialization is performed.</li>\n</ul>\n</blockquote>\n<p>In the second, you declare <code>b</code> in a manner that would cause it to be <em>default-initialize</em>d if <code>MyClass</code> were not a POD type -- \u00a78.5/5:</p>\n<blockquote>\n<p id=\"so_6511971_6512058_3\">To <em>default-initialize</em> an object of type T means:</p>\n<ul>\n<li><strong>if <code>T</code> is a non-POD class type, the default constructor for <code>T</code> is called</strong> (and the initialization is ill-formed if <code>T</code> has no accessible default constructor);</li>\n<li>if <code>T</code> is an array type, each element is default-initialized;</li>\n<li>otherwise, the object is zero-initialized.</li>\n</ul>\n</blockquote>\n<p>However, because <code>MyClass</code> is a POD type, <code>b</code> is uninitialized -- \u00a78.5/9:</p>\n<blockquote>\n<p id=\"so_6511971_6512058_4\">If no initializer is specified for an object, and the object is of (possibly cv-qualified) non-POD class type (or array thereof), the object shall be default-initialized; if the object is of const-qualified type, the underlying class type shall have a user-declared default constructor. <strong>Otherwise, if no initializer is specified for a non-static object, the object and its subobjects, if any, have an indeterminate initial value</strong>; if the object or any of its subobjects are of const-qualified type, the program is ill-formed.</p>\n</blockquote>\n", "LastEditorUserId": "636019", "LastActivityDate": "2011-06-28T19:36:55.387", "Score": "7", "CreationDate": "2011-06-28T19:29:14.383", "ParentId": "6511971", "CommentCount": "1", "OwnerUserId": "636019", "LastEditDate": "2011-06-28T19:36:55.387"}, "6511971": {"ViewCount": "565", "Body": "<blockquote>\n<p id=\"so_6511971_6511971_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/1613341/what-do-the-following-phrases-mean-in-c-zero-default-and-value-initializati\">What do the following phrases mean in C++: zero-, default- and value-initialization?</a> </br></p>\n</blockquote>\n<p>I am confused about an issue in C++.</p>\n<p>When creating an object on the stack using the default constructor, I thought either one of the following two syntax notations would give the same result:</p>\n<pre><code>class MyClass { public: int i; }\nint main()\n{\n  MyClass a = MyClass();\n  MyClass b;\n}\n</code></pre>\n<p>However, the first syntax initializes the field to zero, whereas the second one leaves the field uninitialized. So my questions are:</p>\n<ol>\n<li>Why is this so? I thought fields in C++ were not supposed to be automatically initialized.</li>\n<li>Is there any other differences between the two syntaxes?</li>\n<li>Do these syntax variations have separate names to distinguish them from each other?</li>\n</ol>\n<p>I\u2019m currently using Microsoft Visual C++ 2010 Express.\nThanks!</p>\n", "Title": "Stack object creation in C++ - Alternative syntax", "CreationDate": "2011-06-28T19:20:50.777", "LastActivityDate": "2011-06-28T19:36:55.387", "CommentCount": "3", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2017-05-23T12:15:29.337", "Tags": "<c++><object><syntax><stack><creation>", "Id": "6511971", "LastEditorUserId": "-1", "Score": "4", "OwnerUserId": "819817", "ClosedDate": "2011-06-28T19:34:03.153", "AnswerCount": "2"}});