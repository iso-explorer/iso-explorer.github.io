post_cb({"12807354": {"Id": "12807354", "PostTypeId": "2", "Body": "<pre><code>(expression)std: (end of expression); (another expression)string x = y;\n</code></pre>\n", "LastEditorUserId": "250259", "LastActivityDate": "2012-10-09T19:52:03.883", "Score": "8", "CreationDate": "2012-10-09T19:47:06.923", "ParentId": "12807115", "CommentCount": "2", "OwnerUserId": "1712869", "LastEditDate": "2012-10-09T19:52:03.883"}, "21796562": {"Id": "21796562", "PostTypeId": "2", "Body": "<p>The compiler tells you what is going on:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\n  std:;cout &lt;&lt; \"Hello!\" &lt;&lt; std::endl;\n}\n</code></pre>\n<p>Both gcc and clang give a pretty clear warning:</p>\n<pre><code>std.cpp:4:3: warning: unused label 'std' [-Wunused-label]\n  std:;cout &lt;&lt; \"Hello!\" &lt;&lt; std::endl;\n  ^~~~\n1 warning generated.\n</code></pre>\n<p><strong>The take away from this story: always compile your code with warnings enabled</strong> (e.g. <code>-Wall</code>).</p>\n", "LastActivityDate": "2014-02-15T10:57:14.800", "CommentCount": "0", "CreationDate": "2014-02-15T10:57:14.800", "ParentId": "12807115", "Score": "0", "OwnerUserId": "341970"}, "12807229": {"Id": "12807229", "PostTypeId": "2", "Body": "<p>Its a label which is followed by the string</p>\n", "LastActivityDate": "2012-10-09T19:38:40.530", "CommentCount": "0", "CreationDate": "2012-10-09T19:38:40.530", "ParentId": "12807115", "Score": "11", "OwnerUserId": "1501794"}, "12807149": {"Id": "12807149", "PostTypeId": "2", "Body": "<p>It's a label, followed by an empty statement, followed by the declaration of a string <code>x</code>.</p>\n", "LastActivityDate": "2012-10-09T19:34:28.523", "CommentCount": "0", "CreationDate": "2012-10-09T19:34:28.523", "ParentId": "12807115", "Score": "31", "OwnerUserId": "10077"}, "bq_ids": {"n4140": {"so_12807115_12807141_0": {"length": 9, "quality": 1.0, "section_id": 3878}}, "n3337": {"so_12807115_12807141_0": {"length": 9, "quality": 1.0, "section_id": 3738}}, "n4659": {"so_12807115_12807141_0": {"length": 9, "quality": 1.0, "section_id": 4767}}}, "12807141": {"Id": "12807141", "PostTypeId": "2", "Body": "<p><code>std:</code> its a label, usable as a target for <code>goto</code>.</p>\n<p>As pointed by <em>@Adam Rosenfield</em> in a comment, it is a legal label name.</p>\n<p><em>C++03 \u00a76.1/1:</em></p>\n<blockquote>\n<p id=\"so_12807115_12807141_0\">Labels have their own name space and do not interfere with other identifiers.</p>\n</blockquote>\n", "LastEditorUserId": "927034", "LastActivityDate": "2012-10-09T19:41:30.057", "Score": "89", "CreationDate": "2012-10-09T19:34:00.413", "ParentId": "12807115", "CommentCount": "7", "OwnerUserId": "927034", "LastEditDate": "2012-10-09T19:41:30.057"}, "12807115": {"ViewCount": "2193", "Body": "<p>I was recently modifying some code, and found a pre-existing bug on one line within a function:</p>\n<pre><code>std:;string x = y;\n</code></pre>\n<p>This code still compiles and has been working as expected.</p>\n<p>The string definition works because this file is <code>using namespace std;</code>, so the <code>std::</code> was unnecessary in the first place.</p>\n<p>The question is, why is <code>std:;</code> compiling and what, if anything, is it doing?</p>\n", "AcceptedAnswerId": "12807141", "Title": "What would 'std:;' do in c++?", "CreationDate": "2012-10-09T19:32:27.717", "Id": "12807115", "CommentCount": "5", "FavoriteCount": "6", "PostTypeId": "1", "LastEditDate": "2012-10-09T19:37:13.113", "LastEditorUserId": "500104", "LastActivityDate": "2014-02-15T10:57:14.800", "Score": "89", "OwnerUserId": "1410910", "Tags": "<c++><std><colon>", "AnswerCount": "5"}});