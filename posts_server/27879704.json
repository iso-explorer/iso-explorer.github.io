post_cb({"27880106": {"ParentId": "27879704", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>GCC's behavior is a bug, and it's <a href=\"http://melpon.org/wandbox/permlink/tH9lAUIVKzI86cGU\" rel=\"nofollow noreferrer\">been fixed on trunk</a>. Clang is correct. This is a messy case because you have mixed value categories for the second and third operands of the conditional operator:</p>\n<ul>\n<li><code>std::move(std::stringstream(\"\"))</code> is an xvalue<sup>*</sup> of type <code>std::stringstream</code>;</li>\n<li><code>std::cin</code> is an lvalue of type <code>std::istream</code>.</li>\n</ul>\n<p>The relevant standard quote (\u00a75.16 [expr.cond]/p3-6) can be found in <a href=\"https://stackoverflow.com/a/24706610/2756719\">this answer</a>. It's long enough that I don't really want to copy it over. I'll just outline how it is applied to this code:</p>\n<ul>\n<li>Obviously <code>std::istream</code> cannot be converted to match <code>std::stringstream</code> in any way regardless of value category;</li>\n<li>An xvalue of type <code>std::stringstream</code> cannot be converted to type \"lvalue reference to <code>std::istream</code>\" given the constraint that the reference must bind directly to an lvalue - there's no lvalue here for the reference to bind to;</li>\n<li><code>std::istream</code> is a base class of <code>std::stringstream</code>, so per the 3rd bullet of p3,  the xvalue of type <code>std::stringstream</code> can and will be converted to a prvalue temporary of type <code>std::istream</code> by copy-initialization, which replaces the original operand for further analysis.</li>\n<li>Now the second operand is a prvalue of type <code>std::istream</code>, the third operand is an lvalue of type <code>std::istream</code>, they have different value categories so p4 doesn't apply.</li>\n<li>Hence the result is a prvalue per p5. Since they have the same type, overload resolution specified in p5 is not performed, and you proceed to p6.</li>\n<li><p>The applicable bullet in p6 is</p>\n<blockquote>\n<p id=\"so_27879704_27880106_0\">The second and third operands have the same type; the result is of\n  that type. If the operands have class type, the result is a prvalue\n  temporary of the result type, which is copy-initialized from either\n  the second operand or the third operand depending on the value of the\n  first operand.</p>\n</blockquote>\n<p>so it copy-initializes the result (which is a prvalue temporary) from either the converted first operand, or the second operand (<code>std::cin</code>).</p></li>\n</ul>\n<p>Hence the errors:</p>\n<ul>\n<li>Copy-initializing the prvalue <code>std::istream</code> result from an lvalue (<code>std::cin</code>) would use the copy constructor, and streams cannot be copied.</li>\n<li>Copy-initializing the prvalue temporary <code>std::istream</code> for the second operand from a <code>std::stringstream</code> xvalue is a move, but <code>std::istream</code>'s move constructor is protected.</li>\n</ul>\n<hr>\n<p><sub><sup>*</sup> For terminology (lvalue, xvalue, prvalue, etc.), see <a href=\"https://stackoverflow.com/questions/3601602/what-are-rvalues-lvalues-xvalues-glvalues-and-prvalues\">What are rvalues, lvalues, xvalues, glvalues, and prvalues?</a></sub></p>\n</hr>", "OwnerUserId": "2756719", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:59:41.527", "Id": "27880106", "Score": "6", "CreationDate": "2015-01-10T19:06:32.920", "LastActivityDate": "2015-01-10T19:12:41.447"}, "27879704": {"CommentCount": "2", "AcceptedAnswerId": "27880106", "PostTypeId": "1", "LastEditorUserId": "1392132", "CreationDate": "2015-01-10T18:29:20.977", "LastActivityDate": "2015-01-10T19:12:41.447", "LastEditDate": "2015-01-10T19:05:11.513", "ViewCount": "478", "FavoriteCount": "5", "Title": "Initializing lvalue reference with rvalue", "Id": "27879704", "Score": "10", "Body": "<p>I built this code with gcc/clang and got different results:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n\nint main() {\n    std::istream&amp; is = 1 ? std::move(std::stringstream(\"\")) : std::cin;\n}\n</code></pre>\n<ul>\n<li>Why gcc allows initializing lvalue reference with rvalue (<code>std::stringstream(\"\")</code>)?</li>\n<li>Why clang tries to call copy constructor?</li>\n</ul>\n<h2>gcc 4.9.1</h2>\n<p>No error</p>\n<h2>clang 3.4</h2>\n<pre class=\"lang-none prettyprint-override\"><code>prog.cc:5:63: error: call to implicitly-deleted copy constructor of 'istream' (aka 'basic_istream&lt;char&gt;')\n    std::istream&amp; is = 1 ? std::move(std::stringstream(\"\")) : std::cin;\n                                                             ^~~~~~~~\n/usr/local/libcxx-3.4/include/c++/v1/istream:185:5: note: copy constructor is implicitly deleted because 'basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;' has a user-declared move constructor\n   basic_istream(basic_istream&amp;&amp; __rhs);\n   ^\nprog.cc:5:28: error: calling a protected constructor of class 'std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;'\n   std::istream&amp; is = 1 ? std::move(std::stringstream(\"\")) : std::cin;\n                          ^\n/usr/local/libcxx-3.4/include/c++/v1/istream:185:5: note: declared protected here\n   basic_istream(basic_istream&amp;&amp; __rhs);\n   ^\nprog.cc:5:28: error: calling a protected constructor of class 'std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt; &gt;'\n   std::istream&amp; is = 1 ? std::move(std::stringstream(\"\")) : std::cin;\n                          ^\n/usr/local/libcxx-3.4/include/c++/v1/istream:185:5: note: declared protected here\n   basic_istream(basic_istream&amp;&amp; __rhs);\n   ^\n</code></pre>\n", "Tags": "<c++><c++11><gcc><clang>", "OwnerUserId": "1205869", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_27879704_27880106_0": {"section_id": 6172, "quality": 0.9642857142857143, "length": 27}}, "n3337": {"so_27879704_27880106_0": {"section_id": 5933, "quality": 0.9642857142857143, "length": 27}}, "n4659": {"so_27879704_27880106_0": {"section_id": 7667, "quality": 0.5357142857142857, "length": 15}}}});