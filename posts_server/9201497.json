post_cb({"9201497": {"ViewCount": "3463", "Body": "<p>I'm trying to overload the operator % because you can't use modulus on double types,</p>\n<pre><code>float a = 5.0; \nfloat b = 5.0;\na  = a % b;\n// not allowed\n</code></pre>\n<p>I Was trying to overload the operator % with this kind of function : </p>\n<pre><code>template &lt;&gt;\nMyClass*                MyClass&lt;float&gt;::operator%(Myclass &amp;other)\n</code></pre>\n<p>For other operation non involving float I use :</p>\n<pre><code>template &lt;class T&gt;\nMyClass*                MyClass&lt;T&gt;::operator%(MyClass &amp;other)\n</code></pre>\n<p>It never compiled actually I'm stuck and can't find a way to bypass this problem,\ng++ is still warning me that you can't perform modulo on floats, is something wrong \nwith my template syntax or is it really impossible. </p>\n", "AcceptedAnswerId": "9201526", "Title": "Overloading operator% for floating types", "CreationDate": "2012-02-08T21:12:43.423", "Id": "9201497", "CommentCount": "3", "LastEditDate": "2012-02-08T21:56:34.160", "PostTypeId": "1", "LastEditorUserId": "105672", "LastActivityDate": "2012-02-08T21:56:34.160", "Score": "2", "OwnerUserId": "646482", "Tags": "<c++><templates><g++>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_9201497_9201526_0": {"length": 19, "quality": 0.95, "section_id": 653}}, "n3337": {"so_9201497_9201526_0": {"length": 20, "quality": 1.0, "section_id": 643}}, "n4659": {"so_9201497_9201526_0": {"length": 19, "quality": 0.95, "section_id": 681}}}, "9201526": {"Id": "9201526", "PostTypeId": "2", "Body": "<p>You can't overload operators for primitive types the way you'd want it to work.</p>\n<p>For C++11 draft n3290, \u00a713.5 <em>Operator Overloads</em>, point 6:</p>\n<blockquote>\n<p id=\"so_9201497_9201526_0\">An operator function shall either be a non-static member function or be a non-member function and have at least one parameter whose type is a class, a reference to a class, an enumeration, or a reference to an enumeration. [...]</p>\n</blockquote>\n<p>Primitive types aren't classes (or enums), so they can't have member functions. And you can't create a global <code>float operator%(float&amp;,float&amp;)</code> since that doesn't involve a class or enum in the parameter list. (See also <a href=\"http://www.parashift.com/c++-faq-lite/intrinsic-types.html#faq-26.10\" rel=\"nofollow\">C++FAQ 26.10 \"Can I define an operator overload that works with built-in / intrinsic / primitive types?\"</a>.)<br>\nYou need at least one of the terms in the <code>%</code> expression to be a user-defined type.</br></p>\n<p>You could create a class <code>Float</code> and define whatever operations you want on it, but you cannot get <code>a = a % b;</code> to use your function if both <code>a</code> and <code>b</code> are <code>float</code>s.</p>\n<p>Or you could <code>#include &lt;cmath&gt;</code> and use <code>std::fmod</code>:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nint main()\n{\n    float a = 13.0f;\n    float b = 5.0f;\n    a  = std::fmod(a, b);\n    std::cout &lt;&lt; a &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>Simple example with a custom \"float wrapper\" (incomplete, probably not quite safe as-is, but can get you started):</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nclass Float {\n\u00a0 \u00a0 private:\n\u00a0 \u00a0 \u00a0 \u00a0 float val;\n\u00a0 \u00a0 public:\n\u00a0 \u00a0 \u00a0 \u00a0 Float(float f): val(f) {};\n\n\u00a0 \u00a0 \u00a0 \u00a0 Float operator%(Float const&amp; other) const {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return std::fmod(val, other.val);\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 Float operator%(float const&amp; other) const {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return std::fmod(val, other);\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 // conversion operator could be handy\n\u00a0 \u00a0 \u00a0 \u00a0 operator float() { return val; }\n};\n\nint main()\n{\n\u00a0 \u00a0 Float a = 13.0f;\n\u00a0 \u00a0 Float b = 5.0f;\n\u00a0 \u00a0 Float c \u00a0= a % b;\n\u00a0 \u00a0 std::cout &lt;&lt; c &lt;&lt; std::endl;\n    // this also works\n\u00a0 \u00a0 Float d = 13.0f;\n\u00a0 \u00a0 float e = 5.0f;\n\u00a0 \u00a0 float f \u00a0= d % e;\n\u00a0 \u00a0 std::cout &lt;&lt; f &lt;&lt; std::endl;\n\u00a0 \u00a0 return 0;\n}\n</code></pre>\n", "LastEditorUserId": "635608", "LastActivityDate": "2012-02-08T21:52:15.973", "Score": "5", "CreationDate": "2012-02-08T21:15:10.693", "ParentId": "9201497", "CommentCount": "4", "LastEditDate": "2012-02-08T21:52:15.973", "OwnerUserId": "635608"}});