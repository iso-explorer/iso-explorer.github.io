post_cb({"46743721": {"ParentId": "46688604", "LastEditDate": "2017-10-14T18:23:46.250", "CommentCount": "0", "CreationDate": "2017-10-14T10:56:21.547", "Score": "3", "LastEditorUserId": "4573247", "PostTypeId": "2", "Id": "46743721", "OwnerUserId": "4573247", "Body": "<p>No, not entirely.</p>\n<p>I would say this is a current limitation/bug in MSVC2017 that is possibly worth filing a bug report for, even if the attribute is recognised also in the enumerator case (and doesn't prompt a C5030 warning; as mentioned by Mark in the comments to you question).</p>\n<p>Addendum: which has now been verified (as a previously known bug) by a link supplied by Hans Passant:</p>\n<ul>\n<li><a href=\"https://developercommunity.visualstudio.com/content/problem/47483/visual-c-no-warning-on-temporary-and-unused-deprec.html\" rel=\"nofollow noreferrer\">Visual C++: No warning on temporary and unused <code>[[deprecated]]</code> variables</a></li>\n</ul>\n<hr>\n<p>The C++17 (working draft) standard, <a href=\"https://timsong-cpp.github.io/cppwp/dcl.attr.deprecated\" rel=\"nofollow noreferrer\">[decl.attr.deprecated]</a>, states:</p>\n<blockquote>\n<p id=\"so_46688604_46743721_0\">\u00a71 The attribute-token <code>deprecated</code> can be used to mark names and\n  entities whose use is still allowed, but is discouraged for some\n  reason. </p>\n<p id=\"so_46688604_46743721_1\">\u00a73 The attribute may be applied to the declaration of a class, a\n  typedef-name, a variable, a non-static data member, a function, a\n  namespace, an enumeration, <strong>an enumerator</strong>, or a template\n  specialization. ...</p>\n</blockquote>\n<p>Using the <code>/std:c++17</code> flag when compiling with MSVC2017, the <code>deprecated</code> attribute works for all the above but the enumerator:</p>\n<pre><code>// a class\nclass [[deprecated]] MyClass {};\n\n// a typedef-name / type alias\n[[deprecated]] typedef int MyInt;\nusing MyFloat [[deprecated]] = float;\n\n// a variable (see main)\n\n// a non-static data member\nstruct DataMember\n{\n    int b [[deprecated]];\n};\n\n// a function\n[[deprecated]]\nvoid myFunction() {}\n\n// a namespace\nnamespace [[deprecated]] my_namespace\n{\n    typedef double MyDouble;\n}\n\n// an enumeration\nenum [[deprecated]] MyEnum {};\n\n// an enumeration\nenum MyNewEnum\n{\n    val[[deprecated]] = 42\n};\n\n// a template specialization\ntemplate &lt;typename T&gt;\nvoid myTemplateFunction(const T) {} \n\ntemplate&lt;&gt;\n[[deprecated]]\nvoid myTemplateFunction&lt;int&gt;(const int) {}\n\nint main()\n{\n    MyClass m; // warning C4996: 'MyClass': was declared deprecated\n    MyInt i;   // warning C4996: 'MyInt': was declared deprecated\n    MyFloat f; // warning C4996: 'MyInt': was declared deprecated\n    int j [[deprecated]];\n    j = 1;     // warning C4996: 'j': was declared deprecated\n    DataMember dm;\n    dm.b = 1;  // warning C4996: 'DataMember::b': was declared deprecated\n    myFunction();\n               // warning C4996: 'myFunction': was declared deprecated\n    my_namespace::MyDouble d; \n               // warning C4996: 'my_namespace': was declared deprecated\n    MyEnum e;  // warning C4996: 'MyEnum': was declared deprecated\n    myTemplateFunction(2);\n               // warning C4996: 'myTemplateFunction': was declared deprecated\n\n    MyNewEnum ne = val; // ... no warning\n\n    return 0;\n}\n</code></pre>\n<p>Both gcc and clang invokes deprecation warnings for <code>MyNewEnum ne = val;</code> above, for <code>-std=c++14</code> as well as <code>-std=c++1z</code>.</p>\n<p>On a related note, peculiarly <a href=\"http://en.cppreference.com/w/cpp/language/attributes\" rel=\"nofollow noreferrer\">cppreference's description of the <code>deprecated</code> attribute</a> seems not to have been updated with N4266, not including \"an enumerator\" and \"a namespace\" in the valid use case declarations; even though these are both present in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow noreferrer\">C++14 standard draft (7.6.5/2)</a>. This could possibly be an indicator that this is a rarely-used feature (applied to enumerators/namespaces) which could explain why it's been (partly) missed in MVCS. </p>\n<ul>\n<li><strong>Edit:</strong> added a note about this, and it has since been corrected.</li>\n</ul>\n<h3>Some ambiguity in the official MVSC documentation</h3>\n<p>Finally, the <a href=\"https://docs.microsoft.com/en-us/cpp/cpp/attributes2\" rel=\"nofollow noreferrer\">attributes section in the MSVC docs</a> doesn't really dwell any deeper into specifying for which kinds of declarations the <code>deprecated</code> attribute is allowed; showing only an example of deprecating a function declaration.</p>\n<p>Although, as you've pointed out (however via link to cppreference rather than MSVC's own docs), <a href=\"https://docs.microsoft.com/en-us/cpp/visual-cpp-language-conformance\" rel=\"nofollow noreferrer\">MSVS2015 does explicitly state conformance to N4266</a>, at least for C++17.</p>\n<blockquote>\n<h3>Compiler Features</h3>\n<p id=\"so_46688604_46743721_2\"><strong>C++17 Core Language Features</strong></p>\n<p id=\"so_46688604_46743721_3\">N4266 Attributes for namespaces and enumerators</p>\n<p id=\"so_46688604_46743721_4\">Supported: VS2015</p>\n</blockquote>\n<p>However, <a href=\"https://msdn.microsoft.com/en-us/library/hh567368.aspx\" rel=\"nofollow noreferrer\">Support For C++11/14/17 Features (Modern C++)</a> states the opposite (for VS2015):</p>\n<blockquote>\n<h3>Compiler Features</h3>\n<p id=\"so_46688604_46743721_5\"><strong>C++17 Proposed Core Language Features</strong></p>\n<p id=\"so_46688604_46743721_6\">N4266 Attributes for namespaces and enumerators</p>\n<p id=\"so_46688604_46743721_7\">Supported VS2013: No</p>\n<p id=\"so_46688604_46743721_8\">Supported VS2015: No</p>\n</blockquote>\n</hr>", "LastActivityDate": "2017-10-14T18:23:46.250"}, "46688604": {"CommentCount": "8", "ViewCount": "128", "PostTypeId": "1", "LastEditorUserId": "7130273", "CreationDate": "2017-10-11T12:48:30.133", "LastActivityDate": "2017-10-14T18:23:46.250", "Title": "Does Visual Studio 2017 fully support N4266 with the [[deprecated]] attribute?", "AcceptedAnswerId": "46743721", "LastEditDate": "2017-10-11T17:58:08.533", "Id": "46688604", "Score": "5", "Body": "<p>I'm currently investigating the new features of C++17. I stumbled upon the feature <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4266.html\" rel=\"nofollow noreferrer\">N4266</a>, which states that now enums and namespaces can also use attributes. Different sources say that Visual Studio 2017 already fully supports this feature. I wrote a test with the [[deprecated]] attribute. For namespaces, this works very well. However, no warning is generated for enums. Is there a mistake in my implementation? Did I miss something?</p>\n<pre><code>enum MyEnum\n{\n    val = 0,\n    vaal[[deprecated]] = val\n};\n\nvoid test()\n{\n    MyEnum e  = MyEnum::vaal; //Should emit Warning, but does not\n    MyEnum e2 = MyEnum::val;  //No Warning\n}\n</code></pre>\n<p>I am using Visual Studio Community 2017 Version 15.3.5. <a href=\"http://en.cppreference.com/w/cpp/compiler_support#cpp17\" rel=\"nofollow noreferrer\">This</a> states that it should be supported since VS2015 already. /std:c++17 is used.</p>\n<p><a href=\"http://www.bfilipek.com/2017/01/cpp17features.html#attributes-for-namespaces-and-enumerators\" rel=\"nofollow noreferrer\">And this</a> also says that this <em>should</em> be the correct syntax.</p>\n<p>There is no difference if I use enum or enum class.</p>\n", "Tags": "<c++><visual-studio><c++1z>", "OwnerUserId": "7130273", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_46688604_46743721_0": {"section_id": 5549, "quality": 0.9333333333333333, "length": 14}, "so_46688604_46743721_1": {"section_id": 5550, "quality": 0.8235294117647058, "length": 14}}, "n4659": {"so_46688604_46743721_0": {"section_id": 6980, "quality": 0.9333333333333333, "length": 14}, "so_46688604_46743721_1": {"section_id": 6981, "quality": 0.9411764705882353, "length": 16}}}});