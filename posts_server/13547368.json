post_cb({"13548517": {"ParentId": "13547368", "CommentCount": "3", "Body": "<p>I would argue as follows:</p>\n<blockquote>\n<p id=\"so_13547368_13548517_0\"><em>The value of a character literal is implementation-de\ufb01ned if it falls outside of the implementation-de\ufb01ned range de\ufb01ned for <code>char</code> (for literals with no pre\ufb01x)...</em> (From section 2.14.3.4)</p>\n</blockquote>\n<p>If <code>'\\u0B95'</code> falls outside of the implementation-de\ufb01ned range de\ufb01ned for <code>char</code> (which it would if <code>char</code> is 8 bits), it's value is then implementation defined, at which point GCC can make its value a sequence of multiple <code>c-char</code>s, thus becoming a multicharacter literal.</p>\n", "OwnerUserId": "1287251", "PostTypeId": "2", "Id": "13548517", "Score": "1", "CreationDate": "2012-11-25T05:16:04.347", "LastActivityDate": "2012-11-25T05:16:04.347"}, "24945116": {"ParentId": "13547368", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>You are correct, according to the spec <code>'\\u0B95'</code> is a char-typed character literal with a value equal to the character's encoding in the execution character set. And you're right that the spec doesn't say anything about the case where this is not possible for char literals due to a single char being unable to represent that value. The behavior is undefined.</p>\n<p>There are defect reports filed with the committee on this issue: E.g., <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#912\" rel=\"nofollow\">http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#912</a></p>\n<p>The currently proposed resolution seems to be to specify that these character literals are also <code>int</code>s and have implementation defined values (although the proposed language isn't quite right for that), just like multichar literals. I'm not a fan of that solution, and I think a better solution is to say such literals are ill-formed.</p>\n<p>This is what's implemented in clang: <a href=\"http://coliru.stacked-crooked.com/a/952ce7775dcf7472\" rel=\"nofollow\">http://coliru.stacked-crooked.com/a/952ce7775dcf7472</a></p>\n", "OwnerUserId": "365496", "LastEditorUserId": "365496", "LastEditDate": "2014-07-24T22:44:46.530", "Id": "24945116", "Score": "1", "CreationDate": "2014-07-24T22:33:17.313", "LastActivityDate": "2014-07-24T22:44:46.530"}, "24944544": {"ParentId": "13547368", "CommentCount": "0", "Body": "<p>Because you have no character encoding prefix gcc (and any other conformant compiler) will see <code>'\\u0B95'</code> and think 1) char type and 2) multicharacter because there is more than one char code in the string.</p>\n<ul>\n<li><code>u'\\u0B95'</code>       is a UTF16 character.</li>\n<li><code>u'\\u0B95\\u0B97'</code> is a multicharacter UTF16 character.</li>\n<li><code>U'\\ufacebeef'</code>   is a UTF32 character.</li>\n</ul>\n<p>etc.</p>\n", "OwnerUserId": "680359", "PostTypeId": "2", "Id": "24944544", "Score": "0", "CreationDate": "2014-07-24T21:45:51.347", "LastActivityDate": "2014-07-24T21:45:51.347"}, "13554733": {"ParentId": "13547368", "CommentCount": "3", "Body": "<p>Somebody posted an answer that correctly answered the second part of my question (what value will the <code>char</code> have?) but has since deleted their post. Since that part was correct, I'll reproduce it here together with my answer for the first part (is it a multicharacter literal?).</p>\n<hr>\n<p><code>'\\u0B95'</code> is not a multicharacter literal and gcc is mistaken here. As stated in the question, a multicharacter literal is defined by (\u00a72.14.3/1):</p>\n<blockquote>\n<p id=\"so_13547368_13554733_0\">An ordinary character literal that contains more than one <em>c-char</em> is a <em>multicharacter literal</em>.</p>\n</blockquote>\n<p>Since a <em>universal-character-name</em> is one expansion of a <em>c-char</em>, the literal <code>'\\u0B95'</code> contains only one <em>c-char</em>. It would make sense if ordinary literals could not contain a <em>universal-character-name</em> for <code>\\u0B95</code> to be considered as six seperate characters (<code>\\</code>, <code>u</code>, <code>0</code>, etc.) but I cannot find this restriction anywhere. Therefore, it is a single character and the literal is not a multicharacter literal.</p>\n<p>To further support this, why <em>would</em> it be considered to be multiple characters? At this point we haven't even given it an encoding so we don't know how many bytes it would take up. In UTF-16 it would take 2 bytes, in UTF-8 it would take 3 bytes and in some imagined encoding it could take just 1 byte.</p>\n<p>So what value will the character literal have? First the <em>universal-character-name</em> is mapped to the corresponding encoding in the execution character set, unless it has not mapping in which case it has implementation-defined encoding (\u00a72.14.3/5):</p>\n<blockquote>\n<p id=\"so_13547368_13554733_1\">A universal-character-name is translated to the encoding, in the appropriate execution character set, of the character named. If there is no such encoding, the universal-character-name is translated to an implementation-defined encoding.</p>\n</blockquote>\n<p>Either way, the <code>char</code> literal gets the value equal to the numerical value of the encoding (\u00a72.14.3/1):</p>\n<blockquote>\n<p id=\"so_13547368_13554733_2\">An ordinary character literal that contains a single <em>c-char</em> has type <code>char</code>, with value equal to the numerical value of the encoding of the c-char in the execution character set.</p>\n</blockquote>\n<p>Now the important part, inconveniently tucked away in a different paragraph further in the section. If the value can not be represented in the <code>char</code>, it gets an implementation-defined value (\u00a72.14.3/4):</p>\n<blockquote>\n<p id=\"so_13547368_13554733_3\">The value of a character literal is implementation-defined if it falls outside of the implementation-defined range defined for <code>char</code> (for literals with no prefix) ...</p>\n</blockquote>\n</hr>", "OwnerUserId": "150634", "PostTypeId": "2", "Id": "13554733", "Score": "1", "CreationDate": "2012-11-25T19:42:09.803", "LastActivityDate": "2012-11-25T19:42:09.803"}, "bq_ids": {"n4140": {"so_13547368_13547368_1": {"section_id": 5343, "quality": 1.0, "length": 17}, "so_13547368_13554733_1": {"section_id": 5347, "quality": 0.9375, "length": 15}, "so_13547368_13547368_2": {"section_id": 7210, "quality": 1.0, "length": 12}, "so_13547368_13554733_3": {"section_id": 5346, "quality": 0.8461538461538461, "length": 11}, "so_13547368_13547368_0": {"section_id": 5343, "quality": 1.0, "length": 10}, "so_13547368_13554733_2": {"section_id": 5343, "quality": 1.0, "length": 17}, "so_13547368_13554733_0": {"section_id": 5343, "quality": 1.0, "length": 10}}, "n3337": {"so_13547368_13547368_1": {"section_id": 5140, "quality": 1.0, "length": 17}, "so_13547368_13554733_1": {"section_id": 5144, "quality": 0.9375, "length": 15}, "so_13547368_13547368_2": {"section_id": 6954, "quality": 1.0, "length": 12}, "so_13547368_13554733_3": {"section_id": 5143, "quality": 0.8461538461538461, "length": 11}, "so_13547368_13547368_0": {"section_id": 5140, "quality": 1.0, "length": 10}, "so_13547368_13554733_2": {"section_id": 5140, "quality": 1.0, "length": 17}, "so_13547368_13554733_0": {"section_id": 5140, "quality": 1.0, "length": 10}}, "n4659": {"so_13547368_13547368_1": {"section_id": 6765, "quality": 1.0, "length": 17}, "so_13547368_13554733_1": {"section_id": 6772, "quality": 0.9375, "length": 15}, "so_13547368_13547368_2": {"section_id": 8719, "quality": 1.0, "length": 12}, "so_13547368_13554733_3": {"section_id": 6771, "quality": 0.7692307692307693, "length": 10}, "so_13547368_13547368_0": {"section_id": 6765, "quality": 1.0, "length": 10}, "so_13547368_13554733_2": {"section_id": 6765, "quality": 1.0, "length": 17}, "so_13547368_13554733_0": {"section_id": 6765, "quality": 1.0, "length": 10}}}, "13547368": {"CommentCount": "4", "ViewCount": "416", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2012-11-25T01:12:16.383", "LastActivityDate": "2014-07-24T22:44:46.530", "Title": "Is '\\u0B95' a multicharacter literal?", "FavoriteCount": "1", "LastEditDate": "2017-05-23T12:25:10.080", "Id": "13547368", "Score": "10", "Body": "<p>In <a href=\"https://stackoverflow.com/a/13546801/150634\">a previous answer I gave</a>, I responded to the following warning being caused by the fact that <code>'\\u0B95'</code> requires three bytes and so is a <em>multicharacter literal</em>:</p>\n<pre><code>warning: multi-character character constant [-Wmultichar]\n</code></pre>\n<p>But actually, I don't think I'm right and I don't think gcc is either. The standard states:</p>\n<blockquote>\n<p id=\"so_13547368_13547368_0\">An ordinary character literal that contains more than one <em>c-char</em> is a <em>multicharacter literal</em>.</p>\n</blockquote>\n<p>One production rule for <em>c-char</em> is a <em>universal-character-name</em> (i.e. <code>\\uXXXX</code> or <code>\\UXXXXXXXX</code>). Since <code>\\u0B95</code> is a single <em>c-char</em>, this is not a multicharacter literal. But now it gets messy. The standard also says:</p>\n<blockquote>\n<p id=\"so_13547368_13547368_1\">An ordinary character literal that contains a single <em>c-char</em> has type <code>char</code>, with value equal to the numerical value of the encoding of the <em>c-char</em> in the execution character set.</p>\n</blockquote>\n<p>So my literal has type <code>char</code> and value of the character in the execution character set (or implementation-defined value if it does not exist in that set). <code>char</code> is only defined to be large enough to store any member of the basic character set (which is not actually defined by the standard, but I assume it means the basic execution character set):</p>\n<blockquote>\n<p id=\"so_13547368_13547368_2\">Objects declared as characters (char) shall be large enough to store any member of the implementation\u2019s basic character set.</p>\n</blockquote>\n<p>Therefore, since the execution character set is a superset of all the values a <code>char</code> can hold, my character may not fit in the <code>char</code>.</p>\n<p>So what value <em>does</em> my <code>char</code> have? This doesn't seem to be defined anywhere. The standard does say that for <code>char16_t</code> literals, if the value is not representable, the program is ill-formed. It says nothing about ordinary literals, though.</p>\n<p>So what's going on? Is this just a mess in the standard or am I missing something?</p>\n", "Tags": "<c++><character-encoding><c++11><literals>", "OwnerUserId": "150634", "AnswerCount": "4"}});