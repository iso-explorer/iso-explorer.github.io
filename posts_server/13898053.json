post_cb({"bq_ids": {"n4140": {"so_13898053_13898517_2": {"length": 17, "quality": 0.9444444444444444, "section_id": 7135}, "so_13898053_13898517_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 7078}, "so_13898053_13898724_0": {"length": 15, "quality": 0.6521739130434783, "section_id": 5485}, "so_13898053_13898517_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 6687}, "so_13898053_13898053_0": {"length": 27, "quality": 1.0, "section_id": 5485}}, "n3337": {"so_13898053_13898724_0": {"length": 15, "quality": 0.6521739130434783, "section_id": 5271}, "so_13898053_13898517_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 6822}, "so_13898053_13898517_2": {"length": 17, "quality": 0.9444444444444444, "section_id": 6879}, "so_13898053_13898517_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 6442}, "so_13898053_13898053_0": {"length": 27, "quality": 1.0, "section_id": 5271}}, "n4659": {"so_13898053_13898724_0": {"length": 16, "quality": 0.6956521739130435, "section_id": 6920}, "so_13898053_13898517_0": {"length": 12, "quality": 0.9230769230769231, "section_id": 8579}, "so_13898053_13898517_2": {"length": 17, "quality": 0.9444444444444444, "section_id": 8636}, "so_13898053_13898517_1": {"length": 12, "quality": 0.8571428571428571, "section_id": 8162}, "so_13898053_13898053_0": {"length": 20, "quality": 0.7407407407407407, "section_id": 6920}}}, "13898517": {"Id": "13898517", "PostTypeId": "2", "Body": "<p>I think the inner declarations shadow the ones in the global namespace. Also, the friend declarations themselves are forward declarations, so they shadow the ones in the global namespace, and not just \"refer\" to those functions.</p>\n<p>Referring to 3.3.10.1 \"Name hiding\" in N3485:</p>\n<blockquote>\n<p id=\"so_13898053_13898517_0\">A name can be hidden by an explicit declaration of that same name in a\n  nested declarative region or derived class (10.2).</p>\n</blockquote>\n<p>11.3.4 Friends:</p>\n<blockquote>\n<p id=\"so_13898053_13898517_1\">A function first declared in a friend declaration has external linkage\n  (3.5). Otherwise, the function retains its previous linkage (7.1.1).</p>\n</blockquote>\n<p>Looking at 3.5.2:</p>\n<blockquote>\n<p id=\"so_13898053_13898517_2\">When a name has external linkage , the entity it denotes can be\n  referred to by names from scopes of other translation units or from\n  other scopes of the same translation unit.</p>\n</blockquote>\n", "LastEditorUserId": "436025", "LastActivityDate": "2012-12-16T04:25:40.253", "Score": "1", "CreationDate": "2012-12-16T04:06:12.137", "ParentId": "13898053", "CommentCount": "0", "OwnerUserId": "436025", "LastEditDate": "2012-12-16T04:25:40.253"}, "13898724": {"Id": "13898724", "PostTypeId": "2", "Body": "<p>At the end of the paragraph it states:</p>\n<blockquote>\n<p id=\"so_13898053_13898724_0\">When looking for a prior declaration of a class or a function declared as a friend, and when the name of the friend class or function is neither a qualified name nor a template-id, scopes outside the innermost enclosing namespace are not considered.</p>\n</blockquote>\n<p>This is why <code>::h</code> is not considered: It is neither a qualified name nor a template-id.  This is also why '::f2` is considered, because it is a template-id.</p>\n", "LastActivityDate": "2012-12-16T04:53:38.747", "CommentCount": "0", "CreationDate": "2012-12-16T04:53:38.747", "ParentId": "13898053", "Score": "2", "OwnerUserId": "951890"}, "13898053": {"ViewCount": "277", "Body": "<p>According to 7.3.1.2 Namespace member definitions in C++ Standard ISO/IEC 14882:2003(E)</p>\n<blockquote>\n<p id=\"so_13898053_13898053_0\">Every name first declared in a namespace is a member of that\n  namespace. If a friend declaration in a non-local class first declares\n  a class or function (this implies that the name of the class or\n  function is unqualified) the friend class or function is a member of\n  the innermost enclosing namespace.</p>\n</blockquote>\n<pre><code>// Assume f and g have not yet been defined.\nvoid h(int);\ntemplate &lt;class T&gt; void f2(T);\nnamespace A {\n   class X {\n   friend void f(X);  //  A::f(X) is a friend\n      class Y {\n         friend void g();  //  A::g is a friend\n         friend void h(int);  //  A::h is a friend\n         //  ::h not considered\n         friend void f2&lt;&gt;(int);  //  ::f2&lt;&gt;(int) is a friend\n      };\n   };\n   //  A::f, A::g and A::h are not visible here\n   X x;\n   void g() { f(x); }  // definition of A::g\n   void f(X) { /* ... */}  // definition of A::f\n   void h(int) { /* ... */ }  // definition of A::h\n   //  A::f, A::g and A::h are visible here and known to be friends\n}\n</code></pre>\n<p>Since <code>void h(int);</code> is first declared in the global namespace, it is a member of the global namespace. Why does the friend declaration <code>friend void h(int);</code> in <code>class Y</code> consider <code>A::h</code> rather than <code>::h</code>?</p>\n", "AcceptedAnswerId": "13898724", "Title": "C++ Forward Declaration and Friendship in Namespace", "CreationDate": "2012-12-16T02:22:54.810", "Id": "13898053", "CommentCount": "1", "LastEditDate": "2015-10-26T14:21:48.697", "PostTypeId": "1", "LastEditorUserId": "3204551", "LastActivityDate": "2015-10-26T14:21:48.697", "Score": "6", "OwnerUserId": "571470", "Tags": "<c++><namespaces><friend><access-control><forward-declaration>", "AnswerCount": "2"}});