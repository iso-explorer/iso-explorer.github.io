post_cb({"26754247": {"ParentId": "26754024", "CommentCount": "0", "Body": "<p>Here is some standardese explaining why you can't initialize POD members inside the class itself.</p>\n<p><code>[class]/10</code>:</p>\n<blockquote>\n<p id=\"so_26754024_26754247_0\">A <em>POD struct</em> is a non-union class that is both a <strong>trivial class</strong> and a standard-layout class</p>\n</blockquote>\n<p><code>[class]/6</code>:</p>\n<blockquote>\n<p id=\"so_26754024_26754247_1\">A <em>trivial class</em> is a class that has a default constructor (12.1), has <strong>no non-trivial default constructors</strong>, and is trivially copyable.</p>\n</blockquote>\n<p><code>[class.ctor]/4</code>:</p>\n<blockquote>\n<p id=\"so_26754024_26754247_2\">A default constructor is trivial if it is <strong>not user-provided</strong> and if:<br>\n  \u2014 its class has no virtual functions (10.3) and no virtual base classes (10.1), and<br>\n  \u2014 <strong>no non-static data member of its class has a <em>brace-or-equal-initializer</em></strong>, and<br>\n  \u2014 all the direct base classes of its class have trivial default constructors, and<br>\n  \u2014 for all the non-static data members of its class that are of class type (or array thereof), each such class has a trivial default constructor.</br></br></br></br></p>\n</blockquote>\n", "OwnerUserId": "3959454", "PostTypeId": "2", "Id": "26754247", "Score": "2", "CreationDate": "2014-11-05T10:01:47.053", "LastActivityDate": "2014-11-05T10:01:47.053"}, "26754024": {"CommentCount": "1", "ViewCount": "221", "PostTypeId": "1", "LastEditorUserId": "786186", "CreationDate": "2014-11-05T09:51:08.377", "LastActivityDate": "2014-11-06T23:27:56.277", "Title": "c++11 plain old object default value", "AcceptedAnswerId": "26754075", "LastEditDate": "2014-11-06T23:27:56.277", "Id": "26754024", "Score": "4", "Body": "<p>How can I initialize a member variable of a POD (Plain Old Data) in C++11?</p>\n<pre><code>class A {\npublic:\n    int theAnswer; // this is not initialized\n};\n\nstatic_assert(std::is_pod&lt;A&gt;::value, \"A must be a plain old object\");\n\nclass B {\npublic:\n    int theAnswer { 42 }; //  this should initialize to 42\n};\n\nstatic_assert(std::is_pod&lt;B&gt;::value, \"B must be a plain old object\"); // ERROR\n\nclass C {\npublic:\n    C() : theAnswer { 42 } { } // Obviously, this is not a trivial default constructor, so it does not work\n    int theAnswer;\n};\n\nstatic_assert(std::is_pod&lt;C&gt;::value, \"C must be a plain old object\"); // ERROR\n</code></pre>\n", "Tags": "<c++><c++11><initialization>", "OwnerUserId": "786186", "AnswerCount": "2"}, "26754075": {"ParentId": "26754024", "CommentCount": "2", "Body": "<p>You do it where you initialize the whole object. A plain old data object is just that: plain old data, with no invariants, initialization, or any of that fancy stuff. If you want initialization, then it's not POD.</p>\n<p>But maybe you don't actually need a POD. Maybe trivially copyable is enough? If all you want to do is memcpy between objects, trivially copyable is the trait you're looking for, not POD.</p>\n", "OwnerUserId": "8922", "PostTypeId": "2", "Id": "26754075", "Score": "9", "CreationDate": "2014-11-05T09:54:37.697", "LastActivityDate": "2014-11-05T09:54:37.697"}, "bq_ids": {"n4140": {"so_26754024_26754247_1": {"section_id": 5850, "quality": 0.9090909090909091, "length": 10}, "so_26754024_26754247_0": {"section_id": 5854, "quality": 0.8888888888888888, "length": 8}, "so_26754024_26754247_2": {"section_id": 369, "quality": 0.9555555555555556, "length": 43}}, "n3337": {"so_26754024_26754247_1": {"section_id": 359, "quality": 0.5454545454545454, "length": 6}, "so_26754024_26754247_0": {"section_id": 5624, "quality": 0.8888888888888888, "length": 8}, "so_26754024_26754247_2": {"section_id": 359, "quality": 0.9555555555555556, "length": 43}}, "n4659": {"so_26754024_26754247_1": {"section_id": 7329, "quality": 0.6363636363636364, "length": 7}, "so_26754024_26754247_0": {"section_id": 7333, "quality": 0.8888888888888888, "length": 8}, "so_26754024_26754247_2": {"section_id": 383, "quality": 0.9111111111111111, "length": 41}}}});