post_cb({"bq_ids": {"n4140": {"so_26870810_26871714_1": {"length": 57, "quality": 0.8507462686567164, "section_id": 5907}, "so_26870810_26871714_0": {"length": 48, "quality": 0.9056603773584906, "section_id": 5907}}, "n3337": {"so_26870810_26871714_1": {"length": 57, "quality": 0.8507462686567164, "section_id": 5679}, "so_26870810_26871714_0": {"length": 48, "quality": 0.9056603773584906, "section_id": 5679}}, "n4659": {"so_26870810_26871714_1": {"length": 56, "quality": 0.835820895522388, "section_id": 7389}, "so_26870810_26871714_0": {"length": 46, "quality": 0.8679245283018868, "section_id": 7389}}}, "26871714": {"Id": "26871714", "PostTypeId": "2", "Body": "<p>From the standard (N3690):\n<strong>9.4.2.</strong>\n\u00a7<strong>2</strong></p>\n<blockquote>\n<p id=\"so_26870810_26871714_0\">The declaration of a <strong>static</strong> data member in its class definition is not\n  a definition and may be of an incomplete type other than cv-qualified\n  void. The definition for a <strong>static</strong> data member shall appear in a\n  namespace scope enclosing the member\u2019s class definition. In the\n  definition at namespace scope, the name of the static data member\n  shall be qualified by its class name using the :: operator. The\n  initializer expression in the definition of a static data member is in\n  the scope of its class (3.3.7). [ <em>Example</em>: </p>\n</blockquote>\n<pre><code>class process {\n    static process* run_chain;\n    static process* running;\n};\nprocess* process::running = get_main();\nprocess* process::run_chain = running;\n</code></pre>\n<blockquote>\n<p id=\"so_26870810_26871714_1\">The static data member <code>run_chain</code> of class process is defined in global\n  scope; the notation <code>process ::run_chain</code> specifies that the member\n  <code>run_chain</code> is a member of class process and in the scope of class\n  process. In the static data member definition, the initializer\n  expression refers to the static data member running of class process.\n  \u2014 <em>end example</em> ] [ <em>Note</em>: Once the static data member has been defined,\n  it exists even if no objects of its class have been created. [\n  <em>Example</em>: in the example above, <code>run_chain</code> and running exist even if no\n  objects of class process are created by the program. \u2014 <em>end example</em> ] \u2014\n  <em>end note</em> ]</p>\n</blockquote>\n", "LastActivityDate": "2014-11-11T18:20:34.597", "CommentCount": "1", "CreationDate": "2014-11-11T18:20:34.597", "ParentId": "26870810", "Score": "2", "OwnerUserId": "4108963"}, "26870810": {"ViewCount": "1151", "Body": "<p>I am trying to put my solution in a static class, which is defined like: </p>\n<pre><code>class myDataParser{\n    private:\n\n    public:\n    struct myData{\n        struct index {\n            static int item1,item2,item3,item4;\n        };\n        static char delimiter;\n    };\n\n};\n</code></pre>\n<p>But when I try to init the items in the main program like this:</p>\n<pre><code>myDataParser::myData::delimiter = ';';\nmyDataParser::myData::index::item1 = 0;\nmyDataParser::myData::index::item2 = 1;\nmyDataParser::myData::index::item3 = 2;\nmyDataParser::myData::index::item4 = 3;\n</code></pre>\n<p>I get error:</p>\n<pre><code>'item1' in 'struct myDataParser::myData::index' does not name a type\n</code></pre>\n<p>...same goes for delimiter and item2-4, what am I doing wrong? How would I set these members correctly?</p>\n", "AcceptedAnswerId": "26870875", "Title": "C++ static struct init - item does not name a type", "CreationDate": "2014-11-11T17:29:12.720", "Id": "26870810", "CommentCount": "0", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-11-11T18:20:34.597", "Score": "1", "OwnerUserId": "1835470", "Tags": "<c++><struct><static><initialization>", "AnswerCount": "2"}, "26870875": {"Id": "26870875", "PostTypeId": "2", "Body": "<p>Prefix the data types <code>char</code>, <code>int</code> , etc for defining the static members :-</p>\n<pre><code>char myDataParser::myData::delimiter = ';';\n~~~\nint myDataParser::myData::index::item1 = 0;\n~~~\n\n//....\n</code></pre>\n", "LastActivityDate": "2014-11-11T17:32:22.900", "CommentCount": "1", "CreationDate": "2014-11-11T17:32:22.900", "ParentId": "26870810", "Score": "5", "OwnerUserId": "1870232"}});