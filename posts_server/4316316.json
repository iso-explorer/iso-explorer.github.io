post_cb({"4316376": {"ParentId": "4316316", "CommentCount": "3", "Body": "<p>There is a built-in conversion from pointer types to <code>bool</code>, non-null pointers are converted to <code>true</code> and null pointer values to <code>false</code>.</p>\n<p><code>std::string</code> is a user-defined type (in the loosest sense of the word user) so the conversion from <code>const char*</code> to <code>std::string</code> won't be preferred over the built-in <code>const char*</code> to <code>bool</code> conversion. You have to do something like this (or add an overload which takes a <code>const char *</code>).</p>\n<pre><code>Element element( std::string(\"something\"), true);\n</code></pre>\n", "OwnerUserId": "19563", "PostTypeId": "2", "Id": "4316376", "Score": "7", "CreationDate": "2010-11-30T17:05:14.247", "LastActivityDate": "2010-11-30T17:05:14.247"}, "bq_ids": {"n4140": {"so_4316316_4322041_5": {"section_id": 44, "quality": 0.8928571428571429, "length": 25}, "so_4316316_4322041_0": {"section_id": 0, "quality": 0.8421052631578947, "length": 16}, "so_4316316_4322041_4": {"section_id": 6, "quality": 0.9333333333333333, "length": 14}, "so_4316316_4322041_6": {"section_id": 638, "quality": 0.8888888888888888, "length": 8}, "so_4316316_4322041_8": {"section_id": 638, "quality": 0.8333333333333334, "length": 10}, "so_4316316_4322041_2": {"section_id": 0, "quality": 1.0, "length": 24}, "so_4316316_4322041_7": {"section_id": 638, "quality": 0.9230769230769231, "length": 12}}, "n3337": {"so_4316316_4322041_5": {"section_id": 41, "quality": 0.8928571428571429, "length": 25}, "so_4316316_4322041_0": {"section_id": 0, "quality": 0.8421052631578947, "length": 16}, "so_4316316_4322041_4": {"section_id": 3, "quality": 0.9333333333333333, "length": 14}, "so_4316316_4322041_6": {"section_id": 628, "quality": 0.8888888888888888, "length": 8}, "so_4316316_4322041_8": {"section_id": 628, "quality": 0.8333333333333334, "length": 10}, "so_4316316_4322041_2": {"section_id": 0, "quality": 1.0, "length": 24}, "so_4316316_4322041_7": {"section_id": 628, "quality": 0.9230769230769231, "length": 12}}, "n4659": {"so_4316316_4322041_0": {"section_id": 0, "quality": 0.8421052631578947, "length": 16}, "so_4316316_4322041_4": {"section_id": 6, "quality": 0.9333333333333333, "length": 14}, "so_4316316_4322041_6": {"section_id": 666, "quality": 0.8888888888888888, "length": 8}, "so_4316316_4322041_8": {"section_id": 666, "quality": 0.8333333333333334, "length": 10}, "so_4316316_4322041_2": {"section_id": 0, "quality": 0.8333333333333334, "length": 20}, "so_4316316_4322041_7": {"section_id": 666, "quality": 0.9230769230769231, "length": 12}, "so_4316316_4322041_5": {"section_id": 45, "quality": 0.8928571428571429, "length": 25}}}, "4316316": {"CommentCount": "4", "AcceptedAnswerId": "4316376", "PostTypeId": "1", "LastEditorUserId": "235472", "CreationDate": "2010-11-30T16:57:32.810", "LastActivityDate": "2010-12-01T10:02:44.037", "LastEditDate": "2010-11-30T17:52:11.403", "ViewCount": "163", "FavoriteCount": "0", "Title": "Constructor: is it the right one being called?", "Id": "4316316", "Score": "3", "Body": "<p>In your opinion, which constructor will be called?</p>\n<pre><code>class Element {\npublic:\n    Element(bool b = true, bool c = true);\n    Element(const std::string s, bool b = true, bool c = true);\n};\n...\nElement element(\"something\", true);\n</code></pre>\n<p>Wrong! The first one.</p>\n<p>Do I have to restart Stroustrup's book from the beginning?</p>\n<p>I tried without the const, but nothing changes.</p>\n<p>It seems that a char* looks more like a bool than a std::string.</p>\n<p>With this code everything is all right:</p>\n<pre><code>Element element(string(\"something\"), true);\n</code></pre>\n<p>Compiler: Microsoft Visual C++ 2010</p>\n<p>OS: Windows 7</p>\n", "Tags": "<c++><string><constructor><boolean>", "OwnerUserId": "235472", "AnswerCount": "2"}, "4322041": {"ParentId": "4316316", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>.</p>\n<p>C++ Standard (N1905) says,</p>\n<blockquote>\n<p id=\"so_4316316_4322041_0\">$4.1 <strong>Standard conversions are implicit\n  conversions defined for built-in\n  types</strong>. Clause 4 enumerates the full\n  set of such conversions. A standard\n  conversion sequence is a sequence of\n  standard conversions in the following\n  order:</p>\n<p id=\"so_4316316_4322041_1\">[...]</p>\n<p id=\"so_4316316_4322041_2\">\u2014 Zero or one conversion from the\n  following set: integral promotions,\n  floating point promotion, integral\n  conversions, floating point\n  conversions, floating-integral\n  conversions, <strong>pointer conversions</strong>,\n  pointer to member conversions, <strong>and\n  boolean  conversions.</strong></p>\n<p id=\"so_4316316_4322041_3\">[...]</p>\n<p id=\"so_4316316_4322041_4\">$4.4 In general, <strong>an implicit\n  conversion sequence (13.3.3.1)\n  consists of a standard conversion\n  sequence followed by a user-defined\n  conversion</strong> followed by another\n  standard conversion sequence.</p>\n<h1>4.12 Boolean conversions</h1>\n<p id=\"so_4316316_4322041_5\">$4.12.1 An rvalue of arithmetic, enumeration,\n  <strong>pointer</strong>, or pointer to member type <strong>can be converted to an rvalue of type bool</strong>. A zero value, null\n  pointer value, or null member pointer\n  value is converted to false <strong>any\n  other value is converted to true</strong>.</p>\n</blockquote>\n<h1>13.3.3.2 Ranking implicit conversion sequences</h1>\n<blockquote>\n<p id=\"so_4316316_4322041_6\">2 When comparing the basic forms of\n  implicit conversion sequences (as\n  defined in 13.3.3.1) </p>\n<p id=\"so_4316316_4322041_7\">\u2014 <strong>a standard\n  conversion sequence (13.3.3.1.1) is a\n  better conversion sequence than a\n  user-defined conversion sequence</strong> or an\n  ellipsis conversion sequence, and </p>\n<p id=\"so_4316316_4322041_8\">\u2014 a\n  user-defined conversion sequence\n  (13.3.3.1.2) is a better conversion\n  sequence than an ellipsis conversion\n  sequence (13.3.3.1.3).</p>\n</blockquote>\n<p>Hope, it explains well the behaviour shown by your code. :-)</p>\n<p>Also, this is a good read : </p>\n<p><a href=\"http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8a.doc%2Flanguage%2Fref%2Fimplicit_conversion_sequences.htm\" rel=\"nofollow\">Implicit conversion sequences (C++ only)</a></p>\n<p>.</p>\n", "OwnerUserId": "415784", "LastEditorUserId": "415784", "LastEditDate": "2010-12-01T10:02:44.037", "Id": "4322041", "Score": "2", "CreationDate": "2010-12-01T07:12:54.187", "LastActivityDate": "2010-12-01T10:02:44.037"}});