post_cb({"12791704": {"CommentCount": "2", "ViewCount": "145", "PostTypeId": "1", "ClosedDate": "2012-10-10T12:59:20.980", "LastEditorUserId": "-1", "CreationDate": "2012-10-09T01:32:53.850", "LastActivityDate": "2012-10-09T01:42:55.253", "Title": "Why can you call a copy constructor passing in the object you are constructing? (C++) (gcc)", "AcceptedAnswerId": "12791732", "LastEditDate": "2017-05-23T12:04:40.430", "Id": "12791704", "Score": "8", "Body": "<blockquote>\n<p id=\"so_12791704_12791704_0\"><strong>Possible Duplicate:</strong><br>\n<a href=\"https://stackoverflow.com/questions/2529111/stdstring-xx\">std::string x(x);</a> </br></p>\n</blockquote>\n<pre><code>class A {};\n\nint main() {\n\n    A a(a);\n}\n</code></pre>\n<p>This compiles.  </p>\n<blockquote>\n<p id=\"so_12791704_12791704_1\">gcc (GCC) 4.7.2 20120921 (Red Hat 4.7.2-2)<br>\n<code>g++ -o main main.cpp -Wall -w -ansi</code></br></p>\n</blockquote>\n<p>I receive no warnings.  </p>\n<p>Why does this appear to be valid C++?<br>\nIs this mentioned anywhere in the standard?<br>\nAre there warning flags that can report this for gcc?  </br></br></p>\n<p>When the class has member data, the data ends up random.<br>\nexample:</br></p>\n<pre><code>#include &lt;iostream&gt;\n\nclass A {\n\npublic:\n    int i;\n    A() : i{6} {}\n};\n\nint main() {\n\n    A a(a);\n    std::cout &lt;&lt; a.i &lt;&lt; '\\n';\n}\n</code></pre>\n<blockquote>\n<p id=\"so_12791704_12791704_2\">output: -482728464</p>\n</blockquote>\n<p>What's going on here?\nAlso, how can I prevent myself from accidently doing this? - Is it possible to make it a compiler error?</p>\n", "Tags": "<c++><class><copy-constructor><member>", "OwnerUserId": "908939", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_12791704_12791732_0": {"section_id": 7049, "quality": 0.7777777777777778, "length": 14}, "so_12791704_12791732_1": {"section_id": 7049, "quality": 0.7777777777777778, "length": 7}}, "n3337": {"so_12791704_12791732_0": {"section_id": 6794, "quality": 0.7777777777777778, "length": 14}, "so_12791704_12791732_1": {"section_id": 6794, "quality": 0.7777777777777778, "length": 7}}, "n4659": {"so_12791704_12791732_1": {"section_id": 8546, "quality": 0.7777777777777778, "length": 7}, "so_12791704_12791732_0": {"section_id": 8546, "quality": 0.7777777777777778, "length": 14}}}, "12791732": {"ParentId": "12791704", "CommentCount": "0", "CreationDate": "2012-10-09T01:37:36.417", "OwnerUserId": "777186", "PostTypeId": "2", "Id": "12791732", "Score": "10", "Body": "<blockquote>\n<p id=\"so_12791704_12791732_0\">(\u00a7 3.3.2/1) The <em>point of declaration</em> for a name is immediately after its complete declarator (Clause 8) and before its <em>initializer</em> (if any), except as noted below. [ Example:</p>\n<pre><code>int x = 12;\n{ int x = x; }\n</code></pre>\n<p id=\"so_12791704_12791732_1\">Here the second x is initialized with its own (indeterminate) value. \u2014end example ]</p>\n</blockquote>\n<p>This applies to user-defined types, such as your <code>class A</code>, as well. The copy constructor used is the default one, auto-generated by the compiler.</p>\n", "LastActivityDate": "2012-10-09T01:37:36.417"}});