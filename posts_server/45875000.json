post_cb({"bq_ids": {"n4140": {"so_45875000_45875324_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 3329}}, "n3337": {"so_45875000_45875324_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 3199}}, "n4659": {"so_45875000_45875324_0": {"length": 31, "quality": 0.9393939393939394, "section_id": 4095}}}, "45875099": {"Id": "45875099", "PostTypeId": "2", "Body": "<p><strong>Solution 1</strong></p>\n<p>You can remove the second constructor and still be able to construct <code>PVector</code> using</p>\n<pre><code> Pvector v2{1, 2};\n</code></pre>\n<p>Example:</p>\n<pre><code>#include &lt;initializer_list&gt;\n#include &lt;vector&gt;\n\nclass Pvector\n{\n  private:\n  std::vector&lt;long double&gt; point_list;\n\n  public:\n  Pvector(std::initializer_list&lt;long double&gt; coords) : point_list(coords)\n  {}\n};\n\nint main()\n{\n   Pvector v1{1.0, 2.0};\n   Pvector v2{1, 2};\n}\n</code></pre>\n<p><strong>Solution 2</strong></p>\n<p>Use a template constructor in <code>Pvector</code> and the use the constructor of <code>std::vector</code> that takes two iterators to initialize <code>point_list</code>.</p>\n<pre><code>#include &lt;initializer_list&gt;\n#include &lt;vector&gt;\n\nclass Pvector\n{\n  private:\n  std::vector&lt;long double&gt; point_list;\n\n  public:\n\n  // This is not necessary any more.\n  // Pvector(std::initializer_list&lt;long double&gt; coords) : point_list(coords){}\n\n  template &lt;typename T&gt;\n  Pvector(std::initializer_list&lt;T&gt; coords) : point_list(coords.begin(), coords.end()){}\n};\n\nint main()\n{\n   Pvector v1{1.0, 2.0};\n   Pvector v2{1, 2};\n}\n</code></pre>\n", "LastEditorUserId": "434551", "LastActivityDate": "2017-08-25T06:03:01.433", "Score": "4", "CreationDate": "2017-08-25T05:46:00.027", "ParentId": "45875000", "CommentCount": "3", "OwnerUserId": "434551", "LastEditDate": "2017-08-25T06:03:01.433"}, "45875324": {"Id": "45875324", "PostTypeId": "2", "Body": "<p>You probably get a <code>narrowing conversion warning</code>, right? </p>\n<p>Stolen from <a href=\"https://stackoverflow.com/a/11521166/4711812\">here</a>:</p>\n<blockquote>\n<p id=\"so_45875000_45875324_0\"><strong>C++11 8.5.4/7</strong> A <em>narrowing conversion</em> is an implicit conversion\n  [...] from an integer type [...] to a floating-point type, <strong>except where the source is a constant expression</strong> and the actual value after conversion will fit into the target type and will produce the original value when converted back to the original type. </p>\n</blockquote>\n<p>So you will get this warning every time you convert a non constant integer expression, i.e a variable, into a floating-point type. Whether the value will fit into the mantissa of the corresponding type will depend on the type (float, double, long-double) and the implementation of the type.</p>\n", "LastActivityDate": "2017-08-25T06:06:47.463", "CommentCount": "1", "CreationDate": "2017-08-25T06:06:47.463", "ParentId": "45875000", "Score": "2", "OwnerUserId": "4711812"}, "45875000": {"ViewCount": "49", "Body": "<p>Suppose I have a simple class:</p>\n<pre><code>class Pvector\n{\n  private:\n  std::vector&lt;long double&gt; point_list;\n\n  public:\n  Pvector(std::initializer_list&lt;long double&gt; coords) : point_list(coords)\n  {}\n  Pvector(std::initializer_list&lt;int&gt; coords) : point_list(coords)\n  {}\n};\n</code></pre>\n<p>This will not compile because the <code>std::vector</code> templated on type <code>long double</code> cannot initialize itself from an initialization list templated on type <code>int</code>.  This is rather inconvenient, however, because with the second constructor removed, I cannot do the following in my code:</p>\n<pre><code>Pvector piece_movement({E.X - S.X, E.Y - S.Y, E.Z - S.Z});\n</code></pre>\n<p>This is because the resultant type from my arithmetic operations is of type <code>int</code>.  So I seem to be in a conundrum.  I'd like to be able to pass integers directly into the constructor for <code>Pvector</code>, but I still want <code>point_list</code> to be of  type <code>long double</code> and (somehow) be initialized with the integers I pass in.  How might I go about doing this?</p>\n", "AcceptedAnswerId": "45875099", "Title": "Initialize Vector of Long Doubles with Initialization List of Ints", "CreationDate": "2017-08-25T05:35:36.243", "Id": "45875000", "CommentCount": "0", "LastEditDate": "2017-08-25T06:45:47.643", "PostTypeId": "1", "LastEditorUserId": "4711812", "LastActivityDate": "2017-08-25T06:45:47.643", "Score": "4", "OwnerUserId": "8470160", "Tags": "<c++><list><vector><initalization>", "AnswerCount": "2"}});