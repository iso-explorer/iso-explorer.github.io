post_cb({"1628311": {"ViewCount": "1567", "Body": "<p>I'm quite certain that arrays of built in types are unitialized, whereas arrays of UDTs are default initialized.</p>\n<p><code>int foo[5]; // will contain junk <br>\nFoo foo[5]; // will contain 5 Foo objects that are default initialized\n</br></code></p>\n<p>This occurs regardless of whether the array is allocated on the stack or heap.</p>\n<p>However, I'm finding it hard to find an authoritative source on this. Bjarne states that:</p>\n<p>\"Members of arrays and structures are default initialized or not depending on whether the array or structure is static\" which doesn't really tell me too much.</p>\n<p>I've also tried to find something in the standard, but so far no to no avail.</p>\n<p>Does anyone know of an authoritative source to confirm the above?</p>\n", "AcceptedAnswerId": "1628396", "Title": "array initialisation", "CreationDate": "2009-10-27T01:38:22.713", "Id": "1628311", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2013-11-18T09:35:20.987", "LastEditorUserId": "110226", "LastActivityDate": "2013-11-18T09:35:20.987", "Score": "0", "OwnerUserId": "110226", "Tags": "<c++><arrays><initialization>", "AnswerCount": "3"}, "1628347": {"Id": "1628347", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_1628311_1628347_0\">\"Members of arrays and structures are default initialized or not depending on whether the array or structure is static\" </p>\n</blockquote>\n<p>This is authoritative, although it could be clearer:</p>\n<ul>\n<li>Arrays and structures declared as <code>static</code> are initialized to zeroes.</li>\n<li>Local arrays and structures of built-in types (<em>i.e.</em> types that have no constructors) are not initialized.</li>\n</ul>\n", "LastEditorUserId": "29157", "LastActivityDate": "2009-10-27T01:58:55.293", "Score": "1", "CreationDate": "2009-10-27T01:47:24.427", "ParentId": "1628311", "CommentCount": "2", "LastEditDate": "2009-10-27T01:58:55.293", "OwnerUserId": "29157"}, "1628370": {"Id": "1628370", "PostTypeId": "2", "Body": "<p>It says in the C++ standard, in 8.5.9:</p>\n<blockquote>\n<p id=\"so_1628311_1628370_0\">If no initializer is specified for an\n  object, and the object is of (possibly\n  cv-qualified) non-POD class type (or\n  array thereof), the object shall be\n  default-initialized; if the object is\n  of const-qualified type, the\n  underlying class type shall have a\n  user-declared default constructor. \n  Otherwise, if no initializer is\n  specified for a non-static object, the\n  object and its subobjects, if any,\n  have an indeterminate initial value.</p>\n</blockquote>\n", "LastActivityDate": "2009-10-27T01:55:57.857", "Score": "1", "CreationDate": "2009-10-27T01:55:57.857", "ParentId": "1628311", "CommentCount": "0", "OwnerUserId": "168288"}, "bq_ids": {"n4140": {"so_1628311_1628396_1": {"length": 29, "quality": 0.7837837837837838, "section_id": 7207}, "so_1628311_1628396_6": {"length": 7, "quality": 1.0, "section_id": 3290}, "so_1628311_1628396_2": {"length": 4, "quality": 1.0, "section_id": 3285}, "so_1628311_1628396_3": {"length": 4, "quality": 1.0, "section_id": 3286}, "so_1628311_1628396_5": {"length": 18, "quality": 0.9473684210526315, "section_id": 3289}, "so_1628311_1628396_4": {"length": 4, "quality": 1.0, "section_id": 3287}}, "n3337": {"so_1628311_1628396_1": {"length": 29, "quality": 0.7837837837837838, "section_id": 6951}, "so_1628311_1628396_4": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_1628311_1628396_2": {"length": 4, "quality": 1.0, "section_id": 3155}, "so_1628311_1628396_3": {"length": 4, "quality": 1.0, "section_id": 3156}, "so_1628311_1628396_5": {"length": 18, "quality": 0.9473684210526315, "section_id": 3159}, "so_1628311_1628396_6": {"length": 7, "quality": 1.0, "section_id": 3160}}, "n4659": {"so_1628311_1628396_1": {"length": 29, "quality": 0.7837837837837838, "section_id": 8716}, "so_1628311_1628396_5": {"length": 18, "quality": 0.9473684210526315, "section_id": 4051}, "so_1628311_1628396_6": {"length": 7, "quality": 1.0, "section_id": 4052}}}, "1628396": {"Id": "1628396", "PostTypeId": "2", "Body": "<p>ISO C++03 is about as authoritative as it gets:</p>\n<blockquote>\n<p id=\"so_1628311_1628396_0\">A POD-struct is an aggregate class that has no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference, and has no user-defined copy assignment operator and no user-defined destructor. Similarly, a POD-union is an aggregate union that has no non-static data members of type non-POD-struct, non-POD-union (or array of such types) or reference, and has no user-defined copy assignment operator and no user-defined destructor. A POD class is a class that is either a POD-struct or a POD-union.</p>\n<p id=\"so_1628311_1628396_1\">Arithmetic types (3.9.1), enumeration types, pointer types, and pointer to member types (3.9.2), and cv-qualified versions of these types (3.9.3) are collectively called scalar types. Scalar types, POD-struct types, POD-union types (clause 9), arrays of such types and cv-qualified versions of these types (3.9.3) are collectively called POD types.</p>\n<p id=\"so_1628311_1628396_2\">To zero-initialize an object of type T means:</p>\n<ul>\n<li>if T is a scalar type (3.9), the object is set to the value of 0 (zero) converted to T;</li>\n<li>if T is a non-union class type, each nonstatic data member and each base-class\n  subobject is zero-initialized;</li>\n<li>if T is a union type, the object\u2019s first  named data member is zero-initialized;</li>\n<li>if T is an array type, each element is zero-initialized;</li>\n<li>if T is a reference type, no initialization is performed.</li>\n</ul>\n<p id=\"so_1628311_1628396_3\">To default-initialize an object of type T means:</p>\n<ul>\n<li>if T is a non-POD class type (clause 9), the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);</li>\n<li>if T is an array type, each element is default-initialized;</li>\n<li>otherwise, the object is zero-initialized.</li>\n</ul>\n<p id=\"so_1628311_1628396_4\">To value-initialize an object of type T means:</p>\n<ul>\n<li>if T is a class type (clause 9) with a user-declared constructor (12.1), then the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);</li>\n<li>if T is a non-union class type without a user-declared constructor, then every non-static data member and base-class component of T is value-initialized;</li>\n<li>if T is an array type, then each element is value-initialized;</li>\n<li>otherwise, the object is zero-initialized</li>\n</ul>\n<p id=\"so_1628311_1628396_5\">Every object of static storage duration shall be zero-initialized at program startup before any other initialization takes place. [Note: in some cases, additional initialization is done later.]</p>\n<p id=\"so_1628311_1628396_6\">An object whose initializer is an empty set of parentheses, i.e., (), shall be value-initialized.</p>\n<p id=\"so_1628311_1628396_7\">If no initializer is specified for an object, and the object is of (possibly cv-qualified) non-POD class type (or array thereof), the object shall be default-initialized; if the object is of const-qualified type, the underlying class type shall have a user-declared default constructor. Otherwise, if no initializer is specified for a nonstatic object, the object and its subobjects, if any, have an indeterminate initial value); if the object or any of its subobjects are of const-qualified type, the program is ill-formed. </p>\n</blockquote>\n<p>For your example, <code>int</code> is definitely a POD type (it's an arithmetic type), and therefore a local or field of type <code>int</code>, in the absence of initializer, will have an indeterminate value. For <code>Foo</code>, this depends on how it is defined - roughly speaking, if it doesn't have a constructor, and all its members are of POD types, then it is itself a POD type, and no initialization takes place either. Otherwise, the default constructor is called. Even then, this doesn't mean that <em>members</em> are initialized - rules are recursive, so POD members of non-POD type won't be initialized unless the constructor of that type specifically does that (in its initializer list).</p>\n<p>Static variables and fields will in all cases be zero-initialized. Note that this applies to non-PODs too - meaning that a static variable of a class type is guaranteed to have all fields recursively set to <code>(T)0</code> even before its constructor runs.</p>\n<p>A handy trick to default-initialize any aggregate POD type is to use <code>{}</code> in initializer - note that it works with structs as well as arrays:</p>\n<pre><code>char s[10] = {}; // all elements default-initialized\nFoo foo = {};    // all fields recursively default-initialized\n</code></pre>\n", "LastEditorUserId": "111335", "LastActivityDate": "2009-10-27T02:14:45.510", "Score": "7", "CreationDate": "2009-10-27T02:05:32.673", "ParentId": "1628311", "CommentCount": "0", "LastEditDate": "2009-10-27T02:14:45.510", "OwnerUserId": "111335"}});