post_cb({"25395534": {"CommentCount": "2", "ViewCount": "128", "PostTypeId": "1", "LastEditorUserId": "481267", "CreationDate": "2014-08-20T01:44:42.640", "LastActivityDate": "2014-08-20T01:51:13.523", "Title": "static_cast<> and unrelated class concersion", "LastEditDate": "2014-08-20T01:45:10.620", "Id": "25395534", "Score": "1", "Body": "<p>I have the following 2 classes:</p>\n<pre><code> class B; \n class A\n {\n     public:\n     A();\n     operator B() const;\n  };\n  class B\n  {\n     public:\n     B2();\n  };\n</code></pre>\n<p>here, A defines implicit conversion operator to B class. Then C++ reference says the following \" If an implicit conversion sequence from new_type to the type of expression exists, that does not include lvalue-to-rvalue, array-to-pointer, function-to-pointer, null pointer, null member pointer, or boolean conversion, then static_cast can perform the inverse of that implicit conversion\". It means that the following is to be compiled</p>\n<pre><code>  A a;\n  B b=a;\n  A a1=static_cast&lt;A&gt; (b);\n</code></pre>\n<p>but Xcode gives an error message</p>\n", "Tags": "<c++>", "OwnerUserId": "3958381", "AnswerCount": "1"}, "25395582": {"ParentId": "25395534", "CommentCount": "0", "Body": "<p>Your C++ reference is being imprecise. The <em>Standard</em> (C++14 \u00a75.2.9/7) says,</p>\n<blockquote>\n<p id=\"so_25395534_25395582_0\">The inverse of any standard conversion sequence (Clause 4) not containing an lvalue-to-rvalue (4.1), array-to-pointer (4.2), function-to-pointer (4.3), null pointer (4.10), null member pointer (4.11), or boolean (4.12)\n  conversion, can be performed explicitly using <code>static_cast</code>.</p>\n</blockquote>\n<p>Notice that it says <em>standard</em> conversion sequence. <code>static_cast</code> cannot perform the inverse of a user-defined conversion. It is also not hard to see why this is; if <code>static_cast</code> were required to perform the inverse of user-defined conversion sequences, it would have to have the ability to reverse arbitrary algorithms. For example, if <code>A</code> holds a pair of integers and <code>B</code> holds a single integer, and <code>A::operator B()</code> multiplies together the two integers, then the inverse would have to factor the integer in <code>B</code>...</p>\n", "OwnerUserId": "481267", "PostTypeId": "2", "Id": "25395582", "Score": "5", "CreationDate": "2014-08-20T01:51:13.523", "LastActivityDate": "2014-08-20T01:51:13.523"}, "bq_ids": {"n4140": {"so_25395534_25395582_0": {"section_id": 6033, "quality": 0.8333333333333334, "length": 20}}, "n3337": {"so_25395534_25395582_0": {"section_id": 5801, "quality": 0.8333333333333334, "length": 20}}, "n4659": {"so_25395534_25395582_0": {"section_id": 7532, "quality": 0.8333333333333334, "length": 20}}}});