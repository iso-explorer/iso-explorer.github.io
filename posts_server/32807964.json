post_cb({"32807964": {"CommentCount": "1", "ViewCount": "117", "CreationDate": "2015-09-27T12:36:21.107", "LastActivityDate": "2015-09-27T13:46:25.787", "Title": "C++ / GCC - file-scope objects' constructors aren't being called", "PostTypeId": "1", "Id": "32807964", "Score": "1", "Body": "<p>I'm beginning to develop for a Renesas RZ/A1L microcontroller. Renesas provide an IDE (e2 Studio - a modified version of Eclipse), set up to compile C / C++ with GCC. Everything works fine, but...</p>\n<p>If I declare an object in file-scope (outside of any function), its constructor is never called. For instance:</p>\n<pre><code>class NewClass {\npublic:\n    int i;\n    NewClass() {\n        i = 4;\n    }\n};\n\n\nNewClass newInstance;\n\nint main(void)\n{\n    // My program...\n}\n</code></pre>\n<p>I can tell that the constructor isn't being called because, using the in-circuit debugging setup supplied by Renesas, I can see that i is never set to 4 (even when I place further references to newInstance and i; I have optimisation switched off too). Sorry I can't do a simple cout of i's value - the code is being run in a microcontroller and I haven't worked out how to do that just yet.</p>\n<p>If I instead place the <code>NewClass newInstance;</code> line inside of main(), then the problem goes away.</p>\n<p>A further consequence of the problem is that, for inheriting classes, calling a virtual function on one (via a pointer of base-class type) causes a crash - I suspect due to the constructor having not executed and hence not written to memory some indicator of what class the object was.</p>\n<p>By what mechanism would such a constructor normally be called? I did some Googling - would it be the \".ctors\" list? (<a href=\"https://gcc.gnu.org/onlinedocs/gccint/Initialization.html\" rel=\"nofollow\">https://gcc.gnu.org/onlinedocs/gccint/Initialization.html</a>)</p>\n<p>Renesas's \"template\" C++ project does actually include code to call all of the ctors; however, from looking at my generated .map file for the project, I can see that no ctors are actually present. Does that narrow down the problem - is the GCC compiler not spitting them out when it should be?</p>\n<p>Many thanks for your help.</p>\n", "Tags": "<c++><gcc><constructor><initialization>", "OwnerUserId": "5381499", "AnswerCount": "1"}, "32808119": {"ParentId": "32807964", "LastEditDate": "2015-09-27T13:46:25.787", "CommentCount": "5", "CreationDate": "2015-09-27T12:53:36.310", "OwnerUserId": "5381557", "LastEditorUserId": "5381557", "PostTypeId": "2", "Id": "32808119", "Score": "2", "Body": "<p>Quoting the draft C++11 standard, N3337, we find that:</p>\n<blockquote>\n<p id=\"so_32807964_32808119_0\">[basic.start.main]/1 A program shall contain a global function called\n  <code>main</code>, which is the designated start of the program. It is\n  implementation-defined whether a program in a freestanding environment\n  is required to define a <code>main</code> function. [ <em>Note:</em> In a freestanding\n  environment, start-up and termination is implementation-defined;\n  start-up contains the execution of constructors for objects of\n  namespace scope with static storage duration; termination contains the\n  execution of destructors for objects with static storage duration. \u2014\n  <em>end note</em> ]</p>\n</blockquote>\n<p>As you can see, it's implementation-defined in a free-standing environment. Therefore assuming you have a 32-bit x86 GCC toolchain...</p>\n<hr/>\n<p>It sounds like you're in a freestanding environment. If so, if you want to use global constructors, there is some boilerplate you need to implement. The initialization page you linked mentions a linker line, something that would look like this:</p>\n<pre><code>i686-elf-ld crt0.o crti.o crtbegin.o foo.o bar.o crtend.o crtn.o\n</code></pre>\n<p>Assuming <code>foo.o</code> and <code>bar.o</code> are part of your program, it's <strong>required</strong> that your linker line looks like this. Note that the compiler should provide its own <code>crtbegin.o</code> and <code>crtend.o</code>, so you can find the location of those using <code>-print-file-name</code>. In a Makefile, it'd look something like this:</p>\n<pre><code>CRTBEGIN_OBJ:=$(shell $(CC) $(CFLAGS) -print-file-name=crtbegin.o)\nCRTEND_OBJ:=$(shell $(CC) $(CFLAGS) -print-file-name=crtend.o)\n</code></pre>\n<p>Now for the actual initialization function. In the same file as your kernel entry point, call <code>_init</code> before <code>kernel_main</code> (or whatever it's called.) Optionally <code>_fini</code> can be called after <code>kernel_main</code> but it's unlikely to be necessary. The exact code will depend on the architecture, but here is an example for 32-bit x86:</p>\n<pre><code>/* x86 crti.s */\n.section .init\n.global _init\n.type _init, @function\n_init:\n    push %ebp\n    movl %esp, %ebp\n    /* gcc will nicely put the contents of crtbegin.o's .init section here. */\n\n.section .fini\n.global _fini\n.type _fini, @function\n_fini:\n    push %ebp\n    movl %esp, %ebp\n    /* gcc will nicely put the contents of crtbegin.o's .fini section here. */\n\n/* x86 crtn.s */\n.section .init\n    /* gcc will nicely put the contents of crtend.o's .init section here. */\n    popl %ebp\n    ret\n\n.section .fini\n    /* gcc will nicely put the contents of crtend.o's .fini section here. */\n    popl %ebp\n    ret\n</code></pre>\n", "LastActivityDate": "2015-09-27T13:46:25.787"}, "bq_ids": {"n4140": {"so_32807964_32808119_0": {"section_id": 7145, "quality": 0.8571428571428571, "length": 36}}, "n3337": {"so_32807964_32808119_0": {"section_id": 6889, "quality": 0.8571428571428571, "length": 36}}, "n4659": {"so_32807964_32808119_0": {"section_id": 8646, "quality": 0.8095238095238095, "length": 34}}}});