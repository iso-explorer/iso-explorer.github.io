post_cb({"35730741": {"Id": "35730741", "PostTypeId": "2", "Body": "<p>\"Undefined behaviour\" means the C resp. C++ standards don't define the behaviour of your program. If your program contains inline assembly, it should be pretty clear that its behaviour won't normally be described by either the C or the C++ standard. Some other standard might even define the behaviour, but that still doesn't mean \"defined behaviour\" in the context of the C or C++ standard.</p>\n<p>That said, the C standard does require documentation of supported extensions. If the behaviour of your program can be inferred from your implementation's documentation, and your implementation makes your program behave differently, that is a failure of your implementation to conform to the standard:</p>\n<blockquote>\n<p id=\"so_35730650_35730741_0\"><strong>4. Conformance</strong></p>\n<p id=\"so_35730650_35730741_1\">8 An implementation shall be accompanied by a document that defines all implementation-defined and locale-specific characteristics and all extensions.</p>\n</blockquote>\n<p>For C++, this requirement has been weakened:</p>\n<blockquote>\n<p id=\"so_35730650_35730741_2\"><strong>1.4 Implementation compliance [intro.compliance]</strong></p>\n<p id=\"so_35730650_35730741_3\">9 Each implementation shall include documentation that identifies all conditionally-supported constructs that it does not support and defines all locale-specific characteristics.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_35730650_35730741_4\"><strong>1.9 Program execution [intro.execution]</strong></p>\n<p id=\"so_35730650_35730741_5\">2 Certain aspects and operations of the abstract machine are described in this International Standard as implementation-defined [...] Each implementation shall include documentation describing its characteristics and behavior in these respects. [...]</p>\n</blockquote>\n<p>I'm unable to find a requirement for extensions to be documented, and if documented, to be documented correctly. This would suggest that in C++, even if your implementation defines the behaviour of your program as an extension, if it turns out the documentation is wrong, that's just too bad.</p>\n<p>For the C++ semi-standard <code>asm</code> statement (as mentioned in the comments, \"The <code>asm</code> declaration is conditionally-supported; its meaning is implementation-defined.\"), if your implementation supports it it needs to be documented, but of course it's common practice for implementations to support inline assembly in a different manner than hinted by the C++ standard, so this doesn't give you much extra.</p>\n", "LastEditorUserId": "743382", "LastActivityDate": "2016-03-01T18:53:23.493", "Score": "8", "CreationDate": "2016-03-01T18:36:15.167", "ParentId": "35730650", "CommentCount": "2", "OwnerUserId": "743382", "LastEditDate": "2016-03-01T18:53:23.493"}, "35730650": {"ViewCount": "263", "Body": "<p>Let's say you know your software will only run on two's complement machines where signed overflow behavior is nicely defined. Signed overflow is still undefined behavior in C and C++ and the compiler is free to replace your entire program with \"ret\", start a nuclear war, format your drive, or make demons fly out of your nose.</p>\n<p>Suppose you have signed overflow in inline asm, does your program still invoke UB?</p>\n<p>If yes, What about separately compiled and linked assembler?</p>\n", "AcceptedAnswerId": "35730741", "Title": "Does undefined behavior apply to asm code?", "CreationDate": "2016-03-01T18:31:02.133", "Id": "35730650", "CommentCount": "9", "FavoriteCount": "3", "PostTypeId": "1", "LastEditDate": "2016-11-30T06:25:36.310", "LastEditorUserId": "224132", "LastActivityDate": "2016-11-30T06:25:36.310", "Score": "12", "OwnerUserId": "152580", "Tags": "<c++><c><assembly><language-lawyer><undefined-behavior>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_35730650_35730741_3": {"length": 14, "quality": 1.0, "section_id": 5777}, "so_35730650_35730741_5": {"length": 17, "quality": 0.9444444444444444, "section_id": 5798}}, "n3337": {"so_35730650_35730741_3": {"length": 14, "quality": 1.0, "section_id": 5550}, "so_35730650_35730741_5": {"length": 17, "quality": 0.9444444444444444, "section_id": 5571}}, "n4659": {"so_35730650_35730741_3": {"length": 14, "quality": 1.0, "section_id": 7234}, "so_35730650_35730741_5": {"length": 17, "quality": 0.9444444444444444, "section_id": 7257}}}, "35731368": {"Id": "35731368", "PostTypeId": "2", "Body": "<p>As soon as you say that you have signed overflow in inline asm, it means that you are speaking of a particuliar compiler (or a set of compiler) because in C as in C++ the support for asm declaration and its meaning are <em>compiler defined</em>.</p>\n<p>If the compiler defines the asm keyword by allowing direct inclusion of assembly code in its output and if the machine allows signed overflow, then a signed overflow in the inline asm is perfectly defined <strong>for that compiler and that machine</strong>: it is what the processor will give as result. You should still control whether it can result in a trap representation for a signed integer but anyway it is <strong>defined</strong>. The only case that would end in UB would be when the compiler says that some representation in signed integer will cause undefined behaviour. But I know none that do and you are already in the context of a defined and finite set of compilers and machines.</p>\n<p>Separate compilation of an assembly module and C and/or C++ code would be the same for that set of compilers and machines: result is <strong>implementation defined</strong> which is not the same as UB.</p>\n<p>Another example of something that is explicitely implementation defined in the standards (both C and C++) is whether <code>char</code> type is signed or not: if you do not know what compiler you use, you cannot rely on it, but <strong>as soon as you choose a compiler implementation</strong>, that implementation is required to say whether it is signed or unsigned, and it is <strong>not</strong> undefined behaviour, meaning that the compiler cannot replace the full code with a ret for example.</p>\n", "LastActivityDate": "2016-03-01T19:09:46.437", "CommentCount": "0", "CreationDate": "2016-03-01T19:09:46.437", "ParentId": "35730650", "Score": "3", "OwnerUserId": "3545273"}});