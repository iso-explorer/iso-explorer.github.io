post_cb({"23545475": {"ParentId": "23544066", "PostTypeId": "2", "CommentCount": "12", "Body": "<p>You need to repeat <code>std::enable_if&lt;condition&gt;</code> as the third parameter of <code>my class</code> in the definition of the conversion operator:</p>\n<pre><code>template&lt;typename T, std::size_t Size&gt;\ntemplate&lt;std::size_t S, typename&gt;\nmy_class&lt;T, Size,    typename std::enable_if&lt;condition&gt;::type&gt;::\n                  // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\noperator other_class&lt;T, 1, Size&gt;(){\n    // return ...\n}\n</code></pre>\n<p>So this definition is instantiated whenever <code>my_class</code> specialization is, under the same <code>condition</code>. Otherwise, you get into the primary template of <code>my_class</code> which is undefined (hence incomplete).</p>\n<p>Using dummy conditions, this <a href=\"http://coliru.stacked-crooked.com/a/fee61ac26d61d145\" rel=\"nofollow noreferrer\">compiles in gcc/clang</a>. </p>\n<p><strong>EDIT</strong></p>\n<p>Checking <a href=\"https://stackoverflow.com/q/6138439/2644390\">Understanding (simple?) C++ Partial Template Specialization</a>, I now realize that when the template parameter list in <code>my_class</code> specialization and conversion operator definition do not match exactly, the compiler interprets the latter as a <em>member function specialization</em> for a class that is not specialized itself. This is not allowed.</p>\n<p>I understand this must be the case because I get exactly the same compiler errors:</p>\n<ul>\n<li>gcc: <code>invalid use of incomplete type my_class&lt;T, Size&gt;</code>, and</li>\n<li>clang: <code>nested name specifier 'my_class&lt;T, Size&gt;::' for declaration does not refer into a class, class template or class template partial specialization</code>.</li>\n</ul>\n<p>(of course, neither message is really helpful).</p>\n<p>Here is a <a href=\"http://coliru.stacked-crooked.com/a/faa9022491d6c3bb\" rel=\"nofollow noreferrer\">reduced example</a> reproducing the error:</p>\n<pre><code>template&lt;typename T&gt;\nusing enable = typename std::enable_if&lt;sizeof(T)&gt;=0&gt;::type;\n\ntemplate&lt;typename T, typename = void&gt;\nstruct A;\n\ntemplate&lt;typename T&gt;\nstruct A&lt;T, enable&lt;T&gt;&gt;{ void f(); };\n\ntemplate&lt;typename T&gt;\nvoid A&lt;T, enable&lt;T&gt;&gt;::  // compiles\n// void A&lt;T&gt;::  // does not compile\nf() { }\n</code></pre>\n<p><strong>EDIT 2</strong></p>\n<p>I think the following applies from iso 14.5.5.3/1:</p>\n<p><strong>14.5.5.3 Members of class template specializations</strong></p>\n<blockquote id=\"so_23544066_23545475_0\">\n<ol>\n<li>The template parameter list of a member of a class template partial specialization shall match the template parameter list of the class template partial specialization. The template argument list of a member of a class template partial specialization shall match the template argument list of the class template partial specialization.</li>\n</ol>\n</blockquote>\n", "OwnerUserId": "2644390", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T10:26:08.033", "Id": "23545475", "Score": "1", "CreationDate": "2014-05-08T14:59:09.350", "LastActivityDate": "2014-05-08T16:31:48.923"}, "23544066": {"CommentCount": "7", "ViewCount": "486", "PostTypeId": "1", "LastEditorUserId": "2297448", "CreationDate": "2014-05-08T14:03:32.717", "LastActivityDate": "2014-05-08T16:31:48.923", "Title": "Invalid use of incomplete type in conversion operator with forward declaration", "LastEditDate": "2014-05-08T14:45:25.707", "Id": "23544066", "Score": "1", "Body": "<p>I have a class defined in a header file like this(although this is a stripped down version):</p>\n<p><strong>my_class.hpp</strong></p>\n<pre><code>// header guard\n\ntemplate&lt;typename T, std::size_t First, std::size_t Second, class Enable = void&gt;\nclass other_class;\n\ntemplate&lt;typename T, std::size_t Size, class Enable = void&gt;\nclass my_class;                        // I have my reasons\n\ntemplate&lt;typename T, std::size_t Size&gt;\nclass my_class&lt;T, Size, typename std::enable_if&lt;condition1&gt;::type&gt;{\n    public:\n        template&lt;\n                std::size_t S = Size,\n                typename = typename std::enable_if&lt;other_condition1&gt;::type\n        &gt;\n        operator other_class&lt;T, 1, Size&gt;();\n};\n\ntemplate&lt;typename T, std::size_t Size&gt;\nclass my_class&lt;T, Size, typename std::enable_if&lt;condition2&gt;::type&gt;{\n    public:\n        template&lt;\n                std::size_t S = Size,\n                typename = typename std::enable_if&lt;other_condition2&gt;::type\n        &gt;\n        operator other_class&lt;T, 1, Size&gt;();\n};\n</code></pre>\n<p>then another class in a header file like this:</p>\n<p><strong>other_class.hpp</strong></p>\n<pre><code>#include \"my_class.hpp\"\n\ntemplate&lt;typename T, std::size_t First, std::size_t Second&gt;\nclass other_class&lt;T, First, Second, typename std::enable_if&lt;condition&gt;::type&gt;{\n    public:\n        other_class(...){\n            // ...\n        }\n\n        my_class&lt;T, First&gt; data[Second];\n};\n\ntemplate&lt;typename T, std::size_t Size&gt;\ntemplate&lt;std::size_t S, typename&gt;\nmy_class&lt;T, Size&gt;::operator other_class&lt;T, 1, Size&gt;(){\n    return other_class&lt;T, 1, Size&gt;(...);\n}\n</code></pre>\n<p>and all was well until I wanted to define that conversion operator :/ Now I am getting an error about incomplete type <code>class my_class&lt;T, Size&gt;</code> in the implementation of the operator.</p>\n<p>This seems very strange to me as I have been using <code>my_class</code> as the data for <code>other_class</code> just fine and that would require it to be complete (it calls the default constructor of the class).</p>\n<p>What exactly is causing the error here?</p>\n<p>System is Ubuntu 14.04 with GCC 4.8.2</p>\n", "Tags": "<c++><templates><c++11>", "OwnerUserId": "2297448", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_23544066_23545475_0": {"section_id": 149, "quality": 0.9411764705882353, "length": 32}}, "n3337": {"so_23544066_23545475_0": {"section_id": 143, "quality": 0.9411764705882353, "length": 32}}, "n4659": {"so_23544066_23545475_0": {"section_id": 153, "quality": 0.9411764705882353, "length": 32}}}});