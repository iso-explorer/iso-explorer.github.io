post_cb({"13517187": {"ParentId": "13490805", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>While <a href=\"https://stackoverflow.com/a/13490908/14558\">unwind's answer</a> explains why <code>gcc</code> doesn't warn about this, it doesn't say what you can do about it.</p>\n<p><code>gcc</code>'s <code>-Wc++-compat</code> warning option will detect this particular issue with the message:</p>\n<pre><code>foo.c: In function \u2018main\u2019:\nfoo.c:3:17: warning: initializer-string for array chars is too long for C++ [-Wc++-compat]\n</code></pre>\n<p>That's the only option that will cause <code>gcc</code> to warn about this problem. You can write a short script to quickly grep the warning options out of <code>gcc</code>'s man page, try compiling with each, and see if it complains.</p>\n<pre><code>$ time for F in $(man gcc | grep -o -- '-W[^= ]*')\n    do if gcc -c \"${F}\" foo.c |&amp; grep :3 &gt;&amp; /dev/null; then\n         echo \"${F}\"; gcc -c \"${F}\" foo.c\n    fi\n  done\nman gcc | grep -o -- '-W[^= ]*')\nman gcc | grep -o -- '-W[^= ]*'\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wc++-compat\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:17: warning: initializer-string for array chars is too long for C++ [-Wc++-compat]\n-Wunused\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wunused-variable\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wtraditional\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:5: warning: traditional C rejects automatic aggregate initialization [-Wtraditional]\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wunused-variable\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wunused\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wunused\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wunused\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wunused-variable\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wunused\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wunused\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wunused\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wtraditional\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:5: warning: traditional C rejects automatic aggregate initialization [-Wtraditional]\n-Wtraditional\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:5: warning: traditional C rejects automatic aggregate initialization [-Wtraditional]\n-Wc++-compat\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:17: warning: initializer-string for array chars is too long for C++ [-Wc++-compat]\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wtraditional\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:5: warning: traditional C rejects automatic aggregate initialization [-Wtraditional]\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wall\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:10: warning: unused variable \u2018a\u2019 [-Wunused-variable]\n-Wtraditional\nfoo.c: In function \u2018main\u2019:\nfoo.c:3:5: warning: traditional C rejects automatic aggregate initialization [-Wtraditional]\n\nreal    0m26.399s\nuser    0m5.128s\nsys 0m15.329s\n</code></pre>\n<hr>\n<p>In general, a <a href=\"http://en.wikipedia.org/wiki/Lint_(software)\" rel=\"nofollow noreferrer\">lint</a>-like tool such as <a href=\"http://www.splint.org/\" rel=\"nofollow noreferrer\"><code>splint</code> </a> will warn you about all sorts of potential issues. In this case, it will say:</p>\n<pre><code>foo.c:3:17: String literal with 8 characters is assigned to char [7] (no room\n               for null terminator): \"Network\"\n  A string literal is assigned to a char array that is not big enough to hold\n  the null terminator. (Use -stringliteralnoroom to inhibit warning)\nfoo.c:3:10: Variable a declared but not used\n</code></pre>\n</hr>", "OwnerUserId": "14558", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:53:49.883", "Id": "13517187", "Score": "0", "CreationDate": "2012-11-22T16:58:11.937", "LastActivityDate": "2012-11-22T16:58:11.937"}, "13490968": {"ParentId": "13490805", "CommentCount": "1", "Body": "<p>The preffered way of declaring a string literal is usually:</p>\n<pre><code>   char a[] = \"Network\";\n   printf(\"size of a: %d\\n\", sizeof a); // The compiler 'knows' the size of a.\n   // this prints '8'\n</code></pre>\n<p>Let the compiler figure it out. It's cumbersome to manually specify the array size and keep it in sync with the string literal's actual length...</p>\n<p>So I guess GCC doesn't really bother with anything more than a warning.</p>\n", "OwnerUserId": "1517161", "PostTypeId": "2", "Id": "13490968", "Score": "3", "CreationDate": "2012-11-21T10:15:53.747", "LastActivityDate": "2012-11-21T10:15:53.747"}, "13490908": {"ParentId": "13490805", "PostTypeId": "2", "CommentCount": "6", "Body": "<p>Initializing a char array with a string literal that is larger than it is fine in C, but wrong in C++. That explains the difference in behavior between gcc and VC++.</p>\n<p>You would get no error if you compiled the same as a C file with VC++. And you would get an error if you compiled it as a C++ file with g++.</p>\n<p>The C standard says:</p>\n<blockquote>\n<p id=\"so_13490805_13490908_0\">An array of character type may be initialized by a character string\n  literal or UTF\u22128 string literal, optionally enclosed in braces.\n  Successive bytes of the string literal (including the terminating null\n  character if there is room or if the array is of unknown size)\n  initialize the elements of the array.</p>\n<p id=\"so_13490805_13490908_1\"><em>[...]</em></p>\n<p id=\"so_13490805_13490908_2\">EXAMPLE 8</p>\n<p id=\"so_13490805_13490908_3\">The declaration </p>\n<pre><code>char s[] = \"abc\", t[3] = \"abc\";\n</code></pre>\n<p id=\"so_13490805_13490908_4\">defines \u2018\u2018plain\u2019\u2019 char array objects <code>s</code> and <code>t</code> whose elements are initialized\n  with character string literals.\n       This declaration is identical to</p>\n<pre><code>char s[] = { 'a', 'b', 'c', '\\0' },\n     t[] = { 'a', 'b', 'c' };\n</code></pre>\n</blockquote>\n<p><em>(Section 6.7.9 of the <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\" rel=\"noreferrer\">C11 draft standard</a>, actual wording in final standard might be different.)</em></p>\n<p>This means that it's perfectly correct to drop the termination character if the array doesn't have room for it. It's maybe unexpected, but it's exactly how the language is supposed to work, and a (at least to me) well-known feature.</p>\n<p>On the contrary, the C++ standard says:</p>\n<blockquote>\n<p id=\"so_13490805_13490908_5\">There shall not be more initializers than there are array elements.</p>\n<p id=\"so_13490805_13490908_6\">Example:</p>\n<pre><code> char cv[4] = \"asdf\"; // error\n</code></pre>\n<p id=\"so_13490805_13490908_7\">is ill-formed since there is no space for the implied trailing '\\0'.</p>\n</blockquote>\n<p><em>(8.5.2 of the C++ 2011 draft <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\" rel=\"noreferrer\">n3242</a>.)</em></p>\n", "OwnerUserId": "28169", "LastEditorUserId": "531179", "LastEditDate": "2013-07-02T15:21:43.563", "Id": "13490908", "Score": "21", "CreationDate": "2012-11-21T10:12:42.210", "LastActivityDate": "2013-07-02T15:21:43.563"}, "13490805": {"CommentCount": "3", "AcceptedAnswerId": "13490908", "PostTypeId": "1", "LastEditorUserId": "560648", "CreationDate": "2012-11-21T10:07:58.070", "LastActivityDate": "2013-07-02T15:21:43.563", "LastEditDate": "2012-11-23T14:15:50.433", "ViewCount": "5484", "FavoriteCount": "1", "Title": "Why does gcc allow char array initialization with string literal larger than array?", "Id": "13490805", "Score": "12", "Body": "<pre><code>int main()\n{\n    char a[7] = \"Network\";\n    return 0;\n}\n</code></pre>\n<p>A <strong>string literal</strong> in C is terminated internally with a <strong>nul character</strong>. So, the above code should give a compilation error since the actual length of the string literal <code>Network</code> is 8 and it cannot fit in a <code>char[7]</code> array.</p>\n<p>However, <strong>gcc</strong> (even with <code>-Wall</code>) on Ubuntu compiles this code without any error or warning.\nWhy does gcc allow this and not flag it as compilation error?</p>\n<p>gcc only gives a warning (still no error!) when the char array size is smaller than the string literal. For example, it warns on:</p>\n<pre><code>char a[6] = \"Network\";\n</code></pre>\n<p>[Related] <strong>Visual C++ 2012</strong> gives a compilation error for <code>char a[7]</code>:</p>\n<pre><code>1&gt;d:\\main.cpp(3): error C2117: 'a' : array bounds overflow\n1&gt; d:\\main.cpp(3) : see declaration of 'a'\n</code></pre>\n", "Tags": "<c++><c><compiler-errors><string-literals><arrays>", "OwnerUserId": "1630", "AnswerCount": "4"}, "13491077": {"ParentId": "13490805", "CommentCount": "0", "Body": "<p>In the early days of C and Unix, memory and disk were small, so not storing the NUL byte at the end of the string was actually a technique that was used. If the string variable is seven characters long, you could store a seven-character string in it, and since seven was the max length, you knew the string ended there, even without the terminator character. This is why <strong>strncpy</strong> works the way it does.</p>\n", "OwnerUserId": "15727", "PostTypeId": "2", "Id": "13491077", "Score": "3", "CreationDate": "2012-11-21T10:20:59.957", "LastActivityDate": "2012-11-21T10:20:59.957"}, "bq_ids": {"n4140": {"so_13490805_13490908_5": {"section_id": 3315, "quality": 1.0, "length": 7}, "so_13490805_13490908_7": {"section_id": 3315, "quality": 1.0, "length": 6}, "so_13490805_13490908_0": {"section_id": 3314, "quality": 0.5333333333333333, "length": 16}}, "n3337": {"so_13490805_13490908_7": {"section_id": 3185, "quality": 1.0, "length": 6}, "so_13490805_13490908_5": {"section_id": 3185, "quality": 1.0, "length": 7}}, "n4659": {"so_13490805_13490908_0": {"section_id": 4080, "quality": 0.5333333333333333, "length": 16}, "so_13490805_13490908_7": {"section_id": 4081, "quality": 1.0, "length": 6}, "so_13490805_13490908_5": {"section_id": 4081, "quality": 1.0, "length": 7}}}});