post_cb({"23874077": {"CommentCount": "1", "AcceptedAnswerId": "23874224", "PostTypeId": "1", "LastEditorUserId": "125997", "CreationDate": "2014-05-26T16:10:02.367", "LastActivityDate": "2016-02-29T16:59:11.667", "LastEditDate": "2014-05-26T16:18:17.767", "ViewCount": "1353", "FavoriteCount": "1", "Title": "No warning for implicit cast of bool to floating type?", "Id": "23874077", "Score": "4", "Body": "<p>Looks like this snippet compiles in clang without warning, even with -Weverything:</p>\n<pre><code>double x;\n...\nif (fabs(x &gt; 1.0)) {\n   ...\n}\n</code></pre>\n<p>Am I missing something? Or do the compiler and C++ standard think that casting <code>bool</code> to <code>double</code> is something that makes sense?</p>\n", "Tags": "<c++><clang><compiler-warnings><implicit-conversion>", "OwnerUserId": "125997", "AnswerCount": "1"}, "23874224": {"ParentId": "23874077", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>This is a consequence of making <code>bool</code> an integral type. According to C++ standard, section 3.9.1.6</p>\n<blockquote>\n<p id=\"so_23874077_23874224_0\">Values of type bool are either <code>true</code> or <code>false</code> (Note: There are no <code>signed</code>, <code>unsigned</code>, <code>short</code>, or <code>long</code> <code>bool</code> types or values. \u2014 end note) <strong>Values of type bool participate in integral promotions</strong>. (emphasis is added)</p>\n</blockquote>\n<p>This makes values of <code>bool</code> expressions to be promoted to <code>float</code> in the same way the <code>int</code>s are promoted, without a warning, as described in section 4.5.6:</p>\n<blockquote>\n<p id=\"so_23874077_23874224_1\">A prvalue of type <code>bool</code> can be converted to a prvalue of type <code>int</code>, with <code>false</code> becoming zero and <code>true</code> becoming one.</p>\n</blockquote>\n<p><strong>EDIT :</strong> Starting with C++11 <code>fabs</code> offers additional overloads for integral types, so the promotion goes directly from <code>bool</code> to <code>int</code>, and stops there, because an overload of <code>fabs</code> is available for it.</p>\n", "OwnerUserId": "335858", "LastEditorUserId": "335858", "LastEditDate": "2014-05-26T16:25:30.727", "Id": "23874224", "Score": "6", "CreationDate": "2014-05-26T16:20:09.027", "LastActivityDate": "2014-05-26T16:25:30.727"}, "bq_ids": {"n4140": {"so_23874077_23874224_0": {"section_id": 7215, "quality": 0.8, "length": 20}, "so_23874077_23874224_1": {"section_id": 26, "quality": 1.0, "length": 14}}, "n3337": {"so_23874077_23874224_0": {"section_id": 6959, "quality": 0.8, "length": 20}, "so_23874077_23874224_1": {"section_id": 23, "quality": 1.0, "length": 14}}, "n4659": {"so_23874077_23874224_0": {"section_id": 8724, "quality": 0.8, "length": 20}, "so_23874077_23874224_1": {"section_id": 26, "quality": 1.0, "length": 14}}}});