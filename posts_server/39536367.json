post_cb({"39536690": {"ParentId": "39536367", "PostTypeId": "2", "CommentCount": "9", "Body": "<p>In fact there is an error with your code. MSVC is right while GCC is simply wrong.</p>\n<p>The syntax for pointer to member function doesn't work like that. You <strong>have</strong> to put the <code>&amp;</code> in front of the expression:</p>\n<pre><code>//check for member helper structures\ntemplate&lt;class, class = void&gt;\nstruct has_abc : std::false_type {};\n\ntemplate&lt;class T&gt;\nstruct has_abc&lt;T, void_t&lt;decltype(&amp;T::abc)&gt;&gt; : std::true_type {};\n//     Notice the '&amp;' there ------^\n</code></pre>\n<p>The syntax for <code>T::member</code> only work with static data member, and <code>typename T::member</code> work for member types. While working with sfinae, it's important to distinguish small syntax properties and differences.</p>\n<p>As a request in the comment, here's multiple statement that shows that non static member cannot be referenced without the <code>&amp;</code> with GCC 5.3: <a href=\"https://godbolt.org/g/SwmtG2\" rel=\"nofollow\">https://godbolt.org/g/SwmtG2</a></p>\n<p>Here's an example with GCC: <a href=\"http://coliru.stacked-crooked.com/a/0ee57c2c34b32753\" rel=\"nofollow\">http://coliru.stacked-crooked.com/a/0ee57c2c34b32753</a></p>\n<p>Here's an example with MSVC: <a href=\"http://rextester.com/FJH22266\" rel=\"nofollow\">http://rextester.com/FJH22266</a></p>\n<p>Here's the section from the C++ standard that explicitly state that without the <code>&amp;</code>, the expression is not well formed:</p>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/expr.prim.id#2\" rel=\"nofollow\"> [expr.prim.id]/2 </a></p>\n<blockquote>\n<p id=\"so_39536367_39536690_0\">An id-expression that denotes a non-static data member or non-static member function of a class can only be used:</p>\n<ul>\n<li><p id=\"so_39536367_39536690_1\">as part of a class member access ([expr.ref]) in which the object expression refers to the member's class or a class derived from that class,</p></li>\n<li><p id=\"so_39536367_39536690_2\">or to form a pointer to member ([expr.unary.op]), or</p></li>\n<li><p id=\"so_39536367_39536690_3\">if that id-expression denotes a non-static data member and it appears in an unevaluated operand. [ Example:</p></li>\n</ul>\n</blockquote>\n<p>-</p>\n<blockquote>\n<pre><code> struct S {\n   int m;\n };\n\n int i = sizeof(S::m);           // OK\n int j = sizeof(S::m + 42);      // OK\n</code></pre>\n<p id=\"so_39536367_39536690_4\">\u2014 end example ]</p>\n</blockquote>\n<hr>\n<p>As we discussed in the chat, we concluded that the reason there is a difference with the two compilers is that both GCC and MSVC has bugs that prevent this code to work well. As mentionned, MSVC will refuse to apply the SFINAE rule if there is an unrelated class that don't implement the rule correctly: <a href=\"http://rextester.com/FGLF68000\" rel=\"nofollow\">http://rextester.com/FGLF68000</a></p>\n<p>Note that sometime, changing the name of a type trait helped MSVC to parse my code correctly, but it's mostly unreliable.</p>\n<p>Consider reporting a bug to microsoft and upgrade your GCC version if you want your code to work as expected.</p>\n</hr>", "OwnerUserId": "2104697", "LastEditorUserId": "2104697", "LastEditDate": "2016-09-16T19:00:13.577", "Id": "39536690", "Score": "2", "CreationDate": "2016-09-16T17:00:50.120", "LastActivityDate": "2016-09-16T19:00:13.577"}, "39537286": {"ParentId": "39536367", "CommentCount": "1", "Body": "<p>this way  works:</p>\n<pre><code>template&lt;class T&gt;\nstruct has_abc&lt;T, void_t&lt;decltype(std::declval&lt;T&gt;().abc())&gt;&gt; : std::true_type\n{ };\n</code></pre>\n", "OwnerUserId": "6579744", "PostTypeId": "2", "Id": "39537286", "Score": "0", "CreationDate": "2016-09-16T17:39:12.373", "LastActivityDate": "2016-09-16T17:39:12.373"}, "39536367": {"CommentCount": "4", "ViewCount": "87", "PostTypeId": "1", "OwnerDisplayName": "user6728195", "CreationDate": "2016-09-16T16:37:21.170", "LastActivityDate": "2016-09-16T19:00:13.577", "LastEditDate": "2016-09-16T18:38:01.877", "AcceptedAnswerId": "39536690", "LastEditorDisplayName": "user6728195", "Title": "Wrong output for SFINAE member detect in MSVC2015", "Id": "39536367", "Score": "2", "Body": "<p>I was learning about SFINAE and how to easy implement it with <code>void_t</code>. But I get different output for different compilers:</p>\n<pre><code>//pre c++17 void_t definition:\ntemplate&lt;class... Ts&gt; struct make_void {typedef void type;};\ntemplate&lt;class... Ts&gt; using void_t = typename make_void&lt;Ts...&gt;::type;\n\n//check for member helper structures\ntemplate&lt;class, class = void&gt;\nstruct has_abc : std::false_type\n{ };\n\ntemplate&lt;class T&gt;\nstruct has_abc&lt;T, void_t&lt;decltype(T::abc)&gt;&gt; : std::true_type\n{ };\n\nclass has\n{\npublic:\n    void abc();\n};\n\nclass has_not\n{ };\n\nint main()\n{\n    std::cout &lt;&lt; has_abc&lt;has&gt;::value &lt;&lt; std::endl;\n    std::cout &lt;&lt; has_abc&lt;has_not&gt;::value &lt;&lt; std::endl;\n}\n</code></pre>\n<p>GCC 5.3.0 prints expected output <code>1 0</code>, but MSVC 2015 prints <code>0 0</code>, why?</p>\n<hr>\n<p>EDIT:</p>\n<p>Additional example with working GCC 5.3.0 code that supposedly violates c++ syntax:</p>\n<pre><code>template&lt;class T&gt;\nvoid test()\n{\n    std::cout &lt;&lt; std::is_same&lt;decltype(T::func), void(T::*)(void)&gt;::value &lt;&lt; std::endl;\n}\n\nclass Test\n{\npublic:\n    void func();\n};\n\nint main()\n{\n    test&lt;Test&gt;();\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>1\n</code></pre>\n</hr>", "Tags": "<c++><templates><sfinae>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_39536367_39536690_1": {"section_id": 5959, "quality": 0.9230769230769231, "length": 12}, "so_39536367_39536690_0": {"section_id": 5959, "quality": 1.0, "length": 10}, "so_39536367_39536690_3": {"section_id": 5959, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_39536367_39536690_1": {"section_id": 5728, "quality": 0.9230769230769231, "length": 12}, "so_39536367_39536690_0": {"section_id": 5728, "quality": 1.0, "length": 10}, "so_39536367_39536690_3": {"section_id": 5728, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_39536367_39536690_1": {"section_id": 7440, "quality": 0.9230769230769231, "length": 12}, "so_39536367_39536690_0": {"section_id": 7440, "quality": 1.0, "length": 10}, "so_39536367_39536690_3": {"section_id": 7440, "quality": 0.8888888888888888, "length": 8}}}});