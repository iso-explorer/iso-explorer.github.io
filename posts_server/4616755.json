post_cb({"4619086": {"Id": "4619086", "PostTypeId": "2", "Body": "<p>Perhaps the important thing to know about in the statement <code>if (!someArray[i])</code> is the precedence of the operators.</p>\n<p>first [ is evaluated, then ! is evaluated.</p>\n<p>Writing it in a longer form might be</p>\n<pre><code>sometype a = someArray[i];\nif(!a)\n</code></pre>\n", "LastActivityDate": "2011-01-06T19:42:26.850", "CommentCount": "0", "CreationDate": "2011-01-06T19:42:26.850", "ParentId": "4616755", "Score": "0", "OwnerUserId": "37558"}, "4616833": {"Id": "4616833", "PostTypeId": "2", "Body": "<p>It means simply that if the value in someArray[i] is interpreted as false (either a zero value, or boolean false), then the code will enter the if block. </p>\n<p>Assume the following uncompiled/untested code:</p>\n<pre><code>//we make an array with some chars, but have one as NULL (0)\nchar someArray[] = { 'a', 'b', 'c', 0, 'e' };\n\n//we loop through the array using i as the index\nfor(int i = 0; i &lt; 5; ++i)\n{\n    if(!someArray[i]) //if this entry is null (0) or false, show an error:\n    {\n        printf(\"%d does not have a char!\\n\", i);\n    }\n    else //otherwise, print the contents\n    {\n        printf(\"%d is %c\\n\", i, someArray[i]);\n    }\n}\n</code></pre>\n<p>Expected output would be:</p>\n<ul>\n<li>0 is a </li>\n<li>1 is b </li>\n<li>2 is c </li>\n<li>3 does not have a char! </li>\n<li>4 is e</li>\n</ul>\n", "LastActivityDate": "2011-01-06T15:56:24.037", "CommentCount": "0", "CreationDate": "2011-01-06T15:56:24.037", "ParentId": "4616755", "Score": "1", "OwnerUserId": "135758"}, "4616903": {"Id": "4616903", "PostTypeId": "2", "Body": "<p>In C, it's equivalent to writing</p>\n<pre><code>if (someArray[i] == 0)\n</code></pre>\n<p>From the C language standard (<a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\" rel=\"nofollow\">n1256</a>):</p>\n<blockquote id=\"so_4616755_4616903_0\">\n<b>6.5.3.3 Unary arithmetic operators</b><br><br>\n<b>Constraints</b><br><br>\n1 The operand of the unary <code>+</code> or <code>-</code> operator shall have arithmetic type; of the <code>~</code> operator, integer type; of the <code>!</code> operator, scalar type.<br><br>\n<b>Semantics</b><br>\n...<br><br>\n5 The result of the logical negation operator <code>!</code> is 0 if the value of its operand compares unequal to 0, 1 if the value of its operand compares equal to 0. The result has type <code>int</code>. The expression <code>!E</code> is equivalent to <code>(0==E)</code>.\n</br></br></br></br></br></br></br></br></br></blockquote>\n<p>As Kos and John Dibling pointed out, the situation in C++ is different.  From the latest C++ draft (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1905.pdf\" rel=\"nofollow\">n1905</a>)</p>\n<blockquote id=\"so_4616755_4616903_1\">\n<b>5.3.1 Unary operators</b><br>\n...<br>\n8 The operand of the logical negation operator ! is implicitly converted to <code>bool</code> (clause 4); its value is <code>true</code> if the converted operand is <code>false</code> and <code>false</code> otherwise. The type of the result is <code>bool</code>.</br></br></blockquote>\n", "LastEditorUserId": "134554", "LastActivityDate": "2011-01-06T18:39:27.273", "Score": "2", "CreationDate": "2011-01-06T16:04:18.477", "ParentId": "4616755", "CommentCount": "7", "OwnerUserId": "134554", "LastEditDate": "2011-01-06T18:39:27.273"}, "bq_ids": {"n4140": {"so_4616755_4616903_1": {"length": 17, "quality": 0.7083333333333334, "section_id": 6072}}, "n3337": {"so_4616755_4616903_1": {"length": 17, "quality": 0.7083333333333334, "section_id": 5840}}, "n4659": {"so_4616755_4616903_1": {"length": 17, "quality": 0.7083333333333334, "section_id": 7568}}}, "4616755": {"ViewCount": "182", "Body": "<p>I have a simple question for C.\nWhat does this statement mean?</p>\n<pre><code> if (!someArray[i])\n</code></pre>\n<p>I know that the operator ! means NOT. But i cannot get my head around it.\nThank you!!</p>\n", "Title": "if (!someArray[i])", "CreationDate": "2011-01-06T15:49:51.853", "LastActivityDate": "2011-01-06T19:42:26.850", "CommentCount": "4", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2011-01-06T16:08:03.650", "LastEditorUserId": "241536", "Id": "4616755", "Score": "1", "OwnerUserId": "565680", "Tags": "<c++><c>", "AnswerCount": "5"}, "4616844": {"Id": "4616844", "PostTypeId": "2", "Body": "<p>The <code>!</code> (not) operator will return <code>true</code> if the expression evaluates to a 0.  So:</p>\n<pre><code>class SomeObject\n{\n}; // eo class SomeObject\n\nstd::vector&lt;int&gt; intVector;\nstd::vector&lt;long&gt; longVector;\nstd::vector&lt;SomeObject*&gt; objectVector;\n\nintVector.push_back(1);\nintVector.push_back(0);\n\nlongVector.push_back(4049);\nlongVector.push_back(0);\n\nobjectVector.push_back(new SomeObject);\nobjectVector.push_back(NULL); // or nullptr if you're on C++0x, or even just 0!\n\n\nif(!intVector[0])\n{\n    // false, intVector[0] is not zero.\n}\n\nif(!intVector[1])\n{\n    // true!  intVector[1] is zero\n};\n</code></pre>\n<p>And the same holds true for the other two vectors.  Incidentally, the <code>!</code> operator can be overidden by a class to change the behaviour.</p>\n<p>Note also, that this is different from <strong>C#</strong> which requires that the expression be of a boolean type:</p>\n<pre><code>int i = 0;\nif(!i) { /* compile error in C# */ }\nif(i == 0) { /* ok in C# */ }\nbool b = false;\nif(!b) { /* ok in C# */ }\nif(!(i == 0)) { /* also ok */ }\n</code></pre>\n", "LastActivityDate": "2011-01-06T15:57:47.420", "CommentCount": "0", "CreationDate": "2011-01-06T15:57:47.420", "ParentId": "4616755", "Score": "1", "OwnerUserId": "437768"}, "4616773": {"Id": "4616773", "PostTypeId": "2", "Body": "<p><code>if (!someArray[i])</code> means if <code>someArray[i]</code> is zero (or convertible to false) then the code inside the <code>if</code> block will be executed, otherwise it will not be executed!</p>\n<p>If <code>someArray[i]</code> is not convertible to boolean value  OR if the <em>type</em> of <code>someArray[i]</code> doesn't define the operator <code>!</code> returning boolean value (or a value convertible to it), then your code will not compile. </p>\n<p>Note: all numbers (int, float, double, char, etc) and pointers of any type, are convertible to boolean value.</p>\n", "LastEditorUserId": "415784", "LastActivityDate": "2011-01-06T16:11:52.493", "Score": "7", "CreationDate": "2011-01-06T15:51:22.807", "ParentId": "4616755", "CommentCount": "3", "OwnerUserId": "415784", "LastEditDate": "2011-01-06T16:11:52.493"}});