post_cb({"19935868": {"CommentCount": "2", "AcceptedAnswerId": "19936210", "PostTypeId": "1", "LastEditorUserId": "1708801", "CreationDate": "2013-11-12T17:27:13.850", "LastActivityDate": "2015-09-13T02:13:14.997", "LastEditDate": "2013-11-13T04:31:08.123", "ViewCount": "166", "FavoriteCount": "0", "Title": "const qualifier accepted in ctor declaration/definition (llvm bug?)", "Id": "19935868", "Score": "4", "Body": "<p>My compiler (actually <code>Apple LLVM version 5.0 (clang-500.2.79) (based on LLVM 3.3svn)</code>) accepts (compile) that code :</p>\n<pre><code>class X {\nprivate:\n  int i;\npublic:\n  const X() { cout &lt;&lt; \"here\" &lt;&lt; endl; i=0; }\n  void f() const {}\n  void g() {}\n};\n\nint main() {\n  const X x;\n  x.f();\n  //  x.g();\n  X y;\n  y.f();\n  y.g();\n}\n</code></pre>\n<p>It works as if there is no <code>const</code> qualifier leading the ctor definition. I tried <code>-Wall</code>, <code>-pedantic</code> different kind of standard's activations, always the same... So :</p>\n<ul>\n<li>did I missed something ? I wasn't able to find that it is syntactically correct in the latest standard\u2026</li>\n<li>is this a bug of gcc/llvm ? It seems that <code>gcc/llvm</code> silently ignore the <code>const</code>.</li>\n<li>is this a feature that I missed, and for which my example is not able to demonstrate its usefulness?</li>\n</ul>\n<p>Note: gcc 3.4.3 don't compile it, nor gcc 4.4.5.</p>\n", "Tags": "<c++><gcc><constructor><const><clang>", "OwnerUserId": "719263", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_19935868_19936210_1": {"section_id": 3887, "quality": 0.7142857142857143, "length": 5}, "so_19935868_19936210_4": {"section_id": 3887, "quality": 0.7142857142857143, "length": 5}}, "n3337": {"so_19935868_19936210_1": {"section_id": 355, "quality": 1.0, "length": 7}, "so_19935868_19936210_4": {"section_id": 355, "quality": 1.0, "length": 7}, "so_19935868_19936210_0": {"section_id": 355, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_19935868_19936210_1": {"section_id": 4766, "quality": 0.7142857142857143, "length": 5}, "so_19935868_19936210_4": {"section_id": 4766, "quality": 0.7142857142857143, "length": 5}}}, "19936210": {"ParentId": "19935868", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>As far as I can tell this does not look like valid syntax, the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf\" rel=\"nofollow noreferrer\">draft C++ standard</a> section <code>12.1</code> <em>Constructors</em> paragraph <em>1</em> says:</p>\n<blockquote>\n<p id=\"so_19935868_19936210_0\">Constructors do not have names. A special declarator syntax is used to declare or define the constructor.\n  The syntax uses:</p>\n<blockquote>\n<p id=\"so_19935868_19936210_4\">\u2014 an optional decl-specifier-seq in which each decl-specifier is either a function-specifier or constexpr,</p>\n<p id=\"so_19935868_19936210_5\">\u2014 the constructor\u2019s class name, and</p>\n<p id=\"so_19935868_19936210_6\">\u2014 a parameter list</p>\n</blockquote>\n</blockquote>\n<p>and we can see from section <code>7.1.2</code> <em>Function specifiers</em> are as follows:</p>\n<pre><code>function-specifier:\n inline\n virtual\n explicit\n</code></pre>\n<p>Via Ali in the <a href=\"https://stackoverflow.com/questions/19935868/const-qualifier-accepted-in-ctor-declaration-definition-llvm-bug/19936210#comment29669891_19935868\">comment above</a> a <a href=\"http://llvm.org/bugs/show_bug.cgi?id=17898\" rel=\"nofollow noreferrer\">bug report</a> was filed for this it was confirmed and resolved.</p>\n", "OwnerUserId": "1708801", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:07:55.510", "Id": "19936210", "Score": "3", "CreationDate": "2013-11-12T17:43:00.363", "LastActivityDate": "2015-09-13T02:13:14.997"}});