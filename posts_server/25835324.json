post_cb({"bq_ids": {"n4140": {"so_25835324_25835372_0": {"length": 26, "quality": 0.9629629629629629, "section_id": 6000}}, "n3337": {"so_25835324_25835372_0": {"length": 19, "quality": 0.7037037037037037, "section_id": 5768}}}, "25835470": {"PostTypeId": "2", "Body": "<p><code>void</code> type is and has always been special. It is indeed incomplete, but it is allowed in many contexts where a complete type is typically expected. Otherwise, for one example, a definition of a <code>void</code> function would be invalid because of incompleteness of <code>void</code> type. It is also possible to write expressions of <code>void</code> type (any call to a <code>void</code> function is an example of such expression).</p>\n<p>Even in C language you can use immediate expressions of <code>void</code> type like <code>(void) 0</code>. What you have in your code is just an example of C++-specific syntax that does essentially the same thing: it produces a no-op expression of type <code>void</code>.</p>\n", "LastActivityDate": "2014-09-15T14:42:00.850", "LastEditorUserId": "187690", "Id": "25835470", "CommentCount": "0", "CreationDate": "2014-09-14T16:31:40.180", "ParentId": "25835324", "Score": "3", "OwnerUserId": "187690", "LastEditDate": "2014-09-15T14:42:00.850"}, "25835372": {"PostTypeId": "2", "Body": "<p>C++11 \u00a75.2.3 [expr.type.conv]/2 goes into detail (emphasis mine):</p>\n<blockquote>\n<p id=\"so_25835324_25835372_0\">The expression T(), where T is a simple-type-specifier or typename-specifier for a non-array complete object type or the (possibly cv-qualified) void type, <strong>creates a prvalue of the specified type</strong>, whose value is that produced by value-initializing (8.5) an object of type T; <strong>no initialization is done for the void() case</strong>.</p>\n</blockquote>\n<p>It's just a prvalue of type <code>void</code>. No special initialization or anything like <code>int()</code> would have. A prvalue is something like <code>true</code>, or <code>nullptr</code>, or <code>2</code>. The expression is the equivalent of <code>2;</code>, but for <code>void</code> instead of <code>int</code>.</p>\n", "LastActivityDate": "2014-09-14T16:21:35.620", "Id": "25835372", "CommentCount": "0", "CreationDate": "2014-09-14T16:21:35.620", "ParentId": "25835324", "Score": "11", "OwnerUserId": "962089"}, "25835324": {"ViewCount": "235", "Body": "<p>How does this program get compiled fine?</p>\n<pre><code>int main() {\n    void();  // Does this create a \"void\" object here?\n}\n</code></pre>\n<p>I've tested both under MSVC and GCC. But <code>void</code> is an incomplete type. When you do the same for any other incomplete user-defined type,</p>\n<pre><code>class Incomplete;\n\nint main() {\n    Incomplete();  // Error saying \"Incomplete\" is incomplete.\n}\n</code></pre>\n", "AcceptedAnswerId": "25835470", "Title": "What does \"void();\" as a separate statement mean in C++?", "CreationDate": "2014-09-14T16:17:57.547", "Id": "25835324", "CommentCount": "3", "FavoriteCount": "1", "PostTypeId": "1", "LastActivityDate": "2014-09-15T14:42:00.850", "Score": "5", "OwnerUserId": "3764066", "Tags": "<c++>", "AnswerCount": "3"}, "25835405": {"PostTypeId": "2", "Body": "<p>It is allowed construction in C++ that type void could be used as a template argument.</p>\n", "LastActivityDate": "2014-09-14T16:24:09.893", "Id": "25835405", "CommentCount": "0", "CreationDate": "2014-09-14T16:24:09.893", "ParentId": "25835324", "Score": "2", "OwnerUserId": "2877241"}});