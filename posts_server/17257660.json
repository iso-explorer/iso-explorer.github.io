post_cb({"17257674": {"ParentId": "17257660", "CommentCount": "0", "Body": "<p><code>odd[9]</code> is pulling a random chunk of memory, because you didn't initialize the array that far.</p>\n", "OwnerUserId": "12802", "PostTypeId": "2", "Id": "17257674", "Score": "0", "CreationDate": "2013-06-23T04:16:27.637", "LastActivityDate": "2013-06-23T04:16:27.637"}, "17257681": {"ParentId": "17257660", "PostTypeId": "2", "CommentCount": "0", "Body": "<pre><code>int odd[10] = {1, 3, 5, 7, 9};\n</code></pre>\n<p>initialized <code>odd</code> to <code>{1,3,5,7,9,0,0,0,0,0}</code>, <code>(int)odd[0]+(int)odd[9]</code> will get <code>1</code></p>\n<pre><code>cout&lt;&lt;even;\n</code></pre>\n<p>will print address of <code>even</code>, you want</p>\n<pre><code>std::cout&lt;&lt;even[0] &lt;&lt; std::endl;\n</code></pre>\n<p>\u00a78.5.1.5</p>\n<blockquote>\n<p id=\"so_17257660_17257681_0\">To zero-initialize an object or reference of type T means:</p>\n<p id=\"so_17257660_17257681_1\">\u2014 if T is a scalar type (3.9), the object is set to the value 0\n  (zero), taken as an integral constant expression, converted to T;103</p>\n<p id=\"so_17257660_17257681_2\">\u2014 if T is a (possibly cv-qualified) non-union class type, each\n  non-static data member and each base-class subobject is\n  zero-initialized and padding is initialized to zero bits;</p>\n<p id=\"so_17257660_17257681_3\">\u2014 if T is a (possibly cv-qualified) union type, the object\u2019s first\n  non-static named data member is zeroinitialized and padding is\n  initialized to zero bits;</p>\n<p id=\"so_17257660_17257681_4\">\u2014 if T is an array type, each element is zero-initialized;</p>\n<p id=\"so_17257660_17257681_5\">\u2014 if T is a reference type, no initialization is performed.</p>\n</blockquote>\n<p>\u00a78.5.1.7</p>\n<blockquote>\n<p id=\"so_17257660_17257681_6\">7 To value-initialize an object of type T means:</p>\n<p id=\"so_17257660_17257681_7\">\u2014 if T is a (possibly\n  cv-qualified) class type (Clause 9) with a user-provided constructor\n  (12.1), then the default constructor for T is called (and the\n  initialization is ill-formed if T has no accessible default\n  constructor);</p>\n<p id=\"so_17257660_17257681_8\">\u2014 if T is a (possibly cv-qualified) non-union class type\n  without a user-provided constructor, then the object is\n  zero-initialized and, if T\u2019s implicitly-declared default constructor\n  is non-trivial, that constructor is called.</p>\n<p id=\"so_17257660_17257681_9\">\u2014 <strong>if T is an array type, then each element is value-initialized;</strong> </p>\n<p id=\"so_17257660_17257681_10\">\u2014 <strong>otherwise, the object is zero-initialized.</strong></p>\n</blockquote>\n", "OwnerUserId": "951757", "LastEditorUserId": "951757", "LastEditDate": "2013-06-23T06:51:44.343", "Id": "17257681", "Score": "2", "CreationDate": "2013-06-23T04:17:19.543", "LastActivityDate": "2013-06-23T06:51:44.343"}, "17257693": {"ParentId": "17257660", "PostTypeId": "2", "CommentCount": "7", "Body": "<p>The <code>odd</code> array has enough room for 10 values, but only the first 5 are initialized explicitly.  The others are implicitly initialized to 0.  So</p>\n<pre><code>int odd[10] = {1, 3, 5, 7, 9};\n</code></pre>\n<p>has the same effect as</p>\n<pre><code>//     index:  0  1  2  3  4  5  6  7  8  9\nint odd[10] = {1, 3, 5, 7, 9, 0, 0, 0, 0, 0};\n</code></pre>\n<p>So the line</p>\n<pre><code>even[0] = (int) odd[0] + (int) odd[9];\n</code></pre>\n<p>sets <code>even[0]</code> to 1 + 0.  I think you <em>want</em></p>\n<pre><code>even[0] = odd[0] + odd[4];\n</code></pre>\n<p>Note that, since <code>odd</code> and <code>even</code> are both declared to be of type <code>int</code>, you don't need to cast the values before you use them.</p>\n<p>When you print <code>even</code> without an index, you're printing the <em>address</em> of the array, rather than any of its contents.</p>\n", "OwnerUserId": "29157", "LastEditorUserId": "29157", "LastEditDate": "2013-06-23T22:58:43.873", "Id": "17257693", "Score": "0", "CreationDate": "2013-06-23T04:19:27.630", "LastActivityDate": "2013-06-23T22:58:43.873"}, "bq_ids": {"n4140": {"so_17257660_17257681_9": {"section_id": 3287, "quality": 1.0, "length": 6}, "so_17257660_17257681_6": {"section_id": 3287, "quality": 1.0, "length": 4}, "so_17257660_17257681_5": {"section_id": 3285, "quality": 1.0, "length": 4}, "so_17257660_17257681_4": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_17257660_17257681_7": {"section_id": 3286, "quality": 0.7058823529411765, "length": 12}, "so_17257660_17257681_0": {"section_id": 3285, "quality": 1.0, "length": 5}, "so_17257660_17257681_8": {"section_id": 3287, "quality": 0.75, "length": 12}, "so_17257660_17257681_3": {"section_id": 3285, "quality": 1.0, "length": 15}, "so_17257660_17257681_2": {"section_id": 3285, "quality": 1.0, "length": 17}}, "n3337": {"so_17257660_17257681_9": {"section_id": 3157, "quality": 1.0, "length": 6}, "so_17257660_17257681_6": {"section_id": 3157, "quality": 1.0, "length": 4}, "so_17257660_17257681_5": {"section_id": 3155, "quality": 1.0, "length": 4}, "so_17257660_17257681_8": {"section_id": 3157, "quality": 1.0, "length": 16}, "so_17257660_17257681_7": {"section_id": 3157, "quality": 0.9411764705882353, "length": 16}, "so_17257660_17257681_0": {"section_id": 3155, "quality": 1.0, "length": 5}, "so_17257660_17257681_4": {"section_id": 3155, "quality": 1.0, "length": 5}, "so_17257660_17257681_1": {"section_id": 3155, "quality": 0.9166666666666666, "length": 11}, "so_17257660_17257681_3": {"section_id": 3155, "quality": 1.0, "length": 15}, "so_17257660_17257681_2": {"section_id": 3155, "quality": 1.0, "length": 17}}, "n4659": {"so_17257660_17257681_9": {"section_id": 4049, "quality": 1.0, "length": 6}, "so_17257660_17257681_2": {"section_id": 4047, "quality": 0.9411764705882353, "length": 16}, "so_17257660_17257681_8": {"section_id": 4049, "quality": 0.6875, "length": 11}, "so_17257660_17257681_7": {"section_id": 4049, "quality": 0.6470588235294118, "length": 11}, "so_17257660_17257681_0": {"section_id": 653, "quality": 0.8, "length": 4}, "so_17257660_17257681_4": {"section_id": 4047, "quality": 1.0, "length": 5}, "so_17257660_17257681_3": {"section_id": 4047, "quality": 1.0, "length": 15}, "so_17257660_17257681_5": {"section_id": 4047, "quality": 1.0, "length": 4}}}, "17257660": {"CommentCount": "1", "AcceptedAnswerId": "17257681", "PostTypeId": "1", "LastEditorUserId": "29157", "CreationDate": "2013-06-23T04:13:31.140", "LastActivityDate": "2013-06-23T22:58:43.873", "LastEditDate": "2013-06-23T04:22:41.427", "ViewCount": "116", "FavoriteCount": "1", "Title": "can't get right value with array", "Id": "17257660", "Score": "0", "Body": "<p>Q 1.</p>\n<p>I want to print the value of even[0] to be 10 with this code below.</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\nint odd[10] = {1, 3, 5, 7, 9};\nint even[1];\neven[0]=(int)odd[0]+(int)odd[9];\ncout&lt;&lt;even[0];\ncin.get();\n\nreturn 0;\n}\n</code></pre>\n<p>but I get this output instead.</p>\n<pre><code>1\n</code></pre>\n<p>What am I doing wrong?</p>\n<p>Q 2.</p>\n<p>But when I change the code to</p>\n<pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\nint odd[10] = {1, 3, 5, 7, 9};\nint even[1];\neven[0]=(int)odd[0]+(int)odd[9];\ncout&lt;&lt;even;  // No index\ncin.get();\n\nreturn 0;\n} \n</code></pre>\n<p>I get this output.</p>\n<pre><code>001EFD94\n</code></pre>\n", "Tags": "<c++>", "OwnerUserId": "2212275", "AnswerCount": "3"}});