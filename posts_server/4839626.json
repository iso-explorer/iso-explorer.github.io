post_cb({"38394733": {"Id": "38394733", "PostTypeId": "2", "Body": "<p>_countof(my_array) in MSVC</p>\n<blockquote>\n<p id=\"so_4839626_38394733_0\">I can thing of only one case: the array contains elements that are of different derived types of the type of the array.</p>\n</blockquote>\n<p>Elements of an array in C++ are objects, not pointers, so you cannot have derived type object as an element.</p>\n<p>And like mentioned above, sizeof(my_array) (like _countof() as well) will work just in the scope of array definition.</p>\n", "LastActivityDate": "2016-07-15T11:13:22.470", "CommentCount": "0", "CreationDate": "2016-07-15T11:13:22.470", "ParentId": "4839626", "Score": "0", "OwnerUserId": "6593901"}, "4839671": {"Id": "4839671", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_4839626_4839671_0\">Let's say I have an array arr. When\n  would the following not give the\n  number of elements of the array:\n  sizeof(arr) / sizeof(arr[0])?</p>\n</blockquote>\n<p>One thing I've often seen new programmers doing this:</p>\n<pre><code>void f(Sample *arr)\n{\n   int count = sizeof(arr)/sizeof(arr[0]); //what would be count? 10?\n}\n\nSample arr[10];\nf(arr);\n</code></pre>\n<p>So new programmers think the value of <code>count</code> will be 10. But that's wrong. </p>\n<p>Even this is wrong:</p>\n<pre><code>void g(Sample arr[]) //even more deceptive form!\n{\n   int count = sizeof(arr)/sizeof(arr[0]); //count would not be 10  \n}\n</code></pre>\n<p>It's all because once you pass an array to any of these functions, it becomes <em>pointer</em> type, and so <code>sizeof(arr)</code> would give the size of <em>pointer</em>, not array!</p>\n<hr>\n<p>EDIT:</p>\n<p>The following is an elegant way you can pass an array to a function, without letting it to decay into pointer type:</p>\n<pre><code>template&lt;size_t N&gt;\nvoid h(Sample (&amp;arr)[N])\n{\n    size_t count = N; //N is 10, so would be count!\n    //you can even do this now:\n    //size_t count = sizeof(arr)/sizeof(arr[0]);  it'll return 10!\n}\nSample arr[10];\nh(arr); //pass : same as before!\n</code></pre>\n</hr>", "LastEditorUserId": "-1", "LastActivityDate": "2015-08-14T19:00:13.160", "Score": "28", "CreationDate": "2011-01-29T21:49:06.353", "ParentId": "4839626", "CommentCount": "12", "OwnerUserId": "415784", "LastEditDate": "2015-08-14T19:00:13.160"}, "4839656": {"Id": "4839656", "PostTypeId": "2", "Body": "<p>Arrays in C++ are very different from those in Java in that they are completely unmanaged. The compiler or run-time have no idea whatsoever what size the array is.</p>\n<p>The information is only known at compile-time if the size is defined in the declaration:</p>\n<pre><code>char array[256];\n</code></pre>\n<p>In this case, sizeof(array) gives you the proper size.</p>\n<p>If you use a pointer as an array however, the \"array\" will just be a pointer, and sizeof will not give you any information about the actual size of the array.</p>\n<p>STL offers a lot of templates that allow you to have arrays, some of them with size information, some of them with variable sizes, and most of them with good accessors and bounds checking.</p>\n", "LastActivityDate": "2011-01-29T21:46:30.077", "CommentCount": "2", "CreationDate": "2011-01-29T21:46:30.077", "ParentId": "4839626", "Score": "8", "OwnerUserId": "345717"}, "33473871": {"Id": "33473871", "PostTypeId": "2", "Body": "<p>I know is old topic but what about simple solution like while loop?</p>\n<pre><code>int function count(array[]) {\n\n    int i = 0;\n\n    while(array[i] != NULL) {\n\n        i++;\n\n    }\n\n    return i;\n\n}\n</code></pre>\n<p>I know that is slower than sizeof() but this is another example of array count.</p>\n", "LastActivityDate": "2015-11-02T08:56:21.883", "CommentCount": "1", "CreationDate": "2015-11-02T08:56:21.883", "ParentId": "4839626", "Score": "-1", "OwnerUserId": "4293800"}, "4839653": {"Id": "4839653", "PostTypeId": "2", "Body": "<p>First off, you can circumvent that problem by using <a href=\"http://www.cplusplus.com/reference/stl/vector/\" rel=\"nofollow\"><code>std::vector</code></a> instead of an array. Second, if you put objects of a derived class into an array of a super class, you will experience slicing, but the good news is, your formula will work. Polymorphic collections in C++ are achieved using pointers. There are three major options here:</p>\n<ul>\n<li>normal pointers</li>\n<li>a collection of <a href=\"http://boost.org/doc/libs/1_45_0/libs/smart_ptr/shared_ptr.htm\" rel=\"nofollow\"><code>boost::shared_ptr</code></a></li>\n<li>a <a href=\"http://boost.org/doc/libs/1_45_0/libs/ptr_container/doc/ptr_container.html\" rel=\"nofollow\">Boost.Pointer Container</a></li>\n</ul>\n", "LastEditorUserId": "160206", "LastActivityDate": "2011-01-29T21:53:06.503", "Score": "1", "CreationDate": "2011-01-29T21:46:22.713", "ParentId": "4839626", "CommentCount": "11", "OwnerUserId": "160206", "LastEditDate": "2011-01-29T21:53:06.503"}, "4840287": {"Id": "4840287", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_4839626_4840287_0\">Let's say I have an array arr. When would the following not give the number of elements of the array: <code>sizeof(arr) / sizeof(arr[0])</code>?</p>\n</blockquote>\n<p>In contexts where <code>arr</code> is not actually the array (but instead a pointer to the initial element). Other answers explain how this happens.</p>\n<blockquote>\n<p id=\"so_4839626_4840287_1\">I can thing of only one case: the array contains elements that are of different derived types of the type of the array.</p>\n</blockquote>\n<p>This cannot happen (for, fundamentally, the same reason that Java arrays don't play nicely with generics). The array is statically typed; it reserves \"slots\" of memory that are sized for a specific type (the base type).</p>\n<blockquote>\n<p id=\"so_4839626_4840287_2\">Sorry for the trivial question, I am a Java dev and I am rather new to C++.</p>\n</blockquote>\n<p>C++ arrays are not first-class objects. You can use boost::array to make them behave more like Java arrays, but keep in mind that you will still have value semantics rather than reference semantics, just like with everything else. (In particular, this means that you cannot really declare a variable of type analogous to <code>Foo[]</code> in Java, nor replace an array with another one of a different size; the array size is a part of the type.) Use <code>.size()</code> with this class where you would use <code>.length</code> in Java. (It also supplies iterators that provide the usual interface for C++ iterators.)</p>\n", "LastActivityDate": "2011-01-30T00:02:17.860", "CommentCount": "0", "CreationDate": "2011-01-30T00:02:17.860", "ParentId": "4839626", "Score": "1", "OwnerUserId": "523612"}, "4839626": {"ViewCount": "77885", "Body": "<p>Let's say I have an array <code>arr</code>. When would the following not give the number of elements of the array: <code>sizeof(arr) / sizeof(arr[0])</code>?</p>\n<p>I can thing of only one case: the array contains elements that are of different derived types of the type of the array.</p>\n<p>Am I right and are there (I am almost positive there <em>must</em> be) other such cases?</p>\n<p>Sorry for the trivial question, I am a Java dev and I am rather new to C++.</p>\n<p>Thanks!</p>\n", "AcceptedAnswerId": "4839671", "Title": "Element count of an array in C++", "CreationDate": "2011-01-29T21:42:05.030", "Id": "4839626", "CommentCount": "2", "FavoriteCount": "4", "PostTypeId": "1", "LastActivityDate": "2016-07-21T21:27:22.137", "Score": "17", "OwnerUserId": "348183", "Tags": "<c++><arrays><sizeof>", "AnswerCount": "9"}, "4839652": {"Id": "4839652", "PostTypeId": "2", "Body": "<p>No that would still produce the right value because you must define the array to be either all elements of a single type or pointers to a type.  In either case the array size is known at compile time so sizeof(arr) / sizeof(arr[0]) always returns the element count.</p>\n<p>Here is an example of how to use this correctly:</p>\n<pre><code>int nonDynamicArray[ 4 ];\n\n#define nonDynamicArrayElementCount ( sizeof(nonDynamicArray) / sizeof(nonDynamicArray[ 0 ]) )\n</code></pre>\n<p>I'll go one further here to show <em>when</em> to use this properly.  You won't use it very often.  It is primarily useful when you want to define an array specifically so you can add elements to it without changing a lot of code later.  It is a construct that is primarily useful for <em>maintenance</em>.  The canonical example (when I think about it anyway ;-) is building a table of commands for some program that you intend to add <em>more</em> commands to later.  In this example to maintain/improve your program all you need to do is add another command to the array and then add the command handler:</p>\n<pre><code>char        *commands[] = {  // &lt;--- note intentional lack of explicit array size\n    \"open\",\n    \"close\",\n    \"abort\",\n    \"crash\"\n};\n\n#define kCommandsCount  ( sizeof(commands) / sizeof(commands[ 0 ]) )\n\nvoid processCommand( char *command ) {\n    int i;\n\n    for ( i = 0; i &lt; kCommandsCount; ++i ) {\n        // if command == commands[ i ] do something (be sure to compare full string)\n    }\n}\n</code></pre>\n", "LastEditorUserId": "312594", "LastActivityDate": "2011-01-30T00:22:10.013", "Score": "4", "CreationDate": "2011-01-29T21:46:20.973", "ParentId": "4839626", "CommentCount": "9", "OwnerUserId": "312594", "LastEditDate": "2011-01-30T00:22:10.013"}, "4839659": {"Id": "4839659", "PostTypeId": "2", "Body": "<p>There are no cases where, given an array <code>arr</code>, that the value of <code>sizeof(arr) / sizeof(arr[0])</code> is not the count of elements, by the definition of array and <code>sizeof</code>.</p>\n<p>In fact, it's even directly mentioned (\u00a75.3.3/2):</p>\n<blockquote>\n<p id=\"so_4839626_4839659_0\">.... When applied to an array, the result is the total number of bytes in the array. <strong>This implies that the size of an array of <em>n</em> elements is <em>n</em> times the size of an element.</strong></p>\n</blockquote>\n<p>Emphasis mine. Divide by the size of an element, <code>sizeof(arr[0])</code>, to obtain <em>n</em>.</p>\n", "LastEditorUserId": "87234", "LastActivityDate": "2011-01-29T21:53:56.010", "Score": "5", "CreationDate": "2011-01-29T21:46:51.420", "ParentId": "4839626", "CommentCount": "5", "OwnerUserId": "87234", "LastEditDate": "2011-01-29T21:53:56.010"}, "bq_ids": {"n4140": {"so_4839626_4839659_0": {"length": 15, "quality": 0.9375, "section_id": 6077}}, "n3337": {"so_4839626_4839659_0": {"length": 15, "quality": 0.9375, "section_id": 5845}}, "n4659": {"so_4839626_4839659_0": {"length": 15, "quality": 0.9375, "section_id": 7573}}}, "38514654": {"Id": "38514654", "PostTypeId": "2", "Body": "<p>Use the Microsoft \"_countof(array)\" Macro. This link to the Microsoft Developer Network explains it and offers an example that demonstrates the difference between \"sizeof(array)\" and the \"_countof(array)\" macro.</p>\n<p><a href=\"https://msdn.microsoft.com/en-us/library/ms175773.aspx\" rel=\"nofollow\">Microsoft and the \"_countof(array)\" Macro</a></p>\n", "LastActivityDate": "2016-07-21T21:27:22.137", "CommentCount": "0", "CreationDate": "2016-07-21T21:27:22.137", "ParentId": "4839626", "Score": "1", "OwnerUserId": "4714106"}});