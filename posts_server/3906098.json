post_cb({"3906098": {"CommentCount": "0", "ViewCount": "133", "CreationDate": "2010-10-11T12:20:20.620", "LastActivityDate": "2010-10-11T12:24:34.270", "Title": "Operator overloading in c++", "AcceptedAnswerId": "3906130", "PostTypeId": "1", "Id": "3906098", "Score": "1", "Body": "<pre><code>struct T\n{\n        int a;\n        int b;\n};\n\nclass Ptr\n{\npublic:\n        Ptr(int a, int b) { t_.a = a; t_.b = b; }\n        T* operator-&gt;() {return &amp;t_;}\n        T&amp; operator*() {return t_;}\n\nprivate:\n        T t_;\n};\n\nint main()\n{\n        Ptr ptr(1, 2);\n        cout &lt;&lt; \"a = \" &lt;&lt; ptr-&gt;a &lt;&lt; \" b = \" &lt;&lt; ptr-&gt;b &lt;&lt; endl;\n        cout &lt;&lt; \"a = \" &lt;&lt; ptr.operator-&gt;()-&gt;a &lt;&lt; \" b = \" &lt;&lt; ptr.operator-&gt;()-&gt;b &lt;&lt; endl;\n} \n</code></pre>\n<p>Output:</p>\n<pre><code>a = 1 b = 2\na = 1 b = 2\n</code></pre>\n<p>Why is <code>ptr-&gt;a</code> the same as <code>ptr.operator-&gt;()-&gt;a</code>, what's the principle in it?</p>\n", "Tags": "<c++><operator-overloading>", "OwnerUserId": "417798", "AnswerCount": "2"}, "3906120": {"ParentId": "3906098", "CommentCount": "0", "Body": "<p>Because this is how this overloaded operator works...</p>\n<blockquote>\n<p id=\"so_3906098_3906120_0\">An expression <code>x-&gt;m</code> is interpreted as <code>(x.operator-&gt;())-&gt;m</code> for a class object <code>x</code> of type <code>T</code> if <code>T::operator-&gt;()</code> exists and if the operator is selected as the best match function by the overload resolution mechanism.</p>\n<p id=\"so_3906098_3906120_1\">(C++ \u00a7[over.ref]/1)</p>\n</blockquote>\n", "OwnerUserId": "224671", "PostTypeId": "2", "Id": "3906120", "Score": "5", "CreationDate": "2010-10-11T12:22:41.537", "LastActivityDate": "2010-10-11T12:22:41.537"}, "3906130": {"ParentId": "3906098", "CommentCount": "0", "Body": "<p>That's the rule. When overloading operator -&gt; it must return either a pointer or something else that has overloaded operator -&gt; and that operator is applied recursively until a pointer is returned. And the evenutal -&gt; is applied to that pointer. The rule makes sense. Otherwise you'd expect that operator -&gt; take another argument. But of what type? string? Naturally not. I mean, think about it, this is the most (if not only) reasonable way. In this sense operator -&gt; can be said tobe an exception.</p>\n", "OwnerUserId": "469935", "PostTypeId": "2", "Id": "3906130", "Score": "3", "CreationDate": "2010-10-11T12:24:34.270", "LastActivityDate": "2010-10-11T12:24:34.270"}, "bq_ids": {"n4140": {"so_3906098_3906120_0": {"section_id": 664, "quality": 1.0, "length": 16}}, "n3337": {"so_3906098_3906120_0": {"section_id": 654, "quality": 1.0, "length": 16}}, "n4659": {"so_3906098_3906120_0": {"section_id": 692, "quality": 1.0, "length": 16}}}});