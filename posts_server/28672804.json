post_cb({"28673008": {"ParentId": "28672804", "Score": "1", "CreationDate": "2015-02-23T11:43:15.577", "LastActivityDate": "2015-02-23T12:00:31.620", "LastEditDate": "2015-02-23T12:00:31.620", "OwnerUserId": "2852165", "LastEditorUserId": "2852165", "Body": "<p>There is no problem with all the above.</p>\n<p>the @ is invalid in names (variables, functions, classes, etc.)\nSome linkers actually use the @ character as \"at\" meaning to relate symbols to libraries. (try to <code>nm</code> some of your executables in linux) \nyou'll see something like this: <code>malloc@@GLIBC_2.2.5</code> means <code>malloc</code> taken from GLIBC_2.2.5. </p>\n<p>In string and character the only problematic seen character is the <code>\\</code> which use also as escape character and the <code>\"</code> in string and <code>'</code> in character which must be escaped to not be translated as end of string/character.</p>\n<p>In comments there is no limitations except the <code>*/</code> in multi-line comment which will close the comment.</p>\n<p>A never used macro does not really exist after precompilation, so there is no problem at all.</p>\n", "Id": "28673008", "PostTypeId": "2", "CommentCount": "2"}, "28672804": {"Tags": "<c++><c><validation><correctness><security-by-obscurity>", "ViewCount": "185", "CreationDate": "2015-02-23T11:32:21.240", "Title": "Using @\u00a0in a C or C++ application", "CommentCount": "10", "AnswerCount": "2", "Score": "2", "OwnerUserId": "186193", "ClosedDate": "2015-02-23T12:46:20.490", "Id": "28672804", "LastActivityDate": "2015-02-23T12:38:24.367", "Body": "<p>I came to this obscure thing ... I would like to know if there are any possibilities for the <strong>@</strong> sign to appear in the source of a valid C/C++ application, beside of the following situations:</p>\n<ul>\n<li>a <code>const char*</code> value such as <code>const char* addr = \"xyz@gmail.com\"</code></li>\n<li>a <code>const char</code> value, such as <code>char c = '@'</code></li>\n<li>a macro which is never used: <code>#define NEVER_EVER ABC@</code></li>\n<li>in a commented out section</li>\n</ul>\n<p>Reason for asking: curiosity :)</p>\n", "PostTypeId": "1"}, "28673202": {"ParentId": "28672804", "Score": "3", "CreationDate": "2015-02-23T11:52:55.573", "LastActivityDate": "2015-02-23T12:38:24.367", "LastEditDate": "2015-02-23T12:38:24.367", "OwnerUserId": "586873", "LastEditorUserId": "586873", "Body": "<p>I would answer for C language. Note that there is no such thing as C/C++, both are separate languages and C is <em>not</em> a subset of C++.</p>\n<p>Beside those possibilites, that you described, <code>@</code> can be also placed in header names, but it's not common practice:</p>\n<h3><code>main.c:</code></h3>\n<pre><code>#include &lt;stdio.h&gt;\n\n#include \"fancy@header.h\"\n\nint main(void)\n{\n    foo();\n\n    return 0;\n}\n</code></pre>\n<h3><code>fancy@header.h:</code></h3>\n<pre><code>static void foo(void)\n{\n    printf(\"whatever\\n\");\n}\n</code></pre>\n<p>For Standard reference to cover this you might look into C11 \u00a75.2.1/p3 that covers <em>basic execution character set</em>, which does not include the <code>@</code> character. This paragraph also provides list of cases, that may allow <code>@</code> character (emphasis mine):</p>\n<blockquote>\n<p id=\"so_28672804_28673202_0\">In the basic execution character set, there shall be control\n  characters representing alert, backspace, carriage return, and new\n  line. If <strong>any other characters</strong> are encountered in a source file (except\n  in an identifier, a character constant, a string literal, a <strong>header\n  name</strong>, a comment, or a preprocessing token that is never converted to a\n  token), the behavior is undefined.</p>\n</blockquote>\n<p>In case of identifiers, see C11 \u00a76.4.2.1/p3:</p>\n<blockquote>\n<p id=\"so_28672804_28673202_1\">Each universal character name in an identifier shall designate a\n  character whose encoding in ISO/IEC 10646 falls into one of the ranges\n  specified in D.1.<sup>71)</sup> The initial character shall not be a universal\n  character name designating a character whose encoding falls into one\n  of the ranges specified in D.2. An implementation may allow multibyte\n  characters that are not part of the basic source character set to\n  appear in identifiers; which characters and their correspondence to\n  universal character names is implementation-defined.</p>\n</blockquote>\n<p>The D.1 (normative) appendix section lists ranges of allowed characters. As you might check the <code>@</code> character can be represented as <code>U+0040</code> in <a href=\"http://en.wikipedia.org/wiki/Universal_Character_Set\" rel=\"nofollow\">UCS</a>, that is outside of allowed range:</p>\n<blockquote>\n<p id=\"so_28672804_28673202_2\">00A8, 00AA, 00AD, 00AF, 00B2\u221200B5, 00B7\u221200BA, 00BC\u221200BE, 00C0\u221200D6,\n  00D8\u221200F6, 00F8\u221200FF (...)</p>\n</blockquote>\n<p>Even with that, compiler might allow <code>@</code> character as <em>language extension</em>. C11 J.5.2/p1 <em>Specialized identifiers</em> <em>(Common extensions)</em> contains:</p>\n<blockquote>\n<p id=\"so_28672804_28673202_3\">Characters other than the underscore _, letters, and digits, that are\n  not part of the basic source character set (such as the dollar sign $,\n  or characters in national character sets) may appear in an <strong>identifier</strong>\n  (6.4.2).</p>\n</blockquote>\n<p>For instance GCC allows <code>$</code> sign as <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Dollar-Signs.html#Dollar-Signs\" rel=\"nofollow\">GNU extension</a> in that way:</p>\n<blockquote>\n<p id=\"so_28672804_28673202_4\">In GNU C, you may normally use dollar signs in identifier names. This\n  is because many traditional C implementations allow such identifiers.\n  However, dollar signs in identifiers are not supported on a few target\n  machines, typically because the target assembler does not allow them.</p>\n</blockquote>\n", "Id": "28673202", "PostTypeId": "2", "CommentCount": "0"}, "bq_ids": {"n4659": {"so_28672804_28673202_2": {"length": 10, "section_id": 6754, "quality": 1.0}}}});