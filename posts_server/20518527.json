post_cb({"35482208": {"Id": "35482208", "PostTypeId": "2", "Body": "<p>Not enough reputation to comment @Keith's answer.</p>\n<p>The main reason I see to use <code>-funsigned-char</code> or <code>-fsigned-char</code> is when you want the following code </p>\n<pre><code>  printf(\"%d\\n\",'\\x80');\n</code></pre>\n<p>to display either <code>-128</code> or <code>128</code>. </p>\n<p>The comment about not relying on specific compilation settings is valid but here it is a bit simplifying reality. The main problem is that C leaves some part of the language to the implementation for efficiency reason, and usually you want to tune that implementation to suit best your application. TMO a professional dev should always go through <em>all</em> compiler flags and select the best for his needs. If you rely on some specific settings, your <em>unit tests</em> will of course cover that case, or assert it. If you port an application, you will look into the compilation settings of the original port.</p>\n", "LastActivityDate": "2016-02-18T13:00:52.273", "CommentCount": "0", "CreationDate": "2016-02-18T13:00:52.273", "ParentId": "20518527", "Score": "2", "OwnerUserId": "3392217"}, "31971752": {"Id": "31971752", "PostTypeId": "2", "Body": "<p>As the other answers say, gcc's <code>-funsigned-char</code> option forces plain <code>char</code> to be unsigned.</p>\n<p>But that may not be the best solution to your problem. You want unsigned characters, but by using a compiler-specific option you're encoding that information in the build command (the Makefile, build script, or just the command you type to compile your code). If the semantics of your program depend on having unsigned characters, it's better to record that information in your source code. It's clearer, and it's reduces the chance that someone will build your program incorrectly.</p>\n<p>If you want unsigned characters, using <code>unsigned char</code>. If you want signed characters, use <code>signed char</code>. If you just want characters, and you're sure your program's behavior doesn't depend on whether they're signed or unsigned (say, if all stored values are in the range 0..127), use <code>char</code>.</p>\n", "LastActivityDate": "2015-08-12T17:28:12.003", "CommentCount": "0", "CreationDate": "2015-08-12T17:28:12.003", "ParentId": "20518527", "Score": "1", "OwnerUserId": "827263"}, "20518559": {"Id": "20518559", "PostTypeId": "2", "Body": "<p>The flag you are looking for is <code>-funsigned-char</code>.</p>\n<p>From <a href=\"http://gcc.gnu.org/onlinedocs/gcc-4.8.0/gcc/C-Dialect-Options.html\">the documentation</a>:</p>\n<blockquote>\n<p id=\"so_20518527_20518559_0\"><strong><code>-funsigned-char</code></strong></p>\n<p id=\"so_20518527_20518559_1\">Let the type <code>char</code> be unsigned, like <code>unsigned char</code>.</p>\n<p id=\"so_20518527_20518559_2\">Each kind of machine has a default for what <code>char</code> should be. It is either like <code>unsigned char</code> by default or like <code>signed char</code> by default.</p>\n<p id=\"so_20518527_20518559_3\">Ideally, a portable program should always use <code>signed char</code> or <code>unsigned char</code> when it depends on the signedness of an object. But many programs have been written to use plain <code>char</code> and expect it to be signed, or expect it to be unsigned, depending on the machines they were written for. This option, and its inverse, let you make such a program work with the opposite default.</p>\n<p id=\"so_20518527_20518559_4\">The type <code>char</code> is always a distinct type from each of <code>signed char</code> or <code>unsigned char</code>, even though its behavior is always just like one of those two. </p>\n<hr>\n<p id=\"so_20518527_20518559_5\"><strong><code>-fsigned-char</code></strong></p>\n<p id=\"so_20518527_20518559_6\">Let the type <code>char</code> be signed, like <code>signed char</code>.</p>\n<p id=\"so_20518527_20518559_7\">Note that this is equivalent to <code>-fno-unsigned-char</code>, which is the negative form of <code>-funsigned-char</code>. Likewise, the option <code>-fno-signed-char</code> is equivalent to <code>-funsigned-char</code>. </p>\n</hr></blockquote>\n", "LastActivityDate": "2013-12-11T11:59:37.663", "CommentCount": "3", "CreationDate": "2013-12-11T11:59:37.663", "ParentId": "20518527", "Score": "25", "OwnerUserId": "560648"}, "bq_ids": {"n4140": {"so_20518527_20518559_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 45}, "so_20518527_20518559_6": {"length": 5, "quality": 0.7142857142857143, "section_id": 45}}, "n3337": {"so_20518527_20518559_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 42}, "so_20518527_20518559_6": {"length": 5, "quality": 0.7142857142857143, "section_id": 42}}, "n4659": {"so_20518527_20518559_1": {"length": 5, "quality": 0.7142857142857143, "section_id": 46}, "so_20518527_20518559_6": {"length": 5, "quality": 0.7142857142857143, "section_id": 46}}}, "20518576": {"Id": "20518576", "PostTypeId": "2", "Body": "<p>You can use <code>-funsigned-char</code> for that, or <code>-fsigned-char</code> for signed.</p>\n", "LastActivityDate": "2013-12-11T12:00:23.453", "CommentCount": "0", "CreationDate": "2013-12-11T12:00:23.453", "ParentId": "20518527", "Score": "0", "OwnerUserId": "2282011"}, "20518590": {"Id": "20518590", "PostTypeId": "2", "Body": "<p>You can use the option: <code>-funsigned-char</code>.</p>\n<p><a href=\"http://gcc.gnu.org/onlinedocs/gcc-4.0.4/gcc/C-Dialect-Options.html\" rel=\"nofollow\">source</a></p>\n", "LastActivityDate": "2013-12-11T12:01:05.037", "CommentCount": "0", "CreationDate": "2013-12-11T12:01:05.037", "ParentId": "20518527", "Score": "0", "OwnerUserId": "1320862"}, "20518527": {"ViewCount": "5517", "Body": "<p>Since the nature of a <code>char</code> in C++ is compiler-dependent when the <code>unsigned</code> qualifier is not present, is there an argument I could pass on to GCC which would <strong>force</strong> all <code>char</code>s to be compiled as <code>unsigned</code>?</p>\n", "AcceptedAnswerId": "20518559", "Title": "Gcc: force compiler to use unsigned char by default", "CreationDate": "2013-12-11T11:57:55.223", "Id": "20518527", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2015-01-01T01:10:24.010", "LastEditorUserId": "560648", "LastActivityDate": "2016-02-18T13:00:52.273", "Score": "9", "OwnerUserId": "2233125", "Tags": "<c++><gcc><char><unsigned>", "AnswerCount": "5"}});