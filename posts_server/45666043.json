post_cb({"45666043": {"Tags": "<c++><language-lawyer><c++1z><linkage><one-definition-rule>", "ViewCount": "117", "LastEditDate": "2017-08-14T00:30:44.077", "CreationDate": "2017-08-14T00:28:21.287", "LastEditorUserId": "1505451", "Title": "C++ standard: ODR and constexpr std::string_view", "CommentCount": "2", "AcceptedAnswerId": "45666276", "Score": "3", "OwnerUserId": "1505451", "Id": "45666043", "LastActivityDate": "2017-08-14T01:18:59.460", "Body": "<p>If I have a header <code>foo.h</code> which contains</p>\n<pre><code>#ifndef FOO_H_\n#define FOO_H_\n\nnamespace foo {\nconstexpr std::string_view kSomeString = \"blah\";\n}\n\n#endif  // FOO_H_\n</code></pre>\n<p>then is it safe to include <code>foo.h</code> from within multiple <code>.cc</code> files in a single program, regardless of what they do with the symbol <code>kSomeString</code>, or are there some uses that could cause an ODR violation?</p>\n<p>Also, is it guaranteed that <code>kSomeString.data()</code> will return the same pointer across <code>.cc</code> files?</p>\n<p>I'd like specific references to wording in the <a href=\"http://eel.is/c++draft/\" rel=\"nofollow noreferrer\">C++ standard</a> if possible. Thanks!</p>\n", "PostTypeId": "1", "FavoriteCount": "1", "AnswerCount": "1"}, "45666276": {"ParentId": "45666043", "Score": "6", "CreationDate": "2017-08-14T01:18:59.460", "Id": "45666276", "OwnerUserId": "481267", "LastActivityDate": "2017-08-14T01:18:59.460", "Body": "<p>Merely including <code>foo.h</code> from multiple translation units will not violate the ODR. However, indeed, there are some uses of <code>kSomeString</code> that will violate the ODR. See here for details and standard wording: <a href=\"https://stackoverflow.com/a/34446445\">https://stackoverflow.com/a/34446445</a></p>\n<p>It is not guaranteed that <code>kSomeString.data()</code> will return the same value in all translation units because it is not guaranteed that the string literal <code>\"blah\"</code> is the same object in all translation units. According to <a href=\"http://eel.is/c++draft/lex.string#16\" rel=\"noreferrer\">[lex.string]/16</a>,</p>\n<blockquote>\n<p id=\"so_45666043_45666276_0\">Evaluating a <em>string-literal</em> results in a string literal object with static storage duration, initialized from the given characters as specified above. Whether all string literals are distinct (that is, are stored in nonoverlapping objects) and whether successive evaluations of a string-literal yield the same or a different object is unspecified. [\u2009<em>Note:</em> The effect of attempting to modify a string literal is undefined. <em>\u2014\u2009end note</em>\u2009]</p>\n</blockquote>\n<p>In C++17, the potential ODR violations can be prevented by defining <code>kSomeString</code> to be <code>inline</code>. This will give it external linkage and hence  a single address throughout the program (see <a href=\"http://eel.is/c++draft/basic.link#3\" rel=\"noreferrer\">[basic.link]/3</a> and <a href=\"http://eel.is/c++draft/basic.link#4\" rel=\"noreferrer\">[basic.link]/4</a>) and allow it to be multiply defined (see <a href=\"http://eel.is/c++draft/basic.def.odr#4\" rel=\"noreferrer\">[basic.def.odr]/4</a>). Obviously <code>.data()</code> can then only return one possible value.</p>\n", "PostTypeId": "2", "CommentCount": "2"}, "bq_ids": {"n4659": {"so_45666043_45666276_0": {"length": 37, "section_id": 6789, "quality": 0.9024390243902439}}}});