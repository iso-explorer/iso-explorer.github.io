post_cb({"14639401": {"CommentCount": "3", "AcceptedAnswerId": "14644511", "PostTypeId": "1", "LastEditorUserId": "636019", "CreationDate": "2013-02-01T03:46:58.170", "LastActivityDate": "2013-02-06T23:39:47.993", "LastEditDate": "2013-02-06T23:39:47.993", "ViewCount": "99", "FavoriteCount": "0", "Title": "Is it okay to use template types from the enclosing function within lambdas in C++11?", "Id": "14639401", "Score": "3", "Body": "<p>So I currently have some code similar to this:</p>\n<p>(Note: not actual code, just pared down from a somewhat long and complex method for brevity.)</p>\n<pre><code>template&lt;typename ArgT0, typename ArgT1, typename FuncT&gt;\nstatic void addMethod( const std::string&amp; name, FuncT func )\n{\n   Method script_func = [&amp;]( const Arguments&amp; args ) -&gt; Value\n   {\n      func(UnsafeAnyCast&lt;ArgT0&gt;(args[0]),UnsafeAnyCast&lt;ArgT1&gt;(args[1]));\n      return Value::Undefined();\n   }\n\n   _prototype-&gt;Set( name, script_func );\n}\n</code></pre>\n<p>It works fine in Visual Studio 2010, but I know that is far from any guarantee that it is standard compliant C++. Is there anything wrong with this as far as using the template arguments inside the lambda?</p>\n", "Tags": "<c++><templates><c++11><lambda>", "OwnerUserId": "19404", "AnswerCount": "1"}, "14644511": {"ParentId": "14639401", "CommentCount": "0", "Body": "<p>Yes, this is standard compliant: a lambda expression has access to all the visible names in its enclosing scope, it's only variables that you need to capture</p>\n<p><strong>5.1.2 Lambda expressions [expr.prim.lambda]</strong></p>\n<blockquote>\n<p id=\"so_14639401_14644511_0\">9 A lambda-expression whose smallest enclosing scope is a block scope\n  (3.3.3) is a local lambda expression; any other lambda-expression\n  shall not have a capture-list in its lambda-introducer. The reaching\n  scope of a local lambda expression is the set of enclosing scopes up\n  to and including the innermost enclosing function and its parameters</p>\n</blockquote>\n", "OwnerUserId": "819272", "PostTypeId": "2", "Id": "14644511", "Score": "1", "CreationDate": "2013-02-01T10:42:17.600", "LastActivityDate": "2013-02-01T10:42:17.600"}, "bq_ids": {"n4140": {"so_14639401_14644511_0": {"section_id": 5968, "quality": 0.84375, "length": 27}}, "n3337": {"so_14639401_14644511_0": {"section_id": 5737, "quality": 0.875, "length": 28}}, "n4659": {"so_14639401_14644511_0": {"section_id": 7466, "quality": 0.84375, "length": 27}}}});