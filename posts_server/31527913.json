post_cb({"31529497": {"Id": "31529497", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_31527913_31529497_0\">Is <code>a</code> an integral constant expression?</p>\n</blockquote>\n<p>In the following contexts:</p>\n<pre><code>int b[a]{};\nstatic_assert(a,\"\");\nswitch(1){\n  case a:\n    ;\n}\n</code></pre>\n<p>yes, <code>a</code> is an integral constant expression. Starting with your first quote:</p>\n<blockquote>\n<p id=\"so_31527913_31529497_1\">An integral constant expression is an expression of integral or unscoped enumeration type, implicitly converted\n  to a prvalue, where the converted expression is a core constant expression.</p>\n</blockquote>\n<p>'a' is an integral type, in your cases it will be implicitly converted to a prvalue, so now is <code>a</code> a core constant expression? Yes, if we go back to paragraph 2 which defines what is not a core constant expression:</p>\n<blockquote>\n<p id=\"so_31527913_31529497_2\">A conditional-expression e is a core constant expression unless the evaluation of e, following the rules of the\n  abstract machine (1.9), would evaluate one of the following expressions</p>\n</blockquote>\n<p>it has the following clause:</p>\n<blockquote>\n<p id=\"so_31527913_31529497_3\">an lvalue-to-rvalue conversion (4.1) unless it is applied to</p>\n</blockquote>\n<p>with the following exception:</p>\n<blockquote>\n<p id=\"so_31527913_31529497_4\">a non-volatile glvalue of integral or enumeration type that refers to a complete non-volatile const\n  object with a preceding initialization, initialized with a constant expression, or</p>\n</blockquote>\n<p>which applies to <code>a</code> since it is non-volatile, const and is initialized with a constant expression.</p>\n<hr>\n<blockquote>\n<p id=\"so_31527913_31529497_5\">Is <code>a</code> a constant expression?</p>\n</blockquote>\n<p>In the same contexts as above, yes, since we can see from the quote above it is a core constant expression.</p>\n<hr>\n<blockquote>\n<p id=\"so_31527913_31529497_6\">Is a glvalue integral constant expression a constant expression?</p>\n</blockquote>\n<p>No, in order for it to be a integral constant expression it must be converted to a prvalue and threfore can not be a glvalue.</p>\n</hr></hr>", "LastEditorUserId": "1708801", "LastActivityDate": "2015-07-21T03:48:44.063", "Score": "0", "CreationDate": "2015-07-21T02:43:43.070", "ParentId": "31527913", "CommentCount": "10", "OwnerUserId": "1708801", "LastEditDate": "2015-07-21T03:48:44.063"}, "bq_ids": {"n4140": {"so_31527913_31529497_1": {"length": 17, "quality": 1.0, "section_id": 6186}, "so_31527913_31529497_6": {"length": 6, "quality": 1.0, "section_id": 6185}, "so_31527913_31527913_3": {"length": 20, "quality": 1.0, "section_id": 6187}, "so_31527913_31527913_1": {"length": 21, "quality": 0.75, "section_id": 6187}, "so_31527913_31527913_0": {"length": 17, "quality": 1.0, "section_id": 6186}, "so_31527913_31527913_2": {"length": 7, "quality": 0.5833333333333334, "section_id": 6187}, "so_31527913_31529497_4": {"length": 14, "quality": 0.9333333333333333, "section_id": 6185}, "so_31527913_31529497_2": {"length": 14, "quality": 1.0, "section_id": 6185}}, "n3337": {"so_31527913_31527913_3": {"length": 14, "quality": 0.7, "section_id": 5947}, "so_31527913_31529497_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 5947}, "so_31527913_31529497_6": {"length": 6, "quality": 1.0, "section_id": 5946}, "so_31527913_31529497_4": {"length": 13, "quality": 0.8666666666666667, "section_id": 5946}, "so_31527913_31527913_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 5947}}, "n4659": {"so_31527913_31527913_3": {"length": 19, "quality": 0.95, "section_id": 7690}, "so_31527913_31529497_1": {"length": 15, "quality": 0.8823529411764706, "section_id": 7688}, "so_31527913_31529497_6": {"length": 6, "quality": 1.0, "section_id": 7687}, "so_31527913_31529497_4": {"length": 15, "quality": 1.0, "section_id": 7687}, "so_31527913_31527913_1": {"length": 23, "quality": 0.8214285714285714, "section_id": 7690}, "so_31527913_31527913_0": {"length": 15, "quality": 0.8823529411764706, "section_id": 7688}, "so_31527913_31527913_2": {"length": 12, "quality": 1.0, "section_id": 7690}, "so_31527913_31529497_2": {"length": 11, "quality": 0.7857142857142857, "section_id": 7687}, "so_31527913_31527913_4": {"length": 20, "quality": 1.0, "section_id": 7690}}}, "31527913": {"ViewCount": "325", "Body": "<p>N4527 5.20 [expr.const]p3</p>\n<blockquote>\n<p id=\"so_31527913_31527913_0\">An <strong><em>integral constant expression</em></strong> is an expression of integral or unscoped enumeration type, implicitly converted to a prvalue, where the converted expression is a core constant expression.</p>\n</blockquote>\n<p>5.20 [expr.const]p5</p>\n<blockquote>\n<p id=\"so_31527913_31527913_1\">A <strong><em>constant expression</em></strong> is either a glvalue core constant expression whose value refers to an entity that is a permitted result of a constant expression (as defined below), or a prvalue core constant expression whose\n  value is an object where, for that object and its subobjects:</p>\n<p id=\"so_31527913_31527913_2\">(5.1) \u2014 each non-static data member of reference type refers to an entity that is a permitted result of a constant\n  expression, and</p>\n<p id=\"so_31527913_31527913_3\">(5.2) \u2014 if the object or subobject is of pointer type, it contains the address of an object with static storage\n  duration, the address past the end of such an object (5.7), the address of a function, or a null pointer\n  value.</p>\n<p id=\"so_31527913_31527913_4\">An entity is a permitted result of a constant expression if it is an object with <strong>static storage duration</strong> that is either not a temporary object or is a temporary object whose value satisfies the above constraints, or it is a\n  function.</p>\n</blockquote>\n<pre><code>void foo(){\n    const int a = 1;//a has automatic storage duration\n    // all ok in gcc 5.1.0 and clang 3.8.0\n    int b[a]{};\n    static_assert(a,\"\");\n    switch(1){\n      case a:\n        ;\n    }\n}\n</code></pre>\n<p>Question1: Is <code>a</code> an <strong>integral constant expression</strong>?</p>\n<p>Question2: Is <code>a</code> a <strong>constant expression</strong>?</p>\n<p>Question3: Is a glvalue integral constant expression  a constant expression?</p>\n<p>Question4: </p>\n<p>If the answer of question 3 is yes, \ndoes this conflict with 5.20 p3 if the object has automatic storage duration?</p>\n", "AcceptedAnswerId": "31529497", "Title": "Is a glvalue integral constant expression a constant expression?", "CreationDate": "2015-07-20T23:22:00.727", "Id": "31527913", "CommentCount": "17", "LastEditDate": "2015-07-21T11:17:08.090", "PostTypeId": "1", "LastEditorUserId": "4958516", "LastActivityDate": "2015-07-21T11:17:08.090", "Score": "3", "OwnerUserId": "4958516", "Tags": "<c++><language-lawyer><constant-expression>", "AnswerCount": "1"}});