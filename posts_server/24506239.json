post_cb({"bq_ids": {"n4140": {"so_24506239_24506512_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 524}, "so_24506239_24506507_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 526}, "so_24506239_24506512_0": {"length": 104, "quality": 0.9719626168224299, "section_id": 526}}, "n3337": {"so_24506239_24506512_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 515}, "so_24506239_24506507_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 517}, "so_24506239_24506512_0": {"length": 104, "quality": 0.9719626168224299, "section_id": 517}}, "n4659": {"so_24506239_24506512_1": {"length": 13, "quality": 0.9285714285714286, "section_id": 545}, "so_24506239_24506507_0": {"length": 6, "quality": 0.8571428571428571, "section_id": 547}, "so_24506239_24506512_0": {"length": 104, "quality": 0.9719626168224299, "section_id": 547}}}, "24506239": {"ViewCount": "1103", "Body": "<p>Example code:</p>\n<pre><code>#define FOO(...) You passed: #__VA_ARGS__\nFOO(1,2,3)\nFOO()\n</code></pre>\n<p>Preprocess with Visual C++ (version 14 CTP), get:</p>\n<pre><code>You passed: \"1,2,3\"\nYou passed:\n</code></pre>\n<p>In the last line, <code>#__VA_ARGS__</code> is turned into nothingness.  I would prefer it turned into \"\".</p>\n<p>Is there a definitive reference for what is supposed to happen?  I Googled a lot but couldn't find it.</p>\n<p>Any suggested work-around would also be useful.</p>\n", "AcceptedAnswerId": "24506507", "Title": "What is #__VA_ARGS__ supposed to generate when there are no arguments passed?", "CreationDate": "2014-07-01T08:58:47.347", "Id": "24506239", "CommentCount": "3", "PostTypeId": "1", "LastActivityDate": "2015-11-18T23:59:43.043", "Score": "6", "OwnerUserId": "448734", "Tags": "<c++><c-preprocessor><variadic-macros>", "AnswerCount": "2"}, "24506512": {"Id": "24506512", "PostTypeId": "2", "Body": "<p>The paragraph in the standard (ISO14882:2011(e)) is a little bit lengthy, but its quite clear:</p>\n<h3>16.3.2 The # operator</h3>\n<blockquote>\n<p id=\"so_24506239_24506512_0\"><sup>2</sup> A <em>character string literal</em> is a <em>string-literal</em> with no\n  prefix. If, in the replacement list, a parameter is immediately\n  preceded by a # preprocessing token, both are replaced by a single\n  character string literal preprocessing token that contains the\n  spelling of the preprocessing token sequence for the corresponding\n  argument. Each occurrence of white space between the argument\u2019s\n  preprocessing tokens becomes a single space character in the character\n  string literal. White space before the first preprocessing token and\n  after the last preprocessing token comprising the argument is deleted.\n  Otherwise, the original spelling of each preprocessing token in the\n  argument is retained in the character string literal, except for\n  special handling for producing the spelling of string literals and\n  character literals: a \\ character is inserted before each \" and \\\n  character of a character literal or string literal (including the\n  delimiting \" characters). If the replacement that results is not a\n  valid character string literal, the behavior is undefined. <strong>The\n  character string literal corresponding to an empty argument is \"\".</strong> The\n  order of evaluation of # and ## operators is unspecified.</p>\n</blockquote>\n<p>And since </p>\n<h3>16.3.1 Argument substitution</h3>\n<blockquote>\n<p id=\"so_24506239_24506512_1\"><sup>2</sup> An identifier <code>__VA_ARGS__</code> that occurs in the replacement list\n  shall be treated as if it were a parameter, and the variable arguments\n  shall form the preprocessing tokens used to replace it.</p>\n</blockquote>\n<p>this is the same for varags as it is for normal parameters.</p>\n", "LastActivityDate": "2014-07-01T09:12:28.577", "Score": "3", "CreationDate": "2014-07-01T09:12:28.577", "ParentId": "24506239", "CommentCount": "2", "OwnerUserId": "833362"}, "24506507": {"Id": "24506507", "PostTypeId": "2", "Body": "<p>Per <strong>6.10.3.2 The # operator</strong> (C11):</p>\n<blockquote>\n<h3>Semantics</h3>\n<p id=\"so_24506239_24506507_0\">2 - [...] The character string literal corresponding to an empty argument is <code>\"\"</code>.  [...]</p>\n</blockquote>\n<p>So I think MSVC is incorrect here.</p>\n<p>I would workaround this using string literal concatenation:</p>\n<pre><code>#define FOO(...) You passed: \"\" #__VA_ARGS__\n</code></pre>\n", "LastActivityDate": "2014-07-01T09:12:11.003", "Score": "7", "CreationDate": "2014-07-01T09:12:11.003", "ParentId": "24506239", "CommentCount": "2", "OwnerUserId": "567292"}});