post_cb({"21966520": {"ParentId": "21966230", "CommentCount": "7", "Body": "<p>You can hack it!</p>\n<p>The library, call it <code>fooLib</code>, thinks it's using some type <code>bool</code> which it has the prerogative to define. To the library, <code>bool</code> is just an identifier.</p>\n<p>So, you can just force it to use another identifier instead:</p>\n<pre><code>#define bool fooLib_bool\n#include \"fooLib.h\"\n#undef bool\n#undef true\n#undef false\n</code></pre>\n<p>Now the compiler sees the offending line transformed to this:</p>\n<pre><code>typedef int fooLib_bool;\n</code></pre>\n<p>You're stuck with the interface using type <code>fooLib_bool = int</code> instead of a real <code>bool</code>, but that's impossible to work around, as the code might in fact rely on the properties of <code>int</code>, and library binary would have been compiled with such an assumption baked in.</p>\n", "OwnerUserId": "153285", "PostTypeId": "2", "Id": "21966520", "Score": "75", "CreationDate": "2014-02-23T09:36:08.763", "LastActivityDate": "2014-02-23T09:36:08.763"}, "21966230": {"CommentCount": "5", "AcceptedAnswerId": "21966520", "PostTypeId": "1", "LastEditorUserId": "458741", "CreationDate": "2014-02-23T09:04:20.573", "LastActivityDate": "2014-02-25T21:41:43.123", "LastEditDate": "2014-02-23T14:17:55.073", "ViewCount": "3264", "FavoriteCount": "10", "Title": "Can I mimic a C header that redefines bool in C++?", "Id": "21966230", "Score": "55", "Body": "<p>I am writing a program and I would really prefer to write in C++, however, I'm required to include a C header that redefines bool:  </p>\n<pre><code># define false 0\n# define true  1\ntypedef int bool;\n</code></pre>\n<p>The obvious solution would be to edit the header to say:</p>\n<pre><code>#ifndef __cplusplus\n# define false 0\n# define true  1\ntypedef int bool;\n#endif\n</code></pre>\n<p>but, alas, since the library is read-only I cannot.</p>\n<p>Is there a way I can tell gcc to ignore this typedef? Or, can I write most functions in C++ and then make a C wrapper for the two? Or, should I suck it up and write the thing in C?</p>\n", "Tags": "<c++><c><typedef><mixing>", "OwnerUserId": "899665", "AnswerCount": "5"}, "21966276": {"ParentId": "21966230", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>I suppose you can wrap the offending code into a header and then undef what you don't need</p>\n<p>Library_wrapper.h:     </p>\n<pre><code>#define bool something_else // This will get you past the C++ compilation\n#include \"library.h\"\n#undef false\n#undef true\n#undef bool\n</code></pre>\n<p>main.cpp:    </p>\n<pre><code>#include \"Library_wrapper.h\" \n#include \"boost.h\"\n</code></pre>\n<p>Regarding the typedef.. the compiler should complain if you try to redefine a basic type in C++. You can redeclare a type by the way (it is allowed in C++) or define it (simple text replacement).</p>\n", "OwnerUserId": "1938163", "LastEditorUserId": "15168", "LastEditDate": "2014-02-25T21:41:43.123", "Id": "21966276", "Score": "27", "CreationDate": "2014-02-23T09:08:47.120", "LastActivityDate": "2014-02-25T21:41:43.123"}, "21968228": {"ParentId": "21966230", "CommentCount": "1", "Body": "<p>Unfortunately, no, you cannot use this file in Standard C++:</p>\n<blockquote>\n<p id=\"so_21966230_21968228_0\"><strong>\u00a77.1.3 [dcl.typedef]</strong></p>\n<p id=\"so_21966230_21968228_1\"><strong>6/</strong> In a given scope, a typedef specifier shall not be used to redefine the name of any type declared in that scope to refer to a different type.</p>\n</blockquote>\n<p>Thus <code>typedef ... bool;</code> is forbidden.</p>\n<blockquote>\n<p id=\"so_21966230_21968228_2\"><strong>\u00a717.6.4.3.1 [macro.names]</strong></p>\n<p id=\"so_21966230_21968228_3\"><strong>2/</strong> A translation unit shall not <code>#define</code> or <code>#undef</code> names lexically identical to keywords, to the identifiers listed in Table 3, or to the attribute-tokens described in 7.6.</p>\n</blockquote>\n<p>And in <strong>\u00a72.12 [lex.key]</strong> we find that <code>bool</code> is a keyword.</p>\n<p>Thus trying to trick the compiler by using <code>#define bool ...</code> prior to including the offending file is forbidden.</p>\n<hr>\n<p>So, what is the alternative ? A shim !</p>\n<p>Isolate that offending library behind a C &amp; C++ compatible header of your own; and compile this part as C. Then you can include your own header in the C++ program without issue or tricks.</p>\n<p><em>Note: yes, most compilers will probably accept <code>#define bool ...</code>, but it is still explicitly forbidden by the Standard.</em></p>\n</hr>", "OwnerUserId": "147192", "PostTypeId": "2", "Id": "21968228", "Score": "21", "CreationDate": "2014-02-23T12:32:13.250", "LastActivityDate": "2014-02-23T12:32:13.250"}, "21966353": {"ParentId": "21966230", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>You may copy a bad header and use an edited copy. Tell to compiler the path it should prefer and...</p>\n", "OwnerUserId": "3277268", "LastEditorUserId": "3277268", "LastEditDate": "2014-02-23T09:23:59.877", "Id": "21966353", "Score": "11", "CreationDate": "2014-02-23T09:17:20.587", "LastActivityDate": "2014-02-23T09:23:59.877"}, "21967052": {"ParentId": "21966230", "CommentCount": "0", "Body": "<p>You could compile the code which uses the header as C, then just link it together with your C++ object files. You probably use MSVC or GCC; both can compile code as either C++ or C, and will allow you to create compatible object files.</p>\n<p>Whether that's a clean solution or unnecessary overkill really depends on the exact situation.</p>\n", "OwnerUserId": "3313064", "PostTypeId": "2", "Id": "21967052", "Score": "8", "CreationDate": "2014-02-23T10:28:17.130", "LastActivityDate": "2014-02-23T10:28:17.130"}, "bq_ids": {"n4140": {"so_21966230_21968228_1": {"section_id": 5412, "quality": 1.0, "length": 12}, "so_21966230_21968228_3": {"section_id": 6306, "quality": 0.7692307692307693, "length": 10}}, "n3337": {"so_21966230_21968228_1": {"section_id": 5207, "quality": 1.0, "length": 12}, "so_21966230_21968228_3": {"section_id": 6063, "quality": 0.7692307692307693, "length": 10}}, "n4659": {"so_21966230_21968228_1": {"section_id": 6834, "quality": 1.0, "length": 12}, "so_21966230_21968228_3": {"section_id": 7817, "quality": 0.7692307692307693, "length": 10}}}});