post_cb({"31388928": {"CommentCount": "2", "AcceptedAnswerId": "31389185", "PostTypeId": "1", "LastEditorUserId": "-1", "CreationDate": "2015-07-13T16:43:33.213", "LastActivityDate": "2016-05-23T13:45:22.047", "LastEditDate": "2017-05-23T11:44:05.710", "ViewCount": "125", "FavoriteCount": "1", "Title": "Visibility rules for mixin inheritance with variadic template", "Id": "31388928", "Score": "5", "Body": "<p>Consider I inherit from a variadic template the entire arguments list. How are the arguments inherited?</p>\n<pre><code>// snippet\ntemplate&lt;typename... R&gt;\nclass foo\n    : public R... {\npublic: \n};\n// ....\nusing foo_inst = foo&lt;bar_1, bar_2&gt;;\n</code></pre>\n<p>I tried it, and it seems <strong>all</strong> <code>R</code>'s are inherited public (not just the first one). <strong>Is this defined behavior?</strong></p>\n<p>I tried it with gcc and msvc (thanks to <a href=\"https://stackoverflow.com/questions/31388928/visibility-rules-for-mixin-inheritance-with-variadic-template#comment50755049_31388928\">jaggedSpire</a> also with clang), all with same results. The compilers not even mentioned any warnings. You can see a running example <a href=\"http://coliru.stacked-crooked.com/a/053fcb6bdda23235\" rel=\"nofollow noreferrer\">here</a>.</p>\n", "Tags": "<c++><c++11><inheritance><variadic-templates><template-mixins>", "OwnerUserId": "1810087", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_31388928_31389185_1": {"section_id": 121, "quality": 1.0, "length": 4}, "so_31388928_31389185_0": {"section_id": 121, "quality": 0.8888888888888888, "length": 24}}, "n3337": {"so_31388928_31389185_1": {"section_id": 116, "quality": 1.0, "length": 4}, "so_31388928_31389185_0": {"section_id": 116, "quality": 0.8888888888888888, "length": 24}}, "n4659": {"so_31388928_31389185_1": {"section_id": 125, "quality": 1.0, "length": 4}, "so_31388928_31389185_0": {"section_id": 125, "quality": 0.8888888888888888, "length": 24}}}, "31389185": {"ParentId": "31388928", "CommentCount": "1", "CreationDate": "2015-07-13T16:58:29.120", "OwnerUserId": "862351", "PostTypeId": "2", "Id": "31389185", "Score": "4", "Body": "<p>Yes, this is the defined behaviour. Quoting from <code>14.5.3[temp.variadic]\\4</code></p>\n<blockquote>\n<p id=\"so_31388928_31389185_0\">A\n  <em>pack expansion</em>\n  consists of a\n  <em>pattern</em>\n  and an ellipsis, the instantiation of which produces zero or more\n  instantiations of the pattern in a list (described below). The form of the pattern depends on the context in\n  which the expansion occurs. Pack expansions can occur in the following contexts:</p>\n</blockquote>\n<p>The relevant context from that list is:</p>\n<blockquote>\n<p id=\"so_31388928_31389185_1\">\u2014  In a <em>base-specifier-list</em> (Clause  10 ); the pattern is a\n  <em>base-specifier</em>.</p>\n</blockquote>\n<p>Thus, in the parameter pack expansion <code>class foo : public R...</code>, the pattern is the <em>base-specifier</em> <code>public R</code>, making the pack composed of types <code>T1, T2, ... , Tn</code> expand to <code>public T1, public T2, ... , public Tn</code>. (Ellipsis in the previous sentence are used in the mathematical sequence-specifying sense.)</p>\n", "LastActivityDate": "2015-07-13T16:58:29.120"}});