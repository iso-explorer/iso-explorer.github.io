post_cb({"bq_ids": {"n4140": {"so_28294129_28975080_2": {"length": 20, "quality": 1.0, "section_id": 1906}, "so_28294129_28975080_0": {"length": 24, "quality": 1.0, "section_id": 1906}, "so_28294129_28975080_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 6530}}, "n3337": {"so_28294129_28975080_2": {"length": 20, "quality": 1.0, "section_id": 1895}, "so_28294129_28975080_0": {"length": 24, "quality": 1.0, "section_id": 1895}, "so_28294129_28975080_1": {"length": 19, "quality": 0.9047619047619048, "section_id": 6285}}, "n4659": {"so_28294129_28975080_2": {"length": 19, "quality": 0.95, "section_id": 2176}, "so_28294129_28975080_0": {"length": 23, "quality": 0.9583333333333334, "section_id": 2176}, "so_28294129_28975080_1": {"length": 18, "quality": 0.8571428571428571, "section_id": 8012}}}, "28975080": {"Id": "28975080", "PostTypeId": "2", "Body": "<p>The standard doesn't require implementations to support streams of any type except <code>char</code> and <code>wchar_t</code>.</p>\n<p>[iostreams.limits.pos]</p>\n<blockquote>\n<p id=\"so_28294129_28975080_0\">In the classes of Clause 27, a template parameter with name <code>charT</code> represents a member of the set of types containing <code>char</code>, <code>wchar_t</code>, and any other implementation-defined character types that satisfy the requirements for a character on which any of the iostream components can be instantiated.</p>\n</blockquote>\n<p>Additionally, it doesn't require facets used for extracting integers and floats from streams to work with <code>char16_t</code> either:</p>\n<p>[category.numeric]</p>\n<blockquote>\n<p id=\"so_28294129_28975080_1\">All specifications of member functions for <code>num_put</code> and <code>num_get</code> in the subclauses of 22.4.2 only apply to the specializations required in Tables 81 and 82 (22.3.1.1.1), namely <code>num_get&lt;char&gt;</code>, <code>num_get&lt;wchar_t&gt;</code>, <code>num_get&lt;C, InputIterator&gt;</code>, <code>num_put&lt;char&gt;</code>, <code>num_put&lt;wchar_t&gt;</code>, and <code>num_put&lt;C,OutputIterator&gt;</code>.</p>\n</blockquote>\n<p>where <code>C</code>:</p>\n<blockquote>\n<p id=\"so_28294129_28975080_2\">A template parameter with name <code>C</code> represents the set of types containing\n  <code>char</code>, <code>wchar_t</code>, and any other implementation-defined character types that satisfy the requirements for a character on which any of the iostream components can be instantiated.</p>\n</blockquote>\n<p>The standard only requires that <code>char_traits</code> (and so <code>basic_string</code>) and <code>codecvt</code> work correctly for <code>char16_t</code> and <code>char32_t</code>.</p>\n<p>So to make your function work you would basically need to define specializations of all the missing pieces that the library doesn't provide.</p>\n", "LastEditorUserId": "981959", "LastActivityDate": "2015-03-10T22:18:27.520", "Score": "1", "CreationDate": "2015-03-10T22:12:28.037", "ParentId": "28294129", "CommentCount": "0", "OwnerUserId": "981959", "LastEditDate": "2015-03-10T22:18:27.520"}, "28294129": {"ViewCount": "338", "Body": "<p>Is this a libstdc++ bug?</p>\n<pre><code>#include &lt;string&gt;\n#include &lt;sstream&gt;\n\nusing namespace std;\n\nint main() {\n        basic_string&lt;char16_t&gt; str(u\"0.0\");\n        basic_stringstream&lt;char16_t&gt; sstr(str);\n        double x = 9;\n        sstr &gt;&gt; x;\n}\n</code></pre>\n<p>Output, under GCC 4.8 Linux x86_64:</p>\n<pre><code>$ ./main\nterminate called after throwing an instance of 'std::bad_cast'\n  what():  std::bad_cast\nAborted (core dumped)\n</code></pre>\n<p><strong>Edit</strong> Can someone suggest a way to make this function work under GCC 4.9 without changing its signature:</p>\n<pre><code>template&lt;typename T&gt;\nT fromString(std::basic_stringstream&lt;char16_t&gt;&amp; stream)\n{\n    T v;\n    stream &gt;&gt; v;\n    return v;\n}\n</code></pre>\n<p>Typical use is:</p>\n<pre><code>std::basic_string&lt;char16_t&gt; string(...);\nstd::basic_stringstream&lt;char16_t&gt; sstream(string);\ndouble v = fromString&lt;double&gt;(sstream);\n</code></pre>\n", "AcceptedAnswerId": "28975080", "Title": "GCC 4.8 and char16_t streams - bug?", "CreationDate": "2015-02-03T08:10:44.353", "Id": "28294129", "CommentCount": "4", "LastEditDate": "2015-02-04T00:26:03.427", "PostTypeId": "1", "LastEditorUserId": "274460", "LastActivityDate": "2015-03-10T22:18:27.520", "Score": "1", "OwnerUserId": "274460", "Tags": "<c++><gcc><unicode><iostream><libstdc++>", "AnswerCount": "1"}});