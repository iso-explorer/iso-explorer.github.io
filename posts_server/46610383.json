post_cb({"46610383": {"CommentCount": "0", "ViewCount": "203", "CreationDate": "2017-10-06T16:43:44.477", "LastActivityDate": "2017-10-06T19:43:49.347", "Title": "Is it guaranteed that template template parameter invoke user provided deduction guides", "AcceptedAnswerId": "46610777", "PostTypeId": "1", "Id": "46610383", "Score": "8", "Body": "<p>Consider an example:</p>\n<pre><code>#include &lt;type_traits&gt;\n#include &lt;string&gt;\n\ntemplate &lt;template &lt;class&gt; class TT&gt; //#1\nstruct Foo {\n   static void foo() {\n      static_assert(std::is_same_v&lt;decltype(TT(\"abc\")), TT&lt;std::string&gt;&gt;);\n   }\n};\n\ntemplate &lt;class T&gt;\nstruct Bar {\n    Bar(T) {}\n};\n\ntemplate &lt;class T&gt;\nBar(T) -&gt; Bar&lt;std::string&gt;; //#2\n\nint main() {\n    Foo&lt;Bar&gt;::foo();\n}\n</code></pre>\n<p><a href=\"https://wandbox.org/permlink/dsdwHaes8YwCmAMm\" rel=\"noreferrer\">[clang]</a> as well as <a href=\"https://wandbox.org/permlink/gQyQtF0WswZdUe5u\" rel=\"noreferrer\">[gcc]</a> both seem to use user provided deduction guides (#2) when deducing the template parameter of template template parameter (#1). Is it a standard compliant feature?</p>\n", "Tags": "<c++><templates><language-lawyer><c++1z><deduction-guide>", "OwnerUserId": "4324224", "AnswerCount": "1"}, "46610777": {"ParentId": "46610383", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Yes, this is standard compliant.</p>\n<p>According to <a href=\"http://eel.is/c++draft/dcl.type#simple-2\" rel=\"nofollow noreferrer\">[dcl.type.simple]/2</a>:</p>\n<blockquote>\n<p id=\"so_46610383_46610777_0\">A <em>type-specifier</em> of the form <code>typename</code><sub>opt</sub> <em>nested-name-specifier</em><sub>opt</sub> <em>template-name</em> is a placeholder for a deduced class type ([dcl.type.class.deduct]). The <em>template-name</em> shall name a class template that is not an injected-class-name.</p>\n</blockquote>\n<p>And <a href=\"http://eel.is/c++draft/temp.param#3\" rel=\"nofollow noreferrer\">[temp.param]/3</a>:</p>\n<blockquote>\n<p id=\"so_46610383_46610777_1\">A <em>type-parameter</em> whose identifier does not follow an ellipsis defines its identifier to be a <em>typedef-name</em> (if declared without <code>template</code>) or <em>template-name</em> (if declared with <code>template</code>) in the scope of the template declaration.</p>\n</blockquote>\n<p><code>TT</code> is a type-parameter declared with <code>template</code>, which makes it a <em>template-name</em> and hence a placeholder for a deduced class type. All the usual rules apply just fine. </p>\n", "OwnerUserId": "2069064", "LastEditorUserId": "2069064", "LastEditDate": "2017-10-06T19:43:49.347", "Id": "46610777", "Score": "4", "CreationDate": "2017-10-06T17:13:21.660", "LastActivityDate": "2017-10-06T19:43:49.347"}, "bq_ids": {"n4140": {"so_46610383_46610777_1": {"section_id": 56, "quality": 0.9444444444444444, "length": 17}}, "n3337": {"so_46610383_46610777_1": {"section_id": 51, "quality": 0.9444444444444444, "length": 17}}, "n4659": {"so_46610383_46610777_1": {"section_id": 58, "quality": 1.0, "length": 18}, "so_46610383_46610777_0": {"section_id": 6865, "quality": 0.75, "length": 12}}}});