post_cb({"19374879": {"ParentId": "19374878", "PostTypeId": "2", "CommentCount": "8", "Body": "<blockquote>\n<p id=\"so_19374878_19374879_0\">Why is <code>\\?</code> one of the escape sequence characters ?</p>\n</blockquote>\n<p>Because it is special, the answer leads to <a href=\"http://en.wikipedia.org/wiki/Digraphs_and_trigraphs#C\" rel=\"nofollow noreferrer\">Trigraph</a>, the C/C++ preprocessor replaces following three-character sequence to the corresponding single character. (C11 \u00a75.2.1.1 and C++11 \u00a72.3)</p>\n<pre><code>Trigraph:       ??(  ??)  ??&lt;  ??&gt;  ??=  ??/  ??'  ??!  ??-\nReplacement:      [    ]    {    }    #    \\    ^    |    ~\n</code></pre>\n<p>Trigraph is nearly useless now, mainly used for obfuscated purpose, some examples can be seen in <a href=\"http://www.ioccc.org/\" rel=\"nofollow noreferrer\">IOCCC</a>. </p>\n<p>gcc doesn't support trigraph by default, and will warn you if there's trigraph in the code, unless the option <code>-trigraphs</code><a href=\"http://gcc.gnu.org/onlinedocs/cpp/Initial-processing.html\" rel=\"nofollow noreferrer\">3</a> is enabled. Under <code>-trigraphs</code> option, the second <code>\\?</code> is useful in the following example:</p>\n<pre><code>printf(\"\\?\\?!\\n\");  \n</code></pre>\n<p>Output would be <code>|</code> if <code>?</code> is not escaped.</p>\n<p>For more information on trigraph, see <a href=\"https://stackoverflow.com/questions/17718286/cryptic-line-in-legacy-code\">Cryptic line \"??!??!\" in legacy code</a></p>\n<hr>\n<blockquote>\n<p id=\"so_19374878_19374879_1\">Why non-escaping <code>?</code> works fine, there's not even a warning.</p>\n</blockquote>\n<p>Because <code>?</code>(and double quote <code>\"</code>) can be represented by themselves by the standard:</p>\n<blockquote>\n<h3>C11 \u00a76.4.4.4 <em>Character constants</em> Section 4</h3>\n<p id=\"so_19374878_19374879_2\">The double-quote <code>\"</code> and question-mark <code>?</code> are representable either by themselves or by the escape sequences <code>\\\"</code> and <code>\\?</code>, respectively, but the single-quote <code>'</code> and the backslash <code>\\</code> shall be represented, respectively, by the escape sequences <code>\\'</code> and <code>\\\\</code>.</p>\n</blockquote>\n<p>Similar in C++:</p>\n<blockquote>\n<h3>C++11 \u00a72.13.2 <em>Character literals</em> Section 3</h3>\n<p id=\"so_19374878_19374879_3\">Certain nongraphic characters, the single quote <code>\u2019</code>, the double quote <code>\"</code>, the question mark <code>?</code>, and the backslash <code>\\</code>, can be represented according to Table 6. The double quote <code>\"</code> and the question mark <code>?</code>, can be represented as themselves or by the escape sequences <code>\\\"</code> and <code>\\?</code> respectively, but the single quote <code>\u2019</code> and the backslash <code>\\</code> shall be represented by the escape sequences <code>\\\u2019</code> and <code>\\\\</code> respectively. If the character following a backslash is not one of those specified, the behavior is undefined. An escape sequence specifies a single character.</p>\n</blockquote>\n</hr>", "OwnerUserId": "1009479", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T12:16:30.553", "Id": "19374879", "Score": "37", "CreationDate": "2013-10-15T06:49:29.560", "LastActivityDate": "2013-10-31T12:50:01.160"}, "19374878": {"CommentCount": "4", "ViewCount": "5364", "PostTypeId": "1", "LastEditorUserId": "1009479", "CreationDate": "2013-10-15T06:49:29.560", "LastActivityDate": "2013-10-31T12:58:50.780", "Title": "Why is \"\\?\" an escape sequence in C/C++?", "FavoriteCount": "6", "LastEditDate": "2013-10-31T12:58:50.780", "Id": "19374878", "Score": "30", "Body": "<p>There are four special non-alphabet characters that need to be escaped in C/C++: the single quote <code>\\'</code>, the double quote <code>\\\"</code>, the backslash <code>\\\\</code> and the question mark <code>\\?</code>. It's apparently because they have special meanings. <code>'</code> for single <code>char</code>, <code>\"</code> for string literals, <code>\\</code> for escape sequences, but why is <code>?</code> one of them? </p>\n<p>I read the table of escape sequences in a textbook today and I realized that I've <strong>never</strong> escape <code>?</code> before and never encountered a problem with it , just to be sure, I tested it under gcc:</p>\n<pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\n    printf(\"question mark ? and escaped \\?\\n\");\n    return 0;\n}\n</code></pre>\n<p>and the C++ version:</p>\n<pre><code>#include &lt;iostream&gt;\nint main(void)\n{\n    std::cout &lt;&lt; \"question mark ? and escaped \\?\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<p>Both programs output:  <code>question mark ? and escaped ?</code></p>\n<p>So I have two questions:</p>\n<ol>\n<li>Why is <code>\\?</code> one of the escape sequence characters ?</li>\n<li>Why non-escaping <code>?</code> works fine, there's not even a warning.</li>\n</ol>\n<hr>\n<p>Before I'm about to ask this question, I found the answer myself, since I didn't find a duplicate in SO, I decided to post it in Q&amp;A style.</p>\n<p>The more interesting fact is that the escaped <code>\\?</code> can be used the same as <code>?</code> in some other languages as well, I tested in Lua/Ruby, it's also true even though I didn't find this documented.</p>\n</hr>", "Tags": "<c++><c><string><gcc><escaping>", "OwnerUserId": "1009479", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_19374878_19374879_2": {"section_id": 5345, "quality": 0.5625, "length": 9}, "so_19374878_19374879_0": {"section_id": 5313, "quality": 0.8, "length": 4}, "so_19374878_19374879_3": {"section_id": 5345, "quality": 0.8478260869565217, "length": 39}}, "n3337": {"so_19374878_19374879_2": {"section_id": 5142, "quality": 0.5625, "length": 9}, "so_19374878_19374879_0": {"section_id": 5110, "quality": 0.8, "length": 4}, "so_19374878_19374879_3": {"section_id": 5142, "quality": 0.8478260869565217, "length": 39}}, "n4659": {"so_19374878_19374879_2": {"section_id": 6770, "quality": 0.5625, "length": 9}, "so_19374878_19374879_3": {"section_id": 6770, "quality": 0.8478260869565217, "length": 39}, "so_19374878_19374879_0": {"section_id": 6737, "quality": 0.8, "length": 4}}}});