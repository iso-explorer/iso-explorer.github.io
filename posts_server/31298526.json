post_cb({"31298806": {"ParentId": "31298526", "CommentCount": "1", "Body": "<p>The problem is that the compiler is free to chose whatever underlying type is big enough for an enum declaration to hold all its data.</p>\n<p>In your case it apparently chose an integral type to represent <code>a_t</code> that has an (possibly imaginary) bitsize of 4.</p>\n<p>This type can only hold values from 0 to 15. You try <code>static_cast&lt;a_t&gt; (16)</code>, which is outside of the representable values, thus the undefined behaviour. This is not true for <code>a1_t</code> - you got \"lucky\" - because here it would be <code>static_cast&lt;a1_t&gt; (15)</code> and 15 is representable by the underlying type of <code>a1_t</code>.</p>\n", "OwnerUserId": "3102935", "PostTypeId": "2", "Id": "31298806", "Score": "0", "CreationDate": "2015-07-08T16:46:59.407", "LastActivityDate": "2015-07-08T16:46:59.407"}, "31299313": {"ParentId": "31298526", "PostTypeId": "2", "CommentCount": "0", "CreationDate": "2015-07-08T17:13:56.983", "Score": "1", "LastEditorUserId": "1708801", "LastEditDate": "2015-07-08T20:15:53.187", "Id": "31299313", "OwnerUserId": "1708801", "Body": "<p>The range of an <a href=\"http://en.cppreference.com/w/cpp/language/enum\" rel=\"nofollow\">enum</a> is:</p>\n<blockquote>\n<p id=\"so_31298526_31299313_0\">[...]If the underlying type is not fixed, the range is all values\n  possible for the smallest bit field large enough to hold all\n  enumerators of the target enumeration[...]</p>\n</blockquote>\n<p>So <code>15</code> fits within this range while <code>16</code> does not. This is unspecified behavior prior to C++17 and will be undefined behavior after. The change was due to <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1766\" rel=\"nofollow\">DR 1766: Values outside the range of the values of an enumeration </a> which says:</p>\n<blockquote>\n<p id=\"so_31298526_31299313_1\">Although issue 1094 clarified that the value of an expression of enumeration type might not be within the range of the values of the enumeration after a conversion to the enumeration type (see 5.2.9 [expr.static.cast] paragraph 10), the result is simply an unspecified value. This should probably be strengthened to produce undefined behavior, in light of the fact that undefined behavior makes an expression non-constant. See also 9.6 [class.bit] paragraph 4.</p>\n</blockquote>\n<p>and the resolution was to make it undefined behavior.</p>\n", "LastActivityDate": "2015-07-08T20:15:53.187"}, "bq_ids": {"n4140": {"so_31298526_31299313_0": {"section_id": 5467, "quality": 0.6470588235294118, "length": 11}}, "n3337": {"so_31298526_31299313_0": {"section_id": 5253, "quality": 0.6470588235294118, "length": 11}}, "n4659": {"so_31298526_31299313_0": {"section_id": 6901, "quality": 0.6470588235294118, "length": 11}}}, "31298526": {"CommentCount": "0", "ViewCount": "294", "PostTypeId": "1", "LastEditorUserId": "1246264", "CreationDate": "2015-07-08T16:32:02.967", "LastActivityDate": "2015-07-08T20:15:53.187", "Title": "Enum warning : outside the range", "AcceptedAnswerId": "31298806", "LastEditDate": "2015-07-08T19:10:52.690", "Id": "31298526", "Score": "1", "Body": "<p>I have the following code. There are two enums. One with 16 values (A_) and\nthe other with 15 values (A1_). </p>\n<pre><code>#include &lt;iostream&gt;\n\ntypedef enum\n{   \n    A_0 = 0,\n    A_1,\n    A_2,\n    A_3,\n    A_4,\n    A_5,\n    A_6,\n    A_7,\n    A_8,\n    A_9,\n    A_10,\n    A_11,\n    A_12,\n    A_13,\n    A_14,\n    A_15,\n    A_FIRST = A_0,\n    A_LAST = A_15\n} a_t;\n\ntypedef enum\n{   \n    A1_0 = 0,\n    A1_1,\n    A1_2,\n    A1_3,\n    A1_4,\n    A1_5,\n    A1_6,\n    A1_7,\n    A1_8,\n    A1_9,\n    A1_10,\n    A1_11,\n    A1_12,\n    A1_13,\n    A1_14,\n    A1_FIRST = A1_0,\n    A1_LAST = A1_14\n} a1_t;\n\nint \nmain()\n{   \n    a_t m = static_cast&lt;a_t&gt; (static_cast&lt;int&gt; (A_LAST) + 1); // WARNING\n    std::cout &lt;&lt; m;\n    a1_t m1 = static_cast&lt;a1_t&gt; (static_cast&lt;int&gt; (A1_LAST) + 1); // NO WARNING\n    std::cout &lt;&lt; m1;\n    return 0;\n}\n</code></pre>\n<p>g++ compilation:</p>\n<blockquote>\n<p id=\"so_31298526_31298526_0\">g++ -Wconversion enum_testing.cpp</p>\n</blockquote>\n<p>I get a warning message:</p>\n<pre><code>enum_testing.cpp: In function \u2018int main()\u2019:\nenum_testing.cpp:49:64: warning: the result of the conversion is     unspecified because \u201816\u2019 is outside the range of type \u2018a_t\u2019 [-Wconversion]\n     a_t m = static_cast&lt;a_t&gt; (static_cast&lt;int&gt; (A_LAST) + 1);\n</code></pre>\n<p>Question: Why I get a warning message for first declaration with enum A_ and not a message with enum A1_.</p>\n", "Tags": "<c++><enums><warnings>", "OwnerUserId": "1246264", "AnswerCount": "2"}});