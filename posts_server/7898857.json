post_cb({"7898857": {"CommentCount": "0", "AcceptedAnswerId": "7898947", "CreationDate": "2011-10-26T04:55:19.273", "LastActivityDate": "2011-10-26T05:19:32.350", "PostTypeId": "1", "ViewCount": "763", "FavoriteCount": "1", "Title": "Scope of members in class", "Id": "7898857", "Score": "7", "Body": "<p>In the following example, will the size of array <code>v</code> guaranteed to be 2 or 3?</p>\n<pre><code>static const int i = 3;\n\nclass X {\n\n    char v[i];\n    static const int i = 2;\n};\n</code></pre>\n<p>From the standard,</p>\n<blockquote>\n<p id=\"so_7898857_7898857_0\">3.3.6/2 A name N used in a class S shall refer to the same declaration in its context and when re-evaluated in the completed scope of S</p>\n</blockquote>\n<p>I think this means 'i' shall be <code>2</code> and what does the re-evaluation thing really means here?</p>\n", "Tags": "<c++><class>", "OwnerUserId": "974191", "AnswerCount": "2"}, "7898950": {"ParentId": "7898857", "CommentCount": "0", "Body": "<p>Array size should be 3 in this case. If you look in your code line by line. Compliler know nothing about X::i when construct array. If you change lines inside class when size of array become 2 and second i will hide first.</p>\n", "OwnerUserId": "1013973", "PostTypeId": "2", "Id": "7898950", "Score": "1", "CreationDate": "2011-10-26T05:19:32.350", "LastActivityDate": "2011-10-26T05:19:32.350"}, "7898947": {"ParentId": "7898857", "CommentCount": "0", "Body": "<p>The correct behavior is that it should cause an error because re-evaluation would change the meaning:</p>\n<p>Example from section 3.3.6:</p>\n<blockquote>\n<p id=\"so_7898857_7898947_0\">The potential scope of a declaration that extends to or past the end of a class definition also extends to the regions defined by its member definitions, even if the members are defined lexically outside the class (this includes static data member definitions, nested class definitions, member function definitions (including the member function body and, for constructor functions (12.1), the ctor-initializer (12.6.2)) and any portion of the declarator part of such definitions which follows the identifier, including a parameter-declaration-clause and any default arguments (8.3.6). [Example:</p>\n</blockquote>\n<p>The example is similar to yours (using <code>enum</code> instead of a <code>static const int</code>):</p>\n<pre><code>typedef int  c;\nenum { i = 1 };\nclass X {\n    char  v[i];    // error: i refers to ::i\n                   // but when reevaluated is X::i\n    int  f() { return sizeof(c); } // OK X::c\n    char  c;\n    enum { i = 2 };\n};\n</code></pre>\n<p>At the time <code>v[i]</code> is encountered, the compiler only knows about <code>enum { i = 1 };</code> (or <code>static const int i = 3;</code>, but when the full class declaration is known, <code>char v[i]</code> would be different because <code>i</code> would be re-evaluated to <code>2</code>.</p>\n", "OwnerUserId": "297696", "PostTypeId": "2", "Id": "7898947", "Score": "4", "CreationDate": "2011-10-26T05:18:39.777", "LastActivityDate": "2011-10-26T05:18:39.777"}, "bq_ids": {"n4140": {"so_7898857_7898947_0": {"section_id": 7070, "quality": 0.8363636363636363, "length": 46}, "so_7898857_7898857_0": {"section_id": 7070, "quality": 0.9166666666666666, "length": 11}}, "n3337": {"so_7898857_7898947_0": {"section_id": 6814, "quality": 0.8363636363636363, "length": 46}, "so_7898857_7898857_0": {"section_id": 6814, "quality": 0.9166666666666666, "length": 11}}, "n4659": {"so_7898857_7898947_0": {"section_id": 8570, "quality": 0.8363636363636363, "length": 46}, "so_7898857_7898857_0": {"section_id": 8568, "quality": 0.9166666666666666, "length": 11}}}});