post_cb({"33330435": {"CommentCount": "1", "ViewCount": "34", "PostTypeId": "1", "LastEditorUserId": "3313438", "CreationDate": "2015-10-25T13:50:04.710", "LastActivityDate": "2015-10-26T01:54:49.587", "Title": "Class function running out of loop", "AcceptedAnswerId": "33330451", "LastEditDate": "2015-10-25T14:08:41.763", "Id": "33330435", "Score": "-1", "Body": "<p>I'm working on a bit of code for my class. </p>\n<p>I've got the basics of it working, but I've run into an issue while testing the code. </p>\n<p>I have an <code>if</code> statement that's running the selection for <code>Yes</code>, regardless of actual user input. I'm sure it's something small that I'm missing, but I can figure out what. Any help would be greatly appreciated.</p>\n<p>And I have double checked the brackets in the class <code>Calendar</code> that defines those functions.</p>\n<pre><code>int main()\n{\n    Calendar adminCal;\n    char selection;\n\n    cout &lt;&lt; \"Would you like to set the date? (Y/N)\" &lt;&lt; endl;\n    cin &gt;&gt; selection;\n\n    if (selection = 'y' || 'Y')\n    {\n        adminCal.setDate();\n        adminCal.Display();\n    }\n    else\n        adminCal.Display();\n\nreturn 0;\n}\n</code></pre>\n<h2>Question:</h2>\n<p>Why is the <code>if</code> statement behaving like this?</p>\n", "Tags": "<c++>", "OwnerUserId": "5486014", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_33330435_33330451_0": {"section_id": 44, "quality": 0.975609756097561, "length": 40}}, "n3337": {"so_33330435_33330451_0": {"section_id": 41, "quality": 0.9512195121951219, "length": 39}}, "n4659": {"so_33330435_33330451_0": {"section_id": 45, "quality": 0.975609756097561, "length": 40}}}, "33330451": {"ParentId": "33330435", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>You should change</p>\n<pre><code>if (selection = 'y' || 'Y')\n</code></pre>\n<p>to</p>\n<pre><code>if (selection == 'y' || selection == 'Y')\n</code></pre>\n<p>Note that <code>selection = 'y'</code> is an assignment operator, not a relation operator which you're expecting. When it's used for an if statement, it will be always <code>true</code>, because the char value (it's <code>y</code> here) returned by the assignment operator is a nonzero value. And the expression <code>Y</code> will be always <code>true</code> too.</p>\n<p>From the standard, 4.12$1 Boolean conversions [conv.bool]</p>\n<blockquote>\n<p id=\"so_33330435_33330451_0\">A prvalue of arithmetic, unscoped enumeration, pointer, or pointer\n  to member type can be converted to a prvalue of type bool. A zero\n  value, null pointer value, or null member pointer value is converted\n  to false; any other value is converted to true. For\n  direct-initialization (8.5), a prvalue of type std::nullptr_t can be\n  converted to a prvalue of type bool; the resulting value is false.</p>\n</blockquote>\n<p>BTW: Don't ignore the warning messages generated by the compiler, it's trying to help you to find this kind of mistakes. This is the warning message generated by clang:</p>\n<pre><code>Warning(s):\n\nsource_file.cpp:10:25: warning: use of logical '||' with constant operand [-Wconstant-logical-operand]\n    if (selection = 'y' || 'Y')\n                        ^  ~~~\nsource_file.cpp:10:25: note: use '|' for a bitwise operation\n    if (selection = 'y' || 'Y')\n                        ^~\n                        |\nsource_file.cpp:10:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]\n    if (selection = 'y' || 'Y')\n        ~~~~~~~~~~^~~~~~~~~~~~\nsource_file.cpp:10:19: note: place parentheses around the assignment to silence this warning\n    if (selection = 'y' || 'Y')\n                  ^\n        (                     )\nsource_file.cpp:10:19: note: use '==' to turn this assignment into an equality comparison\n    if (selection = 'y' || 'Y')\n                  ^\n                  ==\n2 warnings generated.\n</code></pre>\n", "OwnerUserId": "3309790", "LastEditorUserId": "3309790", "LastEditDate": "2015-10-26T01:54:49.587", "Id": "33330451", "Score": "3", "CreationDate": "2015-10-25T13:52:33.393", "LastActivityDate": "2015-10-26T01:54:49.587"}});