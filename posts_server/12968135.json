post_cb({"bq_ids": {"n4140": {"so_12968135_13041305_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 4643}, "so_12968135_12968346_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 563}}, "n3337": {"so_12968135_13041305_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 4454}, "so_12968135_12968346_1": {"length": 12, "quality": 0.9230769230769231, "section_id": 4437}, "so_12968135_12968346_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 554}}, "n4659": {"so_12968135_13041305_0": {"length": 7, "quality": 0.6363636363636364, "section_id": 6014}, "so_12968135_12968346_0": {"length": 5, "quality": 0.8333333333333334, "section_id": 586}}}, "13041305": {"Id": "13041305", "PostTypeId": "2", "Body": "<p><code>std::mem_fn</code> (and <code>std::bind</code>) is specified and implemented in terms of the <code>INVOKE</code> facility, see <code>\u00a720.8.10 [func.memfn] p1</code></p>\n<blockquote>\n<p id=\"so_12968135_13041305_0\"><em>Returns:</em> A simple call wrapper (20.8.1) <code>fn</code> such that the expression <code>fn(t, a2, ..., aN)</code> is equivalent to <code>INVOKE(pm, t, a2, ..., aN)</code> (20.8.2).</p>\n</blockquote>\n<p>As such, it's very likely a bug in MSVC's implementation of <code>INVOKE</code>, specifically the fourth requirement:</p>\n<p><code>\u00a720.8.2 [func.require] p1</code></p>\n<blockquote>\n<p id=\"so_12968135_13041305_1\">Define <code>INVOKE(f, t1, t2, ..., tN)</code> as follows:</p>\n<ul>\n<li><code>(t1.*f)(t2, ..., tN)</code> when <code>f</code> is a pointer to a member function of a class <code>T</code> and <code>t1</code> is an object of type <code>T</code> or a reference to an object of type <code>T</code> or a reference to an object of a type derived from <code>T</code>;</li>\n<li><code>((*t1).*f)(t2, ..., tN)</code> when <code>f</code> is a pointer to a member function of a class <code>T</code> and <code>t1</code> is not one of the types described in the previous item;</li>\n<li><code>t1.*f</code> when <code>N == 1</code> and <code>f</code> is a pointer to member data of a class <code>T</code> and <code>t1</code> is an object of type <code>T</code> or a reference to an object of type <code>T</code> or a reference to an object of a type derived from <code>T</code>;</li>\n<li><code>(*t1).*f</code> when <code>N == 1</code> and f is a pointer to member data of a class <code>T</code> <strong>and <code>t1</code> is not one of the types described in the previous item</strong>;</li>\n<li><code>f(t1, t2, ..., tN)</code> in all other cases.</li>\n</ul>\n</blockquote>\n<p>The bold part basically says that when <code>f</code> is a member pointer (of any kind) and <code>t1</code> is not a reference, try to dereference it and apply the member pointer after that. This should be the case for your code, as an iterator is not a reference to <code>T</code>. GCC implements this correctly.</p>\n<p><a href=\"https://connect.microsoft.com/VisualStudio/feedback/CreateFeedbackForm.aspx?FeedbackFormConfigurationID=5303&amp;FeedbackType=1\" rel=\"nofollow\">I advise filing a bug report on MS Connect.</a></p>\n", "LastActivityDate": "2012-10-24T00:27:27.517", "CommentCount": "0", "CreationDate": "2012-10-24T00:27:27.517", "ParentId": "12968135", "Score": "1", "OwnerUserId": "500104"}, "12968346": {"Id": "12968346", "PostTypeId": "2", "Body": "<p>If you check a reference <a href=\"http://en.cppreference.com/w/cpp/utility/functional/bind\" rel=\"nofollow\">like this</a> you will see that the first arguments should be</p>\n<blockquote>\n<p id=\"so_12968135_12968346_0\">function object that will be bound to some arguments </p>\n</blockquote>\n<p>In other words, you should not be able to bind data members or variables, only functions and function-like objects.</p>\n<p>To quote from the C++11 standard (section 20.8.9):</p>\n<blockquote>\n<p id=\"so_12968135_12968346_1\">The function template bind returns an object that binds a callable object passed as an argument to additional arguments.</p>\n</blockquote>\n", "LastActivityDate": "2012-10-19T06:12:32.617", "CommentCount": "4", "CreationDate": "2012-10-19T06:12:32.617", "ParentId": "12968135", "Score": "0", "OwnerUserId": "440558"}, "12968135": {"ViewCount": "528", "Body": "<p>When using std::bind, I was able to bind data members in VS2010 by passing a pointer or an iterator rather than the object itself. However, it no longer seems to work in VS2012:</p>\n<pre><code>#include &lt;vector&gt;\n#include &lt;utility&gt;\n#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\nusing namespace std;\n\nint main()\n{\n    vector&lt;pair&lt;string, int&gt;&gt; v; \n    v.push_back(make_pair(\"abc\", 10));\n    auto f = bind(&amp;pair&lt;string, int&gt;::second, v.begin());\n    int res = f();\n    cout &lt;&lt; res &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>(<a href=\"http://ideone.com/n1KWu\" rel=\"nofollow\">http://ideone.com/n1KWu</a>)</p>\n<p>GCC also compiles &amp; runs this code fine, but VS2012 gives me an error:</p>\n<pre><code>error C2440: 'initializing' : cannot convert from 'std::_Do_call_ret&lt;_Forced,_Ret,_Funx,_Btuple,_Ftuple&gt;::type' to 'int'\n1&gt;          with\n1&gt;          [\n1&gt;              _Forced=false,\n1&gt;              _Ret=void,\n1&gt;              _Funx=std::_Pmd_wrap&lt;int std::pair&lt;std::string,int&gt;::* ,int,std::pair&lt;std::string,int&gt;&gt;,\n1&gt;              _Btuple=std::tuple&lt;std::_Vector_iterator&lt;std::_Vector_val&lt;std::_Simple_types&lt;std::pair&lt;std::string,int&gt;&gt;&gt;&gt;&gt;,\n1&gt;              _Ftuple=std::tuple&lt;&gt;\n1&gt;          ]\n1&gt;          Expressions of type void cannot be converted to other types\n</code></pre>\n<p>Note that if I pass an std::pair instance instead of an iterator or a pointer to it, then VS2012 is happy. </p>\n<p>What is the problem here? </p>\n", "AcceptedAnswerId": "13041305", "Title": "Binding data members not working in VS2012?", "CreationDate": "2012-10-19T05:53:30.220", "Id": "12968135", "CommentCount": "0", "PostTypeId": "1", "LastActivityDate": "2012-10-24T00:27:27.517", "Score": "0", "OwnerUserId": "221619", "Tags": "<c++><c++11><visual-studio-2012>", "AnswerCount": "2"}});