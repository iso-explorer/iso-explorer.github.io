post_cb({"34907695": {"ParentId": "34907643", "CommentCount": "0", "Body": "<p>Yes, it will do exactly what you want: First release the RAII resource and then process the exception block.</p>\n", "OwnerUserId": "251738", "PostTypeId": "2", "Id": "34907695", "Score": "5", "CreationDate": "2016-01-20T18:26:53.783", "LastActivityDate": "2016-01-20T18:26:53.783"}, "34907643": {"CommentCount": "2", "ViewCount": "162", "CreationDate": "2016-01-20T18:23:30.627", "LastActivityDate": "2016-01-20T19:12:01.120", "Title": "Are C++ `try`/`catch` blocks the same as other blocks, regarding RAII?", "AcceptedAnswerId": "34907721", "PostTypeId": "1", "Id": "34907643", "Score": "4", "Body": "<p>OK so if I am using a RAII idiom to manage some context attribute*, will it work as I expect if I use it nakedly in at the start of a <code>try</code> block? </p>\n<p>In other words, if I have this:</p>\n<pre><code>struct raii {\n    raii() {\n        std::cout &lt;&lt; \"Scope init\"\n                  &lt;&lt; std::endl; }\n    ~raii() {\n        std::cout &lt;&lt; \"Scope exit\"\n                  &lt;&lt; std::endl; }\n};\n</code></pre>\n<p>\u2026 and I am successfully using it like this:</p>\n<pre><code>{\n    raii do_the_raii_thing;\n    stuff_expecting_raii_context();\n    /* \u2026 */\n}\n</code></pre>\n<p>\u2026 will the RAII instance work the same way if I do this:</p>\n<pre><code>try {\n    raii do_the_raii_thing;\n    stuff_expecting_raii_context_that_might_throw();\n    /* \u2026 */\n} catch (std::exception const&amp;) {\n    /* \u2026 */\n}\n</code></pre>\n<p>This is probably a dumb question, but I want to check my own sanity on this \u2013 I am fuzzy on the subtleties of <code>noexcept</code> guarantees, and other exception-related minutiae \u2013 so pardon my na\u00edvet\u00e9</p>\n<hr>\n<p>[*] for those curious, it\u2019s the Python C-API\u2019s nefarious GIL (global interpreter lock) that I am managing with RAII, in my specific case</p>\n</hr>", "Tags": "<c++><exception><try-catch><raii><noexcept>", "OwnerUserId": "298171", "AnswerCount": "3"}, "34907721": {"ParentId": "34907643", "PostTypeId": "2", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_34907643_34907721_0\"><em>\"\u2026 will the RAII instance work the same way if I do this: ...\"</em></p>\n</blockquote>\n<p>Sure they will. The <em>RAII instance</em> will go out of scope and the destructors are called before the <code>catch</code>, if an exception is thrown.</p>\n<p>Also this will work for any upper levels, that are calling your function if you just <code>throw</code> and there aren't any <code>try</code>/<code>catch</code> blocks. That's called <a href=\"https://stackoverflow.com/questions/2331316/what-is-stack-unwinding\"><em>stack unwinding</em></a>.</p>\n", "OwnerUserId": "1413395", "LastEditorUserId": "-1", "LastEditDate": "2017-05-23T11:52:24.723", "Id": "34907721", "Score": "3", "CreationDate": "2016-01-20T18:28:19.093", "LastActivityDate": "2016-01-20T19:12:01.120"}, "bq_ids": {"n4140": {"so_34907643_34908242_1": {"section_id": 3343, "quality": 0.6956521739130435, "length": 16}}, "n3337": {"so_34907643_34908242_1": {"section_id": 3213, "quality": 0.6956521739130435, "length": 16}}, "n4659": {"so_34907643_34908242_1": {"section_id": 4109, "quality": 0.8695652173913043, "length": 20}}}, "34908242": {"ParentId": "34907643", "CommentCount": "0", "Body": "<p>Yes, this is specified in the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4567.pdf\" rel=\"nofollow\"><strong>Standard</strong></a>:</p>\n<blockquote>\n<p id=\"so_34907643_34908242_0\"><strong>15.2 Constructors and destructors [except.ctor]</strong></p>\n<p id=\"so_34907643_34908242_1\">2 The destructor is invoked for each automatic object of class type\n  constructed since the <code>try</code> block was entered. The automatic objects\n  are destroyed in the reverse order of the completion of their\n  construction.</p>\n</blockquote>\n", "OwnerUserId": "819272", "PostTypeId": "2", "Id": "34908242", "Score": "2", "CreationDate": "2016-01-20T18:58:15.820", "LastActivityDate": "2016-01-20T18:58:15.820"}});