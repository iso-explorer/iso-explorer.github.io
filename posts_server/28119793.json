post_cb({"28119895": {"Id": "28119895", "PostTypeId": "2", "Body": "<blockquote>\n<p id=\"so_28119793_28119895_0\">Is an array a data type or is it a pointer to its first element?</p>\n</blockquote>\n<p>It is a data type and it is <strong>not</strong> a pointer.</p>\n<h1>Here's the source of this common confusion.</h1>\n<ul>\n<li>An array may be implicitly <em>converted</em> to a <em>pointer to the first element</em> (but not the other way around)</li>\n<li>A pointer shares some syntactical similarities with arrays (namely \"<code>[]</code>\") so it's not always obvious to beginners when an implicit cast has happened.</li>\n</ul>\n", "LastEditorUserId": "827263", "LastActivityDate": "2015-01-23T22:47:21.027", "Score": "1", "CreationDate": "2015-01-23T22:38:51.387", "ParentId": "28119793", "CommentCount": "1", "LastEditDate": "2015-01-23T22:47:21.027", "OwnerUserId": "16287"}, "28119888": {"Id": "28119888", "PostTypeId": "2", "Body": "<p>An array is a type. It can be called a compound type or an array type (C++ standard, \u00a73.9.2):</p>\n<blockquote>\n<p id=\"so_28119793_28119888_0\">Compound types can be constructed in the following ways:<br>\n  \u2014 arrays of objects of a given type, (8.3.4)</br></p>\n</blockquote>\n<p>Where (\u00a78.3.4) is, emphasis mine:</p>\n<blockquote>\n<p id=\"so_28119793_28119888_1\">In a declaration <code>T</code> <code>D</code> where <code>D</code> has the form  </p>\n<pre><code> D1 [ constant-expressionopt] attribute-specifier-seqopt\n</code></pre>\n<p id=\"so_28119793_28119888_2\">and the type of the identifier in the declaration <code>T D1</code> is \u201c<em>derived-declarator-type-list</em> <code>T</code>\u201d, then the type of the\n  identifier of <code>D</code> is an <strong>array type</strong>;</p>\n</blockquote>\n<p>And, like any other type, you can use it in a <code>typedef</code>. From the same section:</p>\n<blockquote id=\"so_28119793_28119888_3\">\n<pre><code>typedef int A[5], AA[2][3];\ntypedef const A CA; // type is \u201carray of 5 const int\u201d\ntypedef const AA CAA; // type is \u201carray of 2 array of 3 const int\u201d\n</code></pre>\n</blockquote>\n<p>An object of array type can be <em>implicitly cast</em> to a pointer, hence the potential confusion:</p>\n<pre><code>void foo(int* );\nA some_array;\n\nfoo(some_array);       // OK\nint* p = some_array;   // OK\n</code></pre>\n", "LastEditorUserId": "827263", "LastActivityDate": "2015-01-23T22:54:47.687", "Score": "1", "CreationDate": "2015-01-23T22:38:23.690", "ParentId": "28119793", "CommentCount": "0", "LastEditDate": "2015-01-23T22:54:47.687", "OwnerUserId": "2069064"}, "28119793": {"ViewCount": "204", "Body": "<p>Is an array a data type or is it a pointer to its first element?</p>\n", "Title": "Is an array a data type?", "CreationDate": "2015-01-23T22:29:52.707", "Id": "28119793", "CommentCount": "10", "FavoriteCount": "0", "PostTypeId": "1", "LastEditDate": "2015-01-26T22:49:17.380", "OwnerDisplayName": "user4420637", "ClosedDate": "2015-01-24T06:36:43.523", "LastActivityDate": "2015-01-26T22:58:58.340", "AnswerCount": "4", "Score": "1", "Tags": "<c++><c><arrays><types>", "LastEditorUserId": "168986"}, "bq_ids": {"n4140": {"so_28119793_28119895_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 11}, "so_28119793_28119888_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 7221}, "so_28119793_28119888_2": {"length": 9, "quality": 1.0, "section_id": 3228}}, "n3337": {"so_28119793_28119888_3": {"length": 9, "quality": 0.5294117647058824, "section_id": 4515}, "so_28119793_28119895_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 8}, "so_28119793_28119888_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 6965}, "so_28119793_28119888_2": {"length": 9, "quality": 1.0, "section_id": 3101}}, "n4659": {"so_28119793_28119895_0": {"length": 5, "quality": 0.7142857142857143, "section_id": 12}, "so_28119793_28119888_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 8730}, "so_28119793_28119888_2": {"length": 8, "quality": 0.8888888888888888, "section_id": 3985}}}, "28120448": {"Id": "28120448", "PostTypeId": "2", "Body": "<p>Strictly an array in an <em>instance</em> of an object having <em>array type</em>.  So arrays <em>have type</em> rather than <em>are types</em>.</p>\n<p>While arrays have type (and are an example of container data structure), it is perhaps useful to understand that in C and C++, unlike fundamental types, and <code>class</code>/<code>struct</code>/<code>union</code> types they are not treated as <a href=\"http://en.wikipedia.org/wiki/First-class_citizen\" rel=\"nofollow\">first-class data types</a> in that they cannot be passed as parameters by-value, returned by-value, or assigned to or from.</p>\n<p>An array is not the same as a pointer - an array in C and C++ has <em>size</em> equal to the number of elements multiplied by the size of each element, whereas a pointer is the size of a pointer rather than the size of what it refers to.  However because an array is not a first-class type, when passed, returned or assigned-from, the array \"decays\" to a pointer.</p>\n<p>The C++ STL supports various container data structure types that are more flexible and generally safer than raw arrays, and are first class types.</p>\n", "LastEditorUserId": "168986", "LastActivityDate": "2015-01-26T22:58:58.340", "Score": "1", "CreationDate": "2015-01-23T23:34:30.793", "ParentId": "28119793", "CommentCount": "9", "LastEditDate": "2015-01-26T22:58:58.340", "OwnerUserId": "168986"}, "28119862": {"Id": "28119862", "PostTypeId": "2", "Body": "<p>You're asking about two different languages, C and C++. They happen to have the same rules in this area (mostly), but it's important to keep in mind that they're two distinct (but closely related) languages.</p>\n<p>It also depends on what you mean by \"an array\". It's often best to think of the word \"array\" as an adjective, not a noun; thus you can have an array <em>type</em>, an array <em>object</em> (an object of array type), an array <em>expression</em> (an expression of array type), and so on.</p>\n<p>The C and C++ standards do not define the phrase \"data type\", though both standards do use the phrase informally a few times. Given the context, it's reasonably clear that the phrase \"data type\" is synonymous with \"object type\".</p>\n<p>C has two kinds of types, object types and function types. (Prior to the C11 standard, incomplete types were a third kind; the definitions were changed in 2011 so incomplete types are a subset of object types.)</p>\n<p>An array <em>type</em> is an object type (and no, this is not a matter of opinion).</p>\n<p>If you've been told that an array is \"really\" a pointer to its first element, you've been badly misinformed. An array expression is implicitly <em>converted</em>, in most but not all contexts, to a pointer to the array's first element. The array object still exists, is still an object, and is still of array type.</p>\n<p>Suggested reading: Section 6 of the <a href=\"http://www.c-faq.com/\" rel=\"nofollow noreferrer\">comp.lang.c FAQ</a>.</p>\n", "LastEditorUserId": "827263", "LastActivityDate": "2015-01-23T22:44:30.313", "Score": "8", "CreationDate": "2015-01-23T22:36:17.030", "ParentId": "28119793", "CommentCount": "0", "LastEditDate": "2015-01-23T22:44:30.313", "OwnerUserId": "827263"}});