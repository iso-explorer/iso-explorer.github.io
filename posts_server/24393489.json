post_cb({"24393489": {"CommentCount": "3", "ViewCount": "134", "PostTypeId": "1", "ClosedDate": "2014-06-24T18:20:44.030", "LastEditorUserId": "701092", "CreationDate": "2014-06-24T18:11:13.903", "LastActivityDate": "2014-06-24T18:32:42.500", "Title": "C++ default argument value using the value of another parameter", "LastEditDate": "2014-06-24T18:12:05.353", "Id": "24393489", "Score": "1", "Body": "<p>I am aware that the default argument value for a parameter can't be the value of another parameter. For example</p>\n<pre><code>void foo( int a, int b = a );\n</code></pre>\n<p>Obviously the default value of b is not a compile time constant but it seems to me that the compiler could generate code to do this.</p>\n<p>I'm sure there is a good reason for not allowing this, I am wondering what it is?</p>\n", "Tags": "<c++>", "OwnerUserId": "849856", "AnswerCount": "2"}, "24393517": {"ParentId": "24393489", "CommentCount": "7", "Body": "<p>The standard does not mandate that <code>a</code> must be initialized before <code>b</code>. Hence, it is undefined behavior.</p>\n", "OwnerUserId": "434551", "PostTypeId": "2", "Id": "24393517", "Score": "4", "CreationDate": "2014-06-24T18:13:23.570", "LastActivityDate": "2014-06-24T18:13:23.570"}, "24393520": {"ParentId": "24393489", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2014-06-24T18:13:31.720", "Score": "5", "LastEditorUserId": "3723423", "LastEditDate": "2014-06-24T18:32:42.500", "Id": "24393520", "OwnerUserId": "3723423", "Body": "<p>It's because you've no guarantee about the order of evaluation of the parameters. </p>\n<p>Iso standard section 8.3.6 specifies clearly why:  </p>\n<blockquote>\n<p id=\"so_24393489_24393520_0\">The order of evaluation of function arguments is unspecified.\n  Consequently, parameters of a function shall not be used in a default\n  argument, even if they are not evaluated. Parameters of a function\n  declared before a default argument are in scope and can hide \n  namespace and class member names.</p>\n</blockquote>\n<p>However if you could in some cases opt for a function overloading for getting the desired result:  </p>\n<pre><code>void foo(int a, int b);\nvoid foo(int a);\n\nvoid foo(int a, int b) {\n    cout &lt;&lt; \"foo with 2 arguments\" &lt;&lt; a &lt;&lt; \",\" &lt;&lt; b&lt;&lt;endl;\n}\n\nvoid foo(int a) {\n    cout &lt;&lt; \"wrapper foo with 1 argument =&gt;\";\n    foo(a, a);\n}\n</code></pre>\n", "LastActivityDate": "2014-06-24T18:32:42.500"}, "bq_ids": {"n4140": {"so_24393489_24393520_0": {"section_id": 3260, "quality": 0.9629629629629629, "length": 26}}, "n3337": {"so_24393489_24393520_0": {"section_id": 3132, "quality": 0.9629629629629629, "length": 26}}, "n4659": {"so_24393489_24393520_0": {"section_id": 4018, "quality": 0.5925925925925926, "length": 16}}}});