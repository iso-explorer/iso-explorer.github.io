post_cb({"31526278": {"ViewCount": "1573", "Body": "<p>N4527 5.20[expr.const]p5</p>\n<blockquote>\n<p id=\"so_31526278_31526278_0\">A constant expression is either a glvalue core constant expression whose value refers to an entity that is a\n  permitted result of a constant expression (as defined below), or a prvalue core constant expression whose\n  value is an object where, for that object and its subobjects: </p>\n<p id=\"so_31526278_31526278_1\">\u2014 each non-static data member of reference type refers to an entity that is a permitted result of a constant expression, and</p>\n<p id=\"so_31526278_31526278_2\">\u2014 if the object or subobject is of pointer type, it contains the address of an object with static storage duration, the address past the end of such an object (5.7), the address of a function, or a null pointer value.</p>\n<p id=\"so_31526278_31526278_3\">An entity is a permitted result of a constant expression if it is an object with static storage duration that is either not a temporary object or is a temporary object whose value satisfies the above constraints, or it is a\n  function.</p>\n</blockquote>\n<pre><code>void foo(){\n    int a = 1;\n    int b[a || 1]{};//ok in gcc 5.1.0, error in clang 3.8.0\n    static_assert(a || 1,\"\");//ok in gcc 5.1.0, error in clang 3.8.0\n    switch(1){\n        case a || 1://ok in gcc 5.1.0, error in clang 3.8.0\n            ;\n        }\n}\n</code></pre>\n<p>Is <code>a || 1</code> a <strong>constant expression</strong>?</p>\n<hr>\n<p>N4527 5.20[expr.const]p2</p>\n<blockquote>\n<p id=\"so_31526278_31526278_4\">A conditional-expression e is a core constant expression unless the evaluation of e, following the rules of the\n  abstract machine (1.9), would evaluate one of the following expressions:</p>\n<p id=\"so_31526278_31526278_5\">(2.7) \u2014 an lvalue-to-rvalue conversion (4.1) unless it is applied to</p>\n<p id=\"so_31526278_31526278_6\">(2.7.1) \u2014 a non-volatile glvalue of integral or enumeration type that refers to a complete non-volatile const\n  object with a preceding initialization, initialized with a constant expression, or</p>\n<p id=\"so_31526278_31526278_7\">(2.7.2) \u2014 a non-volatile glvalue that refers to a subobject of a string literal (2.13.5), or</p>\n<p id=\"so_31526278_31526278_8\">(2.7.3) \u2014 a non-volatile glvalue that refers to a non-volatile object defined with constexpr, or that refers\n  to a non-mutable sub-object of such an object, or</p>\n<p id=\"so_31526278_31526278_9\">(2.7.4) \u2014 a non-volatile glvalue of literal type that refers to a non-volatile object whose lifetime began\n  within the evaluation of e;</p>\n</blockquote>\n<p>Is <code>a || 1</code> a <strong>core constant expression</strong>?</p>\n</hr>", "AcceptedAnswerId": "31526370", "Title": "int a=1, is a || 1 a constant expression?", "CreationDate": "2015-07-20T21:00:22.257", "Id": "31526278", "CommentCount": "4", "FavoriteCount": "1", "PostTypeId": "1", "LastEditDate": "2015-07-23T16:24:20.233", "LastEditorUserId": "1708801", "LastActivityDate": "2015-07-27T18:15:54.263", "Score": "30", "OwnerUserId": "4958516", "Tags": "<c++><language-lawyer><constant-expression><c++1z>", "AnswerCount": "3"}, "bq_ids": {"n4140": {"so_31526278_31526278_4": {"length": 14, "quality": 1.0, "section_id": 6185}, "so_31526278_31526278_8": {"length": 12, "quality": 0.9230769230769231, "section_id": 6185}, "so_31526278_31526278_2": {"length": 20, "quality": 1.0, "section_id": 6187}, "so_31526278_31526370_7": {"length": 12, "quality": 1.0, "section_id": 6185}, "so_31526278_31526370_5": {"length": 20, "quality": 0.8333333333333334, "section_id": 6185}, "so_31526278_31526278_0": {"length": 21, "quality": 0.75, "section_id": 6187}, "so_31526278_31526278_7": {"length": 5, "quality": 0.625, "section_id": 6185}, "so_31526278_31526370_6": {"length": 12, "quality": 1.0, "section_id": 6185}, "so_31526278_31526278_9": {"length": 12, "quality": 0.9230769230769231, "section_id": 6185}, "so_31526278_31526278_6": {"length": 14, "quality": 0.875, "section_id": 6185}, "so_31526278_31527061_1": {"length": 14, "quality": 0.875, "section_id": 6185}, "so_31526278_31526370_10": {"length": 11, "quality": 0.9166666666666666, "section_id": 6185}, "so_31526278_31526278_1": {"length": 7, "quality": 0.5833333333333334, "section_id": 6187}, "so_31526278_31526370_9": {"length": 13, "quality": 1.0, "section_id": 6185}, "so_31526278_31526370_11": {"length": 11, "quality": 0.8461538461538461, "section_id": 6185}}, "n3337": {"so_31526278_31526278_8": {"length": 11, "quality": 0.8461538461538461, "section_id": 5946}, "so_31526278_31526370_7": {"length": 9, "quality": 0.75, "section_id": 5946}, "so_31526278_31526278_2": {"length": 14, "quality": 0.7, "section_id": 5947}, "so_31526278_31526370_5": {"length": 15, "quality": 0.625, "section_id": 5946}, "so_31526278_31526278_7": {"length": 5, "quality": 0.625, "section_id": 5946}, "so_31526278_31526370_6": {"length": 11, "quality": 0.9166666666666666, "section_id": 5946}, "so_31526278_31526278_9": {"length": 9, "quality": 0.6923076923076923, "section_id": 5946}, "so_31526278_31526278_6": {"length": 13, "quality": 0.8125, "section_id": 5946}, "so_31526278_31527061_1": {"length": 13, "quality": 0.8125, "section_id": 5946}, "so_31526278_31526370_10": {"length": 12, "quality": 1.0, "section_id": 5946}, "so_31526278_31526370_9": {"length": 13, "quality": 1.0, "section_id": 5946}, "so_31526278_31526370_11": {"length": 13, "quality": 1.0, "section_id": 5946}}, "n4659": {"so_31526278_31526278_4": {"length": 11, "quality": 0.7857142857142857, "section_id": 7687}, "so_31526278_31526278_8": {"length": 12, "quality": 0.9230769230769231, "section_id": 7687}, "so_31526278_31526278_1": {"length": 12, "quality": 1.0, "section_id": 7690}, "so_31526278_31526370_7": {"length": 12, "quality": 1.0, "section_id": 7687}, "so_31526278_31527061_1": {"length": 15, "quality": 0.9375, "section_id": 7687}, "so_31526278_31526278_0": {"length": 23, "quality": 0.8214285714285714, "section_id": 7690}, "so_31526278_31526278_3": {"length": 20, "quality": 1.0, "section_id": 7690}, "so_31526278_31526278_7": {"length": 6, "quality": 0.75, "section_id": 7687}, "so_31526278_31526370_6": {"length": 12, "quality": 1.0, "section_id": 7687}, "so_31526278_31526278_9": {"length": 12, "quality": 0.9230769230769231, "section_id": 7687}, "so_31526278_31526278_6": {"length": 15, "quality": 0.9375, "section_id": 7687}, "so_31526278_31526370_5": {"length": 17, "quality": 0.7083333333333334, "section_id": 7687}, "so_31526278_31526278_2": {"length": 19, "quality": 0.95, "section_id": 7690}, "so_31526278_31526370_10": {"length": 11, "quality": 0.9166666666666666, "section_id": 7687}, "so_31526278_31526370_9": {"length": 13, "quality": 1.0, "section_id": 7687}, "so_31526278_31526370_11": {"length": 11, "quality": 0.8461538461538461, "section_id": 7687}}}, "31527061": {"Id": "31527061", "PostTypeId": "2", "Body": "<p>Repeating your quote:</p>\n<blockquote>\n<p id=\"so_31526278_31527061_0\">(2.7) \u2014 an lvalue-to-rvalue conversion (4.1) unless it is applied to</p>\n<p id=\"so_31526278_31527061_1\">(2.7.1) \u2014 a non-volatile glvalue of integral or enumeration type that refers to a complete non-volatile <strong>const</strong> object with a preceding initialization, initialized with a constant expression, or</p>\n</blockquote>\n<p><code>a</code> involves an lvalue-to-rvalue conversion. Since <code>a</code> is not a const object, that means <code>a</code> is not a core constant expression; therefore <code>a || 1</code> is not one either.</p>\n<p>However if your code were:</p>\n<pre><code>const int a = 1;\n</code></pre>\n<p>then <code>a || 1</code> would be a core constant expression.</p>\n", "LastActivityDate": "2015-07-20T21:59:10.750", "CommentCount": "2", "CreationDate": "2015-07-20T21:59:10.750", "ParentId": "31526278", "Score": "2", "OwnerUserId": "1505939"}, "31526362": {"Id": "31526362", "PostTypeId": "2", "Body": "<p>If the compiler checks the entire assignment chain, then it can determine that \"a || 1\" is a constant expression.  However, since a is a variable, unless the compiler checks that a has not been assigned, it has no way of knowing that \"a || 1\" is a constant expression.</p>\n", "LastActivityDate": "2015-07-20T21:05:41.603", "CommentCount": "2", "CreationDate": "2015-07-20T21:05:41.603", "ParentId": "31526278", "Score": "1", "OwnerUserId": "19674"}, "31526370": {"Id": "31526370", "PostTypeId": "2", "Body": "<p><code>a</code> is not  constant expression(<em>see standard quote below</em>) and therefore:</p>\n<pre><code>a || 1 \n</code></pre>\n<p>Is not a constant expression either, although we know the expression has to evaluate to true the standard requires left to right evaluation here and I see no exceptions that would allow the compiler to skip the lvalue-to-rvalue conversion of <code>a</code>.</p>\n<p>but:</p>\n<pre><code>const int a = 1;\n</code></pre>\n<p>Could be used in a constant expression because it fall under the exception from <code>5.20p2</code> (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_31526278_31526370_0\">an lvalue-to-rvalue conversion (4.1) unless it is applied to</p>\n<ul>\n<li><strong>a non-volatile glvalue of integral or enumeration type that refers to a complete non-volatile const\n  object with a preceding initialization, initialized with a constant expression</strong>, or</li>\n<li>a non-volatile glvalue that refers to a subobject of a string literal (2.13.5), or</li>\n<li>a non-volatile glvalue that refers to a non-volatile object defined with constexpr, or that refers\n  to a non-mutable sub-object of such an object, or</li>\n<li>a non-volatile glvalue of literal type that refers to a non-volatile object whose lifetime began\n  within the evaluation of e</li>\n</ul>\n</blockquote>\n<p>This rule is also why the original case is not a constant expression since none of the exception apply.</p>\n<p><s>Perhaps <code>gcc</code> is allowing this:</s></p>\n<pre><code>int b[a || 1]{};\n</code></pre>\n<p>as a variable length array as an extension, although it should provide a warning using <code>-pedantic</code>. Although that would not explain the static_assert case, they could be constant folding it but I don't think the as-if rule would allow it to be considered a constant expression.\n</p>\n<p><b>Update, possible gcc extension</b></p>\n<p>From this bug report <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=55986\" rel=\"nofollow noreferrer\">RHS of logical operators may render LHS unevaluated in constant-expression</a> this looks like a possible gcc extension:</p>\n<blockquote>\n<p id=\"so_31526278_31526370_1\">This compiles without incident, despite using a non-constant object in\n  a constant-expression:</p>\n<pre><code>int i;\nstatic_assert( i || true, \"\" );\nstatic_assert( ! ( i &amp;&amp; false ), \"\" );\n</code></pre>\n<p id=\"so_31526278_31526370_2\">It appears to be assuming that || and &amp;&amp; are commutative, but\n  short-circuiting only works in one direction.</p>\n</blockquote>\n<p>and the final comment says:</p>\n<blockquote>\n<p id=\"so_31526278_31526370_3\">I think this is a purposeful language extension, which could use a switch to disable. It would be nice if static_assert were always strict.</p>\n</blockquote>\n<p>This seems like a non-conforming extension that should trigger a warning when using the <code>-pedantic</code> flag similar in vain to issue in <a href=\"https://stackoverflow.com/q/27744079/1708801\">Is it a conforming compiler extension to treat non-constexpr standard library functions as constexpr?</a>.</p>\n<p><b>C++11/C++14 Quote</b></p>\n<p>Section <code>5.20</code> is section <code>5.19</code> in C++14 and C++11, the relevant quote from the draft C++14 standard is:</p>\n<blockquote>\n<p id=\"so_31526278_31526370_4\">an lvalue-to-rvalue conversion (4.1) unless it is applied to</p>\n<ul>\n<li><p id=\"so_31526278_31526370_5\">a non-volatile glvalue of integral or enumeration type that refers to a non-volatile const object with\n  a preceding initialization, initialized with a constant expression [ Note: a string literal (2.14.5)\n  corresponds to an array of such objects. \u2014end note ], or</p></li>\n<li><p id=\"so_31526278_31526370_6\">a non-volatile glvalue that refers to a non-volatile object defined with constexpr, or that refers\n  to a non-mutable sub-object of such an object, or</p></li>\n<li><p id=\"so_31526278_31526370_7\">a non-volatile glvalue of literal type that refers to a non-volatile object whose lifetime began\n  within the evaluation of e;</p></li>\n</ul>\n</blockquote>\n<p>and for the draft C++11 standard is:</p>\n<blockquote>\n<p id=\"so_31526278_31526370_8\">an lvalue-to-rvalue conversion (4.1) unless it is applied to</p>\n<ul>\n<li><p id=\"so_31526278_31526370_9\">a glvalue of integral or enumeration type that refers to a non-volatile const object with a preceding\n  initialization, initialized with a constant expression, or</p></li>\n<li><p id=\"so_31526278_31526370_10\">a glvalue of literal type that refers to a non-volatile object defined with constexpr, or that refers\n  to a sub-object of such an object, or</p></li>\n<li><p id=\"so_31526278_31526370_11\">a glvalue of literal type that refers to a non-volatile temporary object whose lifetime has not\n  ended, initialized with a constant expression;</p></li>\n</ul>\n</blockquote>\n", "LastEditorUserId": "-1", "LastActivityDate": "2015-07-27T18:15:54.263", "Score": "21", "CreationDate": "2015-07-20T21:06:15.757", "ParentId": "31526278", "CommentCount": "4", "OwnerUserId": "1708801", "LastEditDate": "2017-05-23T10:29:33.450"}});