post_cb({"bq_ids": {"n4140": {"so_17148335_17148392_3": {"length": 4, "quality": 0.6666666666666666, "section_id": 4399}}, "n3337": {"so_17148335_17148392_3": {"length": 4, "quality": 0.6666666666666666, "section_id": 4236}}, "n4659": {"so_17148335_17148392_3": {"length": 5, "quality": 0.8333333333333334, "section_id": 5664}}}, "17148335": {"ViewCount": "271", "Body": "<p>Consider the following code:</p>\n<pre><code>struct Bar\n{\n    std::shared_ptr&lt;int&gt; MemberFunction()\n    {\n        return std::move(m_memberVariable);\n    }\n\n    std::shared_ptr&lt;int&gt; m_memberVariable;\n};\n</code></pre>\n<p>Is it guaranteed that the <code>std::move</code> from a <code>shared_ptr&lt;T&gt;</code> will actually remove the reference in the member variable? Or should I copy, clear and return copy to guarantee this*</p>\n<p>Clearly in the case of <code>unique_ptr&lt;T&gt;</code> it does the right thing (it cannot possibly not do) but does the standard <em>guarantee</em> that a <code>std::move</code>d from <code>shared_ptr</code> releases its reference? [when it is a <em>member variable</em>, <em>static</em> or <em>global</em>, locals don't matter as they go out of scope]</p>\n<p>*possibly \"swap and return\" is better than \"copy, clear and return\".</p>\n", "AcceptedAnswerId": "17148392", "Title": "Is a moved-from shared_ptr guaranteed to be emptied?", "CreationDate": "2013-06-17T13:13:10.643", "Id": "17148335", "CommentCount": "1", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2013-06-17T13:18:21.723", "LastEditorUserId": "2331956", "LastActivityDate": "2013-06-17T13:18:21.723", "Score": "14", "OwnerUserId": "2331956", "Tags": "<c++><c++11><move><shared-ptr>", "AnswerCount": "1"}, "17148392": {"Id": "17148392", "PostTypeId": "2", "Body": "<p>You do indeed have that guarantee. From 20.7.2.2.1/21-22:</p>\n<blockquote>\n<p id=\"so_17148335_17148392_0\"><code>shared_ptr(shared_ptr&amp;&amp; r) noexcept;</code></p>\n<p id=\"so_17148335_17148392_1\"><code>template&lt;class Y&gt; shared_ptr(shared_ptr&lt;Y&gt;&amp;&amp; r) noexcept;</code></p>\n<p id=\"so_17148335_17148392_2\">Effects: Move-constructs a <code>shared_ptr</code> instance from <code>r</code>.</p>\n<p id=\"so_17148335_17148392_3\">Postconditions: <code>*this</code> shall contain the old value of <code>r</code>. <strong><code>r</code> shall be empty. <code>r.get() == 0</code></strong>.</p>\n</blockquote>\n", "LastActivityDate": "2013-06-17T13:16:09.980", "CommentCount": "1", "CreationDate": "2013-06-17T13:16:09.980", "ParentId": "17148335", "Score": "17", "OwnerUserId": "596781"}});