post_cb({"23684431": {"CommentCount": "1", "AcceptedAnswerId": "23684848", "ClosedDate": "2014-05-15T18:09:01.210", "CreationDate": "2014-05-15T16:56:57.477", "LastActivityDate": "2014-05-15T17:26:16.343", "PostTypeId": "1", "ViewCount": "165", "Title": "What is the actual definition of declarative region", "Id": "23684431", "Score": "2", "Body": "<p>There is a quote from the standard, sec 3.3.1/1:</p>\n<blockquote>\n<p id=\"so_23684431_23684431_0\">Every name is introduced in some portion of program text called a\n  declarative region, which is the largest part of the program in which\n  that name is valid, that is, in which that name may be used as an\n  unqualified name to refer to the same entity.</p>\n</blockquote>\n<p>And there is example from the standard, sec 3.3.1/2</p>\n<pre><code>int j = 24;\nint main() \n{\n    int i = j, j;\n    j = 42;\n}\n</code></pre>\n<blockquote>\n<p id=\"so_23684431_23684431_1\">the identifier j is declared twice as a name (and used twice). The\n  declarative region of the first j includes the entire example. The\n  potential scope of the first j begins immediately after that j and\n  extends to the end of the program, but its (actual) scope excludes the\n  text between the , and the }. </p>\n</blockquote>\n<p>But this two paragraphs are contradictive in the declarative region definition, because <code>j</code> may <strong>not be used in the entire example as unqualified name ro refer to the same entity</strong>.</p>\n", "Tags": "<c++>", "OwnerUserId": "2786156", "AnswerCount": "2"}, "23684848": {"ParentId": "23684431", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>While the definition is a bit fuzzy, the usage of the term indicates that it means \"the largest part of the program in which that name would be valid, if not hidden by another entity with the same name in a nested region\". Of course, the name's still valid if the outer entity is hidden; the only problem with the standard definition is the bit about referring to the same entity.</p>\n<p>In practice, that means the whole of a namespace, block or class definition (including its member definitions), and probably a couple of other things that I can't think of right now.</p>\n", "OwnerUserId": "204847", "LastEditorUserId": "204847", "LastEditDate": "2014-05-15T17:26:02.833", "Id": "23684848", "Score": "2", "CreationDate": "2014-05-15T17:20:04.847", "LastActivityDate": "2014-05-15T17:26:02.833"}, "bq_ids": {"n4140": {"so_23684431_23684431_1": {"section_id": 7045, "quality": 0.9285714285714286, "length": 26}, "so_23684431_23684736_0": {"section_id": 7045, "quality": 0.9444444444444444, "length": 17}, "so_23684431_23684431_0": {"section_id": 7044, "quality": 0.9, "length": 18}}, "n3337": {"so_23684431_23684431_1": {"section_id": 6790, "quality": 0.9285714285714286, "length": 26}, "so_23684431_23684736_0": {"section_id": 6790, "quality": 0.9444444444444444, "length": 17}, "so_23684431_23684431_0": {"section_id": 6789, "quality": 0.9, "length": 18}}, "n4659": {"so_23684431_23684736_0": {"section_id": 8542, "quality": 0.9444444444444444, "length": 17}, "so_23684431_23684431_0": {"section_id": 8541, "quality": 0.9, "length": 18}, "so_23684431_23684431_1": {"section_id": 8542, "quality": 0.9285714285714286, "length": 26}}}, "23684736": {"ParentId": "23684431", "PostTypeId": "2", "CommentCount": "2", "Body": "<p>The C++ Committee tries to do all that other programmers could not understand the Standard. Moreover the Committee openly ignores proposals that were submitted by non-members of the Committee</p>\n<p>If do not take into account these confusing statements and to apply the common sense then the declarative region either a namespace, function scope or code block scope and so on (for example class scope).</p>\n<p>The declarative region of the second j is the outermost code block of the function. In fact in the Standard there is written </p>\n<blockquote>\n<p id=\"so_23684431_23684736_0\">The declarative region of the second declaration of j (the j\n  immediately before the semicolon) includes all the text between { and\n  }, but its potential scope excludes the declaration of i.</p>\n</blockquote>\n<p>\"<strong>all the text between { and  }</strong>\" corresponds to the outermost code block of the function.</p>\n<p>So the declarative region is the region (namespace, function scope, code block scope or even function parameter scope) where the variable is declared and could be used as unqualified name. However its potential scope begins from the point of the declaration. \nThus the declarative region is always greater than or at least equal to the potential scope of a variable. </p>\n", "OwnerUserId": "2877241", "LastEditorUserId": "2877241", "LastEditDate": "2014-05-15T17:26:16.343", "Id": "23684736", "Score": "1", "CreationDate": "2014-05-15T17:13:51.193", "LastActivityDate": "2014-05-15T17:26:16.343"}});