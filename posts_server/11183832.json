post_cb({"11183881": {"ParentId": "11183832", "LastEditDate": "2012-06-25T05:40:24.687", "CommentCount": "10", "CreationDate": "2012-06-25T05:27:12.323", "OwnerUserId": "19563", "LastEditorUserId": "19563", "PostTypeId": "2", "Id": "11183881", "Score": "5", "Body": "<p>You have undefined behavior because the static type of the pointer operand to delete does not match the dynamic type of the object that it points to and you don't meet the requirements for the exception to this rule that allows passing a pointer to a base class to the object being deleted because this exception requires the <em>base</em> class to have a virtual destructor.</p>\n<p>Any behaviour is possible including the code working \"as expected\" or a crash.</p>\n", "LastActivityDate": "2012-06-25T05:40:24.687"}, "11183858": {"ParentId": "11183832", "LastEditDate": "2012-06-25T05:31:30.100", "CommentCount": "5", "CreationDate": "2012-06-25T05:24:09.293", "OwnerUserId": "341065", "LastEditorUserId": "341065", "PostTypeId": "2", "Id": "11183858", "Score": "7", "Body": "<p>What you are observing is called \"undefined behavior\". Make <code>Base</code>'s dtor virtual if you want do call delete on <code>Child</code> instance through <code>Base</code> pointer.</p>\n<p>From the 2003 standard, 5.3.5/3:</p>\n<blockquote>\n<p id=\"so_11183832_11183858_0\">In the first alternative (delete object), if the static type of the\n  operand is different from its dynamic type, the static type shall be a\n  base class of the operand\u2019s dynamic type and the static type shall\n  have a virtual destructor or the behavior is undefined.</p>\n</blockquote>\n", "LastActivityDate": "2012-06-25T05:31:30.100"}, "11184687": {"ParentId": "11183832", "LastEditDate": "2012-06-25T13:48:32.847", "CommentCount": "0", "CreationDate": "2012-06-25T06:56:26.817", "OwnerUserId": "924727", "LastEditorUserId": "924727", "PostTypeId": "2", "Id": "11184687", "Score": "1", "Body": "<p>Just look at this:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Base\n{\npublic:\n    void nonvirtualmethod()\n    { std::cout &lt;&lt; \"Base nonvirtualmethod\" &lt;&lt; std::endl; }\n    virtual void virtualmethod()\n    { std::cout &lt;&lt; \"Base virtualmethod\" &lt;&lt; std::endl; }\n};\n\nclass Derived: public Base\n{\npublic:\n    void nonvirtualmethod()\n    { std::cout &lt;&lt; \"Derived nonvirtualmethod\" &lt;&lt; std::endl; }\n    virtual void virtualmethod()\n    { std::cout &lt;&lt; \"Derived virtualmethod\" &lt;&lt; std::endl; }\n};\n\nint main()\n{\n    Derived d;\n    Derived* pd = &amp;d;\n    Base* pb = &amp;d;    //&lt; NOTE: both pd and pb point to the same object\n\n    pd-&gt;nonvirtualmethod();\n    pb-&gt;nonvirtualmethod();\n    pd-&gt;virtualmethod();\n    pb-&gt;virtualmethod();\n}\n</code></pre>\n<p>I gives you the following output:</p>\n<pre><code>Derived nonvirtualmethod\nBase nonvirtualmethod\nDerived virtualmethod\nDerived virtualmethod  //&lt; invoked by a Base*\n</code></pre>\n<p>This is because there is a difference between the static type of the <code>pb</code> pointer (<code>Base*</code>)\nand the dynamic type it points to (<code>Derived</code>).\nThe difference between virtual and plain methods is that non-virtual methods follow the the static type mapping (so a <code>Base</code> pointer invokes <code>Base::</code>methods), while virtual methods follow the chain of the runtime types, hence if a <code>Base*</code> points to a <code>Derived</code>, the <code>Derived</code> method will be called.</p>\n<p>Destructors, in this sense, are nothing special: if it is not virtual, a <code>Base</code> pointer will not invoke the <code>Derived</code> one, hence you are left with an half-destroyed object, that is given back to the memory store.</p>\n<p>The reason why this is UB (and not simply denied), is because the \"memory store\" is not managed by the language itself, but from the platform the program is hosted in: the crash most likely depends on the fact that the missing of the <code>Derived</code> part (still alive) will result in the operating system trying free a block of memory with a wrong starting address.</p>\n", "LastActivityDate": "2012-06-25T13:48:32.847"}, "11183832": {"CommentCount": "3", "ViewCount": "1761", "PostTypeId": "1", "LastEditorUserId": "1782465", "CreationDate": "2012-06-25T05:20:49.837", "LastActivityDate": "2015-12-16T14:22:57.490", "Title": "Base class destructor is not virtual and child class destructor is virtual, program crash", "AcceptedAnswerId": "11183858", "LastEditDate": "2015-12-16T14:22:57.490", "Id": "11183832", "Score": "2", "Body": "<p>Why does the following program crash? I have a base class whose destructor is not virtual but the child class destructor is virtual:</p>\n<pre><code>#include &lt;iostream&gt;\n\nclass Base {\npublic:\n  Base() {\n    std::cout &lt;&lt; \"Base::Base CTOR \" &lt;&lt; std::endl;\n  }\n  ~Base() {\n    std::cout &lt;&lt; \"Base::Base DTOR \" &lt;&lt; std::endl;\n  }\n};\n\nclass Child : public Base {\npublic:\n  Child(){\n    std::cout &lt;&lt; \"Child::Child CTOR \" &lt;&lt; std::endl;\n  }\n  virtual ~Child() {\n    std::cout &lt;&lt; \"Child::Child DTOR \" &lt;&lt; std::endl;\n  }\n\n};\n\nint main (int argc, char **argv) {\n  Base *ptr = new Child;\n  delete ptr;\n}\n</code></pre>\n", "Tags": "<c++><virtual-destructor>", "OwnerUserId": "92568", "AnswerCount": "4"}, "11184017": {"ParentId": "11183832", "CommentCount": "0", "Body": "<p>Hope this example helps you get the point:</p>\n<pre><code>#include &lt;iostream&gt;\nclass Base {\npublic:\n Base() {\n    std::cout &lt;&lt; \"Base::Base CTOR \" &lt;&lt; std::endl;\n }\n ~Base() {\n   std::cout &lt;&lt; \"Base::Base DTOR \" &lt;&lt; std::endl;\n }\nprivate:\nprotected:\n};\n\nclass Child : public Base {\n public:\n Child(){\nstd::cout &lt;&lt; \"Child::Child CTOR \" &lt;&lt; std::endl;\n  }\n  ~Child(){\nstd::cout &lt;&lt; \"Child::Child DTOR \" &lt;&lt; std::endl;\n }\n  private:\n protected:\n };\n  class gChild : public Child {\n   public:\n   gChild(){\n    std::cout &lt;&lt; \"Child::Child gCTOR \" &lt;&lt; std::endl;\n   }\n  ~gChild(){\n    std::cout &lt;&lt; \"Child::Child gDTOR \" &lt;&lt; std::endl;\n  }\nprivate:\nprotected:\n};\nint main ( int argc, char **argv) {\n    Base *ptr = new gChild;\n delete ptr;\n}\n</code></pre>\n<p>if virtual ~Base() ,then all destructors' print gets printed.</p>\n<p>if virtual ~child() or virtual ~gChild(),only base destructor gets printed.</p>\n<p>It's because the destructors executes in opposite direction.and here behaviour is undefined.You must define the base destructor virtual to get the expected result.</p>\n<p>Thanks.</p>\n", "OwnerUserId": "1429054", "PostTypeId": "2", "Id": "11184017", "Score": "1", "CreationDate": "2012-06-25T05:45:43.467", "LastActivityDate": "2012-06-25T05:45:43.467"}, "bq_ids": {"n4140": {"so_11183832_11183858_0": {"section_id": 6107, "quality": 0.88, "length": 22}}, "n3337": {"so_11183832_11183858_0": {"section_id": 5873, "quality": 0.88, "length": 22}}, "n4659": {"so_11183832_11183858_0": {"section_id": 7604, "quality": 0.88, "length": 22}}}});