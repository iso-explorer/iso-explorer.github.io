post_cb({"41071278": {"ParentId": "41062333", "Score": "0", "CreationDate": "2016-12-10T01:34:05.593", "Id": "41071278", "OwnerUserId": "560648", "LastActivityDate": "2016-12-10T01:34:05.593", "Body": "<p><a href=\"http://www.dictionary.com/browse/trailing\" rel=\"nofollow noreferrer\">Trailing</a> means \"at the end of\".</p>\n<p>A trailing parameter pack is a parameter pack found at the end of a list of template parameters:</p>\n<pre><code>template &lt;typename T1, typename... Ts&gt;\nvoid foo();\n\n// ^ Ts... is trailing here\n</code></pre>\n<p>This is not a C++ question, but an English question.</p>\n", "PostTypeId": "2", "CommentCount": "11"}, "41069348": {"ParentId": "41062333", "Score": "7", "CreationDate": "2016-12-09T21:41:38.953", "LastActivityDate": "2016-12-10T01:32:01.173", "LastEditDate": "2016-12-10T01:32:01.173", "OwnerUserId": "1639256", "LastEditorUserId": "1639256", "Body": "<p>This is <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/cwg_active.html#1395\" rel=\"nofollow noreferrer\">CWG1395</a>, for which a defect <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0519r0.html\" rel=\"nofollow noreferrer\">resolution</a> was recently voted in to the draft C++17 standard. The following was added to [temp.deduct.partial]:</p>\n<blockquote>\n<p id=\"so_41062333_41069348_0\">...[if] function template <code>F</code> is at least as specialized as function template <code>G</code> and vice-versa, and if <code>G</code> has a trailing parameter pack for which <code>F</code> does not have a corresponding parameter, and if <code>F</code> does not have a trailing parameter pack, then <code>F</code> is more specialized than <code>G</code>.</p>\n</blockquote>\n<p>The standard doesn't explicitly define what it means by \"trailing parameter pack\", but judging by the existing contexts in which this term is used, it refers to a template parameter pack that appears as the rightmost parameter in a template parameter list:</p>\n<pre><code>template&lt;class T, class... U&gt; struct X;\n//                ^^^^^^^^^^\n</code></pre>\n<p>Or, a function parameter pack that appears as the rightmost parameter in a function parameter list:</p>\n<pre><code>template&lt;class T, class... U&gt; void y(T, U...);\n//                                      ^^^^\n</code></pre>\n<p>The current draft still contains this outdated example in [temp.deduct.type]:</p>\n<pre><code>template&lt;class T, class... U&gt; void f(T, U...);\ntemplate&lt;class T&gt; void f(T);\n\nf(&amp;i); // error: ambiguous\n</code></pre>\n<p>This standard defect report has been around for a few years, and both <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=41958\" rel=\"nofollow noreferrer\">GCC</a> and <a href=\"https://llvm.org/bugs/show_bug.cgi?id=14372\" rel=\"nofollow noreferrer\">Clang</a> have implemented resolutions of it. They both agree that the example above is a valid call of the second overload of <code>f</code>.</p>\n<p>Where GCC and Clang disagree is on the scope of the defect resolution. This is understandable, as it was only recently updated to include proposed standard wording. In your example, the pack is not expanded into the function parameter list, but into the template argument list of a function parameter type:</p>\n<pre><code>template&lt;class T, class... U&gt; void g(tuple&lt;T, U...&gt;);\ntemplate&lt;class T&gt; void g(tuple&lt;T&gt;);\n\ng(tuple&lt;int&gt;{});\n</code></pre>\n<p>GCC treats this as a valid call of the second overload of <code>g</code>; Clang treats it as ambiguous. The correctness of Clang may depend on whether \"trailing parameter pack\" is intended to include trailing <em>template</em> parameter packs, or only trailing <em>function</em> parameter packs.</p>\n<p>Note that both compilers agree that <code>C&lt;int&gt;</code> refers to the second partial specialization of the class template <code>C</code> in the following example:</p>\n<pre><code>template&lt;class...&gt; struct C;\n\ntemplate&lt;class T, class... U&gt; struct C&lt;T, U...&gt; {};\ntemplate&lt;class T&gt; struct C&lt;T&gt; {};\n</code></pre>\n<p>This seems like an inconsistency in Clang, because the standard rules for partial ordering of class template specializations is defined in terms of partial ordering of function templates. See <a href=\"http://open-std.org/JTC1/SC22/WG21/docs/cwg_active.html#1432\" rel=\"nofollow noreferrer\">CWG1432</a>.</p>\n", "Id": "41069348", "PostTypeId": "2", "CommentCount": "11"}, "41062333": {"Tags": "<c++><c++11><language-lawyer><variadic-templates><function-overloading>", "ViewCount": "365", "LastEditDate": "2016-12-09T20:02:14.687", "CreationDate": "2016-12-09T14:11:47.410", "LastEditorUserId": "6022656", "Title": "What exactly is a \"trailing parameter pack\"", "CommentCount": "3", "AnswerCount": "2", "Score": "15", "OwnerUserId": "1023390", "Id": "41062333", "LastActivityDate": "2016-12-10T01:34:05.593", "Body": "<p>In resolving ambiguities between function template overloads, partial ordering is performed (see <a href=\"http://en.cppreference.com/w/cpp/language/function_template\" rel=\"nofollow noreferrer\">here</a> for some explanations). In that website, we also learn that</p>\n<blockquote>\n<p id=\"so_41062333_41062333_0\">In case of a tie, if one function template has a trailing parameter\n  pack and the other does not, the one with the omitted parameter is\n  considered to be more specialized than the one with the empty\n  parameter pack.</p>\n</blockquote>\n<p>Now, I wonder what precisely a <em>trailing parameter pack</em> is. Which if any of</p>\n<pre><code>template&lt;class ...&gt; struct tuple { /* ... */ };\n\ntemplate&lt;class T, class...Ts&gt; void foo(tuple&lt;T,Ts...&gt;);\n\ntemplate&lt;class T, class...Ts&gt; void bar(T, Ts...);\n</code></pre>\n<p>is and which not and why? Note also that clang considers</p>\n<pre><code>template&lt;class T&gt; void f(tuple&lt;T&gt;);\n\ntemplate&lt;class T, class...Ts&gt; void f(tuple&lt;T,Ts...&gt;);\n\nint main()\n{  f(tuple&lt;int&gt;());  }   // ambiguous call?\n</code></pre>\n<p>ambiguous, implying that <code>foo</code> does not have a trailing parameter pack.</p>\n", "PostTypeId": "1", "FavoriteCount": "4"}, "bq_ids": {"n4659": {"so_41062333_41069348_0": {"length": 23, "section_id": 338, "quality": 1.0}}}});