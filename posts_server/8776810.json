post_cb({"8777073": {"Id": "8777073", "PostTypeId": "2", "Body": "<p>The reason is that that's what the respective language standards say, but there is a rationale for the difference.</p>\n<p>If you don't provide a name for a parameter, then the function cannot refer to that parameter.</p>\n<p>In C, if a function ignores one of its parameters, it usually makes sense just to remove it from the declaration and the definition, and not pass it in any calls. An exception might be a callback function, where a collection of functions all have to be of the same type but not all of them necessarily use their parameters. But that's not a very common scenario.</p>\n<p>In C++, if the function is derived from a function defined in some parent class, it has to have the same signature as the parent, even if the child function has no use for one of the parameter values.</p>\n<p>(Note that this is not related to default parameters; if a parameter in C++ has a default value, the caller doesn't have to pass it explicitly, but the function definition still has to provide a name if it's going to refer to it.)</p>\n", "LastEditorUserId": "827263", "LastActivityDate": "2013-10-21T22:06:13.057", "Score": "15", "CreationDate": "2012-01-08T11:22:46.380", "ParentId": "8776810", "CommentCount": "0", "OwnerUserId": "827263", "LastEditDate": "2013-10-21T22:06:13.057"}, "8776878": {"Id": "8776878", "PostTypeId": "2", "Body": "<p>You can omit the parameter name in the function prototype, but you must declare it in the function implementation. For example, this compiles and runs just fine under GCC 4.6.1</p>\n<pre><code>void foo(int, int);\n\nvoid foo(int value, int secondValue)\n{\n    printf(\"In foo with value %d and %d!\\n\", value, secondValue);\n}\n\nint main(int argc, char **argv)\n{\n    foo(10, 15);\n    return 0;\n}\n</code></pre>\n<p>Outputs: <code>In foo with value 10 and 15!</code></p>\n<p>As to why (other than because the standards say so): C++ allows you to call a function without using all of the arguments, while C doesn't. If you don't supply all the arguments to a function in C, then the compiler will throw <code>error: too few arguments to function 'foo'</code></p>\n", "LastEditorUserId": "1131788", "LastActivityDate": "2012-01-08T10:52:04.360", "Score": "4", "CreationDate": "2012-01-08T10:45:34.457", "ParentId": "8776810", "CommentCount": "1", "OwnerUserId": "1131788", "LastEditDate": "2012-01-08T10:52:04.360"}, "bq_ids": {"n4140": {"so_8776810_8776886_1": {"length": 26, "quality": 0.8125, "section_id": 3247}}, "n3337": {"so_8776810_8776886_1": {"length": 30, "quality": 0.9375, "section_id": 3120}}, "n4659": {"so_8776810_8776886_1": {"length": 26, "quality": 0.8125, "section_id": 4005}}}, "8813977": {"Id": "8813977", "PostTypeId": "2", "Body": "<p>On a purely practical level, I have deal with this daily. The best solution to date is to use the pre-processor. My common header file contains:</p>\n<pre><code>//-------------------------------------------------------------------------\n//  Suppress nuisance compiler warnings. Yes, each compiler can already \n//  do this, each differently! VC9 has its UNREFERENCED_PARAMETER(),\n//  which is almost the same as the SUPPRESS_UNUSED_WARNING() below.\n//\n//  We append _UNUSED to the variable name, because the dumb gcc compiler\n//  doesn't bother to tell you if you erroneously _use_ something flagged\n//  with __attribute__((unused)). So we are forced to *mangle* the name.\n//-------------------------------------------------------------------------\n#if defined(__cplusplus)\n#define UNUSED(x)       // = nothing\n#elif defined(__GNUC__)\n#define UNUSED(x)       x##_UNUSED __attribute__((unused))\n#else\n#define UNUSED(x)       x##_UNUSED\n#endif\n</code></pre>\n<p>An example of the use of UNUSED is:</p>\n<pre><code>void foo(int UNUSED(bar)) {}\n</code></pre>\n<p>Sometimes you actually need to refer to the parameter, for example in an assert() or debug statement. You can do so via:</p>\n<pre><code>#define USED_UNUSED(x)  x##_UNUSED // for assert(), debug, etc\n</code></pre>\n<p>Also, the following are useful:</p>\n<pre><code>#define UNUSED_FUNCTION(x) inline static x##_UNUSED // \"inline\" for GCC warning\n#define SUPPRESS_UNUSED_WARNING(x) (void)(x) // cf. MSVC UNREFERENCED_PARAMETER\n</code></pre>\n<p>Examples:</p>\n<pre><code>UNUSED_FUNCTION(int myFunction)(int myArg) { ...etc... }\n</code></pre>\n<p>and:</p>\n<pre><code>void foo(int bar) {\n#ifdef XXX\n   // ... (some code using bar)\n#else\n   SUPPRESS_UNUSED_WARNING(bar);\n#endif\n}\n</code></pre>\n", "LastActivityDate": "2012-01-11T04:02:26.517", "CommentCount": "1", "CreationDate": "2012-01-11T04:02:26.517", "ParentId": "8776810", "Score": "5", "OwnerUserId": "318716"}, "8776886": {"Id": "8776886", "PostTypeId": "2", "Body": "<p>No, in C you cannot omit identifiers for parameters in function definitions.</p>\n<p>The C99 standard says:</p>\n<blockquote>\n<p id=\"so_8776810_8776886_0\">[6.9.1.5] If the declarator includes a parameter type list, the\n  declaration of each parameter shall include an identifier, except for\n  the special case of a parameter list consisting of a single parameter\n  of type void, in which case there shall not be an identifier. No\n  declaration list shall follow.</p>\n</blockquote>\n<p>The C++14 standard says:</p>\n<blockquote>\n<p id=\"so_8776810_8776886_1\">[8.3.5.11] <strong>An identifier can optionally be provided as a parameter\n  name; if present in a function definition , it names a parameter\n  (sometimes called \u201cformal argument\u201d). [Note: In particular, parameter\n  names are also optional in function definitions</strong> and names used for a\n  parameter in different declarations and the definition of a function\n  need not be the same.]</p>\n</blockquote>\n", "LastEditorUserId": "3777958", "LastActivityDate": "2015-08-25T05:53:32.357", "Score": "33", "CreationDate": "2012-01-08T10:46:42.563", "ParentId": "8776810", "CommentCount": "6", "OwnerUserId": "27835", "LastEditDate": "2015-08-25T05:53:32.357"}, "8776810": {"ViewCount": "17197", "Body": "<p>In C++, I tend to omit the parameter's name under some circumstances. But in C, I got an error when I omitted the parameter's name.</p>\n<p>Here is the code:</p>\n<pre><code>void foo(int);  //forward-decl, it's OK to omit the parameter's name, in both C++ and C\n\nint main()\n{\n    foo(0);\n    return 0;\n}\n\nvoid foo(int)  //definition in C, it cannot compile with gcc\n{\n    printf(\"in foo\\n\");\n}\n\nvoid foo(int)  //definition in C++, it can compile with g++\n{\n    cout &lt;&lt; \"in foo\" &lt;&lt; endl;\n}\n</code></pre>\n<p>Why is that? Can't I omit the parameter's name in C function definition?</p>\n", "AcceptedAnswerId": "8776886", "Title": "parameter name omitted, C++ vs C", "CreationDate": "2012-01-08T10:33:31.340", "Id": "8776810", "CommentCount": "5", "FavoriteCount": "5", "PostTypeId": "1", "LastActivityDate": "2015-08-25T05:53:32.357", "Score": "31", "OwnerUserId": "888051", "Tags": "<c++><c><compilation>", "AnswerCount": "4"}});