post_cb({"46428235": {"ParentId": "46421139", "CommentCount": "0", "Body": "<p>I'd say this is unspecified by the Standard, but certainly intended to not work. What we know about lambda structure is that, from [expr.prim.lambda.closure]:</p>\n<blockquote>\n<p id=\"so_46421139_46428235_0\">The type of a lambda-expression (which is also the type of the closure object) is a unique, unnamed non-union class type</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p id=\"so_46421139_46428235_1\">The closure type is not an aggregate type</p>\n</blockquote>\n<p>and, from [expr.prim.lambda.capture]:</p>\n<blockquote>\n<p id=\"so_46421139_46428235_2\">For each entity captured by copy, an unnamed non-static data member is declared in the closure type. The declaration order of these members is unspecified. </p>\n</blockquote>\n<p>and:</p>\n<blockquote>\n<p id=\"so_46421139_46428235_3\">It is unspecified whether additional unnamed non-static data members are declared in the closure type for entities captured by reference. If declared, such non-static data members shall be of literal type.</p>\n</blockquote>\n<p>The intent of having unnamed members is to avoid having them being accessed outside of the lambda's body. The consequence of these members additionally being in unspecified order means as soon as you have more than one capture by copy, you wouldn't even be able to know what your structured binding did. </p>\n<pre><code>int a=1, b=2;\nauto [x, y] = [a, b]{}; // x==1 or x==2??\n</code></pre>\n<p>The consequence of captures by reference not necessarily naming members means that you wouldn't even know how many identifiers to list in your structured binding declaration.</p>\n<p>Since the access of the non-static data members is unspecified, it's possible to have a conforming implementation make them all public, which would satisfy case 3 of structured bindings. But that very much goes against the intent of both the way lambdas are structured and how structured bindings are supposed to work, so I'd be surprised if any implementation knowingly did this. gcc, for instance, <a href=\"https://gcc.gnu.org/ml/gcc-patches/2017-01/msg01993.html\" rel=\"nofollow noreferrer\">explicitly patched</a> to disallow it. </p>\n", "OwnerUserId": "2069064", "PostTypeId": "2", "Id": "46428235", "Score": "3", "CreationDate": "2017-09-26T13:45:55.037", "LastActivityDate": "2017-09-26T13:45:55.037"}, "46421139": {"CommentCount": "16", "ViewCount": "107", "PostTypeId": "1", "LastEditorUserId": "4324224", "CreationDate": "2017-09-26T08:13:53.957", "LastActivityDate": "2017-09-26T13:45:55.037", "Title": "Why lambda expression's capture list cannot be decomposed using structured bindings", "AcceptedAnswerId": "46428235", "LastEditDate": "2017-09-26T09:31:19.463", "Id": "46421139", "Score": "3", "Body": "<p><strong>Before you throw a rotten tomato</strong></p>\n<p>I know the practical application of lambda decomposition is currently limited \nas one wouldn't be able to find substitution-failure-friendly way to check \nthe number of lambda captures hidden in decomposed variables. This is just a theoretical question as I failed to find any standard part covering the capture member variable access modifiers.</p>\n<p><strong>Example</strong></p>\n<pre><code>int main() {\n    int a;\n    auto [x] = [a]{};\n    static_cast&lt;void&gt;(a);\n    static_cast&lt;void&gt;(x);\n    return 0;\n}\n</code></pre>\n<p><strong>Standard reference</strong></p>\n<p>The standard section about <a href=\"http://eel.is/c++draft/expr.prim.lambda.capture\" rel=\"nofollow noreferrer\">lambda capture</a> is quite long so I might have missed the relevant fragment. What I noticed is that there is an emphasis on that the non-static members which corresponds to the captures are/have to be unnamed.</p>\n", "Tags": "<c++><lambda><language-lawyer><c++1z><structured-bindings>", "OwnerUserId": "4324224", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_46421139_46428235_0": {"section_id": 5962, "quality": 0.9166666666666666, "length": 11}, "so_46421139_46428235_2": {"section_id": 5974, "quality": 0.8823529411764706, "length": 15}, "so_46421139_46428235_3": {"section_id": 5975, "quality": 0.65, "length": 13}, "so_46421139_46428235_1": {"section_id": 5962, "quality": 0.8, "length": 4}}, "n3337": {"so_46421139_46428235_0": {"section_id": 5731, "quality": 0.9166666666666666, "length": 11}, "so_46421139_46428235_2": {"section_id": 5742, "quality": 0.8823529411764706, "length": 15}, "so_46421139_46428235_3": {"section_id": 5743, "quality": 0.65, "length": 13}, "so_46421139_46428235_1": {"section_id": 5731, "quality": 0.8, "length": 4}}, "n4659": {"so_46421139_46428235_0": {"section_id": 7451, "quality": 0.9166666666666666, "length": 11}, "so_46421139_46428235_2": {"section_id": 7473, "quality": 0.8823529411764706, "length": 15}, "so_46421139_46428235_3": {"section_id": 7475, "quality": 1.0, "length": 20}, "so_46421139_46428235_1": {"section_id": 7452, "quality": 0.8, "length": 4}}}});