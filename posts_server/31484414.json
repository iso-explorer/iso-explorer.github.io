post_cb({"31484496": {"ParentId": "31484414", "PostTypeId": "2", "CommentCount": "6", "CreationDate": "2015-07-17T20:49:43.550", "Score": "1", "LastEditorUserId": "8922", "LastEditDate": "2015-07-18T19:39:00.933", "Id": "31484496", "OwnerUserId": "8922", "Body": "<p>Yes. The declaration of the member <code>c</code> of the class <code>X</code> is visible inside the definition of <code>f</code>, even though lexically, it comes afterwards. This means that the <code>sizeof</code> expression applies to the member, and not to the type outside, which mean it will return 1, not whatever the size of <code>int</code> is (probably 4).</p>\n<p><s>Also, the enum constant <code>X::i</code> should, according to this rule, be visible when the array <code>v</code> is declared, although this surprises me, and I would strongly suggest to avoid such code - sounds like a compiler bug or developer misunderstanding just waiting to happen.</s></p>\n<p><strong>Edit:</strong> Lightning Strikes in Orbit is probably right that the comment about parts of the declarator only applies to out-of-line definitions.</p>\n", "LastActivityDate": "2015-07-18T19:39:00.933"}, "31484414": {"CommentCount": "1", "ViewCount": "99", "CreationDate": "2015-07-17T20:43:38.790", "LastActivityDate": "2015-07-18T19:39:00.933", "Title": "What does the spec mean by the highlighted sentence in \u00a73.3.7/1 item 5?", "PostTypeId": "1", "Id": "31484414", "Score": "3", "Body": "<p>\u00a73.3.7/1 item 5:</p>\n<blockquote>\n<p id=\"so_31484414_31484414_0\"><strong>The potential scope of a declaration that extends to or past the end\n  of a class definition</strong> also extends to the regions defined by its\n  member definitions, even if the members are defined lexically outside\n  the class (this includes static data member definitions, nested class\n  definitions, and member function definitions, including the member\n  function body and any portion of the declarator part of such\n  definitions which follows the declarator-id, including a\n  parameter-declaration-clause and any default arguments (8.3.6)).</p>\n</blockquote>\n<p>Would it be possible to identify such a declaration in the first example given in this paragraph?</p>\n<pre><code>typedef int c;\nenum { i = 1 };\nclass X {\n    char v[i];\n    int f() { return sizeof(c); }\n    char c;\n    enum { i = 2 };\n};\n</code></pre>\n", "Tags": "<c++><language-lawyer><c++14>", "OwnerUserId": "411165", "AnswerCount": "2"}, "31484544": {"ParentId": "31484414", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2015-07-17T20:53:20.640", "Score": "1", "LastEditorUserId": "5066117", "LastEditDate": "2015-07-18T16:52:34.357", "Id": "31484544", "OwnerUserId": "5066117", "Body": "<p>It looks as though it's saying, among other things, and in addition to the answer above, that given all the code outside that class definition, <em>even if</em> <code>X::f</code> were defined outside the class, like so:</p>\n<pre><code>typedef int c;\nenum { i = 1 };\nclass X {\n    char v[i];\n    int f();\n    char c;\n    enum { i = 2 };\n};\n\nint X::f() {\n    return sizeof(c);\n}\n</code></pre>\n<p>that, in the context of the definition of <code>X::f</code>, <code>c</code> would refer to the member variable <code>X::c</code>, not the <code>typedef</code> above, because even though it kind of looks like it's being defined globally, <code>f</code> actually lives in <code>X</code>'s scope.</p>\n", "LastActivityDate": "2015-07-18T16:52:34.357"}, "bq_ids": {"n4140": {"so_31484414_31484414_0": {"section_id": 7070, "quality": 0.9591836734693877, "length": 47}}, "n3337": {"so_31484414_31484414_0": {"section_id": 6814, "quality": 0.9591836734693877, "length": 47}}, "n4659": {"so_31484414_31484414_0": {"section_id": 8570, "quality": 0.9591836734693877, "length": 47}}}});