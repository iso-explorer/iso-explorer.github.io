post_cb({"31313681": {"ParentId": "31313626", "CommentCount": "0", "Body": "<p><code>(3,2,1)</code> means to calculate all the expressions and return last.\nSo, it does:</p>\n<ul>\n<li>3 - nothing</li>\n<li>2 - nothing</li>\n<li>1 - return 1</li>\n</ul>\n<p>And other:</p>\n<ul>\n<li>1 - nothing</li>\n<li>2 - nothing</li>\n<li>3 - return 3</li>\n</ul>\n<p>so your </p>\n<pre><code>cout &lt;&lt; (3,2,1)-(1,2,3) &lt;&lt; endl;\n</code></pre>\n<p>means:</p>\n<pre><code>cout &lt;&lt; 1 - 3 &lt;&lt; endl;\n</code></pre>\n", "OwnerUserId": "1750757", "PostTypeId": "2", "Id": "31313681", "Score": "3", "CreationDate": "2015-07-09T09:37:39.117", "LastActivityDate": "2015-07-09T09:37:39.117"}, "31313626": {"CommentCount": "2", "AcceptedAnswerId": "31313671", "PostTypeId": "1", "LastEditorUserId": "1009479", "CreationDate": "2015-07-09T09:35:17.967", "LastActivityDate": "2015-07-09T16:25:11.027", "LastEditDate": "2015-07-09T16:25:11.027", "ViewCount": "125", "FavoriteCount": "1", "Title": "Can someone clear this concept for the output I am getting?", "Id": "31313626", "Score": "3", "Body": "<p>This has been asked in an interview. What is the output of the below snippet?</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    cout &lt;&lt; (3,2,1)-(1,2,3) &lt;&lt; endl; // in C++ too this prints -2\n    printf(\"%d\\n\",(3,2,1)-(1,2,3)); // prints -2\n    printf(\"%d\\n\",(\"%d\",3,2,1)-(1,2,3)); // prints -2\n    return 0;\n}\n</code></pre>\n<p>By the output I am guessing its (1-3) = -2. But how from <code>(3,2,1)</code> value <code>1</code> is chosen, similarly from <code>(1,2,3)</code> value <code>3</code> is chosen? Am I right in what I am guessing?</p>\n", "Tags": "<c++><comma-operator>", "OwnerUserId": "1021933", "AnswerCount": "4"}, "31313766": {"ParentId": "31313626", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Comma operator always returns the last value i.e. </p>\n<ol>\n<li>in your first <code>cout</code> it is 1-3=-2</li>\n<li>next, in <code>printf</code> again it is 1-3=-3</li>\n<li>finally in last <code>printf</code>, it is again 1-3=-2</li>\n</ol>\n<p>Comma operator always solves all the left expressions(operands) and just returns the rightmost operand as result as <code>rvalue</code>.</p>\n", "OwnerUserId": "2776146", "LastEditorUserId": "2776146", "LastEditDate": "2015-07-09T09:52:55.220", "Id": "31313766", "Score": "1", "CreationDate": "2015-07-09T09:41:07.967", "LastActivityDate": "2015-07-09T09:52:55.220"}, "31313749": {"ParentId": "31313626", "CommentCount": "0", "Body": "<p>You have to consider the comma operator (,)</p>\n<blockquote>\n<p id=\"so_31313626_31313749_0\">The comma operator (,) is used to separate two or more expressions\n  that are included where only one expression is expected. When the set\n  of expressions has to be evaluated for a value, only the right-most\n  expression is considered.</p>\n</blockquote>\n<p>In your case:</p>\n<pre><code>(3,2,1) //evaluates to 1\n(1,2,3) //evaluates to 3\n</code></pre>\n<p>source:\n<a href=\"http://www.cplusplus.com/doc/tutorial/operators/\" rel=\"nofollow\">http://www.cplusplus.com/doc/tutorial/operators/</a></p>\n", "OwnerUserId": "1001195", "PostTypeId": "2", "Id": "31313749", "Score": "1", "CreationDate": "2015-07-09T09:40:43.637", "LastActivityDate": "2015-07-09T09:40:43.637"}, "31313671": {"ParentId": "31313626", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Here, the <a href=\"https://en.wikipedia.org/wiki/Comma_operator\" rel=\"nofollow noreferrer\">comma operator</a> and it's property is being used.</p>\n<p>To elaborate, from <code>C11</code>, chapter \u00a76.5.17, <em>Comma operator</em></p>\n<blockquote>\n<p id=\"so_31313626_31313671_0\">The left operand of a comma operator is evaluated as a void expression; there is a sequence point between its evaluation and that of the right operand. Then the right operand is evaluated; the result has its type and value</p>\n</blockquote>\n<p>and, from <code>C++11</code>, chapter \u00a7 5.18, </p>\n<blockquote>\n<p id=\"so_31313626_31313671_1\">A pair of expressions separated by a comma is evaluated left-to-right; the left expression is a discarded-value expression (Clause 5). Every value computation and side effect associated with the left expression is sequenced before every value computation and side effect associated with the right expression. The type and value of the result are the type and value of the right operand; the result is of the same value category\n  as its right operand, and is a bit-field if its right operand is a glvalue and a bit-field.</p>\n</blockquote>\n<p>So, in case of a statement like</p>\n<pre><code>  (3,2,1)-(1,2,3)\n</code></pre>\n<p>for the evaluation,</p>\n<ul>\n<li><code>(3,2,1)</code>, 3 and 2 are (evaluated as a <code>void</code> expression and) discarded, 1 is the value.</li>\n<li><code>(1,2,3)</code>, 1 and 2 are (evaluated as a <code>void</code> expression and) discarded, 3 is the value.</li>\n</ul>\n<p>so, the statement reduces to <code>1 - 3</code> which is equal to <code>-2</code>.</p>\n<p>Same way, you can use for more elements, also.</p>\n", "OwnerUserId": "2173917", "LastEditorUserId": "2173917", "LastEditDate": "2015-07-09T14:47:30.367", "Id": "31313671", "Score": "10", "CreationDate": "2015-07-09T09:37:16.350", "LastActivityDate": "2015-07-09T14:47:30.367"}, "bq_ids": {"n4140": {"so_31313626_31313671_1": {"section_id": 6182, "quality": 0.98, "length": 49}}, "n3337": {"so_31313626_31313671_1": {"section_id": 5943, "quality": 0.98, "length": 49}}, "n4659": {"so_31313626_31313671_1": {"section_id": 7684, "quality": 0.96, "length": 48}}}});