post_cb({"bq_ids": {"n4140": {"so_24656212_24656420_0": {"length": 10, "quality": 1.0, "section_id": 142}, "so_24656212_24656420_3": {"length": 10, "quality": 0.8333333333333334, "section_id": 142}, "so_24656212_24656420_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 142}}, "n3337": {"so_24656212_24656420_1": {"length": 16, "quality": 0.9411764705882353, "section_id": 136}, "so_24656212_24656420_0": {"length": 10, "quality": 1.0, "section_id": 136}, "so_24656212_24656420_3": {"length": 10, "quality": 0.8333333333333334, "section_id": 136}}, "n4659": {"so_24656212_24656420_3": {"length": 10, "quality": 0.8333333333333334, "section_id": 146}, "so_24656212_24656420_0": {"length": 10, "quality": 1.0, "section_id": 146}}}, "24656212": {"ViewCount": "329", "Body": "<p>My compiler is gcc 4.9.0. The following code cannot be compiled: </p>\n<pre><code>template&lt;typename T, T i&gt;\nstruct value {};\n\ntemplate&lt;typename T&gt;\nstruct value&lt;T, 0&gt; {};\n// error: type 'T' of template argument '0' depends on a template parameter\n</code></pre>\n<p>What is the cause? and, how to solve this issue?</p>\n", "AcceptedAnswerId": "24656420", "Title": "Why does gcc complain \"error: type 'intT' of template argument '0' depends on a template parameter\"?", "CreationDate": "2014-07-09T14:18:49.023", "Id": "24656212", "CommentCount": "1", "LastEditDate": "2014-07-09T14:43:21.427", "PostTypeId": "1", "LastEditorUserId": "508343", "LastActivityDate": "2014-07-09T14:43:40.783", "Score": "2", "OwnerUserId": "508343", "Tags": "<c++><templates><c++11><variadic-templates><template-meta-programming>", "AnswerCount": "1"}, "24656420": {"Id": "24656420", "PostTypeId": "2", "Body": "<p>GCC is right, this is explicitly forbidden by C++11 [temp.class.spec] \u00a78:</p>\n<blockquote>\n<p id=\"so_24656212_24656420_0\">8 Within the argument list of a class template partial specialization, the following restrictions apply:</p>\n<ul>\n<li><p id=\"so_24656212_24656420_1\">A partially specialized non-type argument expression shall not involve a template parameter of the\n  partial specialization except when the argument expression is a simple <em>identifier.</em> [ <em>Example:</em></p>\n<pre><code>template &lt;int I, int J&gt; struct A {};\ntemplate &lt;int I&gt; struct A&lt;I+5, I*2&gt; {}; // error\ntemplate &lt;int I, int J&gt; struct B {};\ntemplate &lt;int I&gt; struct B&lt;I, I&gt; {}; // OK\n</code></pre>\n<p id=\"so_24656212_24656420_2\"><em>\u2014end example</em> ]</p></li>\n<li><p id=\"so_24656212_24656420_3\">The type of a template parameter corresponding to a specialized non-type argument shall not be\n  dependent on a parameter of the specialization. [ <em>Example:</em></p>\n<pre><code>template &lt;class T, T t&gt; struct C {};\ntemplate &lt;class T&gt; struct C&lt;T, 1&gt;; // error\ntemplate&lt; int X, int (*array_ptr)[X] &gt; class A {};\nint array[5];\ntemplate&lt; int X &gt; class A&lt;X,&amp;array&gt; { }; // error\n</code></pre>\n<p id=\"so_24656212_24656420_4\"><em>\u2014end example</em> ]</p></li>\n<li><p id=\"so_24656212_24656420_5\">...</p></li>\n</ul>\n</blockquote>\n<p>I believe point 2 is the most relevant one here.</p>\n<hr>\n<p>Regarding the question of \"how to solve this issue.\" In the form the question stands now, there is no workaround, I am afraid.</p>\n<p>As for the original vesion with making integer sequences, I <em>believe</em> that you could make it work with using <code>uintmax_t</code> for the type of the non-type template parameter, and only convert it to <code>intT</code> in the final definition.</p>\n</hr>", "LastEditorUserId": "1782465", "LastActivityDate": "2014-07-09T14:43:40.783", "Score": "7", "CreationDate": "2014-07-09T14:27:36.640", "ParentId": "24656212", "CommentCount": "10", "OwnerUserId": "1782465", "LastEditDate": "2014-07-09T14:43:40.783"}});