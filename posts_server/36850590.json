post_cb({"36850590": {"ViewCount": "40", "Body": "<p>So I've got a class that wants to instantiated for exactly one of two classes. I declare it in the header:</p>\n<pre><code>template &lt;class T&gt;\nclass MyClass {\n public:\n  bool DoSomethingGeneric();\n  bool DoSomethingTSpecific();\n};\n</code></pre>\n<p>Since I don't want to place the method definitions in the header, I instead place them in the implementation file, and perform an explicit specialization. While the <code>DoSomethingGeneric</code> method can be defined generically using a template, the <code>DoSomethingTSpecific</code> requires two separate implementations, one for each of the two possible classes for which I want to instantiate <code>MyClass</code>:</p>\n<pre><code>template &lt;class T&gt;\nbool MyClass&lt;T&gt;::DoSomethingGeneric() {\n  // Generic code\n}\n\ntemplate &lt;&gt;\nbool MyClass&lt;ClassA&gt;::DoSomethingTSpecific() {\n  // ClassA-specific implementation\n}\n\ntemplate &lt;&gt;\nbool MyClass&lt;ClassB&gt;::DoSomethingTSpecific() {\n  // ClassB-specific implementation\n}\n</code></pre>\n<p>Now, riddle me this: where do I place the explicit specialization? If I place it after my template definitions (like I usually do with specializations of purely-generic classes), clang says: </p>\n<pre><code>explicit specialization of 'MyClass&lt;ClassA&gt;' after instantiation\n</code></pre>\n<p>This message is accompanied by a pointer to the line where <code>DoSomethingTSpecific</code> is defined. This makes sense. My understanding is that the explicit specialization of the <code>DoSomethingTSpecific</code> method counts as an implicit specialization. </p>\n<p>Meanwhile, if I place the specializations after all the template definitions, I see:</p>\n<pre><code>no function template matches function template specialization 'DoSomethingTSpecific'\n</code></pre>\n<p>This one is kind of a mystery to me. </p>\n<p>Any thoughts? How can I have an explicit class-level specialization and explicit method specialization? </p>\n", "AcceptedAnswerId": "36851335", "Title": "Mixing explicit class specialization and class method specialization?", "CreationDate": "2016-04-25T20:36:45.653", "Id": "36850590", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2016-04-25T22:01:11.643", "Score": "1", "OwnerUserId": "265629", "Tags": "<c++><templates>", "AnswerCount": "1"}, "bq_ids": {"n4140": {"so_36850590_36851335_0": {"length": 14, "quality": 1.0, "section_id": 267}}, "n3337": {"so_36850590_36851335_0": {"length": 14, "quality": 1.0, "section_id": 258}}, "n4659": {"so_36850590_36851335_0": {"length": 14, "quality": 1.0, "section_id": 274}}}, "36851335": {"Id": "36851335", "PostTypeId": "2", "Body": "<p>From the C++ Standard <strong>\u00a714.7.3(5) <em>Explicit specialization</em></strong>  (<em>emphasis mine</em>):</p>\n<blockquote>\n<p id=\"so_36850590_36851335_0\">Members of an explicitly specialized class template are\n  defined in the same manner as members of normal classes, and <strong>not using the <code>template&lt;&gt;</code> syntax</strong>.</p>\n</blockquote>\n<p>Example:</p>\n<pre><code>template &lt;&gt; // specialization for classA\nclass MyClass&lt;ClassA&gt; {\npublic:\n    bool DoSomethingTSpecific(); // must be declared here\n};\n\n// template&lt;&gt; is not used here\nbool MyClass&lt;ClassA&gt;::DoSomethingTSpecific() {\n  // ClassA-specific implementation\n}\n</code></pre>\n<p>Demo:</p>\n<p><a href=\"http://cpp.sh/3tc2g\" rel=\"nofollow\">http://cpp.sh/3tc2g</a></p>\n", "LastEditorUserId": "2020827", "LastActivityDate": "2016-04-25T22:01:11.643", "Score": "1", "CreationDate": "2016-04-25T21:23:26.000", "ParentId": "36850590", "CommentCount": "0", "OwnerUserId": "2020827", "LastEditDate": "2016-04-25T22:01:11.643"}});