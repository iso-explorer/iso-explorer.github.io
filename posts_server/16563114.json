post_cb({"16563114": {"CommentCount": "17", "AcceptedAnswerId": "16564608", "PostTypeId": "1", "LastEditorUserId": "541686", "CreationDate": "2013-05-15T10:50:30.430", "LastActivityDate": "2013-05-15T12:53:04.347", "LastEditDate": "2013-05-15T11:16:39.767", "ViewCount": "749", "FavoriteCount": "5", "Title": "Are these null pointers, or are they pointers to address 0?", "Id": "16563114", "Score": "19", "Body": "<p>If I write</p>\n<pre><code>int zero = 0;\n\nvoid *p1 = (void *)0;\nvoid *p2 = (void *)(int)0;\nvoid *p3 = (void *)(0 /*no-op, but does it affect the next zero?*/, 0);\n\nvoid *p4 = (void *)zero;    // For reference, this is a pointer to address zero\nvoid *p5 = 0;               // For reference, this is a null pointer\nvoid *p6 = NULL;            // For reference, this is a null pointer\nvoid *p7 = nullptr;         // For reference, this is a null pointer (C++11)\n\nstatic const int static_zero_1 = 0;       // Is this a literal zero when used?\nstatic const int static_zero_2 = 1 - 1;   // No \"literals 0\" per se... is it?\nvoid *p8 = (void *)static_zero_1;   // I have seen weird substitution rules...\nvoid *p9 = (void *)static_zero_2;   // do they apply for NULL too?\n</code></pre>\n<p>which of <code>p1</code>, <code>p2</code>, and <code>p3</code> (<strong>edit:</strong> I added <code>p8</code> and <code>p9</code>) would be <em>null pointers</em> (i.e. <code>== NULL</code>, may or may not be address zero), and which of them would be pointers with the address zero (may or may not be <code>== NULL</code>)?</p>\n<p>If the answer is different in C and C++, what is it in each of them?</p>\n", "Tags": "<c++><c><null><language-lawyer><nullptr>", "OwnerUserId": "541686", "AnswerCount": "3"}, "16564608": {"ParentId": "16563114", "CommentCount": "18", "Body": "<p><code>p1</code> and <code>p2</code> are null pointers; <code>p3</code> is implementation defined,\nand may be something else.  (A comma operator cannot be part of\na constant expression.  And the mapping of a non-constant\nintegral value 0 to a pointer is implementation defined.)  C is\nidentical to C++ here.</p>\n<p><code>p8</code> and <code>p9</code> are both null pointers in C++, but not in C.</p>\n<p>With regards to your comment on <code>static_zero_2</code>, there is no\nrequirement in either language that a literal zero be present,\nanywhere.  g++ defines <code>NULL</code> as the compiler built-in <code>__null</code>,\nfor example, and you can use <code>(1 - 1)</code>, or <code>'\\0'</code>, or any other\nconstant expression evaluating to 0. </p>\n", "OwnerUserId": "649665", "PostTypeId": "2", "Id": "16564608", "Score": "9", "CreationDate": "2013-05-15T12:08:15.967", "LastActivityDate": "2013-05-15T12:08:15.967"}, "16563381": {"ParentId": "16563114", "CommentCount": "19", "Body": "<blockquote>\n<p id=\"so_16563114_16563381_0\">which of <code>p1</code>, <code>p2</code>, and <code>p3</code> would be null pointers?</p>\n</blockquote>\n<p>In C++11, all of them. Per paragraph 4.10/1 of the C++11 Standard:</p>\n<blockquote>\n<p id=\"so_16563114_16563381_1\">A <em>null pointer constant</em> is an integral constant expression (5.19) prvalue of integer type that evaluates to\n  zero or a prvalue of type <code>std::nullptr_t</code>. [...]</p>\n</blockquote>\n<p>Therefore, according to the terminology of the Standard, everything which is a <em>constant</em> (integral) expression and evaluates to <code>0</code> is a <strong>null pointer constant</strong> (not a <em>null pointer</em>, yet). The only one which is not a constant expression that evaluates to <code>0</code> or a prvalue of type <code>nullptr_t</code> in your example is <code>zero</code>, because it is not a constant expression.</p>\n<p>The paragraph continues:</p>\n<blockquote>\n<p id=\"so_16563114_16563381_2\">A null pointer constant can be converted to a pointer type; the\n  result is the <em>null pointer value</em> of that type and is distinguishable from every other value of object pointer or\n  function pointer type. Such a conversion is called a <em>null pointer conversion</em>. Two null pointer values of the\n  same type shall compare equal.</p>\n</blockquote>\n<p>So in your example all the pointers except <code>p4</code> are <em>null pointer values</em> and compare equal among themselves.</p>\n", "OwnerUserId": "1932150", "PostTypeId": "2", "Id": "16563381", "Score": "8", "CreationDate": "2013-05-15T11:05:19.920", "LastActivityDate": "2013-05-15T11:05:19.920"}, "bq_ids": {"n4140": {"so_16563114_16563422_1": {"section_id": 6039, "quality": 0.5652173913043478, "length": 13}, "so_16563114_16563381_2": {"section_id": 39, "quality": 0.9428571428571428, "length": 33}}, "n3337": {"so_16563114_16563381_1": {"section_id": 36, "quality": 0.8666666666666667, "length": 13}, "so_16563114_16563422_1": {"section_id": 5807, "quality": 0.5652173913043478, "length": 13}, "so_16563114_16563422_2": {"section_id": 36, "quality": 0.5333333333333333, "length": 16}, "so_16563114_16563381_2": {"section_id": 36, "quality": 0.9428571428571428, "length": 33}}, "n4659": {"so_16563114_16563381_2": {"section_id": 39, "quality": 0.9428571428571428, "length": 33}}}, "16563422": {"CommentCount": "12", "CreationDate": "2013-05-15T11:07:55.877", "LastEditorUserId": "-1", "LastActivityDate": "2013-05-15T12:53:04.347", "ParentId": "16563114", "LastEditDate": "2017-05-23T11:53:53.593", "LastEditorDisplayName": "user529758", "PostTypeId": "2", "Id": "16563422", "Score": "9", "Body": "<p>And to make Andy's answer complete with C:</p>\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\" rel=\"nofollow noreferrer\">From the C99 Standard</a>:</p>\n<blockquote>\n<p id=\"so_16563114_16563422_0\">6.3.2.3 Pointers</p>\n<p id=\"so_16563114_16563422_1\">1 A pointer to void may be converted to or from a pointer to any incomplete or object\n  type. A pointer to any incomplete or object type may be converted to a pointer to void\n  and back again; the result shall compare equal to the original pointer.</p>\n<p id=\"so_16563114_16563422_2\">3 An <strong>integer constant expression with the value <code>0</code></strong>, or such an expression cast to type\n  <code>void *</code>, is called a <strong>null pointer constant</strong>.\n  55) If a null pointer constant is converted to a\n  pointer type, the resulting pointer, called a null pointer, is guaranteed to compare unequal\n  to a pointer to any object or function.</p>\n</blockquote>\n<p>So any <strong>integer constant expression</strong> which evaluates to <code>0</code> is a null pointer constant and can be converted to a <code>NULL</code> pointer. Effectively in your example, all pointers through except <code>p4</code>, <code>p8</code> and <code>p9</code> are null pointers. <code>p4</code>, <code>p8</code> and <code>p9</code> need not be null pointers since their initialization is not a constant expression because it contains variables (even if <code>const</code> qualified).</p>\n<p><a href=\"https://stackoverflow.com/questions/7016861/null-pointer-in-c-and-c/7016898#7016898\">Here's another answer about <code>NULL</code> in C++</a>, for the record.</p>\n", "OwnerDisplayName": "user529758"}});