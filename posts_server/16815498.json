post_cb({"16815697": {"ParentId": "16815498", "CommentCount": "0", "Body": "<p>Your <code>compare</code> functor is broken.</p>\n<p>A <code>map</code> uses a comparator to implement strict weak ordering.</p>\n<h2>23.1.2 Associative Containers</h2>\n<blockquote>\n<p id=\"so_16815498_16815697_0\">Each associative container is parameterized on Key and an ordering\n  relation Compare that induces a strict weak ordering (25.3) on\n  elements of Key.</p>\n</blockquote>\n<p>Your <code>compare()</code> function doesn't do this, and so results in Undefined Behavior.  It isn't <code>map</code> that's broken here, but your use of it so there is no way to \"fix\" this other than reimplementing <code>compare()</code> so as to induce strict weak ordering on the elements, or use a container other than <code>map</code>.</p>\n", "OwnerUserId": "241536", "PostTypeId": "2", "Id": "16815697", "Score": "1", "CreationDate": "2013-05-29T13:48:01.420", "LastActivityDate": "2013-05-29T13:48:01.420"}, "bq_ids": {"n4140": {"so_16815498_16815697_0": {"section_id": 738, "quality": 0.9333333333333333, "length": 14}}, "n3337": {"so_16815498_16815697_0": {"section_id": 727, "quality": 0.9333333333333333, "length": 14}}, "n4659": {"so_16815498_16815697_0": {"section_id": 796, "quality": 0.9333333333333333, "length": 14}}}, "16815674": {"ParentId": "16815498", "CommentCount": "2", "Body": "<p><code>std::map</code> <em>requires</em> that your comparison operator implement strict weak ordering and the behavior is undefined if the comparator doesn't implement those requirements. You can't make your map work with the comparison you have.</p>\n<p>Perhaps if you go into more detail about the real problem you're trying to solve we can help you.</p>\n", "OwnerUserId": "251738", "PostTypeId": "2", "Id": "16815674", "Score": "0", "CreationDate": "2013-05-29T13:47:05.270", "LastActivityDate": "2013-05-29T13:47:05.270"}, "16815498": {"CommentCount": "2", "ViewCount": "972", "PostTypeId": "1", "LastEditorUserId": "1371096", "CreationDate": "2013-05-29T13:39:26.383", "LastActivityDate": "2013-05-29T13:53:25.033", "Title": "Find in a stl map doesn't work when a custom compare function is written which stops keys from sorting", "LastEditDate": "2013-05-29T13:53:25.033", "Id": "16815498", "Score": "0", "Body": "<pre><code>class compare\n{\n    public:\n    bool operator()(const int x,const int y) const\n    {\n        if(x-y == 0) \n            return false;\n        else \n            return true; \n    }\n};\n\nint main()\n{\n    std::map&lt;char,int,compare&gt; mymap;\n\n    //Add data into map\n    mymap.insert ( std::pair&lt;char,int&gt;('f',100) );\n    mymap.insert ( std::pair&lt;char,int&gt;('a',100) );\n    mymap.insert ( std::pair&lt;char,int&gt;('k',100) );\n    mymap.insert ( std::pair&lt;char,int&gt;('z',200) );\n\n    //try to find a key in map\n    std::map&lt;char,int,compare&gt;::iterator l_pos = mymap.begin();\n    l_pos = mymap.find('z');\n\n    if(l_pos != mymap.end())\n    {\n        printf(\"\\nfound = %c\\n\",l_pos-&gt;first);\n    }\n    else\n    {\n        printf(\"Not found = %c\\n\",l_pos-&gt;first);\n    }\n}\n</code></pre>\n<p>Result:</p>\n<pre><code>Not found =\n</code></pre>\n<p>But if I display the map I can see the contents. mymap contains: f =&gt; 100 a =&gt; 100 k =&gt; 100 z =&gt; 20</p>\n<p>Find in a stl map doesn't work when a custom compare function is written which stops keys from sorting. The Find fails. Is there a way to fix this? Find doesn't return any data. I know stl maps are not for this purpose. But is there way to fix this? The Compare function stops sorting. The entries are stored in reverse order. When I use a for loop to iterate through the map I can see all the values. It is only the find command which is not working.</p>\n", "Tags": "<c++>", "OwnerUserId": "2432572", "AnswerCount": "2"}});