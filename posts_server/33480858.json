post_cb({"bq_ids": {"n4140": {"so_33480858_33480951_0": {"length": 8, "quality": 0.6666666666666666, "section_id": 4706}, "so_33480858_33480961_1": {"length": 8, "quality": 0.6666666666666666, "section_id": 4706}}, "n3337": {"so_33480858_33480951_0": {"length": 7, "quality": 0.5833333333333334, "section_id": 331}, "so_33480858_33480961_1": {"length": 7, "quality": 0.5833333333333334, "section_id": 331}}, "n4659": {"so_33480858_33480951_0": {"length": 7, "quality": 0.5833333333333334, "section_id": 350}, "so_33480858_33480961_1": {"length": 7, "quality": 0.5833333333333334, "section_id": 350}}}, "33480858": {"ViewCount": "93", "Body": "<p>I tried following code:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\nint main() { \n    std::cout &lt;&lt; std::is_const&lt;std::add_const&lt;int*&amp;&gt;::type&gt;::value;\n}\n</code></pre>\n<p>and the output is 0. Is this correct behaviour?</p>\n", "AcceptedAnswerId": "33480987", "Title": "C++ std::add_const not working correctly?", "CreationDate": "2015-11-02T15:14:34.873", "Id": "33480858", "CommentCount": "7", "LastEditDate": "2015-11-02T15:15:16.397", "PostTypeId": "1", "LastEditorUserId": "3002139", "LastActivityDate": "2015-11-02T15:20:56.760", "Score": "1", "OwnerUserId": "3964037", "Tags": "<c++><typetraits>", "AnswerCount": "4"}, "33480961": {"Id": "33480961", "PostTypeId": "2", "Body": "<p>If we check the cpprefernece documentation for <a href=\"http://en.cppreference.com/w/cpp/types/add_cv\" rel=\"nofollow\">std::add_const</a> we see it says:</p>\n<blockquote>\n<p id=\"so_33480858_33480961_0\">Provides the member typedef type which is the same as T, except it has a cv-qualifier added (<strong>unless T is a function, a reference, or already has this cv-qualifier</strong>) </p>\n</blockquote>\n<p>this is consistent with the draft C++ standard section 20.10.7.1 Const-volatile modifications which says the following for <code>add_const</code>:</p>\n<blockquote>\n<p id=\"so_33480858_33480961_1\">If T is a reference, function, or top-level const-qualified type, then type\n  shall name the same type as T, otherwise T const.</p>\n</blockquote>\n", "LastActivityDate": "2015-11-02T15:19:48.223", "CommentCount": "0", "CreationDate": "2015-11-02T15:19:48.223", "ParentId": "33480858", "Score": "0", "OwnerUserId": "1708801"}, "33480950": {"Id": "33480950", "PostTypeId": "2", "Body": "<p>From the <code>std::add_const</code> documentation : </p>\n<p><a href=\"http://en.cppreference.com/w/cpp/types/add_cv\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/types/add_cv</a></p>\n<blockquote>\n<p id=\"so_33480858_33480950_0\">Provides the member typedef type which is the same as T, except it has\n  a cv-qualifier added (unless T is a function, <strong>a reference</strong>, or already\n  has this cv-qualifier)</p>\n</blockquote>\n", "LastActivityDate": "2015-11-02T15:19:18.540", "CommentCount": "0", "CreationDate": "2015-11-02T15:19:18.540", "ParentId": "33480858", "Score": "0", "OwnerUserId": "3613500"}, "33480951": {"Id": "33480951", "PostTypeId": "2", "Body": "<p><code>std::add_const</code> does not quite do what you think it does:</p>\n<blockquote>\n<p id=\"so_33480858_33480951_0\"><strong>If T is a reference</strong>, function, or top-level const-qualified type, <strong>then type\n  shall name the same type as T</strong>, otherwise T const.</p>\n</blockquote>\n<p>(From 20.10.7.1 Const-volatile modifications Table 52 in N4140, emphasis mine)</p>\n<p>As you can see, <code>std::add_const</code> does not add a <code>const</code> for reference types.</p>\n<p>But what would a constant reference be in the first place, they are immutable anyways. (Not to be confused with reference to <code>const</code> vs. reference to non-<code>const</code>.)</p>\n", "LastActivityDate": "2015-11-02T15:19:19.073", "CommentCount": "0", "CreationDate": "2015-11-02T15:19:19.073", "ParentId": "33480858", "Score": "1", "OwnerUserId": "3002139"}, "33480987": {"Id": "33480987", "PostTypeId": "2", "Body": "<p>References cannot be <code>const</code>-qualified, so <code>std::add_const</code> is a no-op for reference types.</p>\n<p>It makes sense when you think about it (and <a href=\"http://en.cppreference.com/w/cpp/types/add_cv\" rel=\"noreferrer\">is clearly stated in standard library reference material</a>), but is potentially surprising at first glance.</p>\n", "LastActivityDate": "2015-11-02T15:20:56.760", "CommentCount": "0", "CreationDate": "2015-11-02T15:20:56.760", "ParentId": "33480858", "Score": "6", "OwnerUserId": "560648"}});