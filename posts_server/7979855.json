post_cb({"7979855": {"ViewCount": "1001", "Body": "<p><em>(using Visual C++ 2010, <strong>compiling in debug with optimizations turned off</strong>)</em></p>\n<p>I have the following very simple class:</p>\n<pre><code>class exampleClass\n{\npublic:\n    exampleClass()\n    {\n        cout &lt;&lt; \"in the default ctor\" &lt;&lt; endl;\n    }\nprivate:\n    exampleClass (const exampleClass&amp; e)\n    {\n        cout &lt;&lt; \"in the copy ctor\" &lt;&lt; endl;\n    }\n};\n</code></pre>\n<p>When I try to compile it with the following main:</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    exampleClass e1=exampleClass();\n    return 0;\n}\n</code></pre>\n<p>I get the compilation error:</p>\n<pre><code>'exampleClass::exampleClass' : cannot access private\n                               member declared in class 'exampleClass'\n</code></pre>\n<p>When I remove the access modifier \"private\" from the copy ctor, the program compiles and prints <strong>only</strong>:</p>\n<pre><code>in the default ctor\n</code></pre>\n<p>Why is this happening? If the compiler will not invoke the copy ctor anyway, why is it bugging me?</p>\n<p>Since some people missed the first line (at least before some edits) i will repeat it:  </p>\n<h2><strong>I compiled in debug with optimizations turned off.</strong></h2>\n", "AcceptedAnswerId": "7980055", "Title": "Why is the compiler bugging me on this one?", "CreationDate": "2011-11-02T11:52:43.040", "Id": "7979855", "CommentCount": "4", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2011-11-02T15:28:49.820", "LastEditorUserId": "1014208", "LastActivityDate": "2011-11-02T15:28:49.820", "Score": "17", "OwnerUserId": "1014208", "Tags": "<c++>", "AnswerCount": "9"}, "bq_ids": {"n4140": {"so_7979855_7980055_0": {"length": 41, "quality": 0.9111111111111111, "section_id": 3296}}, "n3337": {"so_7979855_7980055_0": {"length": 41, "quality": 0.9111111111111111, "section_id": 3166}}, "n4659": {"so_7979855_7980055_0": {"length": 41, "quality": 0.9111111111111111, "section_id": 4058}}}, "7979916": {"Id": "7979916", "PostTypeId": "2", "Body": "<p>That's not how you do instantiate an object in C++. If you want it allocated on the stack, you write:</p>\n<pre><code>exampleClass e1;\n</code></pre>\n<p>and you're done, sincee exampleClass' constructor accepts no parameters.</p>\n<p>Otherwise, if you want it allocated on the heap, you write:</p>\n<pre><code>exampleClass e1 = new exampleClass(); \n</code></pre>\n<p>The way you wrote it actually creates a temporary object and invokates the copy constructor on that temporary object to create e1. Problem is that your copy-ctor is private, so the compiler's error message.</p>\n", "LastActivityDate": "2011-11-02T11:58:21.537", "CommentCount": "0", "CreationDate": "2011-11-02T11:58:21.537", "ParentId": "7979855", "Score": "0", "OwnerUserId": "347137"}, "7979948": {"Id": "7979948", "PostTypeId": "2", "Body": "<p>The compiler is required to <em>bug</em> you there. While the copy can be elided, the standard requires that the copy constructor is accessible for that type of construction. Of course, you can simplify the code and avoid the copy construction altogether:</p>\n<pre><code>exampleClass e1; // Will call exampleClass::exampleClass()\n</code></pre>\n", "LastActivityDate": "2011-11-02T12:01:19.720", "CommentCount": "0", "CreationDate": "2011-11-02T12:01:19.720", "ParentId": "7979855", "Score": "4", "OwnerUserId": "36565"}, "7980063": {"Id": "7980063", "PostTypeId": "2", "Body": "<p>This is because at compile time, the compiler checks if the function the user is trying to access is really accessible. So when you use <code>exampleClass e1=exampleClass();</code>, it first checks if the copy-constructor is accessible. It spits out an error because the copy-constructor is not private. <strong>Remember</strong> that at this point the compiler hasn't gone onto the optimization stage where it does the clever stuff as to skip the copy-constructor.</p>\n<p>When you make the copy-constructor public, the compiler successfully goes through the stage of parsing the code and making sure that everything is accessible and is in order (there's actually more than that going on) and then at the optimization stage, which usually is on in 'Release' mode it does the clever stuff and by-passes the use of copy-constructor. However if you tried the same code in 'Debug' mode you'd see that the copy-constructor does get called.</p>\n", "LastActivityDate": "2011-11-02T12:11:36.730", "CommentCount": "1", "CreationDate": "2011-11-02T12:11:36.730", "ParentId": "7979855", "Score": "1", "OwnerUserId": "210634"}, "7979904": {"Id": "7979904", "PostTypeId": "2", "Body": "<p>Its because the copy constructor is private.. </p>\n<p>your code is</p>\n<ul>\n<li>creating a temporary exampleClass and invoking the default constructor <code>exampleClass()</code></li>\n<li>attempting to assign the resulting temporary object to e1 using the private copy constructor</li>\n</ul>\n", "LastEditorUserId": "54555", "LastActivityDate": "2011-11-02T12:41:06.677", "Score": "0", "CreationDate": "2011-11-02T11:56:59.360", "ParentId": "7979855", "CommentCount": "1", "OwnerUserId": "54555", "LastEditDate": "2011-11-02T12:41:06.677"}, "7979918": {"Id": "7979918", "PostTypeId": "2", "Body": "<pre><code>exampleClass e1=exampleClass();\n</code></pre>\n<p>is the same as:</p>\n<pre><code>exampleClass e1(exampleClass());\n</code></pre>\n<p>i.e it invokes the (private) copy constructor.</p>\n", "LastActivityDate": "2011-11-02T11:58:29.733", "CommentCount": "0", "CreationDate": "2011-11-02T11:58:29.733", "ParentId": "7979855", "Score": "1", "OwnerUserId": "159361"}, "7979875": {"Id": "7979875", "PostTypeId": "2", "Body": "<pre><code>exampleClass e1=exampleClass();\n</code></pre>\n<p>This will first create a temporary <code>exampleClass</code> using the default constructor and then copy that into <code>e1</code> using the copy constructor. This will invoke the private copy constructor and thus give you the error. The corrent way to instantiate an instance of a class with the default constructor is this:</p>\n<pre><code>exampleClass e1;\n</code></pre>\n", "LastEditorUserId": "565635", "LastActivityDate": "2011-11-02T12:02:37.410", "Score": "12", "CreationDate": "2011-11-02T11:54:35.663", "ParentId": "7979855", "CommentCount": "9", "OwnerUserId": "565635", "LastEditDate": "2011-11-02T12:02:37.410"}, "7980055": {"Id": "7980055", "PostTypeId": "2", "Body": "<p>This type of initialization is called copy-initialization. I believe the following clause from the C++11 standard applies here (paragraph 8.5.16, page 204):</p>\n<blockquote>\n<p id=\"so_7979855_7980055_0\">If the initialization is direct-initialization, or if it is\n  copy-initialization where the cv-unqualified version of the source\n  type is the same class as, or a derived class of, the class of the\n  destination, constructors are considered. The applicable constructors\n  are enumerated (13.3.1.3), and the best one is chosen through overload\n  resolution (13.3). The constructor so selected is called to initialize\n  the object, with the initializer expression or expression-list as its\n  argument(s). If no constructor applies, or the overload resolution is\n  ambiguous, the initialization is ill-formed.</p>\n</blockquote>\n<p>In this case, the best applicable constructor is the copy ctor, which is private, hence the error message.</p>\n<p>To further answer your question, when the copy ctor is private, your program is simply not allowed to pass the complier check because of the rules imposed by the standard. When you make the copy ctor public, the program becomes valid, but the call to the copy ctor is optimized away.</p>\n<p>EDIT:\nOkay, to elaborate on previous paragraph.You're dealing here with the so-called <a href=\"http://en.wikipedia.org/wiki/Copy_elision\" rel=\"nofollow\">copy elision</a>. While the copy elision is possible in this case, the standard requires you to provide an <em>accessible</em> copy ctor for your class.  </p>\n", "LastEditorDisplayName": "user500944", "OwnerDisplayName": "user500944", "LastActivityDate": "2011-11-02T12:44:09.467", "Score": "16", "CreationDate": "2011-11-02T12:11:04.970", "ParentId": "7979855", "CommentCount": "0", "LastEditDate": "2011-11-02T12:44:09.467"}, "7982229": {"Id": "7982229", "PostTypeId": "2", "Body": "<p>Everyone explains how you should instantiate an object and @Grigory Javadyan makes a good point on copy elision. It looks like, MSVC does this optimization (so called return value optimization) even in debug mode.</p>\n<pre><code>exampleClass e1=exampleClass();\n</code></pre>\n<p>is the same as</p>\n<pre><code>exampleClass giveExample()\n{\n  return exampleClass();\n}\n\nexampleClass e1 = giveExample();\n</code></pre>\n<p>You will see that copy ctor will not be called.</p>\n<p>But here :</p>\n<pre><code>exampleClass giveExample()\n{\n  exampleClass example;\n  return example;\n}\n\nexampleClass e1 = giveExample();\n</code></pre>\n<p>you will see another output line :</p>\n<pre><code>in the copy ctor\n</code></pre>\n<p>Because you are forcing the compiler to first generate an object and then return it.</p>\n<p><a href=\"https://stackoverflow.com/questions/665825/copy-constructor-vs-return-value-optimization\">Here</a>, <a href=\"http://bytes.com/topic/c/answers/439413-copy-constructor-initialization-temporaries\" rel=\"nofollow noreferrer\">here</a> and <a href=\"https://stackoverflow.com/questions/4639576/copy-constructor-is-not-called-for-copy-initialization-or-optimized\">here</a> some questions I can find, similar to yours.</p>\n<p>PS. Link#2 is from another Q&amp;A site. I hope this is not a problem.</p>\n", "LastEditorUserId": "-1", "LastActivityDate": "2011-11-02T14:55:19.870", "Score": "1", "CreationDate": "2011-11-02T14:43:10.107", "ParentId": "7979855", "CommentCount": "0", "OwnerUserId": "425817", "LastEditDate": "2017-05-23T12:03:09.973"}, "7980077": {"Id": "7980077", "PostTypeId": "2", "Body": "<p>when you write </p>\n<pre><code>exampleClass e1 = exampleClass() \n</code></pre>\n<p>it is the same as writing</p>\n<pre><code>exampleClass e1( exampleClass() );\n</code></pre>\n<p>which invokes the copy ctor.</p>\n", "LastActivityDate": "2011-11-02T12:12:19.080", "CommentCount": "0", "CreationDate": "2011-11-02T12:12:19.080", "ParentId": "7979855", "Score": "0", "OwnerUserId": "45685"}});