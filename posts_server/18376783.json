post_cb({"18376899": {"ParentId": "18376783", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>In C++ both are the same thing.</p>\n<p>In C, <code>f()</code> means that we don't know how many parameters the function takes at this point. It is unspecified parameters. And <code>f(void)</code> means that this function does not take any parameters.</p>\n<p>From the C standard :</p>\n<blockquote>\n<p id=\"so_18376783_18376899_0\"><strong>6.7.6.3 Function declarators (including prototypes)</strong></p>\n<p id=\"so_18376783_18376899_1\">6/ A parameter type list specifies the types of, and may declare identifiers for, the\n  parameters of the function.</p>\n<p id=\"so_18376783_18376899_2\">10/ The special case of an unnamed parameter of type <code>void</code> as the only item in the list\n  specifies that the function has no parameters.</p>\n<p id=\"so_18376783_18376899_3\">14/ An identifier list declares only the identifiers of the parameters of the function. An empty list in a function declarator that is part of a definition of that function specifies that the function has no parameters. The empty list in a function declarator that is not part of a definition of that function specifies that no information about the number or types of the parameters is supplied.</p>\n</blockquote>\n<p>And like you said, in the C++ standard :</p>\n<blockquote>\n<p id=\"so_18376783_18376899_4\"><strong>8.3.5 Functions [dcl.fct]</strong></p>\n<p id=\"so_18376783_18376899_5\">4/ The <em>parameter-declaration-clause</em> determines the arguments that can be specified, and their processing, when the function is called. [ <em>Note:</em> *the parameter-declaration-clause* is used to convert the arguments specified on the function call; see 5.2.2. \u2014<em>end note</em> ] If the <em>parameter-declaration-clause</em> is empty, the function takes no arguments. <strong>A parameter list consisting of a single unnamed parameter of non-dependent type <code>void</code> is equivalent to an empty parameter list.</strong></p>\n</blockquote>\n", "OwnerUserId": "1394283", "LastEditorUserId": "1394283", "LastEditDate": "2013-08-22T10:13:01.733", "Id": "18376899", "Score": "11", "CreationDate": "2013-08-22T09:43:16.200", "LastActivityDate": "2013-08-22T10:13:01.733"}, "42875063": {"ParentId": "18376783", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>From \"A History of C++\" (1979\u2212 1991 by Bjarne Stroustrup) at p11:</p>\n<blockquote>\n<p id=\"so_18376783_42875063_0\">C with Classes introduced the notation f(void) for a function f that\n  takes no arguments as a contrast to f() that in C declares a function\n  that can take any number of arguments of any type without any type\n  check.</p>\n</blockquote>\n<p>It says later, however, that soon the empty function declarator was given its obvious meaning and the new construct - kinda rendered obsolete for the time. I guess nobody has bothered removing it after (or maybe there had been already some C++ code written with it that have needed support). </p>\n<p><strong>In C:</strong></p>\n<p>This construct however rendered important role as of the standardization of the C language where function prototyping was borrowed directly from C++. In this case <code>f(void)</code> was useful in supporting existing C code (in which the notion <code>f()</code> was already reserved as to indicate a function taking unspecified number of arguments).</p>\n<p><em>Before that the C language hadn't been able to attach specific types to each parameter but only functions with unspecified number of arguments and with unspecified types were declarable using the <code>f()</code> form.</em></p>\n", "OwnerUserId": "4031604", "LastEditorUserId": "4031604", "LastEditDate": "2017-03-18T14:47:57.147", "Id": "42875063", "Score": "1", "CreationDate": "2017-03-18T13:37:20.890", "LastActivityDate": "2017-03-18T14:47:57.147"}, "18376858": {"ParentId": "18376783", "CommentCount": "3", "Body": "<p>In C++ they both mean the same thing. </p>\n<p>In C <code>f(void)</code> is different from <code>f()</code>, becuse <code>f()</code> means \"unspecified parameters\" - you can legally pass anything (whether the function at receiving the data is happy about that or not is another matter). </p>\n", "OwnerUserId": "1919155", "PostTypeId": "2", "Id": "18376858", "Score": "21", "CreationDate": "2013-08-22T09:41:32.770", "LastActivityDate": "2013-08-22T09:41:32.770"}, "18376783": {"CommentCount": "9", "AcceptedAnswerId": "18376858", "PostTypeId": "1", "LastEditorUserId": "1033581", "CreationDate": "2013-08-22T09:38:26.497", "LastActivityDate": "2017-03-19T10:20:33.670", "LastEditDate": "2017-03-18T12:59:25.080", "ViewCount": "1140", "FavoriteCount": "1", "Title": "`f(void)` meaning no parameters in C++11 or C?", "Id": "18376783", "Score": "22", "Body": "<p>In C++11 the following function declaration:</p>\n<pre><code>int f(void);\n</code></pre>\n<p>means the same as:</p>\n<pre><code>int f();\n</code></pre>\n<blockquote>\n<p id=\"so_18376783_18376783_0\">A parameter list consisting of a single unnamed parameter of non-dependent type void is equivalent to an empty parameter list.</p>\n</blockquote>\n<p>I get the (perhaps false) impression this is an old feature, perhaps inherited from C?</p>\n<p>Does anyone know the history or rationale behind this way to declare a function with no parameters?</p>\n", "Tags": "<c++><c><c++11>", "OwnerUserId": "1131467", "AnswerCount": "5"}, "18376832": {"ParentId": "18376783", "PostTypeId": "2", "CommentCount": "5", "Body": "<p>In C++, there is no difference. However, this is inherited from C, where <code>int f()</code> mean \"function which can take any number of arguments of any types\" and <code>int f(void);</code> specifies functions that takes no arguments.</p>\n<p><strong>Edit</strong> As Angew pointed out, in C, f() means \"<strong>function whose parameters are unknown at this point</strong>.\" It does not mean it can take any number of arguments - close to that would be <code>f(T arg, ...)</code>, where <code>arg</code> is at least one named parameter before <code>...</code>, which accepts at least one argument, <code>arg</code> (as pointed by @hvd).</p>\n", "OwnerUserId": "133707", "LastEditorUserId": "133707", "LastEditDate": "2017-03-19T10:20:33.670", "Id": "18376832", "Score": "1", "CreationDate": "2013-08-22T09:40:23.517", "LastActivityDate": "2017-03-19T10:20:33.670"}, "18376886": {"ParentId": "18376783", "CommentCount": "0", "Body": "<p>This comes to C++ from C. In C <code>f()</code> means <em>unknown number and type of parameters</em>. So in C for <em>no parameters</em> there is <code>f( void )</code>.</p>\n<p>In C++ it's redundant: <code>f()</code> and <code>f( void )</code> mean same thing - a function that has no parameters.</p>\n", "OwnerUserId": "917249", "PostTypeId": "2", "Id": "18376886", "Score": "3", "CreationDate": "2013-08-22T09:42:29.070", "LastActivityDate": "2013-08-22T09:42:29.070"}, "bq_ids": {"n4140": {"so_18376783_18376899_5": {"section_id": 3240, "quality": 0.875, "length": 35}, "so_18376783_18376783_0": {"section_id": 3240, "quality": 1.0, "length": 13}}, "n3337": {"so_18376783_18376899_5": {"section_id": 3113, "quality": 0.725, "length": 29}, "so_18376783_18376783_0": {"section_id": 3113, "quality": 0.5384615384615384, "length": 7}}, "n4659": {"so_18376783_18376899_5": {"section_id": 3996, "quality": 0.875, "length": 35}, "so_18376783_18376783_0": {"section_id": 3996, "quality": 1.0, "length": 13}}}});