post_cb({"bq_ids": {"n4140": {"so_1751378_1751546_2": {"length": 9, "quality": 0.6, "section_id": 3286}, "so_1751378_1751546_4": {"length": 6, "quality": 1.0, "section_id": 3287}, "so_1751378_1751546_3": {"length": 7, "quality": 0.5384615384615384, "section_id": 369}, "so_1751378_1751546_1": {"length": 4, "quality": 1.0, "section_id": 3287}}, "n3337": {"so_1751378_1751546_1": {"length": 4, "quality": 1.0, "section_id": 3157}, "so_1751378_1751546_4": {"length": 6, "quality": 1.0, "section_id": 3157}, "so_1751378_1751546_3": {"length": 7, "quality": 0.5384615384615384, "section_id": 359}, "so_1751378_1751546_2": {"length": 12, "quality": 0.8, "section_id": 3157}}, "n4659": {"so_1751378_1751546_2": {"length": 8, "quality": 0.5333333333333333, "section_id": 384}, "so_1751378_1751546_4": {"length": 6, "quality": 1.0, "section_id": 4049}, "so_1751378_1751546_3": {"length": 7, "quality": 0.5384615384615384, "section_id": 7358}}}, "1751576": {"Id": "1751576", "PostTypeId": "2", "Body": "<p>Initialization with <code>()</code> (including your example) was always a part of standard C++, since C++98. Although there were some changes in the newer versions of the standard, they don't apply to your example.</p>\n<p>GCC compilers were known to handle <code>()</code> initializers incorrectly in versions from 2.x.x family. MSVC++ compiler is known to handle <code>()</code> initializers incorrectly in VC6. Newer versions of MSVC++ handle <code>()</code> initializers in accordance with C++98 specification.</p>\n", "LastEditorUserId": "187690", "LastActivityDate": "2009-11-17T20:41:31.123", "Score": "1", "CreationDate": "2009-11-17T20:33:29.580", "ParentId": "1751378", "CommentCount": "5", "LastEditDate": "2009-11-17T20:41:31.123", "OwnerUserId": "187690"}, "1751543": {"Id": "1751543", "PostTypeId": "2", "Body": "<p>This is from \"Working Draft, Standard for Programming\nLanguage C++\" dated 2009-11-09:<br><br>\n<b>8.5 Initializers</b><br>\n...<br>\n7 To value-initialize an object of type T means:<br/></br></br></br></br></p>\n<ul>\n<li>if T is a (possibly cv-qualified) class type (Clause 9) with a user-provided constructor (12.1), then the\ndefault constructor for T is called (and the initialization is ill-formed if T has no accessible default\nconstructor);\n<li>if T is a (possibly cv-qualified) non-union class type without a user-provided constructor, then the object\nis zero-initialized and, if T\u2019s implicitly-declared default constructor is non-trivial, that constructor is\ncalled.\n<li>if T is an array type, then each element is value-initialized;\n<li>otherwise, the object is zero-initialized.\n</li></li></li></li></ul>\n<p>...\n</p>\n", "LastActivityDate": "2009-11-17T20:28:26.247", "Score": "0", "CreationDate": "2009-11-17T20:28:26.247", "ParentId": "1751378", "CommentCount": "0", "OwnerUserId": "106671"}, "1751378": {"ViewCount": "1935", "Body": "<pre><code>int * array = new int [size]();\n</code></pre>\n<p>The operator() allow to set all values of array to 0 (all bits to 0). it's called value-initialization. </p>\n<p>Since which version of g++ is it valid? </p>\n<p>What about other compilers?</p>\n<p>Where can I find it in standard?</p>\n", "Title": "Validity of int * array = new int [size]();", "CreationDate": "2009-11-17T20:00:54.123", "LastActivityDate": "2011-05-30T21:30:46.047", "CommentCount": "5", "FavoriteCount": "2", "PostTypeId": "1", "LastEditDate": "2011-05-30T21:30:46.047", "LastEditorUserId": "560648", "Id": "1751378", "Score": "5", "OwnerUserId": "175762", "Tags": "<c++><compiler-construction><g++><standards>", "AnswerCount": "3"}, "1751546": {"Id": "1751546", "PostTypeId": "2", "Body": "<p>This is part of the C++ standard; if it was invalid in g++ then g++ was nonconforming.  From the C++ standard (ISO/IEC 14882:2003), several sections are relevant:</p>\n<p>5.3.4/15 concerning the new expression says:</p>\n<blockquote>\n<p id=\"so_1751378_1751546_0\">If the new-initializer is of the form (), the item is value-initialized</p>\n</blockquote>\n<p>8.5/5 concerning initializers says:</p>\n<blockquote>\n<p id=\"so_1751378_1751546_1\">To value-initialize an object of type T means:</p>\n<p id=\"so_1751378_1751546_2\">\u2014 if T is a class type (clause 9) with a user-declared constructor (12.1), then the default constructor for T is called (and the initialization is ill-formed if T has no accessible default constructor);</p>\n<p id=\"so_1751378_1751546_3\">\u2014 if T is a non-union class type without a user-declared constructor, then every non-static data member and base-class component of T is value-initialized;</p>\n<p id=\"so_1751378_1751546_4\">\u2014 if T is an array type, then each element is value-initialized;</p>\n<p id=\"so_1751378_1751546_5\">\u2014 otherwise, the object is zero-initialized</p>\n</blockquote>\n<p>So, for an array of ints, which are a scalar type, the third and fourth bullet points apply.</p>\n", "LastActivityDate": "2009-11-17T20:28:48.357", "Score": "6", "CreationDate": "2009-11-17T20:28:48.357", "ParentId": "1751378", "CommentCount": "1", "OwnerUserId": "151292"}});