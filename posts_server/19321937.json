post_cb({"19322009": {"ParentId": "19321937", "PostTypeId": "2", "CommentCount": "3", "CreationDate": "2013-10-11T15:35:27.267", "Score": "9", "LastEditorUserId": "34824", "LastEditDate": "2013-10-11T15:47:02.537", "Id": "19322009", "OwnerUserId": "34824", "Body": "<p>The syntax you posted is not legal, and the intended meaning is unclear.</p>\n<p>Depending on what you hope to accomplish, can you use <code>||</code> or <code>&amp;&amp;</code> to combine them?<br>\n(of course if this is someone else's code, I'd just reject it as inappropriate / unusable)</br></p>\n<pre><code>#if defined(DISABLE_UNTIL) || defined(OTHER_CODE_IS_READY)\n    foo();\n#endif\n</code></pre>\n", "LastActivityDate": "2013-10-11T15:47:02.537"}, "bq_ids": {"n4140": {"so_19321937_19321962_0": {"section_id": 491, "quality": 0.5833333333333334, "length": 7}}, "n3337": {"so_19321937_19321962_0": {"section_id": 482, "quality": 0.5833333333333334, "length": 7}}, "n4659": {"so_19321937_19321962_0": {"section_id": 506, "quality": 0.5833333333333334, "length": 7}}}, "19321962": {"ParentId": "19321937", "PostTypeId": "2", "CommentCount": "2", "CreationDate": "2013-10-11T15:33:29.763", "Score": "6", "LastEditorUserId": "560648", "LastEditDate": "2013-10-13T01:43:25.613", "Id": "19321962", "OwnerUserId": "560648", "Body": "<p><code>[C++11 16.1]</code>, <code>[C++11 16.5]</code> and, incidentally, <code>[C99 6.10.1/4]</code> all say that this is invalid.</p>\n<blockquote>\n<p id=\"so_19321937_19321962_0\"><em>if-group</em>:<br>\n<code># if</code> <em>constant-expression</em> <i>new-line</i> <em>group<sub>opt</sub></em><br>\n<code># ifdef</code> <em>identifier</em> <i>new-line</i> <em>group<sub>opt</sub></em><br>\n<code># ifndef</code> <em>identifier</em> <i>new-line</i> <em>group<sub>opt</sub></em> </br></br></br></p>\n</blockquote>\n<p>Only one identifier is legal.</p>\n<p>GCC's own documentation <a href=\"http://gcc.gnu.org/onlinedocs/cpp/Ifdef.html\" rel=\"nofollow\">agrees</a>.</p>\n<p><a href=\"http://ideone.com/FbjrIM\" rel=\"nofollow\">My own tests</a> suggest that only the first identifer is accepted, and the second is simply discarded; this may be to ease the implementation, but the standard does require a diagnostic here, so you should see this when you use the <code>-pedantic</code> flag at least<sup>\u2020</sup>.</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n#define A\n#define B\n\nint main() {\n    #ifdef A\n    std::cout &lt;&lt; \"a \";\n    #endif\n\n    #ifdef B\n    std::cout &lt;&lt; \"b \";\n    #endif\n\n    #ifdef C\n    std::cout &lt;&lt; \"c \";\n    #endif\n\n    #ifdef B C\n    std::cout &lt;&lt; \"bc \";\n    #endif\n\n    #ifdef C B\n    std::cout &lt;&lt; \"cb \";\n    #endif\n\n    return 0;\n}\n\n// Output: \"a b bc\"\n// Note: \"cb\" *not* output\n</code></pre>\n<hr>\n<p><sup><sup>\u2020</sup> Coliru's installation of GCC emits it <a href=\"http://coliru.stacked-crooked.com/a/3c3e483e708d04c0\" rel=\"nofollow\">with or without <code>-pedantic</code></a>.</sup></p>\n</hr>", "LastActivityDate": "2013-10-13T01:43:25.613"}, "19321937": {"CommentCount": "8", "AcceptedAnswerId": "19321962", "PostTypeId": "1", "LastEditorUserId": "4370109", "CreationDate": "2013-10-11T15:32:15.987", "LastActivityDate": "2016-07-02T14:00:59.257", "LastEditDate": "2016-07-02T14:00:59.257", "ViewCount": "3448", "FavoriteCount": "1", "Title": "#ifdef with multiple tokens, is this legal?", "Id": "19321937", "Score": "6", "Body": "<p>Today I came across some C++ code that contains an #ifdef clause like this:</p>\n<pre><code>#ifdef DISABLE_UNTIL OTHER_CODE_IS_READY\n   foo();\n#endif\n</code></pre>\n<p>Note the space between \"DISABLE_UNTIL\" and \"OTHER_CODE_IS_READY\".  Essentially there are two tokens specified in the #ifdef line.</p>\n<p>My question is, is this legal C++ code?  (g++ compiles it without any errors, and it apparently just ignores the second token).  And if it is legal, should the second token have any effect?</p>\n", "Tags": "<c++><c-preprocessor><language-lawyer><conditional-compilation>", "OwnerUserId": "131930", "AnswerCount": "2"}});