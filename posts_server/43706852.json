post_cb({"43706852": {"CommentCount": "2", "ViewCount": "205", "PostTypeId": "1", "LastEditorUserId": "3577745", "CreationDate": "2017-04-30T13:21:37.677", "LastActivityDate": "2017-05-09T08:04:08.813", "Title": "could not deduce template argument for T* from FieldType* (Visual C++ only)", "AcceptedAnswerId": "43863930", "LastEditDate": "2017-05-01T03:41:24.530", "Id": "43706852", "Score": "4", "Body": "<p>This code compiles OK on <strong>g++ (<a href=\"http://coliru.stacked-crooked.com/a/4e35d658effca3df\" rel=\"nofollow noreferrer\">Coliru</a>)</strong>, but not <strong>Visual C++ (<a href=\"http://rextester.com/MOH83998\" rel=\"nofollow noreferrer\">rextester</a>)</strong> - both online and my desktop.</p>\n<p><em>It is a simplified version of a much larger Visual Studio 2015 project.</em></p>\n<pre><code>class AAA{\n    public: template&lt;class T&gt; static T*  test(T* hqi){\n        return hqi;\n    }\n};\nclass TTT3{ \n    public: int d;   //In real case, it is some class, but same error nonetheless.\n    decltype(AAA::test(&amp;d)) dfd=AAA::test(&amp;d);  //&lt;-- error only Visual C++\n};\nint main(){\n    int b;\n    decltype(AAA::test(&amp;b)) dfd=AAA::test(&amp;b);  //OK for boths\n}\n</code></pre>\n<blockquote>\n<p id=\"so_43706852_43706852_0\">'T *AAA::test(T *)': could not deduce template argument for 'T <em>' from\n  'int TTT3::</em> '</p>\n</blockquote>\n<p><strong>Question</strong> </p>\n<ul>\n<li>Why?  Is my code wrong? - I don't think so.</li>\n<li>How to make it compile in Visual C++?  I need it.</li>\n</ul>\n", "Tags": "<templates><visual-c++><c++14><decltype><template-deduction>", "OwnerUserId": "3577745", "AnswerCount": "2"}, "43863930": {"ParentId": "43706852", "PostTypeId": "2", "CommentCount": "3", "Body": "<p>This is a Visual Studio specific bug. According to the standard:</p>\n<p><a href=\"http://eel.is/c++draft/expr.unary#op-4\" rel=\"nofollow noreferrer\">[expr.unary.op/4]</a></p>\n<blockquote>\n<p id=\"so_43706852_43863930_0\">A pointer to member is only formed when an explicit &amp; is used and its\n  operand is a qualified-id not enclosed in parentheses. [\u2009Note: That\n  is, the expression &amp;(qualified-id), where the qualified-id is enclosed\n  in parentheses, does not form an expression of type \u201cpointer to\n  member\u201d. Neither does qualified-id, because there is no implicit\n  conversion from a qualified-id for a non-static member function to the\n  type \u201cpointer to member function\u201d as there is from an lvalue of\n  function type to the type \u201cpointer to function\u201d ([conv.func]). <strong>Nor is\n  &amp;unqualified-id a pointer to member, even within the scope of the\n  unqualified-id's class.</strong> \u2014\u2009end note\u2009]</p>\n</blockquote>\n<p>The text in bold is what VC++ doesn't do properly inside decltype for whatever reason. Since hoping that Microsoft will fix it is a fools hope, another workaround you can do is to add the following overload:</p>\n<pre><code>template&lt;class C, typename T&gt;\nstatic T* test(T C::*);\n</code></pre>\n<p><kbd><a href=\"http://rextester.com/VBVXU95281\" rel=\"nofollow noreferrer\">Live Example</a></kbd></p>\n<p>Possibly in a <code>#ifdef/#endif</code> block that checks for VC++. Not defining it prevents it being picked silently outside of an unevaluated context such as a decltype, albeit with only a link time error.</p>\n", "OwnerUserId": "817643", "LastEditorUserId": "817643", "LastEditDate": "2017-05-09T08:04:08.813", "Id": "43863930", "Score": "1", "CreationDate": "2017-05-09T07:38:41.787", "LastActivityDate": "2017-05-09T08:04:08.813"}, "43708066": {"ParentId": "43706852", "CommentCount": "1", "Body": "<p>This doesn't look valid to me because the first <code>&amp;d</code> in</p>\n<pre><code>decltype(AAA::test(&amp;d)) dfd=AAA::test(&amp;d);\n</code></pre>\n<p>is an implicit use of <code>this</code> outside of the member initializer.  I can't find any exception in the Standard making an implicit use of <code>this</code> inside <code>decltype</code> valid, plus all three major compilers complain if you replace the <code>&amp;d</code> with explicit <code>&amp;this-&gt;d</code>.</p>\n<p>Unfortunately, I don't see any easy way around this, unless you substitute the actual type of <code>d</code> or make a typedef for it.</p>\n", "OwnerUserId": "459640", "PostTypeId": "2", "Id": "43708066", "Score": "1", "CreationDate": "2017-04-30T15:30:10.140", "LastActivityDate": "2017-04-30T15:30:10.140"}, "bq_ids": {"n4140": {"so_43706852_43863930_0": {"section_id": 6067, "quality": 0.8793103448275862, "length": 51}}, "n3337": {"so_43706852_43863930_0": {"section_id": 5835, "quality": 0.8793103448275862, "length": 51}}, "n4659": {"so_43706852_43863930_0": {"section_id": 7563, "quality": 0.8793103448275862, "length": 51}}}});