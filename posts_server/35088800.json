post_cb({"bq_ids": {"n4140": {"so_35088800_35088800_0": {"length": 18, "quality": 0.75, "section_id": 2208}}, "n3337": {"so_35088800_35088800_0": {"length": 18, "quality": 0.75, "section_id": 2196}}, "n4659": {"so_35088800_35088800_0": {"length": 18, "quality": 0.75, "section_id": 2481}}}, "35088800": {"ViewCount": "759", "Body": "<p>While libstdc++ does not, libc++ does follow <a href=\"https://stackoverflow.com/a/35020134/2642059\">the standard which states</a> that passing <code>ios_base::failbit</code> to <a href=\"http://en.cppreference.com/w/cpp/io/basic_ios/exceptions\" rel=\"nofollow noreferrer\"><code>basic_istream::exceptions</code></a> has no effect on formatted input. For example this code:</p>\n<pre><code>istringstream is{\"ASD\"};    \ndouble foo;\n\nis.exceptions(istream::failbit);\n\ntry {\n    is &gt;&gt; foo;\n    cout &lt;&lt; foo &lt;&lt; endl;\n} catch(ios_base::failure&amp; fail) {\n    cout &lt;&lt; \"ouch\\n\";\n}\n</code></pre>\n<p>Would result in:</p>\n<ul>\n<li><a href=\"http://coliru.stacked-crooked.com/a/c7b2a1560cc426b1\" rel=\"nofollow noreferrer\">\"ouch\" on libstdc++</a></li>\n<li><a href=\"http://coliru.stacked-crooked.com/a/23341dc0ffa0b22a\" rel=\"nofollow noreferrer\">\"0\" on libc++</a></li>\n</ul>\n<p>My reading of <a href=\"http://cplusplus.github.io/LWG/lwg-active.html#2349\" rel=\"nofollow noreferrer\">LWG2349</a> is that it would cause <code>basic_istream</code> to not throw on any formatted input.</p>\n<p>For example LWG2349 proposes a change to the standard's 27.7.2.3 [istream]/1 which was cited with reference to <a href=\"https://llvm.org/bugs/show_bug.cgi?id=15949\" rel=\"nofollow noreferrer\">the invalidation of a bug that would have made libc++ behave like libstdc++</a>. The change is in bold and strike through below:</p>\n<blockquote>\n<p id=\"so_35088800_35088800_0\">If an exception <strong>, other than the ones thrown from <code>clear()</code>, if any,</strong> is thrown during input then <code>ios::badbit</code> is turned on in <code>*this</code>\u2019s error state. <strike>(Exceptions thrown from <code>basic_ios&lt;&gt;::clear()</code> are not caught or rethrown.)</strike> If <code>(exceptions()&amp;badbit) != 0</code> then the exception is rethrown.</p>\n</blockquote>\n<p><a href=\"http://chat.stackoverflow.com/rooms/101900/discussion-between-jonathan-mee-and-t-c\">I understand that <code>basic_istream::clear</code> is what throws in reaction to bad formatted input</a> so am I misreading LWG2349 or is it in fact going to stop <code>basic_istream</code> from throwing any errors?</p>\n", "Title": "What Effect Would LWG2349 Have?", "CreationDate": "2016-01-29T16:01:33.600", "LastActivityDate": "2016-01-29T16:54:39.210", "CommentCount": "0", "LastEditDate": "2017-05-23T12:00:35.347", "PostTypeId": "1", "LastEditorUserId": "-1", "Id": "35088800", "Score": "4", "OwnerUserId": "2642059", "Tags": "<c++><exception><istream><libstdc++><libc++>", "AnswerCount": "1"}, "35089910": {"Id": "35089910", "PostTypeId": "2", "Body": "<p>The point of the language excluding exceptions \"<em>thrown from <code>clear()</code></em>\" is to ensure that <em>if</em> <code>clear()</code> throws, because an input function has called <code>clear(failbit)</code> <em>and</em> <code>(exceptions() &amp; failbit) != 0</code>, then badbit is not set as a result. <code>clear()</code> will continue to throw in that case, it just will not set badbit.</p>\n<p>As described in the commentary to LWG2349, the intention is that badbit is set when an exception is thrown from user code:</p>\n<blockquote>\n<p id=\"so_35088800_35089910_0\">PJ and Matt both agree that the intention (of badbit + rethrow) is \"to signify an exception arising in user code, not the iostreams package\".</p>\n</blockquote>\n<p>Now, when can an exception be thrown by \"user code\" but within the iostreams machinery? One example would be by the locale getters:</p>\n<pre><code>struct my_get : std::num_get&lt;char&gt; {\n    using iter_type = std::istreambuf_iterator&lt;char&gt;;\n    iter_type do_get(iter_type, iter_type, std::ios_base&amp;, std::ios_base::iostate&amp;, bool&amp;) const override {\n        throw std::logic_error{\"my_get::do_get\"};\n    }\n};\nint main() {\n    std::istringstream iss;\n    iss.imbue({std::locale{}, new my_get});\n    iss.exceptions(std::ios_base::failbit | std::ios_base::badbit);\n    try {\n        bool b;\n        iss &gt;&gt; b;\n    } catch (std::exception&amp; ex) {\n        std::cout &lt;&lt; ex.what() &lt;&lt; '\\n';\n    }\n    std::cout\n        &lt;&lt; ((iss.rdstate() &amp; std::ios_base::eofbit) ? \"eof \" : \"\")\n        &lt;&lt; ((iss.rdstate() &amp; std::ios_base::failbit) ? \"fail \" : \"\")\n        &lt;&lt; ((iss.rdstate() &amp; std::ios_base::badbit) ? \"bad \" : \"\")\n        &lt;&lt; '\\n';\n}\n</code></pre>\n<p>At present, gcc outputs:</p>\n<pre><code>eof fail\n</code></pre>\n<p>clang outputs:</p>\n<pre><code>eof fail\n</code></pre>\n<p>After LWG2349, the correct behavior is to set badbit and rethrow the exception:</p>\n<pre><code>my_get::do_get\neof bad\n</code></pre>\n", "LastActivityDate": "2016-01-29T16:54:39.210", "CommentCount": "15", "CreationDate": "2016-01-29T16:54:39.210", "ParentId": "35088800", "Score": "3", "OwnerUserId": "567292"}});