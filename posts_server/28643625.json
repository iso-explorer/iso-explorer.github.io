post_cb({"bq_ids": {"n4140": {"so_28643625_28643625_0": {"length": 27, "quality": 0.9, "section_id": 233}, "so_28643625_28645988_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 6005}}, "n3337": {"so_28643625_28643625_0": {"length": 27, "quality": 0.9, "section_id": 226}, "so_28643625_28645988_0": {"length": 10, "quality": 0.9090909090909091, "section_id": 5773}}, "n4659": {"so_28643625_28643625_0": {"length": 27, "quality": 0.9, "section_id": 242}, "so_28643625_28645988_0": {"length": 9, "quality": 0.8181818181818182, "section_id": 7504}}}, "28643625": {"ViewCount": "56", "Body": "<p>Class template can be either explicitly or implicitly intantiated and the class template is being instantiated implicitly if <code>N3797::14.7.1/1 [temp.inst]</code></p>\n<blockquote>\n<p id=\"so_28643625_28643625_0\">Unless a class template specialization has been explicitly\n  instantiated (14.7.2) or explicitly specialized (14.7.3), the class\n  template specialization is implicitly instantiated when the\n  specialization is referenced in a context that requires a\n  completely-defined object type or when the completeness of the class\n  type affects the semantics of the program.</p>\n</blockquote>\n<p>Let me provide an example when the context is not required the class type to be a completely defined:</p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;class T&gt;\nstruct A\n{\n    void foo();\n};\n\ntemplate&lt;class T&gt; void A&lt;T&gt;::foo(){ std::cout &lt;&lt; \"foo\" &lt;&lt; std::endl; }\n\nA&lt;int&gt;* a;\nint main(){ a -&gt; foo(); }\n</code></pre>\n<p><strong><a href=\"http://coliru.stacked-crooked.com/a/af916a81465947fc\" rel=\"nofollow\">DEMO</a></strong></p>\n<p>In that example the class template neither explicitly nor implicitly instantiated. So, we actually don't have the definition of the class <code>A&lt;int&gt;</code>. But despite the fact it works fine. Couldn't you explain that behavior.</p>\n", "AcceptedAnswerId": "28645988", "Title": "Why is a class template instantiated when it's ot required to be a completely object type?", "CreationDate": "2015-02-21T08:09:30.980", "Id": "28643625", "CommentCount": "2", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "LastActivityDate": "2015-02-21T12:50:36.160", "Score": "0", "Tags": "<c++><templates>", "AnswerCount": "2"}, "28643745": {"Id": "28643745", "PostTypeId": "2", "Body": "<p>See the example at <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" rel=\"nofollow\">14.7.1/4</a> which demonstrates that <code>a -&gt; foo();</code> is \"a context that requires a completely-defined object type\".</p>\n", "LastActivityDate": "2015-02-21T08:28:36.553", "CommentCount": "0", "CreationDate": "2015-02-21T08:28:36.553", "ParentId": "28643625", "Score": "0", "OwnerUserId": "1513411"}, "28645988": {"Id": "28645988", "PostTypeId": "2", "Body": "<p>[expr.ref]/p2, emphasis mine:</p>\n<blockquote>\n<p id=\"so_28643625_28645988_0\">For the second option (arrow) the first expression shall have pointer\n  to <strong>complete</strong> class type.</p>\n</blockquote>\n<p>Why do you think it's a context that doesn't require a completely-defined object type?</p>\n", "LastActivityDate": "2015-02-21T12:50:36.160", "CommentCount": "6", "CreationDate": "2015-02-21T12:50:36.160", "ParentId": "28643625", "Score": "0", "OwnerUserId": "2756719"}});