post_cb({"46506185": {"ParentId": "46505977", "CommentCount": "0", "Body": "<blockquote>\n<p id=\"so_46505977_46506185_0\">Because forward iterators requires that the reference type is of cv-T&amp;, however</p>\n</blockquote>\n<p>Incorrect. The standard (C++17, N4659, [forward.iterators]/1.3) says:</p>\n<blockquote>\n<p id=\"so_46505977_46506185_1\">if <code>X</code> is a mutable iterator, <code>reference</code> is a reference to <code>T</code> ; if <code>X</code> is a constant iterator, <code>reference</code> is a reference to const <code>T</code></p>\n</blockquote>\n<p>Rvalue references are a \"reference to <code>T</code>\". Therefore, they qualify. If they meant to exclude rvalue references, the standard would have said \"lvalue reference to <code>T</code>\".</p>\n<p>So it's perfectly valid for a ForwardIterator to return an rvalue reference.</p>\n", "OwnerUserId": "734069", "PostTypeId": "2", "Id": "46506185", "Score": "4", "CreationDate": "2017-09-30T19:13:38.330", "LastActivityDate": "2017-09-30T19:13:38.330"}, "bq_ids": {"n4140": {"so_46505977_46506185_1": {"section_id": 5573, "quality": 0.8888888888888888, "length": 8}}, "n3337": {"so_46505977_46506185_1": {"section_id": 5355, "quality": 0.8888888888888888, "length": 8}}, "n4659": {"so_46505977_46506185_1": {"section_id": 7020, "quality": 1.0, "length": 9}}}, "46505977": {"CommentCount": "4", "ViewCount": "35", "CreationDate": "2017-09-30T18:47:35.000", "LastActivityDate": "2017-09-30T19:13:38.330", "Title": "Iterator category of std::move_iterator", "AcceptedAnswerId": "46506185", "PostTypeId": "1", "Id": "46505977", "Score": "1", "Body": "<p>Does it make sense that the <code>std::move_iterator</code> adaptor just inherits the iterator category of the template parameter Iterator type?</p>\n<p>Because forward iterators requires that the reference type is of cv-<code>T&amp;</code>, however, for forward iterator templates, the <code>std::move_iterator&lt;It&gt;::reference</code> will be an r-value reference to the Iterator's value type (with the reference qualifiers preserved).</p>\n", "Tags": "<c++><iterator><c++14>", "OwnerUserId": "1794803", "AnswerCount": "1"}});