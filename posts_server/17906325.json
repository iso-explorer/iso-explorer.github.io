post_cb({"bq_ids": {"n4140": {"so_17906325_17906410_1": {"length": 9, "quality": 0.75, "section_id": 4297}}, "n3337": {"so_17906325_17906410_1": {"length": 9, "quality": 0.75, "section_id": 4138}}, "n4659": {"so_17906325_17906410_1": {"length": 7, "quality": 0.5833333333333334, "section_id": 4090}}}, "17906325": {"ViewCount": "3221", "Body": "<p>When I create an <code>unique_ptr</code> with <code>deleter</code>, it works:</p>\n<pre><code>std::unique_ptr&lt;Animal&lt;Cat&gt;, void(*)(Animal&lt;Cat&gt;*)&gt; ptr(new Animal&lt;Cat&gt;, [](Animal&lt;Cat&gt; *ls) {\n    delete ls;\n});\n</code></pre>\n<p>But, this code is throwing error:</p>\n<pre><code>std::unique_ptr&lt;Animal&lt;Cat&gt;, void(*)(Animal&lt;Cat&gt;*)&gt; ptr;\nptr = std::unique_ptr&lt;Animal&lt;Cat&gt;, void(*)(Animal&lt;Cat&gt;*)&gt;(new Animal&lt;Cat&gt;, [](Animal&lt;Cat&gt; *ls) {\n    delete ls;\n});\n</code></pre>\n<p>The error:</p>\n<pre><code>/usr/bin/../lib/c++/v1/memory:2561:13: error: static_assert failed \"unique_ptr constructed with null function pointer deleter\"\n                static_assert(!is_pointer&lt;deleter_type&gt;::value,\n                ^             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nnote: in instantiation of member function 'std::__1::unique_ptr&lt;Animal&lt;Cat&gt;, void (*)(Animal&lt;Cat&gt; *)&gt;::unique_ptr' requested here\n            std::unique_ptr&lt;Animal&lt;Cat&gt;, void(*)(Animal&lt;Cat&gt;*)&gt; ptr;\n                                                                ^\n</code></pre>\n<p>This is my compiler version:</p>\n<pre><code>Apple clang version 4.0 (tags/Apple/clang-421.0.60) (based on LLVM 3.1svn)\nTarget: x86_64-apple-darwin12.4.0\nThread model: posix\n</code></pre>\n<p>The Animal and Cat classes are trivial. <a href=\"http://ideone.com/7vgLPH\" rel=\"noreferrer\">This is the entire code</a>.</p>\n", "AcceptedAnswerId": "17906410", "Title": "unique_ptr is not getting init with default deleter", "CreationDate": "2013-07-28T08:15:02.623", "Id": "17906325", "CommentCount": "0", "LastEditDate": "2013-07-28T08:23:26.783", "PostTypeId": "1", "LastEditorUserId": "2492977", "LastActivityDate": "2013-07-28T08:44:27.680", "Score": "5", "OwnerUserId": "286094", "Tags": "<c++><c++11><smart-pointers>", "AnswerCount": "2"}, "17906410": {"Id": "17906410", "PostTypeId": "2", "Body": "<p>It as apparently not possible to default-construct a <code>unique_ptr</code> with a pointer type for a deleter. The <code>unique_ptr</code> constructors are detailed in \u00a720.7.1.2.1 [unique.ptr.single.ctor] which says, among other things:</p>\n<blockquote>\n<p id=\"so_17906325_17906410_0\"><code>constexpr unique_ptr() noexcept;</code></p>\n<p id=\"so_17906325_17906410_1\">4 <em>Remarks</em>: If this constructor is instantiated with a pointer type or reference type for the template\n  argument <code>D</code> [the deleter type], the program is ill-formed.</p>\n</blockquote>\n<p>Something similar to what you want that is standard conforming:</p>\n<pre><code>unique_ptr&lt;int, void(*)(int*)&gt; ptr{nullptr,[](int*p){delete p;}};\n// ...\nptr.reset(new int(42));\n</code></pre>\n", "LastEditorUserId": "923854", "LastActivityDate": "2013-07-28T08:34:50.867", "Score": "10", "CreationDate": "2013-07-28T08:26:37.373", "ParentId": "17906325", "CommentCount": "0", "OwnerUserId": "923854", "LastEditDate": "2013-07-28T08:34:50.867"}, "17906532": {"Id": "17906532", "PostTypeId": "2", "Body": "<p>After reading Casey's answer above, I changed my code to use good old Functors instead of lambda to make it work.</p>\n<p>This is my solution:</p>\n<pre><code>struct Deleter {\n    void operator()(Animal&lt;Cat&gt;* ls) {\n        delete ls;\n    }\n};\n\nint main() {\n    std::unique_ptr&lt;Animal&lt;Cat&gt;, Deleter&gt; ptr;\n    ptr = std::unique_ptr&lt;Animal&lt;Cat&gt;, Deleter&gt;(new Animal&lt;Cat&gt;);\n    return 0;\n}\n</code></pre>\n", "LastActivityDate": "2013-07-28T08:44:27.680", "CommentCount": "5", "CreationDate": "2013-07-28T08:44:27.680", "ParentId": "17906325", "Score": "10", "OwnerUserId": "286094"}});