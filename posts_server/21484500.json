post_cb({"bq_ids": {"n4140": {"so_21484500_21484617_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 5518}, "so_21484500_21484617_1": {"length": 34, "quality": 0.6938775510204082, "section_id": 5518}}, "n3337": {"so_21484500_21484617_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 5304}, "so_21484500_21484617_1": {"length": 34, "quality": 0.6938775510204082, "section_id": 5304}}, "n4659": {"so_21484500_21484617_0": {"length": 8, "quality": 0.8888888888888888, "section_id": 6953}, "so_21484500_21484617_1": {"length": 34, "quality": 0.6938775510204082, "section_id": 6953}}}, "21484500": {"ViewCount": "259", "Body": "<p>As it is known, declaring <code>extern \"C\"</code> to C++ function makes its name have C linkage, enabling C code to link.</p>\n<p>My question is - are there other programming languages we can make C++ function names have linkage to, something like <code>extern \"Lisp\"</code> or <code>extern \"FORTRAN\"</code>?</p>\n<p>If not, why? What is the internal structure behind the <code>\"C\"</code>, that makes the limitations?</p>\n<p>What are the alternatives?</p>\n", "AcceptedAnswerId": "21484617", "Title": "C++'s extern-\"C\" functionality to languages other than C", "CreationDate": "2014-01-31T16:03:08.727", "Id": "21484500", "CommentCount": "4", "PostTypeId": "1", "LastActivityDate": "2016-04-30T19:00:57.473", "Score": "4", "OwnerUserId": "2777359", "Tags": "<c++><linkage><extern-c>", "AnswerCount": "1"}, "21484617": {"Id": "21484617", "PostTypeId": "2", "Body": "<p>The C++ standard, 7.5.2 dcl.link, says:</p>\n<blockquote>\n<p id=\"so_21484500_21484617_0\">Linkage between C++ and non-C++ code fragments can be achieved using a\n  linkage-specification:</p>\n<pre><code>linkage-specification:\n    extern string-literal { declaration-seqopt}\n    extern string-literal declaration\n</code></pre>\n<p id=\"so_21484500_21484617_1\">The string-literal indicates the required language linkage. This\n  International Standard specifies the semantics for the string-literals\n  \"C\" and \"C++\". Use of a string-literal other than \"C\" or \"C++\" is\n  conditionally supported, with implementation-defined semantics. [ Note:\n  Therefore, a linkage-specification with a string literal that is\n  unknown to the implementation requires a diagnostic. \u2014end note ] [\n  Note: It is recommended that the spelling of the string-literal be\n  taken from the document defining that language. For example, Ada (not\n  ADA) and Fortran or FORTRAN, depending on the vintage. \u2014end note ]</p>\n</blockquote>\n<p>So in principle, implementers can choose to support other linkage specifications than C and C++. </p>\n<p>In practise however, on all modern platforms, C linkage is the lowest common denominator. As a general rule, these days, binary interop for languages other than C uses C linkage. On the widely used modern platforms, you will not see anything other than C and C++ linkage.</p>\n", "LastEditorUserId": "505088", "LastActivityDate": "2014-01-31T16:25:53.433", "Score": "2", "CreationDate": "2014-01-31T16:07:59.310", "ParentId": "21484500", "CommentCount": "8", "LastEditDate": "2014-01-31T16:25:53.433", "OwnerUserId": "505088"}});