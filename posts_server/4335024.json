post_cb({"4335024": {"ViewCount": "1070", "Body": "<p>My understanding, for a long time now, was that <em>a C++ translation unit</em>, after the preprocessor has run, <em>is a sequence of declarations</em> (let me remind that any definition is also a declaration).</p>\n<p>Many people have argued with this statement but no one has ever given a counterexample. But I myself found this example which troubles me:</p>\n<pre><code>int x;       //declaration\n\n;            // ??? EMPTY DECLARATION?\n\nint main()   //dec\n{            //la\n}            //ration\n</code></pre>\n<p>This compiles fine with MSVC and online comeau. I know the standard defines an <strong><em>empty statement</em></strong> but I never heard of an empty declaration. So, I see three options: </p>\n<ul>\n<li>My understanding is correct and the standard defines an empty declaration</li>\n<li>My understanding is correct but the standard doesn't define empty declarations and the above translation is ill-formed</li>\n<li>My understanding is incorrect, i.e. a C++ TU is not a sequence of declarations</li>\n</ul>\n<p>Please help me dissolve my doubts. Thanks </p>\n", "AcceptedAnswerId": "4337554", "Title": "Grammar of a C++ Translation Unit", "CreationDate": "2010-12-02T12:35:30.887", "Id": "4335024", "CommentCount": "0", "LastEditDate": "2010-12-02T12:58:58.577", "PostTypeId": "1", "LastEditorUserId": "469935", "LastActivityDate": "2010-12-02T17:10:54.793", "Score": "8", "OwnerUserId": "469935", "Tags": "<c++><grammar><declaration>", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_4335024_4337554_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5381}}, "n3337": {"so_4335024_4337554_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 5175}}, "n4659": {"so_4335024_4337554_0": {"length": 17, "quality": 0.9444444444444444, "section_id": 6805}}}, "4335276": {"Id": "4335276", "PostTypeId": "2", "Body": "<p><strike>Your understanding is correct and the standard (or at least Stroustrup) does define an empty declaration</strike>.</p>\n<p><strong>EDIT</strong>: It seems this answer is wrong (there's a semantic rule on the standard - but not on the book, as far as I can tell - that prohibits both <code>decl-specified-seq</code> and <code>init-declarator-list</code> of being empty at the same time). See Charles Bailey's answer.</p>\n<hr>\n<p>n \"The C++ Programming Language\", appendix A, section A.4:</p>\n<blockquote>\n<p id=\"so_4335024_4335276_0\">A program is a collection of <code>translation-unit</code>s (...). A <code>translation-unit</code>, often called a <em>source file</em>, is a sequence of <code>declaration</code>s:</p>\n</blockquote>\n<pre><code>translation-unit:\n   declaration-seq_opt\n</code></pre>\n<p><code>opt</code> means the production is optional. In this rule, it means an empty translation unit is valid.</p>\n<p>Section A.7:</p>\n<pre><code>declaration-seq:\n    declaration\n    declaration-seq declaration\n\ndeclaration:\n    block-declaration\n    (...)\n\nblock-declaration:\n    simple-declaration\n    (...)\n\nsimple-declaration:\n    decl-specified-seq_opt init-declarator-list_opt ;\n</code></pre>\n<p>So <code>declaration-seq</code> is a sequence of at least one <code>declaration</code>. A <code>declaration</code> can, amongst other things, be a <code>block-declaration</code>, which in turn produces <code>simple-declaration</code>. As both the <code>decl-specified-seq</code> and <code>init-declarator-list</code> non-literals are optional, <code>;</code> is a valid declaration.</p>\n</hr>", "LastEditorUserId": "106281", "LastActivityDate": "2010-12-02T17:10:54.793", "Score": "6", "CreationDate": "2010-12-02T13:02:52.257", "ParentId": "4335024", "CommentCount": "2", "OwnerUserId": "106281", "LastEditDate": "2010-12-02T17:10:54.793"}, "4337554": {"Id": "4337554", "PostTypeId": "2", "Body": "<p>An <em>empty-declaration</em> is allowed in (the current draft of) C++0x at file scope (and namespace scope and other places where a declaration is allowed) and it is just a semicolon. It is a standalone grammatical entity.</p>\n<p>In C++03 a lone semicolon is not allowed where only a declaration is expected. Although it might appear that a <em>simple-declaration</em> might be able to reduce to just a semicolon an explicit rule disallows this.</p>\n<p>7 [dcl.dcl] / 3</p>\n<blockquote>\n<p id=\"so_4335024_4337554_0\">In a simple-declaration, the optional <em>init-declarator-list</em> can be omitted only when declaring a class (clause 9) or enumeration (7.2), that is, when the <em>decl-specifier-seq</em> contains either a <em>class-specifier</em>, an <em>elaborated-type-specifier</em> with a <em>class-key</em> (9.1), or an <em>enum-specifier</em>.</p>\n</blockquote>\n<p>In short this implies that the <em>init-declarator-list</em> can be omitted only when the <em>decl-specifier-seq</em> is not omitted.</p>\n", "LastEditorUserId": "19563", "LastActivityDate": "2010-12-02T16:57:28.067", "Score": "4", "CreationDate": "2010-12-02T16:52:14.017", "ParentId": "4335024", "CommentCount": "5", "OwnerUserId": "19563", "LastEditDate": "2010-12-02T16:57:28.067"}});