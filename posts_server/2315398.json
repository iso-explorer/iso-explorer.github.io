post_cb({"2315411": {"ParentId": "2315398", "CommentCount": "2", "Body": "<p>In C++ language it is illegal to attach a non-const reference to an rvalue, while it is perfectly OK to attach a const reference to an rvalue. For example, this is legal</p>\n<pre><code>const int&amp; r = 5;\n</code></pre>\n<p>while this is not</p>\n<pre><code>int &amp;r = 5; // ERROR\n</code></pre>\n<p>A temporary object of type <code>A</code> returned by the expression <code>A()</code> is an rvalue, so the above rule applies in your case as well.</p>\n", "OwnerUserId": "187690", "PostTypeId": "2", "Id": "2315411", "Score": "1", "CreationDate": "2010-02-23T00:45:12.837", "LastActivityDate": "2010-02-23T00:45:12.837"}, "39835100": {"ParentId": "2315398", "PostTypeId": "2", "CommentCount": "0", "Body": "<p>Because the standard says so:</p>\n<blockquote>\n<p id=\"so_2315398_39835100_0\">\u00a78.5.3.5 ... Otherwise, the reference shall be an lvalue reference to a non-volatile const type ...</p>\n</blockquote>\n<p>However, if you want it very much, you can get it:</p>\n<pre><code>#include &lt;iostream&gt;\nint main()\n{\n  const int &amp; cr=5;\n  int &amp; r=const_cast&lt;int &amp;&gt;(cr);\n  r=6;\n  std::cout&lt;&lt;r;\n}\n// outputs 6 with c++/clang++, Debian 8, amd64\n</code></pre>\n<p>But be aware that the supposed constant cr is not const any more, too, and you incur undefined behavior. (\u00a71.9 (4))</p>\n<p>As suggested by the above code, there is no technical reason for the difference. Rather, the designers had nightmares about what users would do with non-const references to temporaries.  </p>\n", "OwnerUserId": "6724807", "LastEditorUserId": "6724807", "LastEditDate": "2016-10-10T16:03:46.107", "Id": "39835100", "Score": "0", "CreationDate": "2016-10-03T15:24:10.087", "LastActivityDate": "2016-10-10T16:03:46.107"}, "2315419": {"ParentId": "2315398", "CommentCount": "0", "Body": "<p>The terminology on this is a little confusing; you may want to research them a bit further.  Here's the short answer though:</p>\n<p>You are assigning a temporary object (the result of calling the class's constructor) to a variable.  A temporary object is an R-value.  You can't assign an R-value to a non-const reference.</p>\n<p>You are allowed to assign an R-value to a const reference, although the rationale for allowing it is pretty obscure.</p>\n", "OwnerUserId": "279130", "PostTypeId": "2", "Id": "2315419", "Score": "3", "CreationDate": "2010-02-23T00:46:47.133", "LastActivityDate": "2010-02-23T00:46:47.133"}, "2315418": {"ParentId": "2315398", "PostTypeId": "2", "CommentCount": "4", "Body": "<p>Non-const references must be initialised with l-values. If you could initialise them with temporaries, then what would the following do?</p>\n<pre><code>int&amp; foo = 5;\nfoo = 6; // ?!\n</code></pre>\n<p><code>const</code> references have the special property that they extend the life of the referee, and since they are <code>const</code>, there is no possibility that you'll try to modify something that doesn't sit in memory. For example:</p>\n<pre><code>const int&amp; foo = 5;\nfoo = 6; // not allowed, because foo is const.\n</code></pre>\n<p>Remember that references actually have to refer to something, not just temporary variables. For example, the following is valid:</p>\n<pre><code>int foo = 5;\nint&amp; bar = foo;\nbar = 6;\nassert(foo == 6);\n</code></pre>\n", "OwnerUserId": "235825", "LastEditorUserId": "235825", "LastEditDate": "2010-02-23T01:24:46.133", "Id": "2315418", "Score": "14", "CreationDate": "2010-02-23T00:46:32.883", "LastActivityDate": "2010-02-23T01:24:46.133"}, "2315398": {"CommentCount": "0", "AcceptedAnswerId": "2315418", "PostTypeId": "1", "LastEditorUserId": "235825", "CreationDate": "2010-02-23T00:41:40.213", "LastActivityDate": "2016-10-10T16:03:46.107", "LastEditDate": "2010-03-17T22:04:01.763", "ViewCount": "625", "FavoriteCount": "1", "Title": "Reference initialization in C++", "Id": "2315398", "Score": "9", "Body": "<p>Can anybody explain to me why there is a difference between these two statements?</p>\n<pre><code>class A{};\n\nconst A&amp; a = A();         // correct \n\nA&amp; b = A();               // wrong\n</code></pre>\n<p>It says \ninvalid initialization of non-const reference of type <code>A&amp;</code> from a temporary of type <code>A</code></p>\n<p>Why does <code>const</code> matter here?</p>\n", "Tags": "<c++><reference><lvalue><rvalue><const-reference>", "OwnerUserId": "233254", "AnswerCount": "5"}, "bq_ids": {"n4140": {"so_2315398_39835100_0": {"section_id": 3321, "quality": 0.875, "length": 7}}, "n3337": {"so_2315398_39835100_0": {"section_id": 3191, "quality": 0.875, "length": 7}}, "n4659": {"so_2315398_39835100_0": {"section_id": 4087, "quality": 0.875, "length": 7}}}, "2315406": {"ParentId": "2315398", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>For a temporary/rvalue, you can only have a const reference.</p>\n<p>You can have a non-const reference to a non-temporary/lvalue. </p>\n<pre><code>A a;\nA&amp; b = a;\n</code></pre>\n<p>I believe the reason why is to reinforce the fact that a rvalue is temporary as there is little value in being able to modify something that is going to disappear momentarily.</p>\n", "OwnerUserId": "29809", "LastEditorUserId": "29809", "LastEditDate": "2010-02-23T01:05:39.617", "Id": "2315406", "Score": "1", "CreationDate": "2010-02-23T00:43:27.930", "LastActivityDate": "2010-02-23T01:05:39.617"}});