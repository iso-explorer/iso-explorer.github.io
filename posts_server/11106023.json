post_cb({"11106023": {"CommentCount": "2", "ViewCount": "574", "PostTypeId": "1", "LastEditorUserId": "150522", "CreationDate": "2012-06-19T17:15:55.040", "LastActivityDate": "2012-06-19T17:53:29.747", "Title": "Unwanted C Preprocessor Macro Expansion", "AcceptedAnswerId": "11106133", "LastEditDate": "2012-06-19T17:38:40.203", "Id": "11106023", "Score": "6", "Body": "<p>I'm using a unit test framework that relies on a <code>REQUIRE</code> macro for performing assertions. </p>\n<p>Simplified, the macro works like this:</p>\n<pre><code>#define REQUIRE( expr ) INTERNAL_REQUIRE( expr, \"REQUIRE\" )\n</code></pre>\n<p>Which is defined similar to this:</p>\n<pre><code>#define INTERNAL_REQUIRE( expr, macroName ) \\\nPerformAssertion( macroName, #expr, expr );\n</code></pre>\n<p><code>PerformAssertion</code>'s first two parameters are of the type: <code>const char*</code>. The reason for the second parameter (<code>#expr</code>) is so the exact expression that was asserted can be logged. This is where the issue lies. The preprocessor expands the expression before it is passed as a <code>const char *</code>, so it's not the same expression that was originally asserted.</p>\n<p>For instance:</p>\n<pre><code>REQUIRE( foo != NULL );\n</code></pre>\n<p>Would result in this call:</p>\n<pre><code>PerformAssertion( \"REQUIRE\", \"foo != 0\", foo != 0 );\n</code></pre>\n<p>As you can see, the expression is partially expanded, e.g. the expression <code>foo != NULL</code> appears in the log as <code>foo != 0</code>.  The <code>NULL</code> (which is a macro defined to be <code>0</code>) was expanded by the C preprocessor before building the assertions message text. Is there a way I can ignore or bypass the expansion for the message text?</p>\n<p>EDIT: Here's the solution, for anyone curious:</p>\n<pre><code>#define REQUIRE( expr ) INTERNAL_REQUIRE( expr, #expr, \"REQUIRE\" )\n\n#define INTERNAL_REQUIRE( expr, exprString, macroName ) \\\nPerformAssertion( macroName, exprString, expr );\n</code></pre>\n", "Tags": "<c++><macros><c-preprocessor>", "OwnerUserId": "150522", "AnswerCount": "2"}, "11106133": {"ParentId": "11106023", "CommentCount": "1", "Body": "<p>Try making the stringifying before the call to the internal require. Your problem is that it is passed to internal require in the second expansion which expands NULL. If you make the stringifying happen before that, e.g. In the require macro, it will not expand the NULL.</p>\n", "OwnerUserId": "362589", "PostTypeId": "2", "Id": "11106133", "Score": "5", "CreationDate": "2012-06-19T17:23:13.917", "LastActivityDate": "2012-06-19T17:23:13.917"}, "11106452": {"ParentId": "11106023", "PostTypeId": "2", "CommentCount": "1", "Body": "<p>Here is what's going on: since you macro where the \"stringization\" operator <code>#</code> is applied is second-level, the sequence of operations works as follows:</p>\n<ul>\n<li>Preprocessor identifies the arguments of <code>REQUIRE(NULL)</code> and performs <a href=\"http://port70.net/~nsz/c/c99/n1256.html#6.10.3.1\" rel=\"nofollow\"><em>argument substitution</em></a> as per C 6.10.3.1. At this point, the replacement looks like <code>INTERNAL_REQUIRE( 0, \"REQUIRE\" )</code>, because <code>NULL</code> is expanded as <code>0</code>.</li>\n<li>Preprocessor continues expanding the macro chain with <code>INTERNAL_REQUIRE</code>; at this point, the fact that the macro has been called with <code>NULL</code> is lost: as far as the preprocessor is concerned, the expression passed to <code>INTERNAL_REQUIRE</code> is <code>0</code>.</li>\n</ul>\n<p>A key to solving this problem is in this paragraph from the standard:</p>\n<blockquote>\n<p id=\"so_11106023_11106452_0\">A parameter in the replacement list, unless preceded by a # or ## preprocessing token or followed by a ## preprocessing token (see below), is replaced by the corresponding argument after all macros contained therein have been expanded.</p>\n</blockquote>\n<p>This means that if you would like to capture the exact expression, you need to do it in the very first level of the macro expansion.</p>\n", "OwnerUserId": "335858", "LastEditorUserId": "335858", "LastEditDate": "2012-06-19T17:53:29.747", "Id": "11106452", "Score": "2", "CreationDate": "2012-06-19T17:45:47.847", "LastActivityDate": "2012-06-19T17:53:29.747"}, "bq_ids": {"n4140": {"so_11106023_11106452_0": {"section_id": 523, "quality": 1.0, "length": 22}}, "n3337": {"so_11106023_11106452_0": {"section_id": 514, "quality": 1.0, "length": 22}}, "n4659": {"so_11106023_11106452_0": {"section_id": 544, "quality": 1.0, "length": 22}}}});