post_cb({"29363532": {"CommentCount": "5", "ViewCount": "245", "PostTypeId": "1", "LastEditorUserId": "802362", "CreationDate": "2015-03-31T08:00:34.350", "LastActivityDate": "2015-03-31T08:41:06.773", "Title": "How to use SFINAE on three methods with Intel C++ Compiler (ICC)?", "AcceptedAnswerId": "29364222", "LastEditDate": "2015-03-31T08:29:42.963", "Id": "29363532", "Score": "1", "Body": "<p>I'm trying to add support for icc on one of my projects, but I have some issues with SFINAE, when there are more than two methods. Here is a bare simple example of the problem: </p>\n<pre><code>#include &lt;iostream&gt;\n\ntemplate&lt;std::size_t Selector&gt;\nstruct impl {\n    template&lt;bool Enable = true, typename std::enable_if&lt;Selector == 1 &amp;&amp; Enable, int&gt;::type = 0&gt;\n    static void apply(){\n        std::cout &lt;&lt; \"First selector\" &lt;&lt; std::endl;\n    }\n\n    template&lt;bool Enable = true, typename std::enable_if&lt;Selector == 2 &amp;&amp; Enable, int&gt;::type = 0&gt;\n    static void apply(){\n        std::cout &lt;&lt; \"Second selector\" &lt;&lt; std::endl;\n    }\n\n    template&lt;bool Enable = true, typename std::enable_if&lt;Selector == 3 &amp;&amp; Enable, int&gt;::type = 0&gt;\n    static void apply(){\n        std::cout &lt;&lt; \"Big selector\" &lt;&lt; std::endl;\n    }\n};\n\nint main(){\n    impl&lt;1&gt;::apply();\n    impl&lt;2&gt;::apply();\n    impl&lt;3&gt;::apply();\n\n    return 0;\n}\n</code></pre>\n<p>This works like a charm with g++ and clang++, but fails to compile with icc: </p>\n<pre><code>test.cpp(16): error: invalid redeclaration of member function template \"void impl&lt;Selector&gt;::apply() [with Selector=1UL]\" (declared at line 11)\n      static void apply(){\n                  ^\n          detected during instantiation of class \"impl&lt;Selector&gt; [with Selector=1UL]\" at line 22\n\ntest.cpp(11): error: invalid redeclaration of member function template \"void impl&lt;Selector&gt;::apply() [with Selector=3UL]\" (declared at line 6)\n      static void apply(){\n                  ^\n          detected during instantiation of class \"impl&lt;Selector&gt; [with Selector=3UL]\" at line 24\n\ncompilation aborted for test.cpp (code 2)\n</code></pre>\n<p>Is there a workaround for this with icc ? I'd like to avoid changing too much code, I have this problem in several places of my project. </p>\n<p>I'm using icc 16.0.2.164. </p>\n<p>Thanks</p>\n", "Tags": "<c++><templates><c++11><icc>", "OwnerUserId": "802362", "AnswerCount": "2"}, "29363988": {"ParentId": "29363532", "CommentCount": "0", "Body": "<p>Specialization is a solution:</p>\n<pre><code>template&lt;std::size_t Selector&gt;\nstruct impl {\n    static void apply();\n};\n\ntemplate&lt;&gt;\nvoid impl&lt;1&gt;::apply(){\n    std::cout &lt;&lt; \"First selector\" &lt;&lt; std::endl;\n}\n\ntemplate&lt;&gt;\nvoid impl&lt;2&gt;::apply(){\n    std::cout &lt;&lt; \"Second selector\" &lt;&lt; std::endl;\n}\n\ntemplate&lt;&gt;\nvoid impl&lt;3&gt;::apply(){\n    std::cout &lt;&lt; \"Big selector\" &lt;&lt; std::endl;\n}\n</code></pre>\n", "OwnerUserId": "2684539", "PostTypeId": "2", "Id": "29363988", "Score": "2", "CreationDate": "2015-03-31T08:26:19.063", "LastActivityDate": "2015-03-31T08:26:19.063"}, "bq_ids": {"n4140": {"so_29363532_29364222_0": {"section_id": 175, "quality": 1.0, "length": 11}}, "n3337": {"so_29363532_29364222_0": {"section_id": 169, "quality": 1.0, "length": 11}}, "n4659": {"so_29363532_29364222_0": {"section_id": 180, "quality": 0.8181818181818182, "length": 9}}}, "29364222": {"ParentId": "29363532", "CommentCount": "2", "Body": "<p>For the code shown in the question, explicitly specializing the member function, as shown in @Jarod42's answer, is probably the simplest.</p>\n<p>When SFINAE'ing a class template member function based on parameters of the class template, getting the code correct can be tricky. [temp.res]/p8:</p>\n<blockquote>\n<p id=\"so_29363532_29364222_0\">If no valid specialization can be generated for a template, and that\n  template is not instantiated, the template is ill-formed, no\n  diagnostic required.</p>\n</blockquote>\n<p>The trick is to have the SFINAE expression depend on parameters of the member function template:</p>\n<pre><code>template&lt;std::size_t Selector&gt;\nstruct impl {\n    template&lt;std::size_t S = Selector, typename std::enable_if&lt;S == 1, int&gt;::type = 0&gt;\n    static void apply(){\n        std::cout &lt;&lt; \"First selector\" &lt;&lt; std::endl;\n    }\n\n    template&lt;std::size_t S = Selector, typename std::enable_if&lt;S == 2, int&gt;::type = 0&gt;\n    static void apply(){\n        std::cout &lt;&lt; \"Second selector\" &lt;&lt; std::endl;\n    }\n\n    template&lt;std::size_t S = Selector, typename std::enable_if&lt;S == 3, int&gt;::type = 0&gt;\n    static void apply(){\n        std::cout &lt;&lt; \"Big selector\" &lt;&lt; std::endl;\n    }\n};\n</code></pre>\n<p>Note that each of the above <code>apply()</code>s has one valid specialization.</p>\n", "OwnerUserId": "2756719", "PostTypeId": "2", "Id": "29364222", "Score": "1", "CreationDate": "2015-03-31T08:41:06.773", "LastActivityDate": "2015-03-31T08:41:06.773"}});