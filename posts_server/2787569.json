post_cb({"2787613": {"ParentId": "2787569", "CommentCount": "1", "Body": "<p>You can just create two different constructors:</p>\n<pre><code>T(const T&amp;)\nT(const T&amp;,double)\n</code></pre>\n<p>However, what you have is permitted as a copy constructor.</p>\n<p>On a side note, I have discovered that it is generally not a good idea to use default parameters in C++, and it is instead much better to use overloads, where the ones with fewer parameters invoke the ones with more parameters, using default values (of course that isn't possible with constructors in ISO C++ 2003, but delegating constructors are permitted in ISO C++ 201x). The reason for this is that default values give your functions different actual signatures than their apparent behavior, making it somewhat difficult/painful when taking the pointers to the functions. By providing overloads, function pointers of each possible invocation type can be taken without requiring any sort of \"binding\" mechanism to make it work.</p>\n", "OwnerUserId": "136540", "PostTypeId": "2", "Id": "2787613", "Score": "6", "CreationDate": "2010-05-07T09:48:31.887", "LastActivityDate": "2010-05-07T09:48:31.887"}, "2787594": {"ParentId": "2787569", "CommentCount": "0", "Body": "<p>Yes. </p>\n<p>\u00a7[class.copy]/2:</p>\n<blockquote>\n<p id=\"so_2787569_2787594_0\">A non-template constructor for class <code>X</code> is a <em>copy</em> constructor if its first parameter is of type <code>X&amp;</code>, <code>const X&amp;</code>, <code>volatile X&amp;</code> or <code>const volatile X&amp;</code>, and either there are no other parameters <strong>or else all other parameters have default arguments</strong> [ <em>Example:</em> <code>X::X(const X&amp;)</code> and <code>X::X(X&amp;,int=1)</code> are copy constructors.</p>\n</blockquote>\n", "OwnerUserId": "224671", "PostTypeId": "2", "Id": "2787594", "Score": "25", "CreationDate": "2010-05-07T09:44:57.577", "LastActivityDate": "2010-05-07T09:44:57.577"}, "2787569": {"CommentCount": "2", "AcceptedAnswerId": "2787594", "PostTypeId": "1", "LastEditorUserId": "252000", "CreationDate": "2010-05-07T09:40:58.697", "LastActivityDate": "2010-05-07T17:53:02.017", "LastEditDate": "2010-05-07T17:53:02.017", "ViewCount": "1472", "FavoriteCount": "3", "Title": "copy constructor with default arguments", "Id": "2787569", "Score": "13", "Body": "<p>As far as I know, the copy constructor must be of the form <code>T(const T&amp;)</code> or <code>T(T&amp;)</code>. What if I wanted to add default arguments to the signature?</p>\n<pre><code>T(const T&amp;, double f = 1.0);\n</code></pre>\n<p>Would that be standards compliant?</p>\n", "Tags": "<c++><copy-constructor><optional-parameters>", "OwnerUserId": "252000", "AnswerCount": "2"}, "bq_ids": {"n4140": {"so_2787569_2787594_0": {"section_id": 451, "quality": 0.9310344827586207, "length": 27}}, "n3337": {"so_2787569_2787594_0": {"section_id": 442, "quality": 0.9310344827586207, "length": 27}}, "n4659": {"so_2787569_2787594_0": {"section_id": 474, "quality": 0.9310344827586207, "length": 27}}}});