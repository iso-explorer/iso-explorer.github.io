post_cb({"bq_ids": {"n4140": {"so_7418553_7418808_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 254}}, "n3337": {"so_7418553_7418808_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 245}}, "n4659": {"so_7418553_7418808_0": {"length": 19, "quality": 0.8260869565217391, "section_id": 261}}}, "7418808": {"Id": "7418808", "PostTypeId": "2", "Body": "<p>When a function template is used in a way that triggers its instantiation, a compiler(at some point) needs to see that template's definition. And that is the reason, templates are usually implemented inside a header file using inline finctions.</p>\n<p>So as long as the above rules gets followed it is still okay to have interface and implementation separated in header and source files.</p>\n<hr>\n<p>Reference:<br>\n<strong>C++03 standard, \u00a7 14.7.2.4:</strong></br></p>\n<blockquote>\n<p id=\"so_7418553_7418808_0\"><strong>The definition</strong> of a non-exported function template, a non-exported member function template, or a non-exported member function or static data member of a class template <strong>shall be present in every translation unit</strong> in which it is explicitly instantiated.</p>\n</blockquote>\n</hr>", "LastEditorUserId": "452307", "LastActivityDate": "2011-09-14T15:33:06.833", "Score": "9", "CreationDate": "2011-09-14T15:19:21.640", "ParentId": "7418553", "CommentCount": "4", "OwnerUserId": "452307", "LastEditDate": "2011-09-14T15:33:06.833"}, "7418714": {"Id": "7418714", "PostTypeId": "2", "Body": "<p>Unless your private member function template is used by member functions that are defined inline within the class definition, I see nothing wrong with this approach. On the contrary, I think that the less dependencies creep into your header files, the better.</p>\n<p>This will work as long as you enforce the convention of <em>always</em> providing each class's implementation in a single source file.</p>\n", "LastEditorUserId": "838975", "LastActivityDate": "2011-09-14T15:19:04.870", "Score": "5", "CreationDate": "2011-09-14T15:13:38.463", "ParentId": "7418553", "CommentCount": "0", "OwnerUserId": "838975", "LastEditDate": "2011-09-14T15:19:04.870"}, "7418553": {"ViewCount": "4023", "Body": "<p>I have a class:</p>\n<p>C.h</p>\n<pre><code>class C {\nprivate:\n  template&lt;int i&gt;\n  void Func();\n\n  // a lot of other functions\n};\n</code></pre>\n<p>C.cpp</p>\n<pre><code>// a lot of other functions\n\ntemplate&lt;int i&gt;\nvoid C::Func() {\n // the implementation\n}\n\n// a lot of other functions\n</code></pre>\n<p>I know, that it's not the best idea to move template implementation in cpp file (because it won't be seen from other cpp's, which could include the header with the template declaration).</p>\n<p>But what about private functions? Could anyone tell me if there are cons of implementing of private template functions in a .cpp file?</p>\n", "AcceptedAnswerId": "7418808", "Title": "private template functions", "CreationDate": "2011-09-14T15:03:00.033", "Id": "7418553", "CommentCount": "2", "PostTypeId": "1", "LastActivityDate": "2011-09-14T15:33:06.833", "Score": "11", "OwnerUserId": "616363", "Tags": "<c++><templates><implementation><private>", "AnswerCount": "2"}});