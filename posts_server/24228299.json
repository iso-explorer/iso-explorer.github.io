post_cb({"bq_ids": {"n4140": {"so_24228299_24228299_1": {"length": 38, "quality": 1.0, "section_id": 7092}, "so_24228299_24229413_2": {"length": 38, "quality": 0.9047619047619048, "section_id": 5480}, "so_24228299_24228299_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 5480}, "so_24228299_24229413_1": {"length": 38, "quality": 0.9047619047619048, "section_id": 5480}}, "n3337": {"so_24228299_24228299_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 5266}, "so_24228299_24229413_2": {"length": 38, "quality": 0.9047619047619048, "section_id": 5266}, "so_24228299_24228299_1": {"length": 38, "quality": 1.0, "section_id": 6836}, "so_24228299_24229413_1": {"length": 38, "quality": 0.9047619047619048, "section_id": 5266}}, "n4659": {"so_24228299_24228299_0": {"length": 21, "quality": 0.9545454545454546, "section_id": 6914}, "so_24228299_24229413_2": {"length": 38, "quality": 0.9047619047619048, "section_id": 6914}, "so_24228299_24228299_1": {"length": 27, "quality": 0.7105263157894737, "section_id": 8593}, "so_24228299_24229413_1": {"length": 38, "quality": 0.9047619047619048, "section_id": 6914}}}, "24228299": {"ViewCount": "132", "Body": "<p>I've written the following code:</p>\n<pre><code>   #include &lt;iostream&gt;\n\n    inline namespace M\n    {\n        int j=42;\n    }\n\n    int main(){ std::cout &lt;&lt; j &lt;&lt; \"\\n\"; } //j is unqualified name here. \n                 //Hence, unqualified name lookup rules will be applied.\n                 //This implies that member of inline namespace shall not be considered. \n                 //But it is not true\n</code></pre>\n<p>And it works fine. But I'm expected that the that program is ill-formed. It is because the Standard said (N3797, sec. 7.3.1/7):</p>\n<blockquote>\n<p id=\"so_24228299_24228299_0\">Finally, looking up a name in the enclosing namespace <strong>via explicit\n  qualification</strong> (3.4.3.2) will include members of the inline namespace\n  brought in by the using-directive even if there are declarations of\n  that name in the enclosing namespace.</p>\n</blockquote>\n<p>Also the section 3.4.1/6 does not said anything about involving of inline namespace in the unqualified name lookup:</p>\n<blockquote>\n<p id=\"so_24228299_24228299_1\">A name used in the definition of a function following the function\u2019s\n  declarator-id 28 that is a member of namespace N (where, only for the\n  purpose of exposition, N could represent the global scope) shall be\n  declared before its use in the block in which it is used or in one of\n  its enclosing blocks (6.3) or, shall be declared before its use in\n  namespace N or, if N is a nested namespace, shall be declared before\n  its use in one of N\u2019s enclosing namespaces.</p>\n</blockquote>\n<p>It is a <code>g++</code> bug or I understood that rules incorrectly?</p>\n", "AcceptedAnswerId": "24229413", "Title": "Unqualified name lookup finds inline namespace member", "CreationDate": "2014-06-15T09:36:01.293", "Id": "24228299", "CommentCount": "0", "LastEditDate": "2014-06-15T10:06:42.803", "PostTypeId": "1", "OwnerDisplayName": "user2953119", "LastEditorUserId": "819272", "LastActivityDate": "2014-06-15T12:05:54.057", "Score": "5", "Tags": "<c++><c++11><namespaces><inline><language-lawyer>", "AnswerCount": "1"}, "24229413": {"Id": "24229413", "PostTypeId": "2", "Body": "<h3>There's no bug..</h3>\n<p>No, it's not a bug in neither <code>g++</code> (or <code>clang++</code>) which has the behavior described, the compiler is supposed to find <code>j</code>.</p>\n<pre><code>inline namespace N {\n  int j;\n}\n\nint main () {\n  int a = j; // legal, `j` == `N::j`\n}\n</code></pre>\n<hr>\n<h3>What does the Standard say?</h3>\n<p>You are missing a very important section of the standard, namely <em>7.3.1\u00a78</em>, where it states that the enclosing namespace of an inline namespace <em>implicitly</em> has a <em>using directive</em> that refers to the inline namespace.</p>\n<blockquote>\n<p id=\"so_24228299_24229413_0\"><code>[7.3.1]p8</code> <strong>namespace definition</strong> <code>[namespace.def]</code></p>\n<blockquote>\n<p id=\"so_24228299_24229413_2\">Members of an inline namespace can be used in most respects as thought they were members of the enclosing namespace. Specifically, the inline namespace and its enclosing namespace are both added to the set of associated namespaces used in argument-dependent lookup (3.4.2) whenever one of them is, and <strong>a <em>using-directive</em> (7.3.4) that names the inline namespace is implicitly inserted into the enclosing namespace</strong> as for an unnamed namespace (7.3.1.1).</p>\n</blockquote>\n</blockquote>\n<hr>\n<h3>Elaboration</h3>\n<p>This means that our previous example is semantically equivalent to the below, where we have introduced a <em>using-directive</em> to bring the names from our nested namespace into the global namespace:</p>\n<pre><code>inline namespace N {\n  int j;\n}\n\nusing namespace N; // the implicit using-directive    \n\nint main () {\n  int a = j; // legal\n}\n</code></pre>\n</hr></hr>", "LastActivityDate": "2014-06-15T12:05:54.057", "CommentCount": "2", "CreationDate": "2014-06-15T12:05:54.057", "ParentId": "24228299", "Score": "3", "OwnerUserId": "1090079"}});